<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Django on Svtter's Blog</title><link>https://svtter.cn/tags/django/</link><description>Recent content in Django on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 10 Mar 2025 19:34:19 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Django Bridge and Telepath Make Decode Easier.md</title><link>https://svtter.cn/p/django-bridge-and-telepath-make-decode-easier.md/</link><pubDate>Mon, 10 Mar 2025 19:34:19 +0800</pubDate><guid>https://svtter.cn/p/django-bridge-and-telepath-make-decode-easier.md/</guid><description>&lt;p>&lt;a class="link" href="https://wagtail.github.io/telepath/" target="_blank" rel="noopener"
>telepath&lt;/a>是 wagtail 开发的一个库，可以用于对 python 对象进行转换。&lt;/p>
&lt;p>其最大的好处是，将原本复杂的 python class -&amp;gt; JSON -&amp;gt; Javascript class，转换成 python class -&amp;gt; Javascript class。&lt;/p>
&lt;p>更具体的内容可以参考&lt;a class="link" href="https://wagtail.github.io/telepath/tutorial/" target="_blank" rel="noopener"
>tutorial&lt;/a>。&lt;/p>
&lt;p>那么有没有可能在这个基础上，让 React 和 Django 直通呢？ &lt;a class="link" href="https://django-bridge.org/docs/introduction/" target="_blank" rel="noopener"
>Django Bridge&lt;/a> 就是做这个工作的。&lt;/p>
&lt;p>&lt;a class="link" href="https://django-bridge.org/docs/introduction/" target="_blank" rel="noopener"
>Django Bridge&lt;/a> 允许用户直接返回 JSON 结构，然后 React 根据 JSON 结构进行解析，对应渲染 React Component。&lt;/p>
&lt;h2 id="问题是什么">问题是什么
&lt;/h2>&lt;ol>
&lt;li>学习成本。如果 django bridge 是一个团队中大家都熟悉的东西，那么上手不慢。但是如果大家都不太熟悉，那么引入 django bridge，需要花时间学习。&lt;/li>
&lt;li>调试成本。相比于 http JSON，这种方式依赖于 Django Bridge 对 JSON 的解析。调试起来可能会有一定的困难。&lt;/li>
&lt;li>对于已有的项目，代码中可能存在基本通信框架，那么这个库可能会导致旧代码的改造。&lt;/li>
&lt;/ol>
&lt;p>其他的内容，在&lt;a class="link" href="https://django-bridge.org/docs/introduction/#should-i-use-it" target="_blank" rel="noopener"
>Should I use it?&lt;/a>中有所提及，可供参考。&lt;/p>
&lt;h2 id="有什么优势">有什么优势
&lt;/h2>&lt;ol>
&lt;li>虽然是前后端分离，但不需要考虑 session 和 cookie 的管理了。也不需要考虑 JWT 的问题。(是不是分离了也不需要管理呢？)&lt;/li>
&lt;li>官网原文：If you&amp;rsquo;re about to build a web app or SaaS product with Django and React, this library could save you a lot of time. It provides all the necessary tools to integrate a React frontend with Django and includes a project template with simple Vite-based frontend tooling to get you started.&lt;/li>
&lt;/ol>
&lt;p>更多的内容，请移步官网阅读。&lt;/p></description></item><item><title>New Usage of typing module in python</title><link>https://svtter.cn/p/new-usage-of-typing-module-in-python/</link><pubDate>Fri, 12 Jul 2024 16:20:32 +0800</pubDate><guid>https://svtter.cn/p/new-usage-of-typing-module-in-python/</guid><description>&lt;p>我原本想要分析一下 django webpack；但是写了一半，为了资料论述严谨，又不得不学习了 django component；在 django component 中，又发现了自己之前不知道的一些机制。无奈，先聊聊遇到的 typing 问题吧！&lt;/p>
&lt;p>最近在阅读 django components 代码的时候，我在 &lt;a class="link" href="https://github.com/EmilStenstrom/django-components/blob/master/src/django_components/component_registry.py" target="_blank" rel="noopener"
>component_registry.py&lt;/a> 看到了这样一段代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">TYPE_CHECKING&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Callable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TypeVar&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">TYPE_CHECKING&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">from&lt;/span> &lt;span class="nn">django_components&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_TC&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TypeVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;_TC&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bound&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;component.Component&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从中能学到几个知识点：&lt;/p>
&lt;ol>
&lt;li>TYPE_CHECKING 变量是用于程序员处理类型相关代码的 TAG，在实际运行的时候，内部代码不被执行；我们可以从 typing 的&lt;a class="link" href="https://docs.python.org/3/library/typing.html#typing.TYPE_CHECKING" target="_blank" rel="noopener"
>官方文档&lt;/a>中找到。&lt;/li>
&lt;li>TypeVar 可以这样来用：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">S&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TypeVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bound&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Can be any subtype of str&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这段代码处，意味着 &lt;code>_TC&lt;/code> 可以是任何一个 &lt;code>component.Component&lt;/code> 的 &lt;code>subtype&lt;/code>。&lt;/p>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>python 也在慢慢丰富自己的类型系统，许多新的用法也会慢慢地开发出来。不过相比之下，typescript 的类型系统要更先进一些。大家好好学！&lt;/p>
&lt;blockquote>
&lt;p>附加一点吐槽：Component 居然是一个 django view，感觉很奇怪啊。&lt;/p>&lt;/blockquote></description></item><item><title>Django and Webpack</title><link>https://svtter.cn/p/django-and-webpack/</link><pubDate>Sat, 06 Jul 2024 15:21:55 +0800</pubDate><guid>https://svtter.cn/p/django-and-webpack/</guid><description>&lt;p>Webpack is a modern development method for frontend projects. Django is a common backend development framework for Python developers.&lt;/p>
&lt;p>I believe that developing with Webpack can make Django development faster.&lt;/p>
&lt;h2 id="why">Why
&lt;/h2>&lt;p>&lt;code>webpack&lt;/code> can enable Django developers to use the React ecosystem, and it makes auto-complete and linting available in Django frontend development, especially with VSCode.&lt;/p>
&lt;p>Django developers should integrate Webpack, similar to what &lt;a class="link" href="https://github.com/rails/webpacker?tab=readme-ov-file#webpacker-has-been-retired-" target="_blank" rel="noopener"
>Rails developers did&lt;/a>. At 2024-07-05, Webpack has retired in Rails. They are using &lt;a class="link" href="https://hotwired.dev/" target="_blank" rel="noopener"
>Hotwire&lt;/a> now. For more details, you should read the &lt;a class="link" href="https://rubyonrails.org/2021/12/15/Rails-7-fulfilling-a-vision" target="_blank" rel="noopener"
>Rails 7 blog&lt;/a>.&lt;/p>
&lt;h2 id="what-to-choose">What to Choose?
&lt;/h2>&lt;p>I tested two popular projects on GitHub.&lt;/p>
&lt;p>The first one is &lt;a class="link" href="https://github.com/vintasoftware/django-react-boilerplate" target="_blank" rel="noopener"
>django-react-boilerplate&lt;/a>. It has high stars and ranks second.&lt;/p>
&lt;p>However, as of 2024-07-05, it&amp;rsquo;s not ready. I will continue to track its progress. It is hard and complex to configure the &lt;code>{{ project_name }}&lt;/code>.&lt;/p>
&lt;p>The second one is &lt;a class="link" href="https://python-webpack-boilerplate.readthedocs.io/en/stable/setup_with_django/" target="_blank" rel="noopener"
>python-webpack-boilerplate&lt;/a>.&lt;/p>
&lt;p>It has a gradual process and a good learning curve. I spent just 5 minutes adding Webpack to my &lt;a class="link" href="https://github.com/Svtter/django-webpack-example" target="_blank" rel="noopener"
>example project&lt;/a>.&lt;/p>
&lt;h2 id="discussion">Discussion
&lt;/h2>&lt;p>There is still a long way to go.&lt;/p>
&lt;ol>
&lt;li>React has not been added to the &lt;a class="link" href="https://github.com/Svtter/django-webpack-example" target="_blank" rel="noopener"
>example project&lt;/a>.&lt;/li>
&lt;li>A production environment is needed to validate its availability.&lt;/li>
&lt;/ol>
&lt;hr></description></item><item><title>2024-Q1 Summary</title><link>https://svtter.cn/p/2024-q1-summary/</link><pubDate>Fri, 12 Apr 2024 11:00:07 +0800</pubDate><guid>https://svtter.cn/p/2024-q1-summary/</guid><description>&lt;p>第一季度过的如此之快！效率感觉不高，但实际上做的东西还可以。开心！&lt;/p>
&lt;h2 id="academic">Academic
&lt;/h2>&lt;ul>
&lt;li>Paper-2 R-3 完成&lt;/li>
&lt;li>active learning, human in the loop, domain adaptation, meter 论文的阅读&lt;/li>
&lt;li>论文审稿&lt;/li>
&lt;li>meter related 老代码整理，数据整理&lt;/li>
&lt;/ul>
&lt;h2 id="work">work
&lt;/h2>&lt;ul>
&lt;li>交付了两个项目&lt;/li>
&lt;li>可以公开的进展：meterhub&lt;/li>
&lt;li>一个 django 插件 &lt;a class="link" href="https://github.com/Svtter/django-login-email" target="_blank" rel="noopener"
>django-email-login&lt;/a>
&lt;ul>
&lt;li>一个用于 email 验证登录的工具&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>企业微信设立&lt;/li>
&lt;/ul>
&lt;h2 id="在下一个季度要完成的事情">在下一个季度，要完成的事情
&lt;/h2>&lt;ul>
&lt;li>中期报告&lt;/li>
&lt;li>第二篇小论文中，第三篇小论文投出&lt;/li>
&lt;li>会议论文实验和论文写完投出&lt;/li>
&lt;li>meterhub&lt;/li>
&lt;li>MAYBE 找一个实习工作&lt;/li>
&lt;/ul></description></item><item><title>给老 Django 工程师的初学者 react 教程</title><link>https://svtter.cn/p/%E7%BB%99%E8%80%81-django-%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%88%9D%E5%AD%A6%E8%80%85-react-%E6%95%99%E7%A8%8B/</link><pubDate>Tue, 12 Mar 2024 09:38:36 +0800</pubDate><guid>https://svtter.cn/p/%E7%BB%99%E8%80%81-django-%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%88%9D%E5%AD%A6%E8%80%85-react-%E6%95%99%E7%A8%8B/</guid><description>&lt;blockquote>
&lt;p>这篇文章的文字水平一般。之所以要写这篇文章，一方面是为了记录自己的开发历程，另一方面是为了少部分同频的伙伴给予引导。也是为了完成每个月博客文章的 KPI。&lt;/p>&lt;/blockquote>
&lt;p>前提：&lt;/p>
&lt;ul>
&lt;li>走完 &lt;a class="link" href="https://react.dev/learn/tutorial-tic-tac-toe" target="_blank" rel="noopener"
>react toturial&lt;/a>，最好能够掌握 useState。&lt;/li>
&lt;li>了解 Javascript 语法，懂得 CSS / HTML&lt;/li>
&lt;/ul>
&lt;p>近期我用了 nextjs 开发了一个项目。nextjs 是一个可以全栈开发，也可以只开发前端的框架。我的开发内容只包括前端。nextjs 非常好用，简化了大量的复杂配置，可以上手即用。可以直接打开&lt;a class="link" href="https://nextjs.org/docs/getting-started/installation" target="_blank" rel="noopener"
>nextjs官网&lt;/a>来安装使用。
&lt;code>npx create-next-app@latest&lt;/code>&lt;/p>
&lt;p>安装的时候不建议使用 typescript。这是因为 typescript 相对复杂，容易提高学习成本。tailwind 非常好用。要选上。&lt;code>src/&lt;/code> folder 可以不用。&lt;code>eslint&lt;/code> 选上，能解决不少问题。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> What is your project named? my-app
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Would you like to use TypeScript? No / Yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Would you like to use ESLint? No / Yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Would you like to use Tailwind CSS? No / Yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Would you like to use `src/` directory? No / Yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Would you like to use App Router? (recommended) No / Yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Would you like to customize the default import alias (@/*)? No / Yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> What import alias would you like configured? @/*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="开干">开干
&lt;/h2>&lt;p>&lt;img src="https://svtter.cn/images/image_1712885644494_0.png"
loading="lazy"
alt="image.png"
>&lt;/p>
&lt;p>我们能看到 app 下面有一个 layout.js，可以理解成 django 全栈开发中的 &lt;code>base.html&lt;/code>。这个在 django 中比较常见。
在 nextjs 中，为了开发样式，一般使用 tailwind css。&lt;a class="link" href="https://tailwindcss.com/docs/installation" target="_blank" rel="noopener"
>tailwind css&lt;/a> 是一个通过 class 编写 style 的框架。学习 tailwind，直接从&lt;a class="link" href="https://tailwindcss.com/docs/utility-first" target="_blank" rel="noopener"
>core concept&lt;/a>开始看就行了。
那么 react 怎么用呢？
在搭建 UI 框架阶段，实际上用到 react 的功能不多。这个时候，想要充分借助 react 的便利性，最重要的是掌握 component 这个概念。简单来说，就是能够自己创建 html tag，并且将 function 和 tag 映射起来。
创建一个 html tag&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">Hello&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">world&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就创建好了一个 &lt;code>&amp;lt;Hello&amp;gt;&lt;/code> tag。在后续中可以使用这个 tag 了。
例如，我们在 &lt;code>page.js&lt;/code> 下面使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">Home&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Hello&lt;/span>&lt;span class="o">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样 Hello 就被渲染出来了。
除此之外，还有一个难点就是，组件之间怎么传递参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">Hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过 props 就可以传递参数了。&lt;/p>
&lt;h2 id="延申阅读">延申阅读
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/Hsins-Learn/Learn-Full-Stack-Development-with-Django-and-React" target="_blank" rel="noopener"
>https://github.com/Hsins-Learn/Learn-Full-Stack-Development-with-Django-and-React&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="结语">结语
&lt;/h2>&lt;p>基本上，掌握以上两个技能就可以开始基于 react 开发前端应用了。
其他的内容直接从 react、nextjs、tailwind 文档中学习即可，遇到不清楚的内容直接查询。&lt;/p>
&lt;p>欢迎将不清楚的问题留言，我会根据留言的内容改进本文。&lt;/p></description></item><item><title>Use Vue with Django, Meet CSRF</title><link>https://svtter.cn/p/use-vue-with-django-meet-csrf/</link><pubDate>Sun, 03 Sep 2023 14:12:47 +0800</pubDate><guid>https://svtter.cn/p/use-vue-with-django-meet-csrf/</guid><description>&lt;p>在使用 Vue 的时候，如何向 Django 提交 form？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ajax&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">url&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;YOUR_URL_HERE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;X-CSRFToken&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cookie&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;csrftoken&amp;#39;&lt;/span>&lt;span class="p">)},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dataType&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">success&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">xhr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errMsg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>django docs: &lt;a class="link" href="https://docs.djangoproject.com/en/1.11/ref/csrf/#ajax" target="_blank" rel="noopener"
>https://docs.djangoproject.com/en/1.11/ref/csrf/#ajax&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="reference">Reference
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://stackoverflow.com/questions/43567052/csrf-token-of-django-into-vuejs-when-seperate-them" target="_blank" rel="noopener"
>stackoverflow answer&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Crazy Import</title><link>https://svtter.cn/p/crazy-import/</link><pubDate>Mon, 09 May 2022 14:02:27 +0800</pubDate><guid>https://svtter.cn/p/crazy-import/</guid><description>&lt;p>最近发现 Django settings 在使用的时候，容易出现不经过检查的问题。
因此，想要在 settings 的基础上严格约束一下，减少问题。&lt;/p>
&lt;p>在进行相关技术调研的时候，发现了&lt;a class="link" href="https://github.com/orlnub123/django-class-settings" target="_blank" rel="noopener"
>django-class-settings&lt;/a>这个库。
实现方式很有意思，于是就调研了一下，学习到了很多新的东西。&lt;/p>
&lt;p>这个库的核心思想，是在代码中，把一个类转换成一个 module；
这非常酷，让我们看看这是如何实现的。&lt;/p>
&lt;p>按照代码的阅读思路，我们首先看看这个包的用法&amp;hellip;&lt;/p>
&lt;p>以下是&lt;a class="link" href="https://github.com/orlnub123/django-class-settings/blob/master/README.md" target="_blank" rel="noopener"
>README.md&lt;/a>中的内容；&lt;/p>
&lt;p>django-class-settings aims to simplify complicated settings layouts by using
classes instead of modules. Some of the benefits of using classes include:&lt;/p>
&lt;ul>
&lt;li>Real inheritance&lt;/li>
&lt;li>[Foolproof settings layouts][local_settings]&lt;/li>
&lt;li>Properties&lt;/li>
&lt;li>Implicit environment variable names&lt;/li>
&lt;/ul>
&lt;h2 id="example">Example
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># .env&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">DJANGO_SECRET_KEY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;*2#fz@c0w5fe8f-&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">DJANGO_DEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># manage.py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">class_settings&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">class_settings&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">env&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">django.core.management&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">execute_from_command_line&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_env&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;myproject.settings&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setdefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;DJANGO_SETTINGS_CLASS&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;MySettings&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">class_settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setup&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">execute_from_command_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># myproject/settings.py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">class_settings&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Settings&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MySettings&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Settings&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SECRET_KEY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DEBUG&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">INSTALLED_APPS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;django.contrib.admin&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;django.contrib.auth&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;django.contrib.sessions&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;django.contrib.messages&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ROOT_URLCONF&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;myproject.urls&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WSGI_APPLICATION&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;myproject.wsgi.application&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="installation">Installation
&lt;/h2>&lt;p>Install it from [PyPI][pypi-url] with [pip][pip-url]:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install django-class-settings
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>我们可以看到，这个类关键入口可能在&lt;code>env.read_env()&lt;/code>以及&lt;code>class_settings.setup()&lt;/code>。&lt;/p>
&lt;p>我们首先看一下 &lt;code>src.class_settings.env&lt;/code> 的代码。可以发现，这个代码用于加载 django 中的 env；
因此不是我们关注的重点。&lt;/p>
&lt;p>让我们再看看关键函数 setup。&lt;/p>
&lt;p>&lt;code>src/class_settings/__init__.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">__all__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;Env&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Settings&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;env&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;setup&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">__version__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;0.3.0-dev&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">.env&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">env&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">.settings&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Settings&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">setup&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">from&lt;/span> &lt;span class="nn">django.conf&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">settings&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">from&lt;/span> &lt;span class="nn">django.utils.functional&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">SimpleLazyObject&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">from&lt;/span> &lt;span class="nn">.importers&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">SettingsImporter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LazySettingsModule&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">global&lt;/span> &lt;span class="n">_setup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">_setup&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">meta_path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SettingsImporter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">default_settings&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LazySettingsModule&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">settings_module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SimpleLazyObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">default_settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SETTINGS_MODULE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">settings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">default_settings&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SETTINGS_MODULE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">settings_module&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_setup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">_setup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在&lt;code>.settings.py&lt;/code>中没有直接加载的代码，因此，我们可以直接阅读本文件。&lt;/p>
&lt;p>未完待续&amp;hellip;&lt;/p></description></item><item><title>ORM 中的 Pattern</title><link>https://svtter.cn/p/orm-%E4%B8%AD%E7%9A%84-pattern/</link><pubDate>Sat, 20 Nov 2021 10:00:32 +0800</pubDate><guid>https://svtter.cn/p/orm-%E4%B8%AD%E7%9A%84-pattern/</guid><description>&lt;blockquote>
&lt;p>最近在做技术选型，想要引入一些新的开发语言，开发技术到技术团队。大众编程语言在 WEB 方面的稳定性，已经被人所熟知了。但是数据库版本控制方面，每个程序设计语言做的深度和稳定性都有所区别。数据库版本控制和 ORM 密切相关。而&amp;hellip;&lt;/p>&lt;/blockquote>
&lt;p>提到 ORM，就不得不聊聊 &lt;code>ActiveRecord&lt;/code>和&lt;code>DataMapper&lt;/code>。&lt;/p>
&lt;h2 id="datamapper">DataMapper
&lt;/h2>&lt;p>DataMapper 是一种 ORM&amp;rsquo;s pattern。&lt;/p>
&lt;p>一般，使用 DataMapper，你会将所有的查询方法写到 &lt;code>repositories&lt;/code>里面。所有的数据操作都会在&lt;code>repositories&lt;/code>中进行。例如增加，加载，删除，查询。使用&lt;code>DataMapper&lt;/code>的时候，entity 会显得有些“呆滞”。一般情况下，定义好属性和一点简单的方法，不会频繁的 entity 进行操作了。&lt;/p>
&lt;p>所以，大多数情况下，程序员使用 repositories 与数据库进行交互。&lt;/p>
&lt;p>这种模式常见于&lt;code>Spring JPA&lt;/code>。&lt;/p>
&lt;h2 id="activerecord">ActiveRecord
&lt;/h2>&lt;p>在 &lt;code>ActiveRecord&lt;/code> 模式中，model 的属性和方法，全都在一起定义。&lt;/p>
&lt;p>所以，在大多数情况下，程序员直接使用 &lt;code>model&lt;/code>与数据库进行交互。&lt;/p>
&lt;p>这种模式常见于 &lt;code>Django&lt;/code> 和 &lt;code>Ruby on rails&lt;/code>。&lt;/p>
&lt;h2 id="我应该选择哪一种">我应该选择哪一种？
&lt;/h2>&lt;p>选择哪一种 ORM pattern 取决当前的应用环境。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Data Mapper&lt;/code> 因为其分离性，在大型应用的开发中往往会更有效率&lt;/li>
&lt;li>&lt;code>Active Record&lt;/code> 使得编写 ORM 变得很容易，因此在小型应用中很受欢迎。&lt;code>Simplicity&lt;/code> 往往是可维护性的一个关键指标。&lt;/li>
&lt;/ul></description></item><item><title>Django tricks</title><link>https://svtter.cn/2019/01/08/django-tricks/</link><pubDate>Tue, 08 Jan 2019 01:00:00 +0800</pubDate><guid>https://svtter.cn/2019/01/08/django-tricks/</guid><description>&lt;h2 id="关于-session">关于 session
&lt;/h2>&lt;p>&lt;a class="link" href="https://docs.djangoproject.com/en/2.1/_modules/django/contrib/sessions/middleware/#SessionMiddleware" target="_blank" rel="noopener"
>django.contrib.sessions.middleware | Django documentation | Django&lt;/a>&lt;/p>
&lt;p>session 是使用 cookie 来进行判断的，通过 session_cookie_name 来提取，然后通过 SessionStore() 来保存。&lt;/p>
&lt;p>因此，Django 也是通过 sessionid 来区分用户；（或者其他什么名称）。&lt;/p>
&lt;h2 id="使用-cache-作为全局变量">使用 cache 作为全局变量
&lt;/h2>&lt;p>cache.set(‘foo’, ‘bar’) # another function cache.get(‘foo’) # get ‘bar’&lt;/p>
&lt;p>使用 cache , &lt;code>django-redis&lt;/code> 是一个好方法。可以在使用 &lt;code>cache.lock&lt;/code>变量，在应用层面加锁，来完成异步操作，还可以支持分布式应用，十分方便。&lt;/p></description></item><item><title>迁移 Django Model id 为 uuid</title><link>https://svtter.cn/2018/12/06/%E8%BF%81%E7%A7%BB-django-model-id-%E4%B8%BA-uuid/</link><pubDate>Thu, 06 Dec 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/2018/12/06/%E8%BF%81%E7%A7%BB-django-model-id-%E4%B8%BA-uuid/</guid><description>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://www.klette.us/migrate-django-models-to-uuid-primary-key/" target="_blank" rel="noopener"
>https://www.klette.us/migrate-django-models-to-uuid-primary-key/&lt;/a>&lt;/p>
&lt;p>又是一篇渣翻&lt;/p>&lt;/blockquote>
&lt;p>老设计决策有时候会让你很难受，下面就是一个例子。&lt;/p>
&lt;p>我手上的一个 Django Model 是这样的：&lt;/p>
&lt;pre>&lt;code class=" language-python">&amp;lt;span class="token keyword">class&amp;lt;/span> &amp;lt;span class="token class-name">Municipality&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>models&amp;lt;span class="token punctuation">.&amp;lt;/span>Model&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">:&amp;lt;/span>
code &amp;lt;span class="token operator">=&amp;lt;/span> models&amp;lt;span class="token punctuation">.&amp;lt;/span>CharField&amp;lt;span class="token punctuation">(&amp;lt;/span>max_length&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token number">2&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span> primary_key&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token boolean">True&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
name &amp;lt;span class="token operator">=&amp;lt;/span> models&amp;lt;span class="token punctuation">.&amp;lt;/span>CharField&amp;lt;span class="token punctuation">(&amp;lt;/span>max_length&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token number">100&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&lt;/code>&lt;/pre>
&lt;p>此外，还有一个外键指向它&lt;/p>
&lt;pre class=" language-python">&lt;code class=" language-python">&amp;lt;span class="token keyword">class&amp;lt;/span> &amp;lt;span class="token class-name">ZipCode&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>models&amp;lt;span class="token punctuation">.&amp;lt;/span>Model&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">:&amp;lt;/span>
code &amp;lt;span class="token operator">=&amp;lt;/span> models&amp;lt;span class="token punctuation">.&amp;lt;/span>CharField&amp;lt;span class="token punctuation">(&amp;lt;/span>max_length&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token number">2&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span> primary_key&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token boolean">True&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
municipality &amp;lt;span class="token operator">=&amp;lt;/span> models&amp;lt;span class="token punctuation">.&amp;lt;/span>ForeignKey&amp;lt;span class="token punctuation">(&amp;lt;/span>Municipality&amp;lt;span class="token punctuation">)&amp;lt;/span>&lt;/code>&lt;/pre>
&lt;p>现在，我们需要让 municipality 支持多个国家，显然一个唯一 field 将会引起冲突，不够用。（译者：这个理由有点牵强）&lt;/p>
&lt;p>对于所有代码的现代部分，我们使用&lt;code>UUID&lt;/code>作为主键。所以我们想要 migrate &lt;code>municaipality&lt;/code>的主键到&lt;code>UUID&lt;/code>，并且维持了原有的关系。（译者：外键和自增主键都是数据库性能的杀手。）&lt;/p>
&lt;p>2017年9月份，Django 依然不支持优雅的迁移主键，所以我们自己做了（译者：我也不知道现在行不行。）&lt;/p>
&lt;p>我们尝试了许多 magic 解决方案，但是我们在 migrations 系统这个被难住了，并且不能检测以及很好的处理改变。&lt;/p>
&lt;p>在经过一小段研究和错误，我们找到了以下的解决方案。尽管这还有一些小问题，但是的确有效。&lt;/p>
&lt;p>再一次提醒，从数据库的角度，当你定义了一个&lt;code>ForeignKey&lt;/code> field 在 Django 中，Django将会创建一个数据库列，是同样的类型，作为 referenced model 的主键，并且增加外键约束。所以在上面的例子中，我们有两个表：&lt;/p>
&lt;pre class=" language-sql">&lt;code class=" language-sql">&amp;lt;span class="token keyword">CREATE&amp;lt;/span> &amp;lt;span class="token keyword">TABLE&amp;lt;/span> municipality &amp;lt;span class="token punctuation">(&amp;lt;/span>
code &amp;lt;span class="token keyword">varchar&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token number">2&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span> &amp;lt;span class="token keyword">PRIMARY&amp;lt;/span> &amp;lt;span class="token keyword">KEY&amp;lt;/span> &amp;lt;span class="token operator">NOT&amp;lt;/span> &amp;lt;span class="token boolean">NULL&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
name &amp;lt;span class="token keyword">varchar&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token number">100&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">;&amp;lt;/span>
&amp;lt;span class="token keyword">CREATE&amp;lt;/span> &amp;lt;span class="token keyword">TABLE&amp;lt;/span> zipcode &amp;lt;span class="token punctuation">(&amp;lt;/span>
code &amp;lt;span class="token keyword">varchar&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token number">2&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span> &amp;lt;span class="token keyword">PRIMARY&amp;lt;/span> &amp;lt;span class="token keyword">KEY&amp;lt;/span> &amp;lt;span class="token operator">NOT&amp;lt;/span> &amp;lt;span class="token boolean">NULL&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
municipality_id &amp;lt;span class="token keyword">VARCHAR&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token number">2&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span> &amp;lt;span class="token keyword">REFERENCES&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>municipality&amp;lt;span class="token punctuation">.&amp;lt;/span>id&amp;lt;span class="token punctuation">)&amp;lt;/span> &amp;lt;span class="token operator">NOT&amp;lt;/span> &amp;lt;span class="token boolean">NULL&amp;lt;/span>
&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">;&amp;lt;/span>&lt;/code>&lt;/pre>
&lt;p>所以我们需要解除外键约束，更换 root model，然后映射新的主键到旧的上，并且重新应用外键到上面去。&lt;/p>
&lt;p>我们首先打破外键&lt;/p>
&lt;pre class=" language-python">&lt;code class=" language-python">&amp;lt;span class="token keyword">class&amp;lt;/span> &amp;lt;span class="token class-name">ZipCode&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>models&amp;lt;span class="token punctuation">.&amp;lt;/span>Model&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">:&amp;lt;/span>
code &amp;lt;span class="token operator">=&amp;lt;/span> &amp;lt;span class="token punctuation">.&amp;lt;/span>&amp;lt;span class="token punctuation">.&amp;lt;/span>&amp;lt;span class="token punctuation">.&amp;lt;/span> &amp;lt;span class="token comment" spellcheck="true"># Same as before&amp;lt;/span>
municipality &amp;lt;span class="token operator">=&amp;lt;/span> models&amp;lt;span class="token punctuation">.&amp;lt;/span>CharField&amp;lt;span class="token punctuation">(&amp;lt;/span>max_length&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token number">2&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
&lt;/code>&lt;/pre>
&lt;pre class=" language-sh">&lt;code>python manage.py makemigrations -n break_zipcode_muni_foreignkey&lt;/code>&lt;/pre>
&lt;p>现在，·Municipality·modle 没有被任何外键所 refer，我们可以在上面进行工作了。&lt;/p>
&lt;p>增加一个新的 id field：&lt;/p>
&lt;pre class=" language-python">&lt;code class=" language-python">&amp;lt;span class="token keyword">class&amp;lt;/span> &amp;lt;span class="token class-name">Municipality&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>models&amp;lt;span class="token punctuation">.&amp;lt;/span>Model&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">:&amp;lt;/span>
id &amp;lt;span class="token operator">=&amp;lt;/span> models&amp;lt;span class="token punctuation">.&amp;lt;/span>UUIDField&amp;lt;span class="token punctuation">(&amp;lt;/span>default&amp;lt;span class="token operator">=&amp;lt;/span>uuid&amp;lt;span class="token punctuation">.&amp;lt;/span>uuid4&amp;lt;span class="token punctuation">)&amp;lt;/span>
&lt;/code>&lt;/pre>
&lt;pre class=" language-sh">&lt;code>python manage.py makemigrations -n add_id_field_to_muni&lt;/code>&lt;/pre>
&lt;p>处于某些原因，默认值在我的案例中不 work，所以我增加了一个过程到创建的 migration，来创建新的唯一 id。&lt;/p>
&lt;pre class=" language-python">&lt;code class=" language-python">&amp;lt;span class="token keyword">def&amp;lt;/span> &amp;lt;span class="token function">create_ids&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>apps&amp;lt;span class="token punctuation">,&amp;lt;/span> schema_editor&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">:&amp;lt;/span>
Municipality &amp;lt;span class="token operator">=&amp;lt;/span> apps&amp;lt;span class="token punctuation">.&amp;lt;/span>get_model&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token string">'loc'&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span> &amp;lt;span class="token string">'Municipality'&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
&amp;lt;span class="token keyword">for&amp;lt;/span> m &amp;lt;span class="token keyword">in&amp;lt;/span> municipality&amp;lt;span class="token punctuation">:&amp;lt;/span>
m&amp;lt;span class="token punctuation">.&amp;lt;/span>id &amp;lt;span class="token operator">=&amp;lt;/span> uuid&amp;lt;span class="token punctuation">.&amp;lt;/span>uuid4&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
m&amp;lt;span class="token punctuation">.&amp;lt;/span>save&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
&amp;lt;span class="token comment" spellcheck="true"># ...&amp;lt;/span>
operations &amp;lt;span class="token operator">=&amp;lt;/span> &amp;lt;span class="token punctuation">[&amp;lt;/span>
migrations&amp;lt;span class="token punctuation">.&amp;lt;/span>AddField&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token punctuation">.&amp;lt;/span>&amp;lt;span class="token punctuation">.&amp;lt;/span>&amp;lt;span class="token punctuation">.&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
migrations&amp;lt;span class="token punctuation">.&amp;lt;/span>RunPython&amp;lt;span class="token punctuation">(&amp;lt;/span>code&amp;lt;span class="token operator">=&amp;lt;/span>create_ids&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
&amp;lt;span class="token punctuation">]&amp;lt;/span>&lt;/code>&lt;/pre>
&lt;p>现在我们有一个&lt;code>UUID&lt;/code> ·id·field 在·Municipality 中，然后我们应该可以更换主键了。&lt;/p>
&lt;pre class=" language-python">&lt;code class=" language-python">&amp;lt;span class="token keyword">class&amp;lt;/span> &amp;lt;span class="token class-name">Municipality&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>models&amp;lt;span class="token punctuation">.&amp;lt;/span>Model&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">:&amp;lt;/span>
id &amp;lt;span class="token operator">=&amp;lt;/span> models&amp;lt;span class="token punctuation">.&amp;lt;/span>UUIDField&amp;lt;span class="token punctuation">(&amp;lt;/span>default&amp;lt;span class="token operator">=&amp;lt;/span>uuid&amp;lt;span class="token punctuation">.&amp;lt;/span>uuid4&amp;lt;span class="token punctuation">,&amp;lt;/span> primary_key&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token boolean">True&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
code &amp;lt;span class="token operator">=&amp;lt;/span> models&amp;lt;span class="token punctuation">.&amp;lt;/span>CharField&amp;lt;span class="token punctuation">(&amp;lt;/span>max_length&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token number">2&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span> unique&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token boolean">True&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&lt;/code>&lt;/pre>
&lt;p>创建 migration，并且确保在&lt;code>code&lt;/code>上的&lt;code>AlterField&lt;/code>操作在&lt;code>id&lt;/code>之前。我们已经在&lt;code>id&lt;/code>上增加了&lt;code>primary_key&lt;/code>并且增加了 unique=True 到&lt;code>code&lt;/code> field。constraint 没了，在我们删除 primary_key 的时候就没了。&lt;/p>
&lt;p>让我们开始一个空的迁移&lt;/p>
&lt;pre class=" language-sh">&lt;code>python manage.py makemigrations --empty -n fix_zipcode_fk_to_muni_uuid loc&lt;/code>&lt;/pre>
&lt;p>打开文件，输入&lt;/p>
&lt;pre class=" language-python">&lt;code class=" language-python">&amp;lt;span class="token keyword">def&amp;lt;/span> &amp;lt;span class="token function">match&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>apps&amp;lt;span class="token punctuation">,&amp;lt;/span> schema_editor&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">:&amp;lt;/span>
ZipCode &amp;lt;span class="token operator">=&amp;lt;/span> apps&amp;lt;span class="token punctuation">.&amp;lt;/span>get_model&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token string">'loc'&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span> &amp;lt;span class="token string">'ZipCode'&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
Muni &amp;lt;span class="token operator">=&amp;lt;/span> apps&amp;lt;span class="token punctuation">.&amp;lt;/span>get_model&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token string">'loc'&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span> &amp;lt;span class="token string">'Municipality'&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
&amp;lt;span class="token keyword">for&amp;lt;/span> zip_code &amp;lt;span class="token keyword">in&amp;lt;/span> ZipCode&amp;lt;span class="token punctuation">.&amp;lt;/span>object&amp;lt;span class="token punctuation">.&amp;lt;/span>all&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">:&amp;lt;/span>
zip_code&amp;lt;span class="token punctuation">.&amp;lt;/span>temp_muni &amp;lt;span class="token operator">=&amp;lt;/span> Muni&amp;lt;span class="token punctuation">.&amp;lt;/span>get&amp;lt;span class="token punctuation">(&amp;lt;/span>code&amp;lt;span class="token operator">=&amp;lt;/span>z&amp;lt;span class="token punctuation">.&amp;lt;/span>municipality&amp;lt;span class="token punctuation">)&amp;lt;/span>
zip_code&amp;lt;span class="token punctuation">.&amp;lt;/span>save&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
&amp;lt;span class="token comment" spellcheck="true"># ...&amp;lt;/span>
operations &amp;lt;span class="token operator">=&amp;lt;/span> &amp;lt;span class="token punctuation">[&amp;lt;/span>
migrations&amp;lt;span class="token punctuation">.&amp;lt;/span>AddField&amp;lt;span class="token punctuation">(&amp;lt;/span>
model_name&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token string">'zipcode'&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
name&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token string">'temp_muni'&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
field&amp;lt;span class="token operator">=&amp;lt;/span>models&amp;lt;span class="token punctuation">.&amp;lt;/span>UUIDField&amp;lt;span class="token punctuation">(&amp;lt;/span>null&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token boolean">True&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
migrations&amp;lt;span class="token punctuation">.&amp;lt;/span>RunPython&amp;lt;span class="token punctuation">(&amp;lt;/span>code&amp;lt;span class="token operator">=&amp;lt;/span>match&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
migrations&amp;lt;span class="token punctuation">.&amp;lt;/span>RemoveField&amp;lt;span class="token punctuation">(&amp;lt;/span>model_name&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token string">'zipcode'&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span> name&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token string">'municipality'&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
migrations&amp;lt;span class="token punctuation">.&amp;lt;/span>RenameField&amp;lt;span class="token punctuation">(&amp;lt;/span>
model_name&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token string">'zipcode'&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span> old_name&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token string">'temp_muni'&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span> new_name&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token string">'municipality'&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
migrations&amp;lt;span class="token punctuation">.&amp;lt;/span>AlterField&amp;lt;span class="token punctuation">(&amp;lt;/span>
model_name&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token string">'zipcode'&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
name&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token string">'municipality'&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
field&amp;lt;span class="token operator">=&amp;lt;/span>models&amp;lt;span class="token punctuation">.&amp;lt;/span>ForeignKey&amp;lt;span class="token punctuation">(&amp;lt;/span>
on_delete&amp;lt;span class="token operator">=&amp;lt;/span>django&amp;lt;span class="token punctuation">.&amp;lt;/span>db&amp;lt;span class="token punctuation">.&amp;lt;/span>models&amp;lt;span class="token punctuation">.&amp;lt;/span>deletion&amp;lt;span class="token punctuation">.&amp;lt;/span>PROTECT&amp;lt;span class="token punctuation">,&amp;lt;/span>
to&amp;lt;span class="token operator">=&amp;lt;/span>&amp;lt;span class="token string">'municipality'&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>
&amp;lt;span class="token punctuation">]&amp;lt;/span>&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>增加一个临时的field来保存 Municipality 的UUID，我们不让他是一个&lt;code>ForeignKey&lt;/code>field，否则 Django confuse。&lt;/li>
&lt;li>我们运行 match 函数来寻找新的 id，通过寻找旧的 key，并且存储到临时的 field。&lt;/li>
&lt;li>删除旧的 municipality field&lt;/li>
&lt;li>重命名临时 field 到 municipality&lt;/li>
&lt;li>最后迁移到一个外键，然后创建我们需要 constraint&lt;/li>
&lt;/ol>
&lt;pre>译者：这样改最大的好处就是改了 UUID，但是没有破坏之前的逻辑，可以说是谨慎的迁移吧。不过线上的数据既然在跑着，就这么迁移了，会不会出问题呢。&lt;/pre>
&lt;p>下面还有一些内容。自从我们将 migrations 分离成多个文件，我们让代码变得很脆弱（如果后面的某些 migrations 失败了）。这将会让我们的应用进入一个 unworkable 的状态。所以确保测试一下migrations。你可通过手工把这所有的步骤整合到一个migration里，但是如果你有来自多个不同app的 reference，你可能需要把这些步骤再分开。&lt;/p>
&lt;h2 id="logging">logging
&lt;/h2>&lt;p>迁移的过程中，你可能遇到很多问题，所以一个比较不错的方式，是创建一个简单的迁移 logging。&lt;/p>
&lt;pre class=" language-python">&lt;code class=" language-python">&amp;lt;span class="token keyword">def&amp;lt;/span> &amp;lt;span class="token function">log&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>message&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">:&amp;lt;/span>
&amp;lt;span class="token keyword">def&amp;lt;/span> &amp;lt;span class="token function">fake_op&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>apps&amp;lt;span class="token punctuation">,&amp;lt;/span> schema_editor&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">:&amp;lt;/span>
&amp;lt;span class="token keyword">print&amp;lt;/span>&amp;lt;span class="token punctuation">(&amp;lt;/span>message&amp;lt;span class="token punctuation">)&amp;lt;/span>
&amp;lt;span class="token keyword">return&amp;lt;/span> fake_op
&amp;lt;span class="token comment" spellcheck="true"># ...&amp;lt;/span>
operations &amp;lt;span class="token operator">=&amp;lt;/span> &amp;lt;span class="token punctuation">[&amp;lt;/span>
migration&amp;lt;span class="token punctuation">.&amp;lt;/span>RunPython&amp;lt;span class="token punctuation">(&amp;lt;/span>log&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token string">'Step 1'&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
migration&amp;lt;span class="token punctuation">.&amp;lt;/span>AlterField&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token punctuation">.&amp;lt;/span>&amp;lt;span class="token punctuation">.&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
migration&amp;lt;span class="token punctuation">.&amp;lt;/span>RunPython&amp;lt;span class="token punctuation">(&amp;lt;/span>log&amp;lt;span class="token punctuation">(&amp;lt;/span>&amp;lt;span class="token string">'Step 2'&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">)&amp;lt;/span>&amp;lt;span class="token punctuation">,&amp;lt;/span>
&amp;lt;span class="token comment" spellcheck="true"># ...&amp;lt;/span>
&amp;lt;span class="token punctuation">]&amp;lt;/span>&lt;/code>&lt;/pre>
&lt;p>想要观察 Django 运行了那些 SQL 语句，运行&lt;code>python manage.py sqlmigrate &amp;lt;appname&amp;gt;&amp;lt;migration_number&amp;gt;&lt;/code>，这是一个超级有用的方法。&lt;/p>
&lt;p> &lt;/p></description></item><item><title>Django 写个过滤器 filter</title><link>https://svtter.cn/2018/11/05/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8/</link><pubDate>Mon, 05 Nov 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/2018/11/05/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8/</guid><description>&lt;p>用 Django 快速开发一个项目，发现 Django 的模板本身不带有整除功能，因此自己手写一个。&lt;/p>
&lt;pre class="wp-block-code">&lt;code class="">├── templates
│   ├── app
│   └── base
├── templatetags
│   ├── app_extras.py
│   ├── __init__.py
│   └── __pycache__
├── tests.py
├── urls.py
├── utils.py
└── views.py
&lt;/code>&lt;/pre>
&lt;p>这是目录结构。在 urls.py 添加 app 的名称，例如 app_name = ‘app’ ，然后在与models.py 同级的目录下，新建一个 python 包， templatetags 的，新建自己需要的包名即可。&lt;/p>
&lt;p>app_extra.py：&lt;/p>
&lt;pre class="wp-block-code">&lt;code lang="php" class="language-php">from django import template
register = template.Library()
def mod(value):
return value % 11
register.filter('mod', mod)
&lt;/code>&lt;/pre>
&lt;p>这里因为需求比较简单，因此直接就赋值了 11.&lt;/p>
&lt;p>应用到模板中：&lt;/p>
&lt;pre class="wp-block-code">&lt;code class="">{% load app_extra %}
{% for image in image_list %}
{% if forloop.counter|mod == 0 %}
&amp;lt;h3>检查点&amp;lt;/h3>
{% endif %}
{% endfor %}&lt;/code>&lt;/pre>
&lt;p>随后即可看到结果。&lt;/p>
&lt;p>此外，寻得两个比较好用 template 插件&lt;figure class="wp-block-embed">&lt;/p>
&lt;div class="wp-block-embed__wrapper">
https://pypi.org/project/django-bootstrap4/
&lt;/div>&lt;/figure> &lt;figure class="wp-block-embed">
&lt;div class="wp-block-embed__wrapper">
https://github.com/timonweb/django-bulma
&lt;/div>&lt;/figure>
&lt;p>实现的东西虽然不多，但是起码把我不想关心的逻辑封装起来了。。&lt;/p></description></item><item><title>使用Docker时遇到的sitemap问题</title><link>https://svtter.cn/2017/12/27/%E4%BD%BF%E7%94%A8docker%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84sitemap%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 27 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/2017/12/27/%E4%BD%BF%E7%94%A8docker%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84sitemap%E9%97%AE%E9%A2%98/</guid><description>&lt;p>这两天感觉博客访问量已经不能靠用嘴宣传了，于是决定做一下sitemap，但是发现django自带的sitemap生成器存在这样的问题：生成的sitemap是依照container的hostname来显示的。&lt;/p>
&lt;p>为此我查询了一下其他人是怎么搞的，发现他们都把nginx和django放在一个容器下——但是如此构建不仅麻烦，似乎违背了docker的构建思路，在一个container里面放了多个进程。因此，我认为下面的方案是合理的。&lt;/p>
&lt;h2 id="解决方案">解决方案
&lt;/h2>&lt;h3 id="enabling-the-sites-framework">Enabling the sites framework
&lt;/h3>&lt;p>To enable the sites framework, follow these steps:&lt;/p>
&lt;p>Add ‘django.contrib.sites’ to your INSTALLED_APPS setting.&lt;/p>
&lt;h3 id="define-a-site_id-setting">Define a SITE_ID setting:
&lt;/h3>&lt;p>&lt;code>SITE_ID = 1&lt;/code>&lt;/p>
&lt;h3 id="run-migrate">Run migrate.
&lt;/h3>&lt;p>django.contrib.sites registers a post_migrate signal handler which creates a default site named example.com with the domain example.com. This site will also be created after Django creates the test database. To set the correct name and domain for your project, you can use a data migration.&lt;/p>
&lt;p>In order to serve different sites in production, you’d create a separate settings file with each SITE_ID (perhaps importing from a common settings file to avoid duplicating shared settings) and then specify the appropriate DJANGO_SETTINGS_MODULE for each site.&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">django.contrib.sites.models&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Site&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Site&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">domain&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;myveryspecialdomain.com&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;My Special Site Name&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>代码写多了，对于Flask和Django也就十分释然了。两个东西都是利器，针对的东西不是很相同；编程语言也是，都有自己擅长的部分，如果你非要用某种编程语言花很大的力气去做一件小事，除非你是geek而且有追求，并且没有deadline在旁边催催催，否则不建议你这么做。&lt;/p>
&lt;h2 id="参考项目">参考项目
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/flyhigher139/mayblog" target="_blank" rel="noopener"
>https://github.com/flyhigher139/mayblog&lt;/a>&lt;/p></description></item></channel></rss>