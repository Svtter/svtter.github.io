<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Svtter's Blog</title><link>https://svtter.cn/tags/java/</link><description>Recent content in Java on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 17 Nov 2022 21:15:09 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Mirror</title><link>https://svtter.cn/p/use-mirror/</link><pubDate>Thu, 17 Nov 2022 21:15:09 +0800</pubDate><guid>https://svtter.cn/p/use-mirror/</guid><description>&lt;p>使用代理。在国内编程，使用代理非常重要。&lt;/p>
&lt;p>如果不使用代理，代码包的下载，环境的构建会浪费你很多时间。有些环境因为高度依赖网络环境，使得我们如果不定制底层网络，无法获取某些资源。&lt;/p>
&lt;p>下面罗列几个推荐的代理。&lt;/p>
&lt;p>go: &lt;code>goproxy.io&lt;/code>
java:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.aliyun.com/article/754038" target="_blank" rel="noopener"
>maven mirror&lt;/a>, edit &lt;code>~/.m2/settings.xml&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;mirror&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>nexus-aliyun&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;mirrorOf&amp;gt;&lt;/span>*&lt;span class="nt">&amp;lt;/mirrorOf&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>Nexus aliyun&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;url&amp;gt;&lt;/span>http://maven.aliyun.com/nexus/content/groups/public&lt;span class="nt">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/mirror&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ruby: &lt;a class="link" href="https://gems.ruby-china.com/" target="_blank" rel="noopener"
>gem mirror&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ gem sources -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://gems.ruby-china.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 确保只有 gems.ruby-china.com&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>php:&lt;/p>
&lt;ul>
&lt;li>composer: &lt;code>composer config -g repos.packagist composer https://mirrors.aliyun.com/composer/&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>python:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener"
>tsinghua - pypi&lt;/a>&lt;/li>
&lt;li>&lt;code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>nodejs (javascript):&lt;/p>
&lt;ul>
&lt;li>cnpm: &lt;code>npm install -g cnpm --registry=http://registry.npm.taobao.org&lt;/code>&lt;/li>
&lt;li>tyarn: &lt;code>npm install -g tyarn&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Maven小记</title><link>https://svtter.cn/2018/06/14/maven%E5%B0%8F%E8%AE%B0/</link><pubDate>Thu, 14 Jun 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/2018/06/14/maven%E5%B0%8F%E8%AE%B0/</guid><description>&lt;blockquote>
&lt;p>发现maven与Java，别有一番乐趣&lt;/p>&lt;/blockquote>
&lt;p>入门建议：&lt;/p>
&lt;p>&lt;a class="link" href="https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html" target="_blank" rel="noopener"
>https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html&lt;/a>&lt;/p>
&lt;p>现在很多文章其实写的都不如官方的文章，但是人们总是习惯性的从百度获取自己想要的某些资源。&lt;/p>
&lt;h2 id="maven编译依赖">maven编译依赖
&lt;/h2>&lt;p>一般情况下，maven不会把依赖的包编译到自己的&lt;code>jar&lt;/code>包里面，我猜和&lt;code>dll&lt;/code>的出发点是一样的，减少内存的占用（减少相同内容在内存中的冗余）。&lt;/p>
&lt;p>但是有时候我们不能确保宿主的机器也有同样的东西，因此有时候需要把依赖编译进去。&lt;/p>
&lt;p>我们可以这样做，在&lt;code>pom.xml&lt;/code>中，添加字段：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span> &lt;span class="c">&amp;lt;!--构建依赖--&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;build&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>maven-shade-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.6&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;executions&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;execution&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;phase&amp;gt;&lt;/span>package&lt;span class="nt">&amp;lt;/phase&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;goals&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;goal&amp;gt;&lt;/span>shade&lt;span class="nt">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/goals&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/execution&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/executions&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>由此，就可以把需要的依赖包同时编译进去了。&lt;/p>
&lt;p>针对&lt;code>mvn&lt;/code>，我上传了一个二维码扫描的例程，可供参考：https://github.com/Svtter/zxing-example&lt;/p></description></item><item><title>Java-如何使用vim开发Java</title><link>https://svtter.cn/2015/01/01/java-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vim%E5%BC%80%E5%8F%91java/</link><pubDate>Thu, 01 Jan 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/2015/01/01/java-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vim%E5%BC%80%E5%8F%91java/</guid><description>&lt;p _="%" endblockquote="endblockquote">{% blockquote 本文出自 http://svtter.github.io svtter.github.io %}
&lt;p>本文可以随意转载，但是转载请保留本信息.&lt;/p>&lt;/p>
&lt;p>在网上搜索一番，大部分此类文章都是在说配置，而且配置讲的一看就是没有深入的撸vim。这个时候就&lt;/p>
&lt;p>需要我来深刻的讲讲这个问题了 — 国外也有一些开发者写过类似的文章，不过国外的开发者没有深层&lt;/p>
&lt;p>的讲讲具体如何配置，仅仅是比较简单的说了一下应该用什么。&lt;/p>
&lt;p>闲话少说，我们开始吧。&lt;/p>
&lt;blockquote>
&lt;p>本文的作者认为，本文的读者已经学会使用vim的初步，至于安装，启动之类的东西作者不再赘述，&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>望读者海涵。&lt;/p>&lt;/blockquote>
&lt;h2 id="vimrc的配置">Vimrc的配置
&lt;/h2>&lt;p>如果想要用Vim撸Java，首先一个问题就是许多IDE自带的查错功能，这个笔者希望使用Syntastic来实现。&lt;/p>
&lt;p>具体的方法是，安装Vundle（vim的插件配置工具，用于安装组合各类插件）。其实这个地方也可以不用&lt;/p>
&lt;p>Vundle，但是笔者认为，vimer配置大量插件的最佳方法就是使用vunlde，或者patheon等等。总之，一&lt;/p>
&lt;p>定需要一个插件管理。&lt;/p>
&lt;p>安装Vundle还是比较轻松的，在github上搜索一下，经过一系列步骤即可。然后同样是位于github，搜&lt;/p>
&lt;p>索Syntastic安装即可。&lt;/p>
&lt;p>Syntastic是一个检查语法的vim插件，不仅仅支持Java，各种都支持，具体可以看看Syntastic的wiki&lt;/p>
&lt;h2 id="学习ant">学习Ant
&lt;/h2>&lt;p>Ant是什么东西？简单来说，就是java的makefile。Syntastic的wiki对ant和maven均有支持，但是我个人&lt;/p>
&lt;p>学习了Ant，另外eclipse里面的ant等等 — 如果想要探究一下，可以查看一下这篇文章&lt;/p>
&lt;p>这里面说了一点笔者在ant上面的一点东西，还有ant学习的链接。&lt;/p>
&lt;h2 id="配置syntastic">配置Syntastic
&lt;/h2>&lt;blockquote>
&lt;p>PS: 期末周这么悠闲的写博客真的好吗！！&lt;/p>&lt;/blockquote>
&lt;p>说是配置Syntastic，更不如说是配置Syntastic的Java配置文件。&lt;/p>
&lt;ol>
&lt;li>首先你需要在你的&lt;code>.vimrc&lt;/code>中，添加 &lt;code>let g:syntastic_java_javac_config_file_enabled = 1&lt;/code>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>用于使Syntastic读取配置文件生效。
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>选择&lt;code>build.xml&lt;/code>，使用命令&lt;code>:SyntasticJavacEditConfig&lt;/code>，输入:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>`let g:syntastic_java_javac_custom_classpath_command =&amp;lt;br /&amp;gt;
\ &amp;quot;ant -q build | grep echo | cut -f2- -d] | tr -d ' ' | tr ':' '\n'&amp;quot;`
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>重启Vim，语法检查就完成了。&lt;/li>
&lt;/ol>
&lt;h2 id="其他的插件">其他的插件
&lt;/h2>&lt;ul>
&lt;li>Bundle ‘vim-scripts/javacomplete’&lt;/li>
&lt;li>Bundle ‘vim-scripts/javaDoc.vim’&lt;/li>
&lt;li>&lt;/li>
&lt;li>” Bundle ‘vim-scripts/Java-Syntax-und-Folding’&lt;/li>
&lt;li>” Bundle ‘vim-javacompleteex’ “更好的 Java 补全插件&lt;/li>
&lt;/ul>
&lt;p>以上插件均可以考虑使用，安装方法可能有所不同 — 但是个人认为最大的语法检查问题已经搞定了，&lt;/p>
&lt;p>其他的问题应该都不是问题了吧 = =&lt;/p></description></item><item><title>Java-Ant文件和Synastic-Vim支持</title><link>https://svtter.cn/2014/12/29/java-ant%E6%96%87%E4%BB%B6%E5%92%8Csynastic-vim%E6%94%AF%E6%8C%81/</link><pubDate>Mon, 29 Dec 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/2014/12/29/java-ant%E6%96%87%E4%BB%B6%E5%92%8Csynastic-vim%E6%94%AF%E6%8C%81/</guid><description>&lt;p _="%" endblockquote="endblockquote">{% blockquote 本文出自 http://svtter.github.io svtter.github.io %}
&lt;p>本文可以随意转载，但是转载请保留本信息.&lt;/p>&lt;/p>
&lt;p>本文已经更新，请看 — 如何使用vim开发Java.&lt;/p>
&lt;p>本来想把本文命名为使用Vim写Java-Project的，但是个人认为这样并没有很高的开发效率，所以只是提&lt;/p>
&lt;p>供一个部分的解决方案，剩下的就由大家努力探索吧。。&lt;/p>
&lt;p>Java有个自己构建工程的工具叫做Ant, 全名&lt;code>Apache Ant&lt;/code>，好东西，最通俗的解释就是Java的&lt;/p>
&lt;p>&lt;code>makefile&lt;/code>，这里提供的方案，就是使用Ant或者maven来构建工程，然后通过Synastic的设置，来完成&lt;/p>
&lt;p>Java的代码检查。另外，java代码补全设置其实也是有的，但是具体的设置我没有好好研究过，主要是&lt;/p>
&lt;p>已经陪不起那个时间了。&lt;/p>
&lt;p>另外，Eclipse导出Java项目的时候，一个不错的方法就是&lt;code>Export Ant Buildfiles&lt;/code>，这就是ant文件。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.blogjava.net/amigoxie/archive/2007/11/09/159413.html" target="_blank" rel="noopener"
>Ant学习简单教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Maven我没有好好学，但是看wiki似乎Synastic对maven的支持比ant的支持更加优秀，也可能是mvn的构&lt;/p>
&lt;p>建方法上存在优势？这个我不清楚。有时间写一篇文章来好好的研究下。&lt;/p>
&lt;p>Ant这个东西构建的包有时候检查会出现问题，（如果采用目录编译的方法，那么就无法检查）。&lt;/p>
&lt;p>另外，需要不停的在目录下建立&lt;code>.synastic_javac_config&lt;/code>，着实烦人。但是如果使用了全局设置，改&lt;/p>
&lt;p>变了配置文件的根目录，也是极为不妥当的（不可能只有一个项目在编辑吧？另外改来改去，也是太麻&lt;/p>
&lt;p>烦了。）&lt;/p>
&lt;p>就是这样。。更多的是吐槽吧。&lt;/p>
&lt;p>对于上一篇文章提到的问题可以用设置classpath来解决。具体方法是将classpath添加到syntastic。&lt;/p>
&lt;p>&lt;code>use :SyntasticJavacEditClasspath and add workpath.&lt;/code>&lt;/p></description></item><item><title>Java-import和package的用法</title><link>https://svtter.cn/2014/12/28/java-import%E5%92%8Cpackage%E7%9A%84%E7%94%A8%E6%B3%95/</link><pubDate>Sun, 28 Dec 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/2014/12/28/java-import%E5%92%8Cpackage%E7%9A%84%E7%94%A8%E6%B3%95/</guid><description>&lt;blockquote>
&lt;p>本文出自&lt;a class="link" href="http://svtter.github.io" target="_blank" rel="noopener"
>svtter.github.io&lt;/a>
本文可以随意转载，但是转载请保留本信息.&lt;/p>&lt;/blockquote>
&lt;p>之前一直都是用eclipse开发Java，Vim修炼到今日，本来想要拉出来溜溜Java，奈何package和import的机制以及 synastic[自动检查代码的插件] 没有对于eclipse对java包类似的支持，所以只得滚回eclipse，然后使用vrapper了。&lt;/p>
&lt;p>闲话少说，听我细细道来package和import;&lt;/p>
&lt;p>这篇文章主要是说明类似这种情况，即不同包但是文件路径一部分相同，即:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> * /temp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * temp.java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * tests/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * joking.java
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="贴出源代码">贴出源代码:
&lt;/h2>&lt;ul>
&lt;li>test.java:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kn">package&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">temp&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">temp.tests.joking&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">test&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">joking&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">joking&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">test&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>joking.java&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kn">package&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">temp.tests&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">joking&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">test&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="一种编译方法">一种编译方法
&lt;/h2>&lt;p>这个时候打开test.java是没有办法通过拼写验证[synastic]，需要这样:&lt;/p>
&lt;p>&lt;code>javac -d . /tests/joking.java&lt;/code>&lt;/p>
&lt;p>然后再打开test.java, 可以了。但是这个时候有个很别扭的问题，我们发现这个时候生成了一个文件&lt;/p>
&lt;p>&lt;code>temp/temp/tests/joking.class&lt;/code>，也就是说我们的目录现在变成了这个样子:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> * /temp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * temp.java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * tests/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * joking.java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * temp/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * test/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * joking.class
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请不要告诉我你很爽，因为这个目录给我的感觉很不爽- -试想，如果我们在别的目录下引用这个包，我&lt;/p>
&lt;p>们就需要做很多这样的操作，造成的后果就是各个包里面出现无数个&lt;code>temp/test/joking.class&lt;/code>…&lt;/p>
&lt;p>对我而言这是难以忍受的，我也想不太清楚为什么当初java这么设计 — 可能是为了避免耦合等问题？&lt;/p>
&lt;p>软件工程这个地方学得不够好，先mark一下，或者有读者可以给我解释一下这个设计。或者说，下面这&lt;/p>
&lt;p>个才是正确的。&lt;/p>
&lt;h2 id="另一种编译方法">另一种编译方法
&lt;/h2>&lt;p>退出到temp的上级目录，然后进行编译&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>javac -d . temp/tests/joking.class
javac -d . temp/test.java
&lt;/pre>
&lt;/div>
&lt;p>然后这样运行:&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>java temp.test
&lt;/pre>
&lt;/div>
&lt;p>可是这个时候我们打开temp.java, 利用synastic检查，报错。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>最后还是自己对synastic依赖性太强了。但是自己不会写= =，也是无奈了。开个issue求支持吧= =&lt;/p>
&lt;h2 id="后记">后记
&lt;/h2>&lt;p>找到方法了 — 使用ant来构建项目。不过synastic的官方文档并没有说的很清楚，issue看起来又比较&lt;/p>
&lt;blockquote>
&lt;p>费劲，饿死了，吃饭去。。&lt;/p>&lt;/blockquote></description></item></channel></rss>