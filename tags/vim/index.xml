<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vim on Svtter&#39;s Blog</title>
    <link>https://svtter.github.io/tags/vim/</link>
    <description>Recent content in vim on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Dec 2017 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.github.io/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Write with Vim – 1</title>
      <link>https://svtter.github.io/2017/12/15/writewithvim-1/</link>
      <pubDate>Fri, 15 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/12/15/writewithvim-1/</guid>
      <description>本文最初发表于2015年，但是个人认为写的尚可，就搬运到这里来，其中有些知识有些老旧，有时间的时候再更新一下。
Write with Vim – 2
前言 [2014]
大约在一年前使用vim？这个也是个不确定的时间。具体什么时间使用Vim早已经忘记了。现在用的还算顺手，但是很多东西其实都还没有认真的学一下。最简单的比如说一部分正则表达式的匹配，以及vimscript的写法等等。也是没有具体时间去认真的深入，毕竟信息科技的世界里有太多太多可以探索的东西了= =。
在大多数情况下我还是认为自己写一些前人已经有的blog毫无价值，但是转念一想写blog又是为了谁呢，还不是为了自己吗。总结过去，才能更好的前进走向未来。
另外最近又在开始看emacs了。不过总感觉这样是不好的行为——vim我还没有钻研透彻，就跑去了E去到处乱看，最后哪个都搞不好——谁又知道呢？废话也是少说，写本文是给新手入门的。
另外今天发现K的作用是查找命令（默认是！man）[2014-09-27]
本文是利用vimperator（firefox）+ gvim进行书写的，还有了markdown的高亮等等插件。
[/2014]
入手Vim 首先我认为你是在Linux下使用vim的，而不是windows。如果是windows，我建议你寻找类似的
取代方案，或者等着我以后补充。如果给你带来不便了，你来咬我啊～
当年学习vim的时候遵从诸位大神的理解，跟着vimtutor走了一趟，感觉还是比较不错的。
最关键的还是自己要多多使用vim，不能停，就算是一开始很不爽，也要坚持使用下去
第一步是学习vimtutor，这个毋庸置疑。最关键的输入i, 还有移动hjkl记住了就可以了 之后最关键的任务就是不停的用vim，就算是觉得慢也用——当然在慢的过程中要思考如何能快。 学习使用`vimtutor`就是在命令行中输入： `vimtutor` 第一步我个人认为是最难的一步。尤其是度过那一段干啥都很慢，狂点鼠标还用不了的阶段。 然后不是跳到问题3就是跳到本问题了。慢慢发现熟悉的&amp;lt;C-c&amp;gt;（就是Ctrl+c)不能用了，到了Vi m里面变成了终止退出命令了(就像是Esc）（原本也是使用ESC来退出编辑模式的，但是后来发现`&amp;lt;C-c&amp;gt;` 比较快捷，于是就使用他了。（如果你没看懂，重新返回第一步练习）。然后在vim中寻找关于复制， 粘贴的使用方法——至少我是这样。然后就会理解vim中的寄存器的相关信息。 然后就开始找那些可以让自己快速编辑的命令了，比如说w|e|f。我个人比较喜欢f，这个可以让我 快速定位一句话中的一个字母，欲罢不能。`w，e`倒是用的比较少，`b`的位置我不是很喜欢。在这个 过程中大概`d | s | c`这些家伙也慢慢出现了。 再然后就开始发现数字和大写字母的好处了，从小写到大写也是一个慢慢认识的过程，也是不用 记忆到底是如何运作的，只需要看好了出现的位置就行了。用多了自然就会了。 然后习惯了以后就是换行，查找，替换等等操作了。在这个过程中查找用的还是比较多的， 但是替换的命令我就经常忘记如何使用了——没办法，经常忘记。换行更多的使用的是`行号g`，或者 `:行号`然后等等等。 进阶 你也可以直接下载我的配置使用，其中的插件配置可以在一定程度上给出指导。
都是一步一步过来的但是我也忘记我是怎么走过来的。依然很水，不会的配置上网搜索然后copy到自己的vimrc中。走到进阶就差不多懂得.vimrc为何物——因为可能受不了自己vim中的字体，配色，以及目录——或者括号匹配等等问题。这个时候vimrc的作用就出来了。 这个时候我推荐你使用我的配置，也是基于网络上十分流行的一个版本： 如果出现什么问题，参见README.md中的FAQ
这样就可以安装运行了。出现一个问题很正常，如果不在意就继续使用，在意的话自己百度。出现很多
问题可能是因为Vundle没有装好，使用
git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
我是在.vimrc之后才发现的这种神奇的编辑的。分块编辑的确能够极大的提升效率。然后不停 的阅读vimrc吧！然后从help中吸取精华吧！ 下一步我要熟练使用记录模式和正则匹配，以及vimscript的写法等等。希望本文对于想要学习Vim的 你有所帮助。 </description>
    </item>
    
    <item>
      <title>Java-Ant文件和Synastic-Vim支持</title>
      <link>https://svtter.github.io/2014/12/29/java-ant%E6%96%87%E4%BB%B6%E5%92%8Csynastic-vim%E6%94%AF%E6%8C%81/</link>
      <pubDate>Mon, 29 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/29/java-ant%E6%96%87%E4%BB%B6%E5%92%8Csynastic-vim%E6%94%AF%E6%8C%81/</guid>
      <description>本文可以随意转载，但是转载请保留本信息.
本文已经更新，请看 — 如何使用vim开发Java.
本来想把本文命名为使用Vim写Java-Project的，但是个人认为这样并没有很高的开发效率，所以只是提
供一个部分的解决方案，剩下的就由大家努力探索吧。。
Java有个自己构建工程的工具叫做Ant, 全名Apache Ant，好东西，最通俗的解释就是Java的
makefile，这里提供的方案，就是使用Ant或者maven来构建工程，然后通过Synastic的设置，来完成
Java的代码检查。另外，java代码补全设置其实也是有的，但是具体的设置我没有好好研究过，主要是
已经陪不起那个时间了。
另外，Eclipse导出Java项目的时候，一个不错的方法就是Export Ant Buildfiles，这就是ant文件。
Ant学习简单教程 Maven我没有好好学，但是看wiki似乎Synastic对maven的支持比ant的支持更加优秀，也可能是mvn的构
建方法上存在优势？这个我不清楚。有时间写一篇文章来好好的研究下。
Ant这个东西构建的包有时候检查会出现问题，（如果采用目录编译的方法，那么就无法检查）。
另外，需要不停的在目录下建立.synastic_javac_config，着实烦人。但是如果使用了全局设置，改
变了配置文件的根目录，也是极为不妥当的（不可能只有一个项目在编辑吧？另外改来改去，也是太麻
烦了。）
就是这样。。更多的是吐槽吧。
对于上一篇文章提到的问题可以用设置classpath来解决。具体方法是将classpath添加到syntastic。
use :SyntasticJavacEditClasspath and add workpath.</description>
    </item>
    
  </channel>
</rss>
