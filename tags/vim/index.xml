<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vim on Svtter's Blog</title><link>https://svtter.cn/tags/vim/</link><description>Recent content in Vim on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 15 Dec 2017 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/vim/index.xml" rel="self" type="application/rss+xml"/><item><title>Write with Vim – 1</title><link>https://svtter.cn/p/write-with-vim-1/</link><pubDate>Fri, 15 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/write-with-vim-1/</guid><description>&lt;p>本文最初发表于2015年，但是个人认为写的尚可，就搬运到这里来，其中有些知识有些老旧，有时间的时候再更新一下。&lt;/p>
&lt;p>&lt;a class="link" href="https://svtter.github.io/post/250/" target="_blank" rel="noopener"
>Write with Vim - 2&lt;/a>&lt;/p>
&lt;h2 id="前言">前言
&lt;/h2>&lt;p>[2014]&lt;/p>
&lt;p>大约在一年前使用vim？这个也是个不确定的时间。具体什么时间使用Vim早已经忘记了。现在用的还算顺手，但是很多东西其实都还没有认真的学一下。最简单的比如说一部分正则表达式的匹配，以及vimscript的写法等等。也是没有具体时间去认真的深入，毕竟信息科技的世界里有太多太多可以探索的东西了= =。&lt;/p>
&lt;p>在大多数情况下我还是认为自己写一些前人已经有的blog毫无价值，但是转念一想写blog又是为了谁呢，还不是为了自己吗。总结过去，才能更好的前进走向未来。&lt;/p>
&lt;p>另外最近又在开始看emacs了。不过总感觉这样是不好的行为——vim我还没有钻研透彻，就跑去了E去到处乱看，最后哪个都搞不好——谁又知道呢？废话也是少说，写本文是给新手入门的。&lt;/p>
&lt;p>另外今天发现K的作用是查找命令（默认是！man）[2014-09-27]&lt;/p>
&lt;p>本文是利用vimperator（firefox）+ gvim进行书写的，还有了markdown的高亮等等插件。&lt;/p>
&lt;p>[/2014]&lt;/p>
&lt;h2 id="入手vim">入手Vim
&lt;/h2>&lt;p>首先我认为你是在Linux下使用vim的，而不是windows。如果是windows，我建议你寻找类似的&lt;/p>
&lt;p>取代方案，或者等着我以后补充。如果给你带来不便了，你来咬我啊～&lt;/p>
&lt;p>当年学习vim的时候遵从诸位大神的理解，跟着vimtutor走了一趟，感觉还是比较不错的。&lt;/p>
&lt;p>&lt;strong>最关键的还是自己要多多使用vim，不能停，就算是一开始很不爽，也要坚持使用下去&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>第一步是学习&lt;code>vimtutor&lt;/code>，这个毋庸置疑。最关键的输入&lt;code>i&lt;/code>, 还有移动&lt;code>hjkl&lt;/code>记住了就可以了&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>之后最关键的任务就是不停的用vim，就算是觉得慢也用——当然在慢的过程中要思考如何能快。
学习使用`vimtutor`就是在命令行中输入：
`vimtutor`
第一步我个人认为是最难的一步。尤其是度过那一段干啥都很慢，狂点鼠标还用不了的阶段。
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>然后不是跳到问题3就是跳到本问题了。慢慢发现熟悉的&lt;code>&amp;lt;C-c&amp;gt;&lt;/code>（就是&lt;code>Ctrl+c&lt;/code>)不能用了，到了Vi&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>m里面变成了终止退出命令了(就像是Esc）（原本也是使用ESC来退出编辑模式的，但是后来发现`&amp;lt;C-c&amp;gt;`
比较快捷，于是就使用他了。（如果你没看懂，重新返回第一步练习）。然后在vim中寻找关于复制，
粘贴的使用方法——至少我是这样。然后就会理解vim中的寄存器的相关信息。
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>然后就开始找那些可以让自己快速编辑的命令了，比如说&lt;code>w|e|f&lt;/code>。我个人比较喜欢&lt;code>f&lt;/code>，这个可以让我&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>快速定位一句话中的一个字母，欲罢不能。`w，e`倒是用的比较少，`b`的位置我不是很喜欢。在这个
过程中大概`d | s | c`这些家伙也慢慢出现了。
&lt;/code>&lt;/pre>
&lt;ol start="4">
&lt;li>再然后就开始发现数字和大写字母的好处了，从小写到大写也是一个慢慢认识的过程，也是不用&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>记忆到底是如何运作的，只需要看好了出现的位置就行了。用多了自然就会了。
&lt;/code>&lt;/pre>
&lt;ol start="5">
&lt;li>然后习惯了以后就是换行，查找，替换等等操作了。在这个过程中查找用的还是比较多的，&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>但是替换的命令我就经常忘记如何使用了——没办法，经常忘记。换行更多的使用的是`行号g`，或者
`:行号`然后等等等。
&lt;/code>&lt;/pre>
&lt;h2 id="进阶">进阶
&lt;/h2>&lt;p>&lt;strong>你也可以直接下载我的配置使用，其中的插件配置可以在一定程度上给出指导。&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>都是一步一步过来的但是我也忘记我是怎么走过来的。依然很水，不会的配置上网搜索然后copy到自己的vimrc中。走到进阶就差不多懂得.vimrc为何物——因为可能受不了自己vim中的字体，配色，以及目录——或者括号匹配等等问题。这个时候vimrc的作用就出来了。&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>这个时候我推荐你使用我的配置，也是基于网络上十分流行的一个版本：
&lt;/code>&lt;/pre>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>git clone http://github.com/Svtter/MyVimrc
./install
&lt;/pre>
&lt;/div>
&lt;blockquote>
&lt;p>如果出现什么问题，参见README.md中的FAQ&lt;/p>&lt;/blockquote>
&lt;p>这样就可以安装运行了。出现一个问题很正常，如果不在意就继续使用，在意的话自己百度。出现很多&lt;/p>
&lt;p>问题可能是因为Vundle没有装好，使用&lt;/p>
&lt;p>&lt;code>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle&lt;/code>&lt;/p>
&lt;ol>
&lt;li>我是在.vimrc之后才发现的&lt;c-v>这种神奇的编辑的。分块编辑的确能够极大的提升效率。然后不停&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>的阅读vimrc吧！然后从help中吸取精华吧！
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>下一步我要熟练使用记录模式和正则匹配，以及vimscript的写法等等。希望本文对于想要学习Vim的&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>你有所帮助。
&lt;/code>&lt;/pre></description></item><item><title>Write with Vim – 2</title><link>https://svtter.cn/p/write-with-vim-2/</link><pubDate>Fri, 15 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/write-with-vim-2/</guid><description>&lt;p>这是 Write with Vim 第二部分，如果想要阅读第一部分，请参考：&lt;a class="link" href="https://svtter.github.io/post/249/" target="_blank" rel="noopener"
>Write with vim - 1&lt;/a>&lt;/p>
&lt;h2 id="vim的下一步">Vim的下一步
&lt;/h2>&lt;p>对我自己而言，也是在这一步。&lt;/p>
&lt;p>现在你对Vim已经有所了解，hjkl肯定会，f也能熟用，&lt;code>,&lt;/code>可能被你映射成了&lt;code>&amp;lt;leader&amp;gt;&lt;/code>，或者等等。但是我还是想要写这个blog，来指引新手（诚然，也是指引自己）。&lt;/p>
&lt;p>&lt;strong>这个时候，我建议你将Esc映射成ii，然后禁用Esc&lt;/strong>&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>" 强迫自己不使用ESC
inoremap &amp;lt;Esc&amp;gt; &amp;lt;nop&amp;gt;
inoremap ii &amp;lt;ESC&amp;gt;
&lt;/pre>
&lt;/div>
&lt;p>在&lt;a class="link" href="https://svtter.github.io/post/249/" target="_blank" rel="noopener"
>Write with vim - 1&lt;/a>中，记录模式我已经用的比较习惯了（&lt;code>@+寄存器&lt;/code>），但是正则表达式用的一般般，仍然需要好好的努力才行。&lt;/p>
&lt;h2 id="想要用好vim离不开github">想要用好Vim，离不开github
&lt;/h2>&lt;p>大概更多人喜欢在 &lt;a class="link" href="http://www.vim.org" target="_blank" rel="noopener"
>http://www.vim.org&lt;/a> 上寻找自己心仪的插件，但是我认为还是在&lt;a class="link" href="github.com" >github&lt;/a>上找更好。为什么？&lt;/p>
&lt;ul>
&lt;li>因为许多的开源项目都已经在github上扎根，许多优秀的插件都能在&lt;a class="link" href="" >github&lt;/a>上找到其身影。比如：Nerdtree, YouCompeleteME, airline, etc.&lt;/li>
&lt;li>你可以通过github的star数量来判断这个项目的优秀程度。当然，更确切说，是把star做为参考标准之一。&lt;/li>
&lt;/ul>
&lt;p>等等优点，想到我再补充。&lt;/p>
&lt;h2 id="使用插件管理器管理你的插件">使用插件管理器，管理你的插件
&lt;/h2>&lt;p>我个人比较推荐 &lt;a class="link" href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener"
>Plug&lt;/a>&lt;/p>
&lt;p>插件使用git更新插件，将&lt;code>vimscripts&lt;/code>分离，控制不同功能的插件可以放在不同的位置，保证了&lt;code>vimrc&lt;/code>的整洁。从而提高了个人配置的维护性。&lt;/p>
&lt;p>Plug 是首当其冲的插件，有了他，你会发现更新插件，安装新的插件一切都是那么的简单。&lt;/p>
&lt;p>Plug 的使用方法在 README 里面有，但是如果英文比较差 — 没关系，也能看懂。&lt;/p>
&lt;h2 id="下一步的学习">下一步的学习
&lt;/h2>&lt;p>很多人觉得vimscript学习起来有些困难，这里有份非常好的文档。准确说是翻译。翻译者辛苦了。&lt;/p>
&lt;p>&lt;a class="link" href="http://learnvimscriptthehardway.onefloweroneworld.com/" target="_blank" rel="noopener"
>http://learnvimscriptthehardway.onefloweroneworld.com/&lt;/a>&lt;/p></description></item><item><title>从Vim转到Atom</title><link>https://svtter.cn/p/%E4%BB%8Evim%E8%BD%AC%E5%88%B0atom/</link><pubDate>Tue, 30 May 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BB%8Evim%E8%BD%AC%E5%88%B0atom/</guid><description>&lt;blockquote class="wp-block-quote">
&lt;p>
&lt;br />
&lt;/p>
&lt;p>
vim 真香
&lt;/p>
&lt;p>&lt;cite>2018-08-27&lt;/cite>&lt;/p>
&lt;/blockquote>
&lt;p>Vim大大小小也算是用了3年了，中间也尝试过不少IDE，从爽度上讲，Visual Studio绝对是最令人舒爽，
愉快的。不过，Windows本身的体验太差——对bash的支持太差；朋友win经常死机；因此不太喜欢用vs。
此外，vs收费，手头没钱。因此，决定使用Atom来做下一步的开发。&lt;/p>
&lt;h2 id="为什么不用vim了">为什么不用Vim了
&lt;/h2>&lt;p>Vim搭配&lt;code>python-mode&lt;/code>的确是能带来不错的书写体验，但是因为Vim本身功能需要自己来写，
而&lt;code>vimscript&lt;/code>在我这里着实不好用，学习起来虽然不能说有很大的难度，但是不同插件之间的调整，
以及出现小问题闪现而过得debug信息【输入:message来查看】等等，都不是很舒服。&lt;/p>
&lt;p>此外，我的Vim插件很多，运行速度已经受到比较大的影响，代码跳转速度都有些慢，体验着实不好；&lt;/p>
&lt;h2 id="转到atom">转到Atom
&lt;/h2>&lt;p>Atom和Sublime比较了一下——虽然Sublime拥有用Python写扩展的优势，但是因为收费，而且我不认为这
个软件能让我心甘情愿的为其掏腰包，所以就干脆放弃了。选择了Atom。VsCode因为是微软家的东西，道理
上讲应该很棒，但是因为在开源开发者那边，大家可能不喜欢微软的一些做派，所以一些大牛不喜欢给微软
开发插件——因此最终决定转移到Atom。&lt;/p>
&lt;p>此外，代码补全功能上，Atom的体验实在是太棒了！&lt;/p>
&lt;p>使用Atom不需要额外学习什么，直接打开设置，找到install，安装packages即可。&lt;/p>
&lt;h2 id="一个插件列表">一个插件列表
&lt;/h2>&lt;ul>
&lt;li>autocomplete-python python的自动补全&lt;/li>
&lt;li>file-icons 不动脑子就安装了，图标好看&lt;/li>
&lt;li>linter-flake8 python的语法检查&lt;/li>
&lt;/ul>
&lt;p>Python的东西可以对应的找到其他的语言对应的package；&lt;/p>
&lt;ul>
&lt;li>minimap 代码小地图&lt;/li>
&lt;li>symbols-tree-view 相当于tagbar，看所有的方法以及变量&lt;/li>
&lt;li>vim-mode 最关键的，以Vim的方式编辑文件&lt;/li>
&lt;li>last-cursor-position 返回上个编辑的位置，ctrl-o&lt;/li>
&lt;/ul>
&lt;p>还有multicursor之类的插件，我一般写的时候是不用的，直接用:%s来做替换。Atom上我目前还不是特别
需要这个功能，可以直接考虑&lt;code>cmd + f&lt;/code>来代替；需要的时候我会直接去找。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://blog.csdn.net/qianghaohao/article/details/52331432" target="_blank" rel="noopener"
>配置插件镜像服务&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="几个有用的快捷键">几个有用的快捷键
&lt;/h2>&lt;ul>
&lt;li>&lt;code>cmd + ,&lt;/code> 打开设置&lt;/li>
&lt;li>&lt;code>cmd + R&lt;/code> 打开文件中的方法&lt;/li>
&lt;li>&lt;code>cmd + T&lt;/code> 打开项目中的文件&lt;/li>
&lt;li>&lt;code>cmd + shift + p&lt;/code> 相当于&lt;code>sublime&lt;/code>中的&lt;code>ctrl+p&lt;/code>&lt;/li>
&lt;li>&lt;code>ctrl+0&lt;/code> 焦点转移到目录&lt;/li>
&lt;li>&lt;code>cmd + /&lt;/code> 注释&lt;/li>
&lt;li>&lt;code>cmd + 数字&lt;/code> 跳转Tab&lt;/li>
&lt;li>&lt;code>cmd + w&lt;/code> 关闭tab【操作方法与chrome很相似】，可以直接参考chrome的快捷键&lt;/li>
&lt;/ul>
&lt;h2 id="update-at-2023-08-29">update at 2023-08-29
&lt;/h2>&lt;p>我现在在使用&lt;code>vscode&lt;/code>.&lt;/p></description></item><item><title>谈论一下编辑器</title><link>https://svtter.cn/p/%E8%B0%88%E8%AE%BA%E4%B8%80%E4%B8%8B%E7%BC%96%E8%BE%91%E5%99%A8/</link><pubDate>Tue, 28 Feb 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%B0%88%E8%AE%BA%E4%B8%80%E4%B8%8B%E7%BC%96%E8%BE%91%E5%99%A8/</guid><description>&lt;p>编辑器这个东西，一直以来的目的，要么是装逼，要么是提升程序员工作效率。&lt;/p>
&lt;p>做物联网开发使用终端下的vim编辑器的确是行云流水——省去了&lt;code>git push&lt;/code>和&lt;code>git pull&lt;/code>的过程。&lt;/p>
&lt;p>不过仔细想来，真是工作了，恐怕使用这个东西频度就不行了。一方面，可以根据最近的一些更新，比如说vim的异步来提升一下插件的整体体验。工作环境是会变得，在配置编辑器上话费太多功夫总归是不划算的。现在正在体验&lt;code>spacevim&lt;/code>——&lt;/p>
&lt;ol>
&lt;li>spacevim载入以后没有对其leader的介绍，可能是出于照顾新手？这点我有点不适应——我还以为加载出来以后，就是一个类似于spacemacs的界面呢。&lt;/li>
&lt;li>原来是需要使用neovim才能体现出spacemacs的效果&lt;/li>
&lt;li>速度实在是太慢了。主要是VimFiler的缘故，拖的整体速度都很慢。&lt;/li>
&lt;/ol>
&lt;p>其实本来想要写，进入工作环境，恐怕就没有那么多时间去摆弄编辑器了。但是似乎编辑器涉及到的技术，也有许许多多是可以共通的，因此，研究起来应该也是有价值的。不过使用起来，还是一整个配置好的环境更加舒服——IDE就免了，感觉上还是太重了，有一定自由性还是好的。&lt;/p>
&lt;p>sublime似乎是一款比较优秀的编辑器，使用python作为他的”脚本语言“，就像”lisp“之余emacs，”vimscript“之余vim一样。不过，习惯于vim的我不太想要重新去看一个新的编辑器的API了，总感觉有些麻烦。&lt;/p>
&lt;p>写的比较杂乱，主要是最近没东西玩了，复试总不能打游戏吧，只好研究个什么。——以考试为目的学习，真累啊。&lt;/p></description></item><item><title>Java-Ant文件和Synastic-Vim支持</title><link>https://svtter.cn/p/java-ant%E6%96%87%E4%BB%B6%E5%92%8Csynastic-vim%E6%94%AF%E6%8C%81/</link><pubDate>Mon, 29 Dec 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/java-ant%E6%96%87%E4%BB%B6%E5%92%8Csynastic-vim%E6%94%AF%E6%8C%81/</guid><description>&lt;p _="%" endblockquote="endblockquote">{% blockquote 本文出自 http://svtter.github.io svtter.github.io %}
&lt;p>本文可以随意转载，但是转载请保留本信息.&lt;/p>&lt;/p>
&lt;p>本文已经更新，请看 — 如何使用vim开发Java.&lt;/p>
&lt;p>本来想把本文命名为使用Vim写Java-Project的，但是个人认为这样并没有很高的开发效率，所以只是提&lt;/p>
&lt;p>供一个部分的解决方案，剩下的就由大家努力探索吧。。&lt;/p>
&lt;p>Java有个自己构建工程的工具叫做Ant, 全名&lt;code>Apache Ant&lt;/code>，好东西，最通俗的解释就是Java的&lt;/p>
&lt;p>&lt;code>makefile&lt;/code>，这里提供的方案，就是使用Ant或者maven来构建工程，然后通过Synastic的设置，来完成&lt;/p>
&lt;p>Java的代码检查。另外，java代码补全设置其实也是有的，但是具体的设置我没有好好研究过，主要是&lt;/p>
&lt;p>已经陪不起那个时间了。&lt;/p>
&lt;p>另外，Eclipse导出Java项目的时候，一个不错的方法就是&lt;code>Export Ant Buildfiles&lt;/code>，这就是ant文件。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.blogjava.net/amigoxie/archive/2007/11/09/159413.html" target="_blank" rel="noopener"
>Ant学习简单教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Maven我没有好好学，但是看wiki似乎Synastic对maven的支持比ant的支持更加优秀，也可能是mvn的构&lt;/p>
&lt;p>建方法上存在优势？这个我不清楚。有时间写一篇文章来好好的研究下。&lt;/p>
&lt;p>Ant这个东西构建的包有时候检查会出现问题，（如果采用目录编译的方法，那么就无法检查）。&lt;/p>
&lt;p>另外，需要不停的在目录下建立&lt;code>.synastic_javac_config&lt;/code>，着实烦人。但是如果使用了全局设置，改&lt;/p>
&lt;p>变了配置文件的根目录，也是极为不妥当的（不可能只有一个项目在编辑吧？另外改来改去，也是太麻&lt;/p>
&lt;p>烦了。）&lt;/p>
&lt;p>就是这样。。更多的是吐槽吧。&lt;/p>
&lt;p>对于上一篇文章提到的问题可以用设置classpath来解决。具体方法是将classpath添加到syntastic。&lt;/p>
&lt;p>&lt;code>use :SyntasticJavacEditClasspath and add workpath.&lt;/code>&lt;/p></description></item><item><title>使用gdb调试</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95/</link><pubDate>Sun, 16 Nov 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95/</guid><description>&lt;p>最近都是用gcc+vim写代码，昨天突然写个代码算法出个逻辑bug，因为用了大量递归调用，DEB半天出不来也是醉了，于是&lt;/p>
&lt;p>学习一下gdb——之前也是勉强使用过，但是明显感觉不爽阿。。所以这次好好学习，记录一下。&lt;/p>
&lt;p>目前我能用到的几个命令：&lt;/p>
&lt;h1 id="选择调试文件">选择调试文件
&lt;/h1>&lt;ul>
&lt;li>&lt;code>&amp;lt;shell&amp;gt;: gdb &amp;lt;file&amp;gt;&lt;/code>&lt;/li>
&lt;li>或者进入gdb以后，使用&lt;/li>
&lt;/ul>
&lt;h1 id="断点">断点
&lt;/h1>&lt;h2 id="显示断点">显示断点
&lt;/h2>&lt;ul>
&lt;li>&lt;code>(gdb): info break&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="添加静态断点">添加静态断点
&lt;/h2>&lt;ul>
&lt;li>&lt;code>(gdb): b[reak] + 行数/函数名 (可以用tab补全)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="添加条件断点">添加条件断点
&lt;/h2>&lt;p>条件为真，则在断点处停止&lt;/p>
&lt;p>– &lt;code>(gdb): b addr if condition&lt;/code>&lt;/p>
&lt;h2 id="删除断点">删除断点
&lt;/h2>&lt;p>删除编号为1的断点, 如果不加参数，会删除所有断点&lt;/p>
&lt;p>– &lt;code>(gdb): delete breakpoint 1&lt;/code>&lt;/p>
&lt;h2 id="启用禁用断点">启用/禁用断点
&lt;/h2>&lt;ul>
&lt;li>&lt;code>(gdb): disable breakpoint 1&lt;/code>&lt;/li>
&lt;li>&lt;code>(gdb): enable breakpoint 1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="运行">运行
&lt;/h1>&lt;h2 id="开始运行">开始运行
&lt;/h2>&lt;ul>
&lt;li>&lt;code>(gdb):r&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="继续">继续
&lt;/h2>&lt;ul>
&lt;li>&lt;code>(gdb):c&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="单步调试">单步调试
&lt;/h2>&lt;p>不进入单步执行&lt;/p>
&lt;p>– &lt;code>(gdb):n&lt;/code>&lt;/p>
&lt;p>进入的单步&lt;/p>
&lt;p>– &lt;code>(gdb):s[tep&lt;/code>&lt;/p>
&lt;h1 id="显示变量">显示变量
&lt;/h1>&lt;p>以变量为var为例&lt;/p>
&lt;h2 id="输出var的值">输出var的值
&lt;/h2>&lt;ul>
&lt;li>&lt;code>(gdb):p var&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="输出上一个求得值">输出上一个求得值
&lt;/h2>&lt;ul>
&lt;li>&lt;code>(gdb):p&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="输出历史记录中值">输出历史记录中值
&lt;/h2>&lt;ul>
&lt;li>&lt;code>(gdb):p $[num]&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="输出变量的类型">输出变量的类型
&lt;/h2>&lt;ul>
&lt;li>&lt;code>(gdb):whatis p&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="调用函数">调用函数
&lt;/h2>&lt;ul>
&lt;li>&lt;code>(gdb):p add(a, b)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="数组">数组
&lt;/h2>&lt;p>输出a后面的十个元素&lt;/p>
&lt;p>– &lt;code>(gdb):p a@10&lt;/code>&lt;/p>
&lt;h1 id="设置运行参数">设置运行参数
&lt;/h1>&lt;ul>
&lt;li>&lt;code>(gdb):set args -b -x&lt;/code>&lt;/li>
&lt;li>&lt;code>(gdb):show args&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>参见大牛的部分：(陈皓的gdb讲解)[http://blog.csdn.net/haoel/article/details/2880]&lt;/p>
&lt;blockquote>
&lt;p>二、设置观察点（WatchPoint）&lt;/p>&lt;/blockquote>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>观察点一般来观察某个表达式（变量也是一种表达式）的值是否有变化了，如果有变化，马上停住程序。我们有下面的几种方法来设置观察点：
watch &amp;lt;expr&amp;gt;
为表达式（变量）expr设置一个观察点。一量表达式值有变化时，马上停住程序。
rwatch &amp;lt;expr&amp;gt;
当表达式（变量）expr被读时，停住程序。
awatch &amp;lt;expr&amp;gt;
当表达式（变量）的值被读或被写时，停住程序。
info watchpoints
列出当前所设置了的所有观察点。
&lt;/pre>
&lt;/div>
&lt;h1 id="tag">TAG
&lt;/h1>&lt;ul>
&lt;li>直接输入&lt;code>&amp;lt;CR&amp;gt;&lt;/code>，执行上一条命令&lt;/li>
&lt;/ul></description></item><item><title>解决无法在CentOS下的gvim中使用ibus输入中文</title><link>https://svtter.cn/p/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E5%9C%A8centos%E4%B8%8B%E7%9A%84gvim%E4%B8%AD%E4%BD%BF%E7%94%A8ibus%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</link><pubDate>Sat, 15 Nov 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E5%9C%A8centos%E4%B8%8B%E7%9A%84gvim%E4%B8%AD%E4%BD%BF%E7%94%A8ibus%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</guid><description>&lt;h1 id="问题">问题
&lt;/h1>&lt;p>之前在gvim中一直无法使用中文，格外痛苦，后来使用了vim-ibus插件之后，可以在vim中使用中文了，但是依然不能在gvim中使用，一直以为是两个软件冲突的&lt;/p>
&lt;p>问题，现在终于解决了。&lt;/p>
&lt;ul>
&lt;li>gvim version: vim-X11&lt;/li>
&lt;li>ibus version: 1.6&lt;/li>
&lt;/ul>
&lt;h1 id="解决方案">解决方案
&lt;/h1>&lt;ul>
&lt;li>问题出在：使用的vim插件中有插件与ibus冲突，但是奈何找不到X11的log（应该可以找到，找到再说。。）&lt;/li>
&lt;li>排查方式比较简单，使用&lt;code>:PluginInstall&lt;/code>,&lt;code>:PluginClean&lt;/code>即可(考虑到我使用vundle管理插件)&lt;/li>
&lt;li>去除相应的插件即可(比如现在冲突的是auto-pairs)。如果不想去除冲突插件，可以考虑使用vim-ibus，这个在shell下是可以使得很多冲突减少的。&lt;/li>
&lt;li>可能auto-pairs在不久的将来就会修复这个bug，请在具体环境下排查&lt;/li>
&lt;/ul></description></item></channel></rss>