<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vscode on Svtter's Blog</title><link>https://svtter.cn/tags/vscode/</link><description>Recent content in Vscode on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 30 Apr 2025 10:54:07 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/vscode/index.xml" rel="self" type="application/rss+xml"/><item><title>Visual Studio Code Tips - 2</title><link>https://svtter.cn/p/visual-studio-code-tips-2/</link><pubDate>Wed, 30 Apr 2025 10:54:07 +0800</pubDate><guid>https://svtter.cn/p/visual-studio-code-tips-2/</guid><description>&lt;p>当我们使用 vscode （cursor）进行 python 编码的时候，难免会引入大文件到工作目录里。此时，如果不对分析器加以限制，容易导致整个系统非常卡顿。&lt;/p>
&lt;p>我们可以编辑设置来避免这个问题。&lt;/p>
&lt;p>例如，我们希望忽略的路径是&lt;code>/app/data&lt;/code>，相对目录是&lt;code>./data&lt;/code>。通过打开&lt;code>&amp;lt;project_root&amp;gt;/.vscode/settings.json&lt;/code>，加入如下内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;python.analysis.exclude&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;/app/data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;/app/data/**&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;./data/**&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;./data&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样一来，就可以避免分析器，例如 pylancer，分析你的数据目录了。&lt;/p></description></item><item><title>Config devcontainer.md</title><link>https://svtter.cn/p/config-devcontainer.md/</link><pubDate>Wed, 26 Mar 2025 20:17:47 +0800</pubDate><guid>https://svtter.cn/p/config-devcontainer.md/</guid><description>&lt;img src="https://svtter.cn/p/config-devcontainer.md/image.png" alt="Featured image of post Config devcontainer.md" />&lt;p>有时候，尽管我们启动一个 docker 环境可以执行代码，但是 vscode 补全未能生效。&lt;/p>
&lt;p>这是由于相关的库都在 container 中，我们 vscode 一般是运行在 host os 上。&lt;/p>
&lt;p>为了解决这个问题，我们可以在项目根目录下，使用 docker-compose.yml 来创建一个开发环境。&lt;/p>
&lt;p>然后，创建一个&lt;code>.devcontainer/devcontainer.json&lt;/code>文件。&lt;/p>
&lt;p>例如，如果你要开发 python 的程序，可以使用下面的 &lt;code>.devcontainer/devcontainer.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;MyPython&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;dockerComposeFile&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;../docker-compose.yml&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;service&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;notebook&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">service&lt;/span> &lt;span class="err">in&lt;/span> &lt;span class="err">your&lt;/span> &lt;span class="err">docker-compose.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;workspaceFolder&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/app&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;shutdownAction&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;none&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;customizations&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;vscode&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;extensions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-python.python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-azuretools.vscode-docker&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;tamasfe.even-better-toml&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;charliermarsh.ruff&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-python.black-formatter&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-toolsai.jupyter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如此一来，就可以启动一个安装好相关环境的『子』系统了。&lt;/p>
&lt;p>深入阅读：&lt;a class="link" href="https://blog.roboflow.com/nvidia-docker-vscode-pytorch/#installing-docker-for-machine-learning" target="_blank" rel="noopener"
>Develop like a Pro with NVIDIA + Docker + VS Code + PyTorch&lt;/a>。&lt;/p></description></item><item><title>Coding With Cloud Server</title><link>https://svtter.cn/p/coding-with-cloud-server/</link><pubDate>Tue, 07 Nov 2023 17:19:00 +0800</pubDate><guid>https://svtter.cn/p/coding-with-cloud-server/</guid><description>&lt;p>程序开发经常会让本地机器卡顿，尤其是编译某些较大文件的时候。除此之外，如果涉及到数据集处理，会带来更多麻烦，例如下载数据动辄10G，部署环境不一致导致包冲突问题。&lt;/p>
&lt;p>因此，如果只进行 web 开发，那么云服务器是一个相当不错的选择。
云服务器现在价格很优惠。经过本人测试，腾讯云轻量服务器相当靠谱。可以直接搞定基本问题：公网ip，带宽，存储，服务器本体。&lt;/p>
&lt;p>这个是我的&lt;a class="link" href="https://curl.qcloud.com/2w2Hjd24" target="_blank" rel="noopener"
>推广链接&lt;/a>，可以直接跳转购买。&lt;/p>
&lt;p>进入正题：使用vscode进行开发。设置好 remote ssh，也就是这个插件：&lt;/p>
&lt;p>&lt;img src="https://svtter.cn/images/image_1699347932775_0.png"
loading="lazy"
>&lt;/p>
&lt;p>这个插件可以让我们通过 ssh 连接到服务器，并且自动开放端口，从本地的链接，例如 127.0.0.1:1080 进行访问。可以在 port 中看到。&lt;/p>
&lt;p>&lt;img src="https://svtter.cn/images/image_1699348134681_0.png"
loading="lazy"
alt="image.png"
>&lt;/p>
&lt;p>通过这样的方式，调试也变得容易了。&lt;/p>
&lt;p>总结一下，有几个好处：&lt;/p>
&lt;ul>
&lt;li>性能占用都在服务器上，本地机器运行通畅。&lt;/li>
&lt;li>依赖简单，linux 系统；环境独立，不容易破坏。&lt;/li>
&lt;li>重装容易，一键重装。&lt;/li>
&lt;li>不需要担心垃圾文件问题，可以备份后直接重制系统。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>版权所有©️ svtter&lt;/p>&lt;/blockquote></description></item><item><title>Visual Studio Code Tips - 1</title><link>https://svtter.cn/p/visual-studio-code-tips-1/</link><pubDate>Tue, 09 Jun 2020 11:25:25 +0800</pubDate><guid>https://svtter.cn/p/visual-studio-code-tips-1/</guid><description>&lt;p>又有一段时间没有更新博客啦！这篇文章是&lt;code>vscode&lt;/code>使用技巧。&lt;/p>
&lt;p>最近因为学生&lt;code>pycharm&lt;/code>到期，因此采用&lt;code>visual studio code&lt;/code>代替。使用过程中遇到不少问题，在此记录一下，为以后提供备忘。&lt;/p>
&lt;h2 id="关于测试">关于测试
&lt;/h2>&lt;ol>
&lt;li>只有使用 &lt;code>pytest&lt;/code>， 才能将错误显示到 &lt;code>problems&lt;/code> 中&lt;/li>
&lt;li>test 的上级目录必须是 &lt;code>package&lt;/code>，这意味着每层目录都要有 &lt;code>__init__.py&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>并行测试：&lt;/p>
&lt;p>&lt;code>pip install pytest-xdist&lt;/code>&lt;/p>
&lt;p>并且在&lt;code>pytest.ini&lt;/code>下增加：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[pytest]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">addopts = -n4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="文件管理器">文件管理器
&lt;/h2>&lt;ol>
&lt;li>打开&lt;code>User Settings&lt;/code>，搜素&lt;code>files.exclude&lt;/code> 选项：去掉不想在文件管理器中看到的东西&lt;/li>
&lt;/ol>
&lt;h2 id="lint">lint
&lt;/h2>&lt;p>在错误检查方面，vscode 有许多细节可以设置。&lt;/p>
&lt;p>&lt;a class="link" href="https://code.visualstudio.com/docs/python/linting" target="_blank" rel="noopener"
>https://code.visualstudio.com/docs/python/linting&lt;/a>&lt;/p>
&lt;p>增加&lt;code>django&lt;/code>的检查：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;python.linting.pylintArgs&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;--load-plugins&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;pylint_django&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就可以避免一些错误。比如：&lt;code>objects&lt;/code>检查的错误。&lt;/p></description></item></channel></rss>