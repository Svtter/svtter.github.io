<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CPP on Svtter&#39;s Blog</title>
    <link>https://svtter.github.io/tags/cpp/</link>
    <description>Recent content in CPP on Svtter&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 27 Aug 2018 01:00:00 +0800</lastBuildDate>
    <atom:link href="https://svtter.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title># Difference between map &amp; unordered_map</title>
      <link>https://svtter.github.io/2018/08/27/difference-between-map-unordered_map/</link>
      <pubDate>Mon, 27 Aug 2018 01:00:00 +0800</pubDate>
      <guid>https://svtter.github.io/2018/08/27/difference-between-map-unordered_map/</guid>
      <description>目前有三个容器我不太了解其内部实现，打算通过 &amp;lt;c++ primer&amp;gt; 进行学习&#xA;map multimap unordered_map map map 是目前最简单的结构，实现的方法是 BST（binary search tree）。因此，其时间复杂度等都与 BST 相同，搜索，增加，删除基本时间都是 log(n)。&#xA;use map when 数据有序 需要按照有序的顺序获得元素 unordered_map unordered_map 则是通常所说的 hash table，哈希表，搜索，增加，删除都是以hash表为主，较好的情况是o(1)，也就是hash函数可以较好的把元素分布到表中，如果 hash 函数比较糟糕，则每一次添加删除查找，都是完整遍历一个表。&#xA;use unordered_map when 对数据计数 只需要根据 key 访问 value 简单来讲，就是当你需要使用 vector 来计数的时候，可以用 unordered_map 来代替。&#xA;multimap multimap containers are generally slower than unordered_multimap containers to access individual elements by their key, but they allow the direct iteration on subsets based on their order.&#xA;Multimaps are typically implemented as binary search trees.</description>
    </item>
    <item>
      <title>Ros Kinect Configure Note</title>
      <link>https://svtter.github.io/2017/12/18/roskinectconfigurenote/</link>
      <pubDate>Mon, 18 Dec 2017 01:00:00 +0800</pubDate>
      <guid>https://svtter.github.io/2017/12/18/roskinectconfigurenote/</guid>
      <description>This blog for my kinect-v2 ros configure.&#xA;Environment Thinkpad P70 Ubuntu 14.04 indigo Reference to https://github.com/code-iai/iai_kinect2&#xA;Install Before start, make sure the cuda, cudnn has been configured correctly.&#xA;First, you need to install libfreenect2.&#xA;I recommend to use export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64 in your .zshrc or .bashrc (more professional, in bash_profile or .zshenv). You will avoid some problems about library error.&#xA;When installing libfreenect2, Use cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/freenect2 -DENABLE_CXX11=ON to generate Makeifle at build/</description>
    </item>
    <item>
      <title>数值分析计算，C&#43;&#43;实现</title>
      <link>https://svtter.github.io/2015/05/31/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E8%AE%A1%E7%AE%97%EF%BC%8Cc&#43;&#43;%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 31 May 2015 01:00:00 +0800</pubDate>
      <guid>https://svtter.github.io/2015/05/31/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E8%AE%A1%E7%AE%97%EF%BC%8Cc&#43;&#43;%E5%AE%9E%E7%8E%B0/</guid>
      <description>https://github.com/Svtter/numerical_analysis</description>
    </item>
    <item>
      <title>C&#43;&#43;学习必备</title>
      <link>https://svtter.github.io/2014/11/27/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E5%BF%85%E5%A4%87/</link>
      <pubDate>Thu, 27 Nov 2014 01:00:00 +0800</pubDate>
      <guid>https://svtter.github.io/2014/11/27/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E5%BF%85%E5%A4%87/</guid>
      <description> 本文出自&amp;lt;svtter.github.io&amp;gt;&#xA;(cplusplus)[http://www.cplusplus.com]&#xA;介绍三个头文件 在/usr/include/stdint.h中包含着各种关于C数据类型的定义，大小等。&#xA;unistd.h unix standard library header 这个函数库中包含read, write, gitpid等函数 stdlib.h standard library header </description>
    </item>
    <item>
      <title>Linux-同步互斥</title>
      <link>https://svtter.github.io/2014/11/21/linux-%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5/</link>
      <pubDate>Fri, 21 Nov 2014 01:00:00 +0800</pubDate>
      <guid>https://svtter.github.io/2014/11/21/linux-%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5/</guid>
      <description> 本文出自&amp;lt;svtter.github.io&amp;gt; 使用pthread实现经典问题：生产者消费者 关于semaphore的相关信息就不再贴出来了。&#xA;编译的时候记得-pthread选项。&#xA;运行结果 操作系统经典问题：哲学家就餐问题 mutex是c++11的新功能。记得添加C++11支持。(在运行结果中包含编译选项。)&#xA;运行结果 操作系统经典问题：读者写者问题 读者优先 使用了c++11的新特性thread 运行结果 由于可以同时阅读，所以读者reading输出可能出现少许问题。&#xA;写者优先 使rsem中只有一个读者在等待，保证了如果有写者，写者优先写 运行结果 基本上结果就是写者写完，才会有读者阅读 </description>
    </item>
  </channel>
</rss>
