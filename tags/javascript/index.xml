<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Svtter&#39;s Blog</title>
    <link>https://svtter.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 28 Dec 2018 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>手把手教你搭建 vue-cli﻿</title>
      <link>https://svtter.github.io/2018/12/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA-vue-cli%EF%BB%BF/</link>
      <pubDate>Fri, 28 Dec 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/12/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA-vue-cli%EF%BB%BF/</guid>
      <description>&lt;p&gt;&lt;code&gt;vuejs&lt;/code&gt; 这东西，实不相瞒，学习了很长时间，从看文档到使用，大概有一年的时间。当然，其实上手没有那么难，&lt;code&gt;&amp;lt;script src=&amp;quot;vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;这样就搞定了。只是想要用的比较优雅，存在一定的难度。&lt;/p&gt;
&lt;p&gt;但是硬核玩家肯定不能止步于此。于是就开始了&lt;code&gt;vue-cli&lt;/code&gt;的探究。没想到这个探究如此之长，以至于我在很长一段时间内，都没有正儿八经的写过前端。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Javascript中变量的作用域</title>
      <link>https://svtter.github.io/2017/07/20/javascript%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Thu, 20 Jul 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/07/20/javascript%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>问题引出 方才阅读es6的时候遇到一个问题：
问题解决 这就想了，如果没有let关键字，我们如何处理这个问题呢？
此时就涉及到一个概念，闭包 clojure。
不要被这个复杂的名词欺骗了，就是函数套函数，函数返回函数而已。解决这个问题关键在于
块级作用域和函数作用域的理解；在Javascript中，并不支持块级作用域，它只支持函数作用域，
而且在一个函数中的任何位置定义的变量在该函数中的任何地方都是可见的。
因此，我们在Js这个特性的基础上，使用闭包，然后就可以解决这个问题了：
为什么要解决这个问题？因为有时候在for循环中使用回调可能与参数i有所联系，可能会遭遇到
问题；
当然，如果使用es6这种问题就不会发生了。es6大法好。</description>
    </item>
    
    <item>
      <title>CallBackHell</title>
      <link>https://svtter.github.io/2017/06/08/callbackhell/</link>
      <pubDate>Thu, 08 Jun 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/06/08/callbackhell/</guid>
      <description>这两天做微信小程序赶个潮流，体验了一下回调——之前一直听人讲“回调地狱”，这次终于
亲身感受了一下。的确是“地狱”。
不过既然能够出现“回调地狱”，也必然有人可以避免，甚至在一定程度上解决这个问题。
回调地狱解决方法
一般情况下，我不怎么写回调的代码；一方面是因为没有这个习惯，之前写算法题目，基
本上不写回调——不过行文至此，突然想起许多题目都有用回调从而更加优雅解决的方案，囧。
再贴一篇c++的函数传递
本以为Java不存在回调地狱，也就不存在回调——询问之后，才意识到Java之所以不存在回调
地狱，是因为Java本身要用回调，需要传类作为参数；一方面，如果使用回调，会使得代码
变长；另一方面，尽管代码变长，但是相比较简短的代码，问题描述的更加清晰明确。
这可能就是为什么Js被称为玩具语言的原因之一吧。
回调函数的优势：
然后讲讲Python：
一个Python异步回调的例子 一个阻塞回调 异步编程同步化 最后一个才是最酷的。</description>
    </item>
    
    <item>
      <title>JS-常见问题</title>
      <link>https://svtter.github.io/2014/12/08/js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 08 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/08/js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文出自&lt;a href=&#34;http://svtter.github.io&#34;&gt;svtter.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;首先应该看w3cschool来涨涨见识, 但是因为之前沉溺游戏荒废了。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS-优化上传文件的样式</title>
      <link>https://svtter.github.io/2014/12/01/js-%E4%BC%98%E5%8C%96%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Mon, 01 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/01/js-%E4%BC%98%E5%8C%96%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%B7%E5%BC%8F/</guid>
      <description> 本文出自svtter.github.io 上传文件type=file真心丑，所以采用方法解决一下。
中心思想是隐藏input，然后利用css定位，使其仍然可以被点击（有点欺骗的性质）
text需要禁止点击（使用diabled=&#39;disabled&#39;) 源代码 </description>
    </item>
    
    <item>
      <title>JS-变量相关-jQuery调用</title>
      <link>https://svtter.github.io/2014/12/01/js-%E5%8F%98%E9%87%8F%E7%9B%B8%E5%85%B3-jquery%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 01 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/01/js-%E5%8F%98%E9%87%8F%E7%9B%B8%E5%85%B3-jquery%E8%B0%83%E7%94%A8/</guid>
      <description>本文出自&amp;lt;svtter.github.io&amp;gt; 在javascript函数外部定义的变量均为全局变量。
调用jQuery, 需要把jQuery放在&amp;lt;script&amp;gt;最前。
调用本地jQuery的代码
jQuery 目录: ../js/jquery-1.11.1.min.js/
其他的script文件放在jquery后即可
HTML 依据w3cschool修改</description>
    </item>
    
  </channel>
</rss>
