<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TDD on Svtter's Blog</title><link>https://svtter.cn/tags/tdd/</link><description>Recent content in TDD on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 06 Aug 2021 10:41:16 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/tdd/index.xml" rel="self" type="application/rss+xml"/><item><title>测试驱动开发应该怎么做？</title><link>https://svtter.cn/p/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%81%9A/</link><pubDate>Fri, 06 Aug 2021 10:41:16 +0800</pubDate><guid>https://svtter.cn/p/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%81%9A/</guid><description>&lt;p&gt;测试驱动开发，是一种保证软件质量，提高研发效率的开发方法。&lt;/p&gt;
&lt;p&gt;测试驱动开发的定义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;测试驱动开发，英文全称Test-Driven Development，简称TDD，是一种不同于传统&lt;a class="link" href="https://baike.baidu.com/item/%e8%bd%af%e4%bb%b6%e5%bc%80%e5%8f%91%e6%b5%81%e7%a8%8b/3430246" target="_blank" rel="noopener"
&gt;软件开发流程&lt;/a&gt;的新型的开发方法。它要求在&lt;a class="link" href="https://baike.baidu.com/item/%e7%bc%96%e5%86%99/1517598" target="_blank" rel="noopener"
&gt;编写&lt;/a&gt;某个&lt;a class="link" href="https://baike.baidu.com/item/%e5%8a%9f%e8%83%bd/10346898" target="_blank" rel="noopener"
&gt;功能&lt;/a&gt;的&lt;a class="link" href="https://baike.baidu.com/item/%e4%bb%a3%e7%a0%81/86048" target="_blank" rel="noopener"
&gt;代码&lt;/a&gt;之前先编写测试代码，然后只编写使测试通过的功能代码，通过测试来推动整个开发的进行。这有助于编写简洁可用和高质量的代码，并加速开发过程。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;以上内容来自&lt;a class="link" href="https://baike.baidu.com/item/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/3328831?fr=aladdin" target="_blank" rel="noopener"
&gt;百度百科&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;百度百科很好的说明了这个问题，我们本文不再赘述，只讲关键问题。&lt;/p&gt;
&lt;h2 id="基本流程"&gt;基本流程
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;快速新增一个&lt;strong&gt;不能通过&lt;/strong&gt;的测试&lt;/li&gt;
&lt;li&gt;运行测试（运行一个测试，或者所有的测试）&lt;/li&gt;
&lt;li&gt;做&lt;strong&gt;尽可能少&lt;/strong&gt;的改动，使测试通过&lt;/li&gt;
&lt;li&gt;运行所有测试，并使其通过&lt;/li&gt;
&lt;li&gt;重构代码，消除重复设计，优化结构&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;A: write a test
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;B: make test pass
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;C: refactor
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;A -&amp;gt; B -&amp;gt; C -&amp;gt; A
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="faq"&gt;FAQ
&lt;/h2&gt;&lt;h3 id="功能测试应该怎么写"&gt;功能测试应该怎么写？
&lt;/h3&gt;&lt;p&gt;功能测试，应该尽可能只使用本层的函数和接口。
例如，功能测试应尽可能调用 django app 的 URL 接口，而不是直接调用 app 中的业务逻辑。
当然，如果准备数据较为复杂，可以利用一些工具函数，将基础数据加载到系统中。
这些工具函数，我们同样建议在功能测试层实现，而不是直接调用最底层的函数。&lt;/p&gt;
&lt;h3 id="不要忽视重构"&gt;不要忽视重构
&lt;/h3&gt;&lt;p&gt;重构是 TDD 的重要环节。可以通过 OOP 等方式尽可能的降低心智负担，从而使得代码简洁明了。
对于许多初学者，在执行一段时间的 TDD 后便无法推进了。很多程度上是因为无法简化程序逻辑。
TDD 能让你变得更好，发现问题。但是 TDD 无法解决原本就存在的设计问题。&lt;/p&gt;
&lt;h3 id="web-前端如何采用tdd"&gt;WEB 前端如何采用TDD？
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;不测试样式。一般情况下，样式不是核心需求。&lt;/li&gt;
&lt;li&gt;充分利用 HTML tag。例如：利用 class 定位元素&lt;/li&gt;
&lt;li&gt;测试业务逻辑。针对历史 BUG 进行测试。&lt;/li&gt;
&lt;li&gt;充分利用 Javascript 模块。写模块，而非脚本&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>2019年总结</title><link>https://svtter.cn/p/2019%E5%B9%B4%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 12 Jan 2020 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/2019%E5%B9%B4%E6%80%BB%E7%BB%93/</guid><description>&lt;p&gt;2019年过去了，简单做了一下总结。&lt;/p&gt;
&lt;h2 id="今年做了哪些事情"&gt;今年做了哪些事情？
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;投出去了小论文，完成了大论文。硕士毕业。&lt;/li&gt;
&lt;li&gt;完成了一个领域软件的开发&lt;/li&gt;
&lt;li&gt;完成了一个石场的项目，身份是&lt;code&gt;项目经理+产品经理&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="学习"&gt;学习
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;学会了TDD，tdd超级香。&lt;/li&gt;
&lt;li&gt;学习了敏捷开发思维&lt;/li&gt;
&lt;li&gt;完成了自己第一篇论文&lt;/li&gt;
&lt;li&gt;拿到了硕士学位&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="工作"&gt;工作
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用敏捷开发，完成了鑫鑫的项目&lt;/li&gt;
&lt;li&gt;使用TDD，完成了Protect 的项目&lt;/li&gt;
&lt;li&gt;小应用：剪贴板，车票，地摊，one_image&lt;/li&gt;
&lt;li&gt;进一步了解了MGE&lt;/li&gt;
&lt;li&gt;仪表项目正式上线&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="收获"&gt;收获
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;群智能够产生巨大的价值，遏制群智会打压组织的发展。&lt;/li&gt;
&lt;li&gt;学会了分解难题，按照步骤推进&lt;/li&gt;
&lt;li&gt;解决问题，而不是推进进度。因为问题解决了，进度自然就推进了。&lt;/li&gt;
&lt;li&gt;协同编辑有很大的作用&lt;/li&gt;
&lt;li&gt;做事情，不能单纯的追求块，要一步一个脚印。&lt;/li&gt;
&lt;li&gt;很多时候，软件开发进度迟缓，不是技术的问题，而是需求没有定义清楚，因此无法推进。&lt;/li&gt;
&lt;li&gt;春种一粒粟，秋收万颗子。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="存在的问题"&gt;存在的问题：
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在琐事上浪费了不少时间。&lt;/li&gt;
&lt;li&gt;没有及时调整自己的心态，在事情多的时候，没有合理的分配时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- 3. 仪表问题：1. xception提取的特征图太小，可能不利于RNN进行建模 --&gt;
&lt;ol start="3"&gt;
&lt;li&gt;前几个月一直在纠结工程的结果，过于着急，写的代码水平不高，结果有问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于这篇文章一直都没有写好，所以直到&lt;code&gt;2020年4月7日&lt;/code&gt;才放出来。有些内容我也是不想分享的，知识是有价值的。
所以我开设了一个用于分享敏捷知识的知识星球。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://svtter.cn/images/image_15285484828522_2.jpg"
loading="lazy"
alt="知识星球"
&gt;&lt;/p&gt;
&lt;p&gt;在里面我会分享一些敏捷的相关知识。&lt;/p&gt;</description></item></channel></rss>