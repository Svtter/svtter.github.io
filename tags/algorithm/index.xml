<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithm on Svtter's Blog</title><link>https://svtter.cn/tags/algorithm/</link><description>Recent content in Algorithm on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 05 Apr 2018 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>与所有单词相关联的字串</title><link>https://svtter.cn/2018/04/05/%E4%B8%8E%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9B%B8%E5%85%B3%E8%81%94%E7%9A%84%E5%AD%97%E4%B8%B2/</link><pubDate>Thu, 05 Apr 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/2018/04/05/%E4%B8%8E%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9B%B8%E5%85%B3%E8%81%94%E7%9A%84%E5%AD%97%E4%B8%B2/</guid><description>&lt;h2 id="题目">题目
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/description/" target="_blank" rel="noopener"
>https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/description/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>给定一个字符串 s 和一些长度相同的单词 words，找出 s 与 words 中所有单词（words 每个单词只出现一次）串联一起（words 中组成串联串的单词的顺序随意）的字符串匹配的所有起始索引，子串要与串联串完全匹配，中间不能有其他字符。&lt;/p>
&lt;p>举个例子，给定：&lt;/p>
&lt;p>s：”barfoothefoobarman”&lt;/p>
&lt;p>words：[“foo”, “bar”]&lt;/p>
&lt;p>你应该返回的索引: [0,9]。（任意顺序）&lt;/p>
&lt;h2 id="题解">题解
&lt;/h2>&lt;p>代码写的比较清楚，应该不需要题解。。&lt;/p>
&lt;h2 id="code">code
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Solution&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ss&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">word_dic&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">len_ss&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">word_number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">word&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ss&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">len_of_word&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># keys() update&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">word&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">word_dic&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">word_dic&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">word_dic&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">word_number&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="c1"># is update&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">word_number&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">len_of_words&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">True&lt;/span>
&lt;span class="c1"># repeat&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">False&lt;/span>
&lt;span class="c1"># not exist&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">False&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">len_of_word&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">findSubstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd"> :type s: str&lt;/span>
&lt;span class="sd"> :type words: List[str]&lt;/span>
&lt;span class="sd"> :rtype: List[int]&lt;/span>
&lt;span class="sd"> """&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">len_of_word&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">words&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">len_of_words&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">words&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">len_of_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">word&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">word&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="n">index_recorder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">len_substr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">len_of_word&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">len_of_words&lt;/span>
&lt;span class="n">search_range&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">len_of_str&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">len_substr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">search_range&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">ss&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">len_substr&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">word_dic&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copy&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">word_dic&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">index_recorder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">index_recorder&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">"wordgoodgoodgoodbestword"&lt;/span>
&lt;span class="n">words&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">"word"&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">"good"&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">"best"&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">"good"&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">so&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Solution&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">so&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">findSubstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/pre>
&lt;/div></description></item></channel></rss>