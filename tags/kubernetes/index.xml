<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on Svtter's Blog</title><link>https://svtter.cn/tags/kubernetes/</link><description>Recent content in Kubernetes on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 26 Apr 2025 09:55:38 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Build a Kubernetes Cluster.md</title><link>https://svtter.cn/p/build-a-kubernetes-cluster.md/</link><pubDate>Sat, 26 Apr 2025 09:55:38 +0800</pubDate><guid>https://svtter.cn/p/build-a-kubernetes-cluster.md/</guid><description>&lt;img src="https://svtter.cn/p/build-a-kubernetes-cluster.md/bg.png" alt="Featured image of post Build a Kubernetes Cluster.md" />&lt;p>Kubernetes 是现行容器云的事实标准。这两天我构建了一个私有化的 kubernetes 集群，将过程整理成了脚本，可以使用这些脚本进行二次部署。&lt;/p>
&lt;p>部署集群的代码：&lt;/p>
&lt;script src="https://tarptaeya.github.io/repo-card/repo-card.js">&lt;/script>
&lt;!-- inside body, where you want to create the card -->
&lt;div class="repo-card" data-repo="svtter/k8s-deployment">&lt;/div>
&lt;h2 id="架设前提">架设前提
&lt;/h2>&lt;p>实际上，大多数 kubernetes 部署失败的案例，都在网络环境建设上翻了跟头。&lt;/p>
&lt;p>架设 kubernetes 集群的前提条件（包括对人和对环境的）：&lt;/p>
&lt;ol>
&lt;li>自由的访问网络&lt;/li>
&lt;li>内网中 DNS 管理，IP 地址管理。&lt;/li>
&lt;li>作为 master 的服务器 &amp;gt;= 1&lt;/li>
&lt;li>作为 node 节点的服务器 &amp;gt;= 2&lt;/li>
&lt;/ol>
&lt;p>此外，服务器防火墙，swap 等需要提前关闭。这些前提条件在&lt;a class="link" href="https://sealos.run/docs/k8s/quick-start/deploy-kubernetes" target="_blank" rel="noopener"
>这里&lt;/a>会更加详细的描述，我这里就不啰嗦了。在我的代码库中，我提供了对应的代码，可以快速进行操作。&lt;/p>
&lt;p>部署 kubernetes 是一个中高级运维人员的必备技能。这个过程中涉及了大量的网络以及操作系统知识。&lt;/p>
&lt;h2 id="架构简述">架构简述
&lt;/h2>&lt;p>Kubernetes 结构图如下：&lt;/p>
&lt;p>&lt;img src="https://svtter.cn/p/build-a-kubernetes-cluster.md/arch.png"
width="1024"
height="698"
srcset="https://svtter.cn/p/build-a-kubernetes-cluster.md/arch_hu_8f61cc3c186fb5ed.png 480w, https://svtter.cn/p/build-a-kubernetes-cluster.md/arch_hu_2a09611c6ee56014.png 1024w"
loading="lazy"
alt="Kubernetes architecture"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>&lt;/p>
&lt;p>其中，master 节点再 Control Plan 中，用于接收外部请求和转发。&lt;/p>
&lt;h2 id="安装过程">安装过程
&lt;/h2>&lt;p>安装脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装 uv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bash install-uv.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 根据自己的实际情况配置网络中的主机&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 配置 master node，worker node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim conf.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装 sealos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bash download_sealos.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 运行安装脚本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uv run install-k8s.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用">使用
&lt;/h2>&lt;p>安装完成后，可以直接使用 helm 进行集群容器的安装和卸载。&lt;/p></description></item><item><title>Using Kind to Play with K8s</title><link>https://svtter.cn/p/using-kind-to-play-with-k8s/</link><pubDate>Wed, 12 Jun 2024 11:09:49 +0800</pubDate><guid>https://svtter.cn/p/using-kind-to-play-with-k8s/</guid><description>&lt;p>如果直接使用 kubernetes 的线上版本进行调试，需要资源太多了。使用 minikube 有时候又无法启动集群。
因此，开发者可以考虑使用 &lt;a class="link" href="https://kind.sigs.k8s.io/docs/user/quick-start/" target="_blank" rel="noopener"
>Kind&lt;/a> 来部署测试 Kubernetes。&lt;/p>
&lt;p>This article is about using Kind to create a Kubernetes (K8s) cluster and debug it.&lt;/p>
&lt;p>By default, Kind does not support load balancers. If you want to test your apps, use &lt;code>NodePort&lt;/code> or &lt;code>ClusterIP&lt;/code> instead.&lt;/p>
&lt;p>Source code: &lt;a class="link" href="https://github.com/Svtter/example-code-for-kind" target="_blank" rel="noopener"
>svtter/example-code-for-kind&lt;/a>.&lt;/p>
&lt;h2 id="using-nodeport-to-view-service">Using NodePort to View Service
&lt;/h2>&lt;p>Get the node&amp;rsquo;s IP to visit:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>base&lt;span class="o">)&lt;/span> ➜ cathodic kubectl get nodes -o wide
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind-control-plane Ready control-plane 22h v1.30.0 172.18.0.2 &amp;lt;none&amp;gt; Debian GNU/Linux &lt;span class="m">12&lt;/span> &lt;span class="o">(&lt;/span>bookworm&lt;span class="o">)&lt;/span> 6.1.0-18-amd64 containerd://1.7.15
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>View the service IP:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>base&lt;span class="o">)&lt;/span> ➜ cathodic kubectl get service nginx-service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-service NodePort 10.96.65.77 &amp;lt;none&amp;gt; 80:30160/TCP 26m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, use &lt;code>curl -L http://172.18.0.2:30160&lt;/code> to visit the Nginx service.&lt;/p>
&lt;h2 id="using-loadbalancer">Using LoadBalancer
&lt;/h2>&lt;ul>
&lt;li>Install cloud-provider-kind via this &lt;a class="link" href="https://kind.sigs.k8s.io/docs/user/loadbalancer/" target="_blank" rel="noopener"
>loadbalancer&lt;/a>.&lt;/li>
&lt;li>Start Kind, unlabel the node, and start &lt;code>cloud-provider-kind&lt;/code> according to this &lt;a class="link" href="https://github.com/kubernetes-sigs/cloud-provider-kind?tab=readme-ov-file#install" target="_blank" rel="noopener"
>link&lt;/a>.&lt;/li>
&lt;/ul></description></item></channel></rss>