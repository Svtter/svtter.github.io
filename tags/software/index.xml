<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software on Svtter's Blog</title><link>https://svtter.cn/tags/software/</link><description>Recent content in Software on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 12 May 2024 08:55:42 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Logseq as Documentation</title><link>https://svtter.cn/p/use-logseq-as-documentation/</link><pubDate>Sun, 12 May 2024 08:55:42 +0800</pubDate><guid>https://svtter.cn/p/use-logseq-as-documentation/</guid><description>&lt;p>logseq 是一个非常好用的笔记工具。我们之前已经介绍过关于 logseq 的内容。如果想要了解 logseq，可以看我之前的&lt;a class="link" href="https://svtter.github.io/post/2023-12-18-how-to-use-logseq/" target="_blank" rel="noopener"
>文章&lt;/a>。&lt;/p>
&lt;p>在本文中，我们介绍如何将 logseq 作为软件的、项目的文档，以及为什么。&lt;/p>
&lt;h2 id="why">WHY
&lt;/h2>&lt;p>对于 python 开发者，传统的文档系统有几个，&lt;a class="link" href="https://mkdocs.org" target="_blank" rel="noopener"
>mkdocs&lt;/a>，&lt;a class="link" href="https://https://docs.readthedocs.io/en/stable/" target="_blank" rel="noopener"
>readthedocs&lt;/a>。这些文档系统很好用，可以采用纯文本，通过 git 来管理，并且支持富文本，包括markdown 以及 rst。&lt;/p>
&lt;p>笔者对于开源项目的文档，有几个假设：&lt;/p>
&lt;ol>
&lt;li>开源项目的文档，要放在代码仓库里。&lt;/li>
&lt;li>文档的变更需要能够追溯。我们可以借助 git 实现。&lt;/li>
&lt;li>较好的浏览体验&lt;/li>
&lt;li>开源，以此来保证工具的未来持续可用&lt;/li>
&lt;/ol>
&lt;p>因此，我们选用 logseq 直接作为开源项目的文档，以及文档系统。logseq 能够很好的支持不同的文件同步，以及借助 git 实现历史追溯。添加图片也不是难事。&lt;/p>
&lt;p>使用 logseq 最大的优势在于其双向连接，以及较好的全文搜索。相比之下，mkdocs 以及 readthedocs，虽然功能强大，但是编辑能力相对弱一些。&lt;/p>
&lt;h2 id="howto">HOWTO
&lt;/h2>&lt;p>想要使用 logseq 作为文档系统，只需要在 logseq 中点击添加图谱，然后在 git repository 中，添加到 &lt;code>docs/&lt;/code>目录下即可。&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://svtter.cn/images/logseq-doc.png"
loading="lazy"
alt="logseq-doc.png"
>&lt;/li>
&lt;/ul>
&lt;p>添加完成后，可以单独创建一个&lt;code>[[HOME]]&lt;/code>页面，并且收藏，来让用户能够快速找到 HOME 页。对于其他的开发者，也可以通过双向连接来快速找到想要找到的概念。&lt;/p>
&lt;p>之后，如果开发者需要修改文档，只需要在 logseq 中进行修改，然后提交到 git 中即可。&lt;/p>
&lt;h2 id="结">结
&lt;/h2>&lt;p>本文中我们讨论了如何使用 logseq 作为软件项目的文档，简单描述了使用其作为文档的优越性。&lt;/p>
&lt;p>当然，使用 logseq 也会引入新的问题。最大的问题是，用户如果不使用 logseq，就完全看不到文档了。除此之外，logseq 的页面公开也不是特别方便。
这些问题应该有对应的解决方案。在这里就不赘述了。&lt;/p></description></item><item><title>软件是为什么服务的</title><link>https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%8D%E5%8A%A1%E7%9A%84/</link><pubDate>Tue, 17 Sep 2019 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%8D%E5%8A%A1%E7%9A%84/</guid><description>&lt;p>前一段时间都在忙论文的事情，没有时间更新博客。&lt;/p>
&lt;p>近期又做了不少的工程，对于软件开发又有了许多新的理解。我认为许多刚入行的程序员存在一个对技术的误解，就是: 软件到底是为什么服务的。&lt;/p>
&lt;blockquote>
&lt;p>软件是为使用者服务的。&lt;/p>&lt;/blockquote>
&lt;p>面向开发者的软件才是为开发者服务的。在制作软件的时候，不能觉得“你认为”，而是应该聆听使用者的声音。否则，这个软件开发者就是不专业的。软件开发是一件很有乐趣的事情，但是，当软件存在使用者，使用者付费的时候，软件就不仅仅是一个乐趣了，软件是一个商品。出售商品的开发者要对商品负责任。&lt;/p>
&lt;blockquote>
&lt;p>对于无法明确的点进行争论是没有意义的。&lt;/p>&lt;/blockquote>
&lt;p>在软件开发过程中，总会出现没有办法明确的功能点。有人会说，这是需求调研的问题。也有人会说，这是用户的问题，用户自己都不明确。那我们应该怎么做？做。找一个点先做，这才是专业的。我们开发者在10分钟内无法讨论出一个结果，那么可以先按照一个人的意见来行事。当这个意见出现问题的时候，我们再来纠正这个意见，而不是吵得热火朝天。这样没有意义。&lt;/p>
&lt;p>未完。&lt;/p></description></item></channel></rss>