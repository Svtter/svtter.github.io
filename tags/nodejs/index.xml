<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nodejs on Svtter's Blog</title><link>https://svtter.cn/tags/nodejs/</link><description>Recent content in Nodejs on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 27 Aug 2024 18:04:54 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/nodejs/index.xml" rel="self" type="application/rss+xml"/><item><title>使用一个基础镜像来避免反复安装依赖项</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9D%A5%E9%81%BF%E5%85%8D%E5%8F%8D%E5%A4%8D%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E9%A1%B9/</link><pubDate>Tue, 27 Aug 2024 18:04:54 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9D%A5%E9%81%BF%E5%85%8D%E5%8F%8D%E5%A4%8D%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E9%A1%B9/</guid><description>&lt;p&gt;很多时候，构建 docker 镜像的速度很慢，尤其是当我们的基础依赖发生改变之后。为了解决这个问题，我们应该在实际运行的镜像之前，增加一个 venv 的基础镜像。&lt;/p&gt;
&lt;p&gt;如果我们想要构建一个前端的镜像，那么不可避免的要下载和安装使用 npm 包。我们可以构建一个基础镜像，名称为 &lt;code&gt;frontend-base&lt;/code&gt;。
镜像的内容&lt;code&gt;dockerfile.base&lt;/code&gt;如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-dockerfile" data-lang="dockerfile"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; FROM node:20 as build-stage&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; WORKDIR /app&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; ENV &lt;span class="nv"&gt;ELECTRON_MIRROR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;https://npmmirror.com/mirrors/electron/&amp;#34;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; COPY pnpm-lock.yaml package.json /app/&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; RUN npm install -g pnpm &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pnpm install&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; COPY . .&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt; RUN pnpm run build:vite&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;运行命令构建镜像：&lt;code&gt;docker build -f Dockerfile.base -t svtter/frontend-base:latest .&lt;/code&gt;
如此一来，我们可以构建好一个&lt;code&gt;frontend-base:latest&lt;/code&gt;镜像。
然后，我们再构建&lt;code&gt;frontend:latest&lt;/code&gt;镜像，作为我们实际部署应用的镜像。 &lt;code&gt;dockerfile&lt;/code&gt;是这样的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-dockerfile" data-lang="dockerfile"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# FROM node:20 as build-stage&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;svtter/cathodic-frontend-base:latest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;build-stage&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;/app&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;ELECTRON_MIRROR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;https://npmmirror.com/mirrors/electron/&amp;#34;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="k"&gt;COPY&lt;/span&gt; pnpm-lock.yaml package.json /app/&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; pnpm install&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="k"&gt;COPY&lt;/span&gt; . .&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; pnpm run build:vite&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;nginx:1.25.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;prod&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;&lt;/span&gt;&lt;span class="k"&gt;COPY&lt;/span&gt; --from&lt;span class="o"&gt;=&lt;/span&gt;build-stage /app/src/out /usr/share/nginx/html&lt;span class="err"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意：因为我的代码里使用了 electron，所以为了速度更快，我使用了&lt;code&gt;ELECTRON_MIRROR&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里的构建命令是：&lt;code&gt;docker build -t svtter/frontend:latest .&lt;/code&gt;
这样一来，我们可以避免几个问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果基础的依赖有改变，在 venv 的基础上，pnpm 可以减少 npm 包的反复下载。&lt;/li&gt;
&lt;li&gt;一段时间后，我们可以重新构建 &lt;code&gt;frontend-base&lt;/code&gt;，来减少在 &lt;code&gt;frontend&lt;/code&gt; 中包的下载。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Ghost – wonderful things</title><link>https://svtter.cn/p/ghost-wonderful-things/</link><pubDate>Tue, 19 Apr 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/ghost-wonderful-things/</guid><description>&lt;p&gt;今天一时兴起想使用主机部署Ghost，但是由于主机不能直接部署daocloud的镜像，于是另做决定，尝试一下直接使用docker，结果发现：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;太棒了！这简直是我梦寐以求的！ –沃·兹基硕德&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;部署也是十分的方便，简直不敢相信。此外，居然有我想要的iOS-app，简直不能忍。&lt;/p&gt;
&lt;h2 id="ghost是什么"&gt;Ghost是什么
&lt;/h2&gt;&lt;p&gt;一个博客平台，号称干死WordPress&lt;/p&gt;
&lt;h2 id="如何部署"&gt;如何部署
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;也算是给daocloud写一个广告文了。docker真是好啊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;登陆 &lt;a class="link" href="https://www.daocloud.io/" target="_blank" rel="noopener"
&gt;https://www.daocloud.io/&lt;/a&gt; 注册一个daocloud账号，然后绑定微信 — 这样你就有了&lt;strong&gt;三个容器&lt;/strong&gt;，其中两个我们用于部署ghost，一个用来作为volume（一个分布式存储，用来保存生成的文件，例如主题等）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先我们先配置一下volume，命名为ghost-disk —— 当然，名称并不重要，我想10G的空间应该也不会完全用于ghost的静态文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署新的代码。首先打开应用列表-&amp;gt;创建应用-&amp;gt;daocloud镜像-&amp;gt;ghost。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后看这里就可以了2333 &lt;a class="link" href="https://dashboard.daocloud.io/packages/3a8d7db6-86c6-4ce3-8f44-c880d3b56128" target="_blank" rel="noopener"
&gt;https://dashboard.daocloud.io/packages/3a8d7db6-86c6-4ce3-8f44-c880d3b56128&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="添加disqus多说"&gt;添加disqus，多说
&lt;/h2&gt;&lt;h2 id="添加toc目录大纲"&gt;添加TOC目录大纲
&lt;/h2&gt;&lt;h2 id="分享到微信微博"&gt;分享到微信微博
&lt;/h2&gt;</description></item></channel></rss>