<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lisp on Svtter&#39;s Blog</title>
    <link>https://svtter.cn/tags/lisp/</link>
    <description>Recent content in Lisp on Svtter&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 28 Apr 2017 01:00:00 +0800</lastBuildDate>
    <atom:link href="https://svtter.cn/tags/lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于Common-lisp</title>
      <link>https://svtter.cn/2017/04/28/%E5%85%B3%E4%BA%8Ecommon-lisp/</link>
      <pubDate>Fri, 28 Apr 2017 01:00:00 +0800</pubDate>
      <guid>https://svtter.cn/2017/04/28/%E5%85%B3%E4%BA%8Ecommon-lisp/</guid>
      <description>&lt;p&gt;Common Lisp这门语言是我在大学中感觉第二难的编程语言——第一是汇编，我直到现在都不想碰它。&lt;/p&gt;&#xA;&lt;p&gt;难在何处？第二章开始，一般语言断断续续看，一周也就看完了。但是&lt;code&gt;common lisp&lt;/code&gt;，看了足足一个月——可能也是因为接触起来比较困难，屡次夭折我学习其的兴趣。据说，学了lisp的人都“疯”了，比如冰河先生，王垠先生等。但是对于一个Hacker来言，我想这更加大了这门语言魅力。（注：这个地方的因素有很多；本身lisp是不难的，入门的方式很重要。）&lt;/p&gt;&#xA;&lt;p&gt;在书写代码的时候，总有种感觉，这个地方如果可以这么实现，那么真是爽之又爽。仔细想想，lisp这种加上&lt;code&gt;&#39;&lt;/code&gt;就转变的特性，就是人们所说的lisp可以自己写lisp程序，也就是类似于Java中的反射思想，这十分的诱人。但是相比较lisp，Java以及其他语言想要实现这个特点，可能要写很多代码——这就不符合一个懒人的特点，同样，写的代码越多，出bug的几率越大。&lt;/p&gt;&#xA;&lt;p&gt;想到多少就大概写多少。过去的几天，发现自己突然对于lisp有了更高的理解，对于设计模式【噗嗤】以及lisp函数编程的一些特性也有摸到门框的感觉，十分开心。于是写这篇不足以称为“文章”的博客来略表自己开心的心情。&lt;/p&gt;&#xA;&lt;p&gt;此后，这篇文章中更新学习笔记的内容&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;发现scheme更适合商业化；同时学学&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
