<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Svtter&#39;s Blog</title>
    <link>https://svtter.cn/tags/python/</link>
    <description>Recent content in python on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 28 Sep 2022 08:55:43 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Good Gevent</title>
      <link>https://svtter.cn/post/2022-09-28-good-gevent/</link>
      <pubDate>Wed, 28 Sep 2022 08:55:43 +0800</pubDate>
      
      <guid>https://svtter.cn/post/2022-09-28-good-gevent/</guid>
      <description>Gevent 是一个非常好用的异步工具，能够自动将阻塞的代码转换成非阻塞的代码。
这个功能是通过MonkeyPatch来实现的。
MonkeyPatch通过 Hook 底层的代码库，来实现上层代码无变更，透明的底层实现更改。
在底层，Gevent 使用的库是libev或者libuv，实现了nodejs当年的高性能。
IO模型 如果读者尚未理解非阻塞，那么建议看一下IO的四种模型。分别是：
 同步阻塞 同步非阻塞 IO多路复用 异步IO  在不同场景下选择不同的IO模型，可以有效的利用系统资源，更快的响应用户的请求。
IO slow problem 之所以会有IO问题存在，原因有两个:
 IO 设备的速度慢； 用户态和内核态的转变；  IO 设备速度慢，就要等待 IO 读取。
用户态进程必须通过系统调用，向内核发出指令，才能调用系统资源。 此外，用户态进程进行读写操作的时候，必然涉及到缓冲区。 读写操作不会直接对设备进行。因此，在进行读操作的时候， 系统从设备将数据读取，拷贝到内核缓冲区。用户进程如果想要使用 读取的数据，须从内核缓冲区复制到进程缓冲区。
因此，速度慢了，等待就耗时。</description>
    </item>
    
    <item>
      <title>Two packages in one folder</title>
      <link>https://svtter.cn/post/2022-07-16-2-packages-in-1-folder/</link>
      <pubDate>Sat, 16 Jul 2022 13:06:53 +0800</pubDate>
      
      <guid>https://svtter.cn/post/2022-07-16-2-packages-in-1-folder/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;GitHub link: &lt;a href=&#34;https://github.com/Svtter/2InOne&#34;&gt;https://github.com/Svtter/2InOne&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Crazy Import</title>
      <link>https://svtter.cn/post/2022-05-09-crazy-import/</link>
      <pubDate>Mon, 09 May 2022 14:02:27 +0800</pubDate>
      
      <guid>https://svtter.cn/post/2022-05-09-crazy-import/</guid>
      <description>&lt;p&gt;最近发现 Django settings 在使用的时候，容易出现不经过检查的问题。
因此，想要在 settings 的基础上严格约束一下，减少问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code Tips</title>
      <link>https://svtter.cn/post/2020-06-09-vscode-tips/</link>
      <pubDate>Tue, 09 Jun 2020 11:25:25 +0800</pubDate>
      
      <guid>https://svtter.cn/post/2020-06-09-vscode-tips/</guid>
      <description>&lt;p&gt;又有一段时间没有更新博客啦！这篇文章是&lt;code&gt;vscode&lt;/code&gt;使用技巧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Django 写个过滤器 filter</title>
      <link>https://svtter.cn/2018/11/05/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Mon, 05 Nov 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.cn/2018/11/05/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>用 Django 快速开发一个项目，发现 Django 的模板本身不带有整除功能，因此自己手写一个。
这是目录结构。在 urls.py 添加 app 的名称，例如 app_name = ‘app’ ，然后在与models.py 同级的目录下，新建一个 python 包， templatetags 的，新建自己需要的包名即可。
app_extra.py：
这里因为需求比较简单，因此直接就赋值了 11.
应用到模板中：
随后即可看到结果。
此外，寻得两个比较好用 template 插件实现的东西虽然不多，但是起码把我不想关心的逻辑封装起来了。。</description>
    </item>
    
    <item>
      <title>python functools</title>
      <link>https://svtter.cn/2018/10/21/python-functools/</link>
      <pubDate>Sun, 21 Oct 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.cn/2018/10/21/python-functools/</guid>
      <description>Python functools 一直有个很好的特性，叫做 partial ，片函数，一直都没有使用过。最近通过阅读别人的代码，学会了这一技能，着实好用。
使用 partial，可以把一些固有功能代码做一个整合；
比如我希望一个函数专门做 int2 转换
甚至还可以再过分一点，把 base 变成一个字典量传入。
多使用内建函数 locals，可以极大的减少自己的代码量；真正的 Pythonista，永无止境。
  </description>
    </item>
    
  </channel>
</rss>
