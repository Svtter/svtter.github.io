<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Svtter&#39;s Blog</title>
    <link>https://svtter.github.io/tags/python/</link>
    <description>Recent content in python on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 17 Nov 2022 21:15:09 +0800</lastBuildDate><atom:link href="https://svtter.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use Mirror</title>
      <link>https://svtter.github.io/post/2022-11-17-use-mirror/</link>
      <pubDate>Thu, 17 Nov 2022 21:15:09 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2022-11-17-use-mirror/</guid>
      <description>&lt;p&gt;使用代理。在国内编程，使用代理非常重要。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Good Gevent</title>
      <link>https://svtter.github.io/post/2022-09-28-good-gevent/</link>
      <pubDate>Wed, 28 Sep 2022 08:55:43 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2022-09-28-good-gevent/</guid>
      <description>&lt;p&gt;Gevent 是一个非常好用的异步工具，能够自动将阻塞的代码转换成非阻塞的代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Two packages in one folder</title>
      <link>https://svtter.github.io/post/2022-07-16-2-packages-in-1-folder/</link>
      <pubDate>Sat, 16 Jul 2022 13:06:53 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2022-07-16-2-packages-in-1-folder/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;GitHub link: &lt;a href=&#34;https://github.com/Svtter/2InOne&#34;&gt;https://github.com/Svtter/2InOne&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Crazy Import</title>
      <link>https://svtter.github.io/post/2022-05-09-crazy-import/</link>
      <pubDate>Mon, 09 May 2022 14:02:27 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2022-05-09-crazy-import/</guid>
      <description>&lt;p&gt;最近发现 Django settings 在使用的时候，容易出现不经过检查的问题。
因此，想要在 settings 的基础上严格约束一下，减少问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code Tips</title>
      <link>https://svtter.github.io/post/2020-06-09-vscode-tips/</link>
      <pubDate>Tue, 09 Jun 2020 11:25:25 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2020-06-09-vscode-tips/</guid>
      <description>&lt;p&gt;又有一段时间没有更新博客啦！这篇文章是&lt;code&gt;vscode&lt;/code&gt;使用技巧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Django 写个过滤器 filter</title>
      <link>https://svtter.github.io/2018/11/05/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Mon, 05 Nov 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/11/05/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>用 Django 快速开发一个项目，发现 Django 的模板本身不带有整除功能，因此自己手写一个。
这是目录结构。在 urls.py 添加 app 的名称，例如 app_name = ‘app’ ，然后在与models.py 同级的目录下，新建一个 python 包， templatetags 的，新建自己需要的包名即可。
app_extra.py：
这里因为需求比较简单，因此直接就赋值了 11.
应用到模板中：
随后即可看到结果。
此外，寻得两个比较好用 template 插件
实现的东西虽然不多，但是起码把我不想关心的逻辑封装起来了。。</description>
    </item>
    
    <item>
      <title>Python functools</title>
      <link>https://svtter.github.io/post/2018-10-21-python-functools/</link>
      <pubDate>Sun, 21 Oct 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2018-10-21-python-functools/</guid>
      <description>Python functools包中，有个很好的函数叫做partial ，中文直接翻译为片函数，此前一直都没有使用过。最近通过阅读别人的代码，学会了这一技能，着实好用。
使用partial，可以把一些固有功能代码做一个整合；
比如我希望一个函数专门做 int2 转换
int2 = partial(int, base=2) 甚至还可以再过分一点，把 base 变成一个字典量传入。
多使用内建函数 locals，可以极大的减少自己的代码量；
这不得不让我感概：真正的 Pythonista，永无止境。
def in_func(): a = 2 b = 3 def test(a, b, **args): return a + b print(test(**locals())) CHANGELOG date content 20230829 调整了一些语病 </description>
    </item>
    
    <item>
      <title>批量修改图片大小</title>
      <link>https://svtter.github.io/2017/07/07/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Fri, 07 Jul 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/07/07/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/</guid>
      <description>&lt;p&gt;这两天做数据采集的时候，发现直接获取的数据文件太大了，保存起来占用内存太多，&lt;/p&gt;
&lt;p&gt;手机端又不需要这么大的内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python生成器与协程</title>
      <link>https://svtter.github.io/2017/06/15/python%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Thu, 15 Jun 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/06/15/python%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E5%8D%8F%E7%A8%8B/</guid>
      <description>&lt;p&gt;贴一段代码：&lt;/p&gt;
&lt;p&gt;这段代码分别是用协程与生成器写的；&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python-logging模块</title>
      <link>https://svtter.github.io/2017/06/09/python-logging%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 09 Jun 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/06/09/python-logging%E6%A8%A1%E5%9D%97/</guid>
      <description>logging 是 python 自带的日志模块，用于收集并且导出日志。
要想使用好logging，需要明确几个概念：
1. logger logger 可以理解成输出日志的核心变量。 通过 logger，可以输出 warning, info, debug, critical 等类型的日志。
handler handler 处理器，是把内存中 logger 的日志导向不同的输出。 例如文件、邮件、stdout 等。
formatter 用于规范化日志的结构，补充日志的元信息。
filtter 用于 logger 中日志的过滤。</description>
    </item>
    
    <item>
      <title>Python-使用hexo的python脚本</title>
      <link>https://svtter.github.io/post/2014-11-19-python-%E4%BD%BF%E7%94%A8hexo%E7%9A%84python%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Wed, 19 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2014-11-19-python-%E4%BD%BF%E7%94%A8hexo%E7%9A%84python%E8%84%9A%E6%9C%AC/</guid>
      <description>为了简化blog的使用写的python脚本，用来简化自己的操作= =
更新了一下。
最新的代码在coding.net上</description>
    </item>
    
  </channel>
</rss>
