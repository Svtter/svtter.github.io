<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gcc on Svtter&#39;s Blog</title>
    <link>http://192.168.2.39:1313/tags/gcc/</link>
    <description>Recent content in Gcc on Svtter&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 16 Nov 2014 01:00:00 +0800</lastBuildDate>
    <atom:link href="http://192.168.2.39:1313/tags/gcc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用gdb调试</title>
      <link>http://192.168.2.39:1313/2014/11/16/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95/</link>
      <pubDate>Sun, 16 Nov 2014 01:00:00 +0800</pubDate>
      <guid>http://192.168.2.39:1313/2014/11/16/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95/</guid>
      <description>最近都是用gcc+vim写代码，昨天突然写个代码算法出个逻辑bug，因为用了大量递归调用，DEB半天出不来也是醉了，于是&#xA;学习一下gdb——之前也是勉强使用过，但是明显感觉不爽阿。。所以这次好好学习，记录一下。&#xA;目前我能用到的几个命令：&#xA;选择调试文件 &amp;lt;shell&amp;gt;: gdb &amp;lt;file&amp;gt; 或者进入gdb以后，使用 断点 显示断点 (gdb): info break 添加静态断点 (gdb): b[reak] + 行数/函数名 (可以用tab补全) 添加条件断点 条件为真，则在断点处停止&#xA;– (gdb): b addr if condition&#xA;删除断点 删除编号为1的断点, 如果不加参数，会删除所有断点&#xA;– (gdb): delete breakpoint 1&#xA;启用/禁用断点 (gdb): disable breakpoint 1 (gdb): enable breakpoint 1 运行 开始运行 (gdb):r 继续 (gdb):c 单步调试 不进入单步执行&#xA;– (gdb):n&#xA;进入的单步&#xA;– (gdb):s[tep&#xA;显示变量 以变量为var为例&#xA;输出var的值 (gdb):p var 输出上一个求得值 (gdb):p 输出历史记录中值 (gdb):p $[num] 输出变量的类型 (gdb):whatis p 调用函数 (gdb):p add(a, b) 数组 输出a后面的十个元素</description>
    </item>
  </channel>
</rss>
