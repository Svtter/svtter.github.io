<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gcc on Svtter's Blog</title><link>https://svtter.cn/tags/gcc/</link><description>Recent content in Gcc on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 16 Nov 2014 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/gcc/index.xml" rel="self" type="application/rss+xml"/><item><title>使用gdb调试</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95/</link><pubDate>Sun, 16 Nov 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95/</guid><description>&lt;p&gt;最近都是用gcc+vim写代码，昨天突然写个代码算法出个逻辑bug，因为用了大量递归调用，DEB半天出不来也是醉了，于是&lt;/p&gt;
&lt;p&gt;学习一下gdb——之前也是勉强使用过，但是明显感觉不爽阿。。所以这次好好学习，记录一下。&lt;/p&gt;
&lt;p&gt;目前我能用到的几个命令：&lt;/p&gt;
&lt;h1 id="选择调试文件"&gt;选择调试文件
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;shell&amp;gt;: gdb &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或者进入gdb以后，使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="断点"&gt;断点
&lt;/h1&gt;&lt;h2 id="显示断点"&gt;显示断点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb): info break&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="添加静态断点"&gt;添加静态断点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb): b[reak] + 行数/函数名 (可以用tab补全)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="添加条件断点"&gt;添加条件断点
&lt;/h2&gt;&lt;p&gt;条件为真，则在断点处停止&lt;/p&gt;
&lt;p&gt;– &lt;code&gt;(gdb): b addr if condition&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="删除断点"&gt;删除断点
&lt;/h2&gt;&lt;p&gt;删除编号为1的断点, 如果不加参数，会删除所有断点&lt;/p&gt;
&lt;p&gt;– &lt;code&gt;(gdb): delete breakpoint 1&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="启用禁用断点"&gt;启用/禁用断点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb): disable breakpoint 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(gdb): enable breakpoint 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="运行"&gt;运行
&lt;/h1&gt;&lt;h2 id="开始运行"&gt;开始运行
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb):r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="继续"&gt;继续
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb):c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="单步调试"&gt;单步调试
&lt;/h2&gt;&lt;p&gt;不进入单步执行&lt;/p&gt;
&lt;p&gt;– &lt;code&gt;(gdb):n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进入的单步&lt;/p&gt;
&lt;p&gt;– &lt;code&gt;(gdb):s[tep&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="显示变量"&gt;显示变量
&lt;/h1&gt;&lt;p&gt;以变量为var为例&lt;/p&gt;
&lt;h2 id="输出var的值"&gt;输出var的值
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb):p var&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="输出上一个求得值"&gt;输出上一个求得值
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb):p&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="输出历史记录中值"&gt;输出历史记录中值
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb):p $[num]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="输出变量的类型"&gt;输出变量的类型
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb):whatis p&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="调用函数"&gt;调用函数
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb):p add(a, b)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="数组"&gt;数组
&lt;/h2&gt;&lt;p&gt;输出a后面的十个元素&lt;/p&gt;
&lt;p&gt;– &lt;code&gt;(gdb):p a@10&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="设置运行参数"&gt;设置运行参数
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(gdb):set args -b -x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(gdb):show args&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参见大牛的部分：(陈皓的gdb讲解)[http://blog.csdn.net/haoel/article/details/2880]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二、设置观察点（WatchPoint）&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;观察点一般来观察某个表达式（变量也是一种表达式）的值是否有变化了，如果有变化，马上停住程序。我们有下面的几种方法来设置观察点：
watch &amp;lt;expr&amp;gt;
为表达式（变量）expr设置一个观察点。一量表达式值有变化时，马上停住程序。
rwatch &amp;lt;expr&amp;gt;
当表达式（变量）expr被读时，停住程序。
awatch &amp;lt;expr&amp;gt;
当表达式（变量）的值被读或被写时，停住程序。
info watchpoints
列出当前所设置了的所有观察点。
&lt;/pre&gt;
&lt;/div&gt;
&lt;h1 id="tag"&gt;TAG
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;直接输入&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;，执行上一条命令&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>