<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Leetcode on Svtter's Blog</title><link>https://svtter.cn/tags/leetcode/</link><description>Recent content in Leetcode on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 20 Aug 2018 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/leetcode/index.xml" rel="self" type="application/rss+xml"/><item><title>leetcode 相交链表</title><link>https://svtter.cn/p/leetcode-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</link><pubDate>Mon, 20 Aug 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/leetcode-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</guid><description>&lt;p>这是&lt;code>leetcode&lt;/code>的解题报告。&lt;code>ARTS&lt;/code>很想加入，但是因为自己懒，本身也做了这些事情，因此就一直都在拖，希望这周能够搞定。&lt;/p>
&lt;h2 id="origin">origin
&lt;/h2>&lt;p>from &lt;a class="link" href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-medium/31/linked-list/84/" target="_blank" rel="noopener"
>leetcode&lt;/a>&lt;/p>
&lt;h2 id="road">road
&lt;/h2>&lt;p>相交链表，两个指针分别遍历两个链表即可，具体可以画图来表示，两个链表，一个长度为 a+c，另一个长度为 b+c，两个指针势必会在 a+b+c 的位置相遇。&lt;/p>
&lt;h2 id="solution">solution
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="cm">/**&lt;/span>
&lt;span class="cm"> * Definition for singly-linked list.&lt;/span>
&lt;span class="cm"> * struct ListNode {&lt;/span>
&lt;span class="cm"> * int val;&lt;/span>
&lt;span class="cm"> * ListNode *next;&lt;/span>
&lt;span class="cm"> * ListNode(int x) : val(x), next(NULL) {}&lt;/span>
&lt;span class="cm"> * };&lt;/span>
&lt;span class="cm"> */&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">ListNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">getIntersectionNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ListNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">headA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ListNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">headB&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">ListNode&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">w1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">w2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">w1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">headA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">w2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">headB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">w1&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">w2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">w1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">w2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">w1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">w1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">headB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="n">w1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">w1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">w2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">w2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">headA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="n">w2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">w2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">w1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/pre>
&lt;/div></description></item></channel></rss>