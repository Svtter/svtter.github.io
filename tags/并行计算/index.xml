<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>并行计算 on Svtter's Blog</title><link>https://svtter.cn/tags/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/</link><description>Recent content in 并行计算 on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 08 Nov 2014 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/index.xml" rel="self" type="application/rss+xml"/><item><title>n种方法实现并行枚举排序</title><link>https://svtter.cn/2014/11/08/n%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%B9%B6%E8%A1%8C%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%BA%8F/</link><pubDate>Sat, 08 Nov 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/2014/11/08/n%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%B9%B6%E8%A1%8C%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%BA%8F/</guid><description>&lt;p>这篇文章一直没有写，因为并行计算的报告写的比较潦草。此外，没有实现fork。&lt;/p>
&lt;p>文件的源代码贴在 &lt;a class="link" href="https://github.com/Svtter/workspace/tree/master/parallel/enum_sort" target="_blank" rel="noopener"
>https://github.com/Svtter/workspace/tree/master/parallel/enum_sort&lt;/a>&lt;/p>
&lt;p>实现了Java, MPI, openmp, pthread, win32, MFC, .NET 的并行枚举排序，测试机是双核四线程的ThinkpadE430.&lt;/p>
&lt;p>MPI的环境是archlinux . openmpi&lt;/p>
&lt;p>贴一个MPI的源代码, 运行结果都在源代码对应的文件夹中保存，这里就不贴了。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="cm">/*=============================================================================&lt;/span>
&lt;span class="cm">#&lt;/span>
&lt;span class="cm"># Author: svtter - svtter@qq.com&lt;/span>
&lt;span class="cm">#&lt;/span>
&lt;span class="cm"># QQ : 57180160&lt;/span>
&lt;span class="cm">#&lt;/span>
&lt;span class="cm"># Last modified: 2014-11-02 17:08&lt;/span>
&lt;span class="cm">#&lt;/span>
&lt;span class="cm"># Filename: enum_sort_MPI.cpp&lt;/span>
&lt;span class="cm">#&lt;/span>
&lt;span class="cm"># Description: &lt;/span>
&lt;span class="cm">#&lt;/span>
&lt;span class="cm">=============================================================================*/&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">"mpi.h"&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;math.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/time.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;time.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">using&lt;/span> &lt;span class="n">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="cp">#define MAXN 10000&lt;/span>
&lt;span class="cp">#define PMAX 1000&lt;/span>
&lt;span class="kr">void&lt;/span> &lt;span class="nf">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kr">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">srand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">MAXN&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">random&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">PMAX&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//serial enum sort&lt;/span>
&lt;span class="kr">double&lt;/span> &lt;span class="nf">serial_enum_sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kr">int&lt;/span> &lt;span class="n">at&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kr">double&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MPI_Wtime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">int&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">MAXN&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">MAXN&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;&amp;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">k&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">at&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">t2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MPI_Wtime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">t2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 用于调试数组&lt;/span>
&lt;span class="kr">void&lt;/span> &lt;span class="nf">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kr">int&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">"%5d"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">"&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">"&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">at&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">bt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kr">void&lt;/span> &lt;span class="nf">ensort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">int&lt;/span> &lt;span class="n">rank&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kr">int&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">myid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">int&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">numprocs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kr">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">myid&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">MAXN&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="n">numprocs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">MAXN&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;&amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="n">k&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">rank&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kr">int&lt;/span> &lt;span class="n">myid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numprocs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">int&lt;/span> &lt;span class="n">namelen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">char&lt;/span> &lt;span class="n">processor_name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MPI_MAX_PROCESSOR_NAME&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kr">double&lt;/span> &lt;span class="n">c1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">double&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">end&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">MPI_Init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">MPI_Comm_rank&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MPI_COMM_WORLD&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">myid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">MPI_Comm_size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MPI_COMM_WORLD&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">numprocs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">MPI_Get_processor_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processor_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">namelen&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// fprintf(stderr, "Hello world! Processor %d of %d on %s\n", myid, numprocs, processor_name);&lt;/span>
&lt;span class="c1">//serial&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">c1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">serial_enum_sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">at&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">"original array is: "&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">"serial sorted array is: "&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">"serial cost time is: "&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">c1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">int&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">numprocs&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">MAXN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kr">int&lt;/span> &lt;span class="n">pt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">con&lt;/span> &lt;span class="p">,&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">con&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pt&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pt&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// int **con = new int*[numprocs];&lt;/span>
&lt;span class="c1">// for(int i = 0; i &amp;lt; numprocs; i++)&lt;/span>
&lt;span class="c1">// con[i] = new int[MAXN+10];&lt;/span>
&lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MPI_Wtime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// P0 send b to ALL&lt;/span>
&lt;span class="n">MPI_Bcast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MPI_INT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MPI_COMM_WORLD&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">ensort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">myid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numprocs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Gather&lt;/span>
&lt;span class="n">MPI_Gather&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MPI_INT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">con&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">myid&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">MAXN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MPI_INT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MPI_COMM_WORLD&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// if(myid == 0)&lt;/span>
&lt;span class="c1">// {&lt;/span>
&lt;span class="c1">// fprintf(stderr, "myid: %d\n", myid);&lt;/span>
&lt;span class="c1">// fprintf(stderr, "con: %d\n", myid);&lt;/span>
&lt;span class="c1">// debug(con[1], 100);&lt;/span>
&lt;span class="c1">// fprintf(stderr, "pt: %d\n", myid);&lt;/span>
&lt;span class="c1">// debug(pt, 100);&lt;/span>
&lt;span class="c1">// fprintf(stderr, "\n");&lt;/span>
&lt;span class="c1">// }&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kr">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// for(i = 0; i &amp;lt; numprocs; i++)&lt;/span>
&lt;span class="c1">// {&lt;/span>
&lt;span class="c1">// printf("i: %d\n", i);&lt;/span>
&lt;span class="c1">// for(j = 1; j &amp;lt;= MAXN; j++)&lt;/span>
&lt;span class="c1">// printf("%5d", con[i][j]);&lt;/span>
&lt;span class="c1">// puts("");&lt;/span>
&lt;span class="c1">// }&lt;/span>
&lt;span class="c1">// rank[k] = i&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">numprocs&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">MAXN&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">bt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">con&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="c1">// fprintf(stderr, "bt: \n");&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">"parallel sorted array is: "&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MPI_Wtime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">c2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">end&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">"parallel cost time is: %lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">"加速比为： %lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">c2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// for(i = 0; i &amp;lt; numprocs; i++)&lt;/span>
&lt;span class="c1">// delete con[i];&lt;/span>
&lt;span class="c1">// delete con;&lt;/span>
&lt;span class="n">MPI_Finalize&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>并行计算非常有趣，有时间肯定会再在这条道路上探寻…&lt;/p></description></item></channel></rss>