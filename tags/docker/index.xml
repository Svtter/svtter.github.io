<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Svtter's Blog</title><link>https://svtter.cn/tags/docker/</link><description>Recent content in Docker on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 15 Jun 2025 16:43:47 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Registry for Personal Docker Images</title><link>https://svtter.cn/p/docker-registry-for-personal-docker-images/</link><pubDate>Sun, 15 Jun 2025 16:43:47 +0800</pubDate><guid>https://svtter.cn/p/docker-registry-for-personal-docker-images/</guid><description>&lt;p>这篇文章中我尝试一种新的形式，自己主要提出问题，答案由 gpt 回答和撰写。另外，我会初步审核一下 gpt 回复的内容。&lt;/p>
&lt;h2 id="亚马逊与-docker-镜像存储服务对比相关问题">亚马逊与 Docker 镜像存储服务对比相关问题
&lt;/h2>&lt;ol>
&lt;li>亚马逊美国Serverless服务器的价格是多少？&lt;/li>
&lt;li>亚马逊私有Docker Registry（如ECR）的价格是多少？&lt;/li>
&lt;li>Docker个人用户一个月的使用费用是多少？&lt;/li>
&lt;li>Docker个人版和其他付费版本（专业版、团队版、商业版）的区别是什么？&lt;/li>
&lt;li>对比亚马逊ECR和Docker Hub提供的镜像存储服务，用于存储即将过期的镜像及未来通过Docker Image部署函数服务。&lt;/li>
&lt;/ol>
&lt;h2 id="keypoints">Keypoints
&lt;/h2>&lt;ul>
&lt;li>使用 Amazon 可以让其他服务，例如 serverless 在不使用外部流量的前提下来获取 docker image.&lt;/li>
&lt;/ul>
&lt;h2 id="answer-by-gpt-doubao">Answer by GPT (doubao)
&lt;/h2>&lt;p>豆包：&lt;/p>
&lt;h3 id="亚马逊与-docker-镜像存储服务对比文档">亚马逊与 Docker 镜像存储服务对比文档
&lt;/h3>&lt;h4 id="一服务概述">&lt;strong>一、服务概述&lt;/strong>
&lt;/h4>&lt;pre>&lt;code>1. **亚马逊ECR（Elastic Container Registry）**
&lt;/code>&lt;/pre>
&lt;p>亚马逊 AWS 提供的托管 Docker 镜像存储服务，深度集成 AWS 生态（如 Lambda、ECS、EC2 等），支持私有和公共镜像仓库，具备高可用性和安全管控能力。&lt;/p>
&lt;pre>&lt;code>2. **Docker Hub**
&lt;/code>&lt;/pre>
&lt;p>Docker 官方提供的镜像存储服务，分为公共仓库和私有仓库，面向个人及企业用户，支持全球镜像分发和社区共享。&lt;/p>
&lt;h4 id="二核心功能对比">&lt;strong>二、核心功能对比&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>对比维度&lt;/strong>&lt;/th>
&lt;th>&lt;strong>亚马逊 ECR&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Docker Hub&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>存储类型&lt;/strong>&lt;/td>
&lt;td>私有仓库为主（支持公共仓库，但需手动配置）&lt;/td>
&lt;td>公共仓库免费，私有仓库需付费升级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>集成能力&lt;/strong>&lt;/td>
&lt;td>深度集成 AWS 服务（Lambda/ECS/CodePipeline）&lt;/td>
&lt;td>支持与 Docker Desktop、CI/CD 工具通用集成&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>安全性&lt;/strong>&lt;/td>
&lt;td>- 支持 AWS IAM 权限控制、加密（KMS）&lt;/td>
&lt;td>- 基础安全扫描（付费版增强）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 镜像签名、漏洞扫描（需配合 AWS Inspector）&lt;/td>
&lt;td>- 企业版支持 SSO、团队权限管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>全球分发&lt;/strong>&lt;/td>
&lt;td>多区域部署，自动复制镜像到指定区域&lt;/td>
&lt;td>全球镜像缓存节点，加速拉取&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>构建与自动化&lt;/strong>&lt;/td>
&lt;td>支持与 CodeBuild 集成，自动构建镜像&lt;/td>
&lt;td>支持 Docker Cloud 自动构建（付费版）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>免费额度&lt;/strong>&lt;/td>
&lt;td>- 新用户首年 500MB 私有存储/月&lt;/td>
&lt;td>- 公共仓库无限，私有仓库免费版仅 1 个仓库&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>过期镜像管理&lt;/strong>&lt;/td>
&lt;td>需手动配置生命周期策略（删除旧版本镜像）&lt;/td>
&lt;td>付费版支持镜像过期策略设置&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="三费用对比以美国地区为例">&lt;strong>三、费用对比（以美国地区为例）&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>服务项&lt;/strong>&lt;/th>
&lt;th>&lt;strong>亚马逊 ECR&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Docker Hub&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>存储费用&lt;/strong>&lt;/td>
&lt;td>- 超出 500MB 后：0.1 美元/GB/月&lt;/td>
&lt;td>- 私有仓库：专业版 5 美元/月起（含 2GB 存储）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>数据传输&lt;/strong>&lt;/td>
&lt;td>- 同区域内 AWS 服务间传输免费&lt;/td>
&lt;td>- 公共仓库拉取免费，私有仓库按流量计费&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>镜像拉取限制&lt;/strong>&lt;/td>
&lt;td>无明确限制（按需付费）&lt;/td>
&lt;td>- 免费版：匿名用户每 6 小时 100 次拉取&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>- 专业版：5000 次/天，团队版无限制&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="四适用场景建议">&lt;strong>四、适用场景建议&lt;/strong>
&lt;/h4>&lt;pre>&lt;code>1. **选择亚马逊ECR的场景**
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>已使用 AWS 生态&lt;/strong>：如计划通过 Lambda 部署函数服务，ECR 可直接与 Lambda 集成，简化部署流程，无需额外配置网络或认证。&lt;/p>
&lt;p>&lt;strong>高安全需求&lt;/strong>：依赖 AWS IAM 权限体系，需镜像加密、细粒度访问控制（如仅限特定 AWS 账号访问）。&lt;/p>
&lt;p>&lt;strong>多区域部署&lt;/strong>：需将镜像自动同步到不同 AWS 区域，降低函数服务部署的网络延迟。&lt;/p>
&lt;pre>&lt;code>2. **选择Docker Hub的场景**
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>轻量级个人/团队项目&lt;/strong>：公共仓库适合开源协作，私有仓库专业版（5 美元/月）性价比高，适合小规模镜像存储。&lt;/p>
&lt;p>&lt;strong>跨平台兼容性&lt;/strong>：不依赖特定云服务商，支持本地开发与多云部署（如 AWS、Azure、GCP）。&lt;/p>
&lt;p>&lt;strong>社区资源依赖&lt;/strong>：需直接拉取社区公共镜像（如官方 Docker 镜像），或需要通过 Docker CLI 快速管理镜像。&lt;/p>
&lt;h4 id="五针对函数服务部署的建议">&lt;strong>五、针对函数服务部署的建议&lt;/strong>
&lt;/h4>&lt;pre>&lt;code>1. **当前过期镜像存储**
&lt;/code>&lt;/pre>
&lt;p>若镜像用于 AWS Lambda，优先选择 ECR，可通过生命周期策略自动清理旧版本，避免冗余存储费用。&lt;/p>
&lt;p>若镜像为通用型（非 AWS 专属），Docker Hub 专业版可设置私有仓库存储，并标记过期镜像为“存档”状态，节省空间。&lt;/p>
&lt;pre>&lt;code>2. **未来函数服务部署**
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>AWS Lambda 集成&lt;/strong>：使用 ECR 存储镜像，通过 Lambda 控制台直接关联 ECR 仓库，实现代码更新自动部署（需配置 CodePipeline 触发器）。&lt;/p>
&lt;p>&lt;strong>跨云或本地部署&lt;/strong>：Docker Hub 私有仓库配合 Docker Compose 或 Kubernetes，支持多环境一致性部署，适合需要灵活迁移的场景。&lt;/p>
&lt;h4 id="六总结">&lt;strong>六、总结&lt;/strong>
&lt;/h4>&lt;p>&lt;strong>亚马逊 ECR&lt;/strong>：适合深度绑定 AWS 的企业级用户，安全与集成能力强，费用按存储和流量按需计算。&lt;/p>
&lt;p>&lt;strong>Docker Hub&lt;/strong>：适合个人开发者、中小团队或跨云场景，付费版功能均衡，性价比高。
根据您的需求（存储过期镜像+函数服务部署），若已使用 AWS 生态，ECR 是更优选择；若追求通用性和成本控制，Docker Hub 专业版可满足基础需求。&lt;/p></description></item><item><title>Heroku 的开源平替</title><link>https://svtter.cn/p/heroku-%E7%9A%84%E5%BC%80%E6%BA%90%E5%B9%B3%E6%9B%BF/</link><pubDate>Tue, 06 May 2025 21:49:42 +0800</pubDate><guid>https://svtter.cn/p/heroku-%E7%9A%84%E5%BC%80%E6%BA%90%E5%B9%B3%E6%9B%BF/</guid><description>&lt;img src="https://svtter.cn/p/heroku-%E7%9A%84%E5%BC%80%E6%BA%90%E5%B9%B3%E6%9B%BF/bg.png" alt="Featured image of post Heroku 的开源平替" />&lt;p>近期出现了大量的 heroku 平替。这些替代品或多或少的支持了各种大型企业在内部构建自己的 PaaS 平台。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.heroku.com/" target="_blank" rel="noopener"
>Heroku&lt;/a> 是一个用于 PaaS (Platform as a Service)，可以用于快速部署应用系统，平台的技术负责人是 Ruby 编程语言的创造者松本行弘。母公司是 Salesforce。&lt;/p>
&lt;p>PaaS 最大的好处就是不用自己考虑太多操作系统的事情，节省了运维的时间。而且如果配置得当，还能获得较好的监控等系统。&lt;/p>
&lt;ul>
&lt;li>基于 Docker 的替代品如下：
&lt;ul>
&lt;li>dokku star: 30.4k&lt;/li>
&lt;li>coolify star: 40.9k&lt;/li>
&lt;li>dokploy star: 19.8k&lt;/li>
&lt;li>tsuru star: 5.1k&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>之所以这些平台如雨后春笋，可能是因为 docker 的崛起，虚拟机管理变成了容器管理，而且有了相对简单的接口，人们可以在这个基础上进行二次开发。
我目前使用的是 coolify，感觉还不错。但是近期似乎没有怎么更新。我也在考虑使用更加方便的系统。
从稳定性上看，coolify 的稳定性是基于 docker 稳定性的，所以不用太担心 web 访问的问题。&lt;/p>
&lt;ul>
&lt;li>基于 kubernetes 的工具也不少。
&lt;ul>
&lt;li>例如 &lt;a class="link" href="https://docs.lagoon.sh/installing-lagoon/install-harbor/" target="_blank" rel="noopener"
>lagoon&lt;/a>；
&lt;ul>
&lt;li>依赖 harbor&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Kubernetes 上的系统部署会相对麻烦一些，需要配置多个组件。如果支持 helm chart，部署还会方便一些。&lt;/li>
&lt;/ul>
&lt;p>最后，经验之谈，基于 golang 的开源项目往往质量相对会高一些。（但不绝对）。&lt;/p></description></item><item><title>Config devcontainer.md</title><link>https://svtter.cn/p/config-devcontainer.md/</link><pubDate>Wed, 26 Mar 2025 20:17:47 +0800</pubDate><guid>https://svtter.cn/p/config-devcontainer.md/</guid><description>&lt;img src="https://svtter.cn/p/config-devcontainer.md/image.png" alt="Featured image of post Config devcontainer.md" />&lt;p>有时候，尽管我们启动一个 docker 环境可以执行代码，但是 vscode 补全未能生效。&lt;/p>
&lt;p>这是由于相关的库都在 container 中，我们 vscode 一般是运行在 host os 上。&lt;/p>
&lt;p>为了解决这个问题，我们可以在项目根目录下，使用 docker-compose.yml 来创建一个开发环境。&lt;/p>
&lt;p>然后，创建一个&lt;code>.devcontainer/devcontainer.json&lt;/code>文件。&lt;/p>
&lt;p>例如，如果你要开发 python 的程序，可以使用下面的 &lt;code>.devcontainer/devcontainer.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;MyPython&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;dockerComposeFile&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;../docker-compose.yml&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;service&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;notebook&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">service&lt;/span> &lt;span class="err">in&lt;/span> &lt;span class="err">your&lt;/span> &lt;span class="err">docker-compose.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;workspaceFolder&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/app&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;shutdownAction&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;none&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;customizations&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;vscode&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;extensions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-python.python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-azuretools.vscode-docker&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;tamasfe.even-better-toml&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;charliermarsh.ruff&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-python.black-formatter&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-toolsai.jupyter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如此一来，就可以启动一个安装好相关环境的『子』系统了。&lt;/p>
&lt;p>深入阅读：&lt;a class="link" href="https://blog.roboflow.com/nvidia-docker-vscode-pytorch/#installing-docker-for-machine-learning" target="_blank" rel="noopener"
>Develop like a Pro with NVIDIA + Docker + VS Code + PyTorch&lt;/a>。&lt;/p></description></item><item><title>A Docker Image for Computer Vision</title><link>https://svtter.cn/p/a-docker-image-for-computer-vision/</link><pubDate>Wed, 26 Mar 2025 19:57:22 +0800</pubDate><guid>https://svtter.cn/p/a-docker-image-for-computer-vision/</guid><description>&lt;img src="https://svtter.cn/p/a-docker-image-for-computer-vision/image.png" alt="Featured image of post A Docker Image for Computer Vision" />&lt;p>我们在调试深度学习代码的时候，经常会因为环境的问题而头痛。&lt;/p>
&lt;p>为了方便调试，把 pytorch cuda 等环境打成 docker image 是一个很不错的选择。&lt;/p>
&lt;h2 id="为什么">为什么？
&lt;/h2>&lt;ul>
&lt;li>时间节省：反复配置和调整版本会浪费时间，导致花费大量的时间在 ops 的工作上。&lt;/li>
&lt;li>环境稳定：docker image 构建之后是静态的，直接拉取即可。&lt;/li>
&lt;li>迁移方便：可以在不同机器上迁移已经配置好的环境&lt;/li>
&lt;/ul>
&lt;h2 id="如何构建">如何构建
&lt;/h2>&lt;p>这是一个 Docker Image 示例，用于将深度学习环境打包：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 可以改成你需要的 pytorch 版本&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> pytorch/pytorch:2.4.1-cuda11.8-cudnn9-devel&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 这些是常用的包&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install git zsh ffmpeg libsm6 libxext6 -y &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get clean &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm -rf /var/lib/apt/lists/*&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 放在代码库的根目录下，可以安装 requirements.txt&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> requirements.txt .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip install -r requirements.txt&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># install jupyterlab&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip install jupyterlab&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># COPY . .&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 使用 jupyterlab 托管，可以快速启动，token 是`yourtoken`。如果你在公网使用，要考虑使用更复杂的 token。&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;jupyter&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lab&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--ip=0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--port=8888&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--no-browser&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--allow-root&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--NotebookApp.token=yourtoken&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个示例安装了一些基础的类库，通过 pip 即可安装 &lt;code>opencv-python&lt;/code>。&lt;/p>
&lt;p>将&lt;code>Dockerfile&lt;/code>放在目录下，然后可以使用&lt;code>docker compose&lt;/code>启动。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">notebook&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">dockerfile&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 还可以挂载自己需要的 dataset&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">.:/app&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">~/.ssh:/root/.ssh&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 支持 ssh&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">8888&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8888&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">shm_size&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;32gb&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reservations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">devices&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">driver&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nvidia&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">count&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">all&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">capabilities&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">gpu]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动命令是：&lt;code>docker compose up -d&lt;/code>.&lt;/p>
&lt;h2 id="从-dockerhub-上下载">从 Dockerhub 上下载
&lt;/h2>&lt;p>为了方便大家直接使用，我将这个镜像打包，并且上传到了 dockerhub。下载命令是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker pull svtter/debian-pytorch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>源代码可以从这里获得：&lt;/p>
&lt;script src="https://tarptaeya.github.io/repo-card/repo-card.js">&lt;/script>
&lt;!-- inside body, where you want to create the card -->
&lt;div class="repo-card" data-repo="Svtter/debian-pytorch">&lt;/div></description></item><item><title>Create a Never Stop Container.md</title><link>https://svtter.cn/p/create-a-never-stop-container.md/</link><pubDate>Fri, 14 Mar 2025 16:45:58 +0800</pubDate><guid>https://svtter.cn/p/create-a-never-stop-container.md/</guid><description>&lt;img src="https://svtter.cn/p/create-a-never-stop-container.md/background.png" alt="Featured image of post Create a Never Stop Container.md" />&lt;p>有时候我们需要启动一个不停止的容器，来调试我们的应用，或者使用 devcontainer。&lt;/p>
&lt;p>如果我们想在 &lt;code>Dockerfile&lt;/code> 中完成这个事情，我们可以添加这个&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="line">&lt;span class="cl">...&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 其他内容&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;tail&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-f&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;/dev/null&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果是 &lt;code>docker-compose.yml&lt;/code>，我们可以这样做&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">your-app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">entrypoint&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;tail&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-f&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/dev/null&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如此一来，这个容器就不会停止了。&lt;/p></description></item><item><title>Compile Latex Local.md</title><link>https://svtter.cn/p/compile-latex-local.md/</link><pubDate>Mon, 17 Feb 2025 16:39:50 +0800</pubDate><guid>https://svtter.cn/p/compile-latex-local.md/</guid><description>&lt;p>我们有时候希望在本地而不是 overleaf 上编译 latex 文件。这篇文章提供了一个方法。&lt;/p>
&lt;p>我们可以用 Docker 来构建一个编译环境。Dockerfile 如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 使用 TeXLive 官方镜像作为基础镜像&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> texlive/texlive:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 安装必要的包&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> make &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> git &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm -rf /var/lib/apt/lists/*&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 设置工作目录&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /paper&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 复制论文源文件到容器中&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 设置默认命令&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;latexmk&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-pdf&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;0_main.tex&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>构建镜像：&lt;code>docker build -t paper .&lt;/code>&lt;/li>
&lt;li>构建PDF: &lt;code>docker run --rm -v $(pwd):/paper paper&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>构建命令可以自己修改。比如你的主文件是&lt;code>main.tex&lt;/code>，就可以修改成&lt;code>CMD [&amp;quot;latexmk&amp;quot;, &amp;quot;-pdf&amp;quot;, &amp;quot;0_main.tex&amp;quot;]&lt;/code>。&lt;/p></description></item><item><title>使用一个基础镜像来避免反复安装依赖项</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9D%A5%E9%81%BF%E5%85%8D%E5%8F%8D%E5%A4%8D%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E9%A1%B9/</link><pubDate>Tue, 27 Aug 2024 18:04:54 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9D%A5%E9%81%BF%E5%85%8D%E5%8F%8D%E5%A4%8D%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E9%A1%B9/</guid><description>&lt;p>很多时候，构建 docker 镜像的速度很慢，尤其是当我们的基础依赖发生改变之后。为了解决这个问题，我们应该在实际运行的镜像之前，增加一个 venv 的基础镜像。&lt;/p>
&lt;p>如果我们想要构建一个前端的镜像，那么不可避免的要下载和安装使用 npm 包。我们可以构建一个基础镜像，名称为 &lt;code>frontend-base&lt;/code>。
镜像的内容&lt;code>dockerfile.base&lt;/code>如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl"> FROM node:20 as build-stage&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> WORKDIR /app&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> ENV &lt;span class="nv">ELECTRON_MIRROR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://npmmirror.com/mirrors/electron/&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> COPY pnpm-lock.yaml package.json /app/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> RUN npm install -g pnpm &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> pnpm install&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> COPY . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> RUN pnpm run build:vite&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行命令构建镜像：&lt;code>docker build -f Dockerfile.base -t svtter/frontend-base:latest .&lt;/code>
如此一来，我们可以构建好一个&lt;code>frontend-base:latest&lt;/code>镜像。
然后，我们再构建&lt;code>frontend:latest&lt;/code>镜像，作为我们实际部署应用的镜像。 &lt;code>dockerfile&lt;/code>是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># FROM node:20 as build-stage&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> svtter/cathodic-frontend-base:latest as build-stage&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> &lt;span class="nv">ELECTRON_MIRROR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://npmmirror.com/mirrors/electron/&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> pnpm-lock.yaml package.json /app/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pnpm install&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pnpm run build:vite&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> nginx:1.25.1 as prod&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>build-stage /app/src/out /usr/share/nginx/html&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：因为我的代码里使用了 electron，所以为了速度更快，我使用了&lt;code>ELECTRON_MIRROR&lt;/code>。&lt;/p>&lt;/blockquote>
&lt;p>这里的构建命令是：&lt;code>docker build -t svtter/frontend:latest .&lt;/code>
这样一来，我们可以避免几个问题:&lt;/p>
&lt;ol>
&lt;li>如果基础的依赖有改变，在 venv 的基础上，pnpm 可以减少 npm 包的反复下载。&lt;/li>
&lt;li>一段时间后，我们可以重新构建 &lt;code>frontend-base&lt;/code>，来减少在 &lt;code>frontend&lt;/code> 中包的下载。&lt;/li>
&lt;/ol></description></item><item><title>Using Kind to Play with K8s</title><link>https://svtter.cn/p/using-kind-to-play-with-k8s/</link><pubDate>Wed, 12 Jun 2024 11:09:49 +0800</pubDate><guid>https://svtter.cn/p/using-kind-to-play-with-k8s/</guid><description>&lt;p>如果直接使用 kubernetes 的线上版本进行调试，需要资源太多了。使用 minikube 有时候又无法启动集群。
因此，开发者可以考虑使用 &lt;a class="link" href="https://kind.sigs.k8s.io/docs/user/quick-start/" target="_blank" rel="noopener"
>Kind&lt;/a> 来部署测试 Kubernetes。&lt;/p>
&lt;p>This article is about using Kind to create a Kubernetes (K8s) cluster and debug it.&lt;/p>
&lt;p>By default, Kind does not support load balancers. If you want to test your apps, use &lt;code>NodePort&lt;/code> or &lt;code>ClusterIP&lt;/code> instead.&lt;/p>
&lt;p>Source code: &lt;a class="link" href="https://github.com/Svtter/example-code-for-kind" target="_blank" rel="noopener"
>svtter/example-code-for-kind&lt;/a>.&lt;/p>
&lt;h2 id="using-nodeport-to-view-service">Using NodePort to View Service
&lt;/h2>&lt;p>Get the node&amp;rsquo;s IP to visit:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>base&lt;span class="o">)&lt;/span> ➜ cathodic kubectl get nodes -o wide
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind-control-plane Ready control-plane 22h v1.30.0 172.18.0.2 &amp;lt;none&amp;gt; Debian GNU/Linux &lt;span class="m">12&lt;/span> &lt;span class="o">(&lt;/span>bookworm&lt;span class="o">)&lt;/span> 6.1.0-18-amd64 containerd://1.7.15
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>View the service IP:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>base&lt;span class="o">)&lt;/span> ➜ cathodic kubectl get service nginx-service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-service NodePort 10.96.65.77 &amp;lt;none&amp;gt; 80:30160/TCP 26m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, use &lt;code>curl -L http://172.18.0.2:30160&lt;/code> to visit the Nginx service.&lt;/p>
&lt;h2 id="using-loadbalancer">Using LoadBalancer
&lt;/h2>&lt;ul>
&lt;li>Install cloud-provider-kind via this &lt;a class="link" href="https://kind.sigs.k8s.io/docs/user/loadbalancer/" target="_blank" rel="noopener"
>loadbalancer&lt;/a>.&lt;/li>
&lt;li>Start Kind, unlabel the node, and start &lt;code>cloud-provider-kind&lt;/code> according to this &lt;a class="link" href="https://github.com/kubernetes-sigs/cloud-provider-kind?tab=readme-ov-file#install" target="_blank" rel="noopener"
>link&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>使用 Docker 构建前端应用</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-docker-%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E5%BA%94%E7%94%A8/</link><pubDate>Sat, 04 Sep 2021 18:04:01 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-docker-%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E5%BA%94%E7%94%A8/</guid><description>&lt;p>docker compose 构建前端 app 是否容易，强烈建议中小企业采用这种方法。&lt;/p>
&lt;p>对于前后端分离的 WEB 应用，一般采用&lt;code>npm run build&lt;/code>的形式构建静态文件。
生成静态文件后，将静态文件放置到 nginx 的静态目录下。&lt;/p>
&lt;p>因此，我们可以根据这个特点，完成 nginx 镜像的构建。&lt;/p>
&lt;p>这个构建过程往往分成两步：&lt;/p>
&lt;ol>
&lt;li>构建前端的环境，并且生成静态文件&lt;/li>
&lt;li>构建&lt;code>nginx&lt;/code>镜像，将静态文件拷贝&lt;/li>
&lt;/ol>
&lt;h2 id="dockerfile">Dockerfile
&lt;/h2>&lt;p>一个样例&lt;code>Dockerfile&lt;/code>如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># Stage 0, &amp;#34;build-stage&amp;#34;, based on Node.js, to build and compile the frontend&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> node:14 as build-stage&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 配置淘宝镜像&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> yarn config &lt;span class="nb">set&lt;/span> registry https://registry.npm.taobao.org/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 复制前端依赖文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> package.json /app/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> yarn install&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . /app&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> yarn run build&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 复制 nginx 配置文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> default.conf default.conf&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> nginx:1.18&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>build-stage /app/dist/ /usr/share/nginx/html&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># Copy the default default.conf provided by tiangolo/node-frontend&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>build-stage /app/default.conf /etc/nginx/conf.d/default.conf&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-g&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;daemon off;&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>nginx 配置文件如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="line">&lt;span class="cl">&lt;span class="k">server&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">listen&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">access_log&lt;/span> &lt;span class="s">/dev/log&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">root&lt;/span> &lt;span class="s">/usr/share/nginx/html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="启动应用">启动应用
&lt;/h2>&lt;ul>
&lt;li>构建前端镜像：&lt;code>docker build -t frontend .&lt;/code>&lt;/li>
&lt;li>启动前端应用：&lt;code>docker run -it -p 3000:80 -d frontend .&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>这样，我们在主机的&lt;code>3000&lt;/code>端口启动了&lt;code>nginx&lt;/code>，并且将前端的应用拷贝了进去。&lt;/p>
&lt;p>下一步，我们可以在此基础上构建整个应用。&lt;/p>
&lt;p>（未完待续）&lt;/p></description></item><item><title>使用 Docker swarm 构建 PostgreSQL 集群</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-docker-swarm-%E6%9E%84%E5%BB%BA-postgresql-%E9%9B%86%E7%BE%A4/</link><pubDate>Sat, 01 Dec 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-docker-swarm-%E6%9E%84%E5%BB%BA-postgresql-%E9%9B%86%E7%BE%A4/</guid><description>&lt;blockquote>
&lt;p>又是一个渣翻，Copyright belongs to the original text。&lt;/p>
&lt;p>&lt;a class="link" href="https://info.crunchydata.com/blog/an-easy-recipe-for-creating-a-postgresql-cluster-with-docker-swarm" target="_blank" rel="noopener"
>原文地址&lt;/a>&lt;/p>&lt;/blockquote>
&lt;h2 id="背景">背景
&lt;/h2>&lt;p>PostgreSQL 在 9.0 版本已经开始持续接收大量的增强，包括：&lt;/p>
&lt;ol>
&lt;li>异步拓展&lt;/li>
&lt;li>同步拓展&lt;/li>
&lt;li>仲裁提交&lt;/li>
&lt;li>级联拓展&lt;/li>
&lt;li>逻辑拓展&lt;/li>
&lt;/ol>
&lt;p>PostgreSQL 文档也提供了一个 overview 以及 不同拓展方法的比较。详见&lt;a href="https://www.postgresql.org/docs/current/different-replication-solutions.html" target="_blank" rel="noopener">PostgreSQL 集群策略比较&lt;/a>&lt;/p>
&lt;p>用于部署 PostgreSQL 的拓展的主拓展的方法论，是一个重要的工具来为你的数据库集群创建高可用的环境。需要一个合适的部署策略来确保你的数据被保存到不同磁盘，以及不同的数据中心。&lt;/p>
&lt;p>拓展不是一个“安装然后忘记”的操作。在生产系统中，你想要确定你对实例有合适的监控，来了解你所有的在线的拓展，或者了解一个拓展有多少数据需要与主节点进行同步。&lt;/p>
&lt;p>当主节点配置好以后，安装就很容易了。但幸运的是，使用 Docker 可以使得这个过程更加轻松。&lt;/p>
&lt;h2 id="环境安装">环境安装
&lt;/h2>&lt;p>想要部署这个环境，你至少需要 Docker 1.12版本。&lt;/p>
&lt;p>要想开始，提供一个 Docker 集群。例如，一个开发集群，你可以在每一个机器上加载 Dokcer，来使用 Swarm。这个方法将使用如下的架构：&lt;/p>
&lt;img src="https://i2.wp.com/info.crunchydata.com/hs-fs/hubfs/diagram.png?w=625&amp;#038;ssl=1" alt="PostgreSQL Docker Swarm Architecture" data-recalc-dims="1" />
&lt;p>每一个系统都需要安装 Docker 以及启动。&lt;/p>
&lt;h2 id="swarm-安装">Swarm 安装
&lt;/h2>&lt;p>从1.12版本开始，Docker就已经集成了Swarm。&lt;/p>
&lt;h2 id="容器编排">容器编排
&lt;/h2>&lt;p>高可用 PostgresSQL 集群配置需要两个以上的主机。主节点和从节点需要运行在不同的 worker 节点上，来使得可用性最高。&lt;/p>
&lt;p>为了部署 &lt;a href="https://github.com/CrunchyData/crunchy-containers/" target="_blank" rel="noopener">Crunchy PostgreSQL containers&lt;/a> 到多个集群，你需要使用 node labels。&lt;/p>
&lt;p>标注主机对于使用 PostgreSQL 容器有几个好处：&lt;/p>
&lt;ul>
&lt;li>将服务散步到许多 worker 上，来提高可用性&lt;/li>
&lt;li>主机可以针对读（从）写（主）操作进行优化（例如使用高性能磁盘）&lt;/li>
&lt;/ul>
&lt;p>**记住：**对于PostgreSQL 10，主节点可以同时被允许读写，但是从节点仅仅允许被读。&lt;/p>
&lt;p>为了允许容器被放在指定的 worker 节点上，增加一个元数据标签到 Swarm 节点上。&lt;/p>
&lt;pre>node1_id=&lt;span class="pl-s">&lt;span class="pl-pds">$(&lt;/span>docker node list &lt;span class="pl-k">|&lt;/span> grep worker1 &lt;span class="pl-k">|&lt;/span> awk &lt;span class="pl-pds">'&lt;/span>{print $1}&lt;span class="pl-pds">'&lt;/span>&lt;span class="pl-pds">)&lt;/span>&lt;/span>
docker node update --label-add type=primary &lt;span class="pl-smi">${node1_id?}
&lt;/span>&lt;/pre>
&lt;p>在上述例子中，一个被称为 primary 的标签，加入了 worker1。通过使用这个标签，我们可以应用一些约束到 Docker swarm 的 PostgreSQL Stack 部署上。&lt;/p>
&lt;p>&lt;strong>注意：我们没有对从节点增加约束，我们可以简单的使用一条 inverse 约束：&lt;/strong>&lt;/p>
&lt;p>&lt;code>node.labels.type != primary&lt;/code>&lt;/p>
&lt;h2 id="postgresql-stack-定义">PostgreSQL stack 定义
&lt;/h2>&lt;p>通过 Swarm 部署以及 worker 节点正确的标记，我们可以部署 PostgreSQL stack了。&lt;/p>
&lt;p>PostgreSQL stack 是通过一个主节点以及从节点组成的。下面是服务定义：&lt;/p>
&lt;p>&lt;em>docker-compose.yml&lt;/em>&lt;/p>
&lt;pre>---
&lt;span class="pl-ent">version&lt;/span>: &lt;span class="pl-s">&lt;span class="pl-pds">"&lt;/span>3.3&lt;span class="pl-pds">"&lt;/span>&lt;/span>
&lt;span class="pl-ent">services&lt;/span>:
&lt;span class="pl-ent">primary&lt;/span>:
&lt;span class="pl-ent">hostname&lt;/span>: &lt;span class="pl-s">&lt;span class="pl-pds">'&lt;/span>primary&lt;span class="pl-pds">'&lt;/span>&lt;/span>
&lt;span class="pl-ent">image&lt;/span>: &lt;span class="pl-s">crunchydata/crunchy-postgres:centos7-10.3-1.8.2&lt;/span>
&lt;span class="pl-ent">environment&lt;/span>:
- &lt;span class="pl-s">PGHOST=/tmp&lt;/span>
- &lt;span class="pl-s">MAX_CONNECTIONS=10&lt;/span>
- &lt;span class="pl-s">MAX_WAL_SENDERS=5&lt;/span>
- &lt;span class="pl-s">PG_MODE=primary&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_USER=primaryuser&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_PASSWORD=password&lt;/span>
- &lt;span class="pl-s">PG_DATABASE=testdb&lt;/span>
- &lt;span class="pl-s">PG_USER=testuser&lt;/span>
- &lt;span class="pl-s">PG_PASSWORD=password&lt;/span>
- &lt;span class="pl-s">PG_ROOT_PASSWORD=password&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_PORT=5432&lt;/span>
&lt;span class="pl-ent">volumes&lt;/span>:
- &lt;span class="pl-s">pg-primary-vol:/pgdata&lt;/span>
&lt;span class="pl-ent">ports&lt;/span>:
- &lt;span class="pl-s">&lt;span class="pl-pds">"&lt;/span>5432&lt;span class="pl-pds">"&lt;/span>&lt;/span>
&lt;span class="pl-ent">networks&lt;/span>:
- &lt;span class="pl-s">crunchynet&lt;/span>
&lt;span class="pl-ent">deploy&lt;/span>:
&lt;span class="pl-ent">placement&lt;/span>:
&lt;span class="pl-ent">constraints&lt;/span>:
- &lt;span class="pl-s">node.labels.type == primary&lt;/span>
- &lt;span class="pl-s">node.role == worker&lt;/span>
&lt;span class="pl-ent">replica&lt;/span>:
&lt;span class="pl-ent">image&lt;/span>: &lt;span class="pl-s">crunchydata/crunchy-postgres:centos7-10.3-1.8.2&lt;/span>
&lt;span class="pl-ent">environment&lt;/span>:
- &lt;span class="pl-s">PGHOST=/tmp&lt;/span>
- &lt;span class="pl-s">MAX_CONNECTIONS=10&lt;/span>
- &lt;span class="pl-s">MAX_WAL_SENDERS=5&lt;/span>
- &lt;span class="pl-s">PG_MODE=replica&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_HOST=primary&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_PORT=5432&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_USER=primaryuser&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_PASSWORD=password&lt;/span>
- &lt;span class="pl-s">PG_DATABASE=testdb&lt;/span>
- &lt;span class="pl-s">PG_USER=testuser&lt;/span>
- &lt;span class="pl-s">PG_PASSWORD=password&lt;/span>
- &lt;span class="pl-s">PG_ROOT_PASSWORD=password&lt;/span>
&lt;span class="pl-ent">volumes&lt;/span>:
- &lt;span class="pl-s">pg-replica-vol:/pgdata&lt;/span>
&lt;span class="pl-ent">ports&lt;/span>:
- &lt;span class="pl-s">&lt;span class="pl-pds">"&lt;/span>5432&lt;span class="pl-pds">"&lt;/span>&lt;/span>
&lt;span class="pl-ent">networks&lt;/span>:
- &lt;span class="pl-s">crunchynet&lt;/span>
&lt;span class="pl-ent">deploy&lt;/span>:
&lt;span class="pl-ent">placement&lt;/span>:
&lt;span class="pl-ent">constraints&lt;/span>:
- &lt;span class="pl-s">node.labels.type != primary&lt;/span>
- &lt;span class="pl-s">node.role == worker&lt;/span>
&lt;span class="pl-ent">networks&lt;/span>:
&lt;span class="pl-ent">crunchynet&lt;/span>:
&lt;span class="pl-ent">volumes&lt;/span>:
&lt;span class="pl-ent">pg-primary-vol&lt;/span>:
&lt;span class="pl-ent">pg-replica-vol&lt;/span>:&lt;/pre>
&lt;p>注意，主服务定义了一个 hostname，但是 replica 服务没有。Replica 需要一个 hostname 来启动 replication。通过提供一个静态的 hostname 给主节点，replica就可以连接主节点，而不需要发现主容器。&lt;/p>
&lt;p>replica，没有一个 hostname，这允许 replica 服务拓展到多个节点。（待会儿展示一下）。&lt;/p>
&lt;p>primary 和 replica 服务的主要区别，是 PG_MODE 环境变量。这个变量配置容器是主节点，还是从节点。&lt;/p>
&lt;h2 id="部署-stack">部署 STACK
&lt;/h2>&lt;p>保存这个文件到 _docker-compose.yml _之后，我们可以通过 Docker 进行部署了。&lt;/p>
&lt;pre>docker stack deploy --compose-file=./docker-compose.yml pg-stack&lt;/pre>
&lt;p>这个 stack 部署，将会创建一个 PostgreSQL 集群，就像是下图一样：&lt;/p>
&lt;p>&lt;strong>&lt;img src="https://i0.wp.com/info.crunchydata.com/hs-fs/hubfs/Diagram4.png?w=625&amp;#038;ssl=1" alt="PostgreSQL Docker Swarm Primary Replica Cluster" data-recalc-dims="1" />&lt;/strong>&lt;/p>
&lt;h2 id="测试集群">测试集群
&lt;/h2>&lt;p>检查服务是否运行，运行下面的命令：&lt;/p>
&lt;pre>docker service ls
docker service ps pg-stack_primary
docker service ps pg-stack_replica&lt;/pre>
&lt;p>如果想要提升 replicas 的数量，运行下列命令：&lt;/p>
&lt;pre>docker service scale pg-stack_replica=2
docker service ps pg-stack_replica&lt;/pre>
&lt;p>为了确保 replicas 是流式的，在 worker1 节点上查询 PostgreSQL 主节点，使用下列命令：&lt;/p>
&lt;pre>&lt;code>docker exec -it $(docker ps -q) psql -U postgres -x -c 'table pg_stat_replication' postgres
&lt;/code>&lt;/pre>
&lt;h2 id="示例代码">示例代码
&lt;/h2>&lt;p>下面是实例代码：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CrunchyData/crunchy-containers/tree/master/examples/docker/swarm-service" target="_blank" rel="noopener"
>https://github.com/CrunchyData/crunchy-containers/tree/master/examples/docker/swarm-service&lt;/a>&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>Docker 以及 Docker swarm 提供了工具，来使得容器部署进入了更高的层次。我们希望这个提议证明了 PostgreSQL 集群是如何的容易部署。&lt;/p></description></item><item><title>使用Docker时遇到的sitemap问题</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84sitemap%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 27 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84sitemap%E9%97%AE%E9%A2%98/</guid><description>&lt;p>这两天感觉博客访问量已经不能靠用嘴宣传了，于是决定做一下sitemap，但是发现django自带的sitemap生成器存在这样的问题：生成的sitemap是依照container的hostname来显示的。&lt;/p>
&lt;p>为此我查询了一下其他人是怎么搞的，发现他们都把nginx和django放在一个容器下——但是如此构建不仅麻烦，似乎违背了docker的构建思路，在一个container里面放了多个进程。因此，我认为下面的方案是合理的。&lt;/p>
&lt;h2 id="解决方案">解决方案
&lt;/h2>&lt;h3 id="enabling-the-sites-framework">Enabling the sites framework
&lt;/h3>&lt;p>To enable the sites framework, follow these steps:&lt;/p>
&lt;p>Add ‘django.contrib.sites’ to your INSTALLED_APPS setting.&lt;/p>
&lt;h3 id="define-a-site_id-setting">Define a SITE_ID setting:
&lt;/h3>&lt;p>&lt;code>SITE_ID = 1&lt;/code>&lt;/p>
&lt;h3 id="run-migrate">Run migrate.
&lt;/h3>&lt;p>django.contrib.sites registers a post_migrate signal handler which creates a default site named example.com with the domain example.com. This site will also be created after Django creates the test database. To set the correct name and domain for your project, you can use a data migration.&lt;/p>
&lt;p>In order to serve different sites in production, you’d create a separate settings file with each SITE_ID (perhaps importing from a common settings file to avoid duplicating shared settings) and then specify the appropriate DJANGO_SETTINGS_MODULE for each site.&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">django.contrib.sites.models&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Site&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Site&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">domain&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;myveryspecialdomain.com&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;My Special Site Name&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>代码写多了，对于Flask和Django也就十分释然了。两个东西都是利器，针对的东西不是很相同；编程语言也是，都有自己擅长的部分，如果你非要用某种编程语言花很大的力气去做一件小事，除非你是geek而且有追求，并且没有deadline在旁边催催催，否则不建议你这么做。&lt;/p>
&lt;h2 id="参考项目">参考项目
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/flyhigher139/mayblog" target="_blank" rel="noopener"
>https://github.com/flyhigher139/mayblog&lt;/a>&lt;/p></description></item><item><title>使用Docker安装Spark</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85spark/</link><pubDate>Tue, 26 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85spark/</guid><description>&lt;p>在国内加载Dockerhub上的镜像速度会比较慢，对此我们可以通过设置mirror镜像的方式来加速images的下载。&lt;/p>
&lt;p>此外，如果是ipv6的网络，在一些mirror可以直接走ipv6通路，速度非常客观。这里以USTC的mirror为例。&lt;/p>
&lt;p>我这里的环境是Ubuntu 14.04，对于不同的Linux环境，修改的方式都差不多；修改文件&lt;code>/etc/docker/daemon.json&lt;/code>，如果没有这个文件，创建一个，注意，此处可能需要&lt;code>root&lt;/code>权限。修改完成后，运行命令&lt;code>sudo service docker restart&lt;/code>重启docker服务。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nt">"registry-mirrors"&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">"https://docker.mirrors.ustc.edu.cn"&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>配置好以后，选择&lt;code>2.1.0&lt;/code>版本的spark进行docker下载。&lt;/p>
&lt;p>&lt;code>docker pull p7hb/docker-spark:2.1.0&lt;/code>&lt;/p>
&lt;p>或者直接运行&lt;/p>
&lt;p>&lt;code>docker run -it -p 4040:4040 -p 8080:8080 -p 8081:8081 -h spark --name=spark p7hb/docker-spark:2.1.0&lt;/code>&lt;/p>
&lt;h2 id="参考">参考
&lt;/h2>&lt;ol>
&lt;li>&lt;a class="link" href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener"
>https://lug.ustc.edu.cn/wiki/mirrors/help/docker&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/P7h/docker-spark" target="_blank" rel="noopener"
>https://github.com/P7h/docker-spark&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>使用Docker的一些Tips</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E7%9A%84%E4%B8%80%E4%BA%9Btips/</link><pubDate>Fri, 07 Jul 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E7%9A%84%E4%B8%80%E4%BA%9Btips/</guid><description>&lt;p>Docker是一种强大的DevOps工具，使用其无论是作为开发环境还是生产环境，但是非常&lt;/p>
&lt;p>好的选择；在这篇文章中，讲讲Docker的几个开发Tips。&lt;/p>
&lt;h2 id="几条命令安装docker">几条命令安装Docker
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ curl -fsSL get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh
&lt;/pre>
&lt;/div>
&lt;h2 id="使用多个基础镜像">使用多个基础镜像
&lt;/h2>&lt;p>作为Python开发者，经常需要使用pip来构建安装包，等待pip安全的过程可谓是又臭又长，&lt;/p>
&lt;p>而且一个不小心，如果在没有使用pip.conf的情况下，安装失败，docker又要重新跑一次，&lt;/p>
&lt;p>十分的麻烦。下面给出的解决方案不一定是最好的，但是应该是比较有效的。&lt;/p>
&lt;p>比如，我在构建某个Python项目的时候，会创建一个python-base的image，tag使用当前&lt;/p>
&lt;p>项目名称。&lt;/p>
&lt;p>这个python-base就是基础镜像之一：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> dockerxman/docker-ubuntu:latest&lt;/span>
&lt;span class="k">MAINTAINER&lt;/span>&lt;span class="s"> Svtter &amp;lt;svtter@qq.com&amp;gt;&lt;/span>
&lt;span class="k">RUN&lt;/span> apt-get update&lt;span class="se">\&lt;/span>
&lt;span class="o">&amp;&amp;&lt;/span> apt-get install python3-pip supervisor -y
COPY ./requirements.txt /app/requirements.txt
COPY ./pip/pip.conf /root/.pip/pip.conf
&lt;span class="k">RUN&lt;/span> pip3 install -r /app/requirements.txt
&lt;span class="k">RUN&lt;/span> rm -rf /var/lib/apt/lists/*
&lt;/pre>
&lt;/div>
&lt;p>介绍一下这个&lt;code>Dockerfile&lt;/code>；在第一行，我使用的是一aliyun源的ubuntu镜像，来加速&lt;/p>
&lt;p>apt的过程，然后，把pip相关的配置复制到image中，最后，使用pip安装需求文件，&lt;/p>
&lt;p>清理缓存，然后这个基础镜像就构建好了。&lt;/p>
&lt;h2 id="创建自己的项目">创建自己的项目
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> python-base:school&lt;/span>
&lt;span class="k">MAINTAINER&lt;/span>&lt;span class="s"> Svtter &amp;lt;svtter@qq.com&amp;gt;&lt;/span>
COPY ./fleetness /app
&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>
COPY supervisord.conf /etc/supervisord.conf
&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /log&lt;/span>
&lt;span class="k">CMD&lt;/span>&lt;span class="s"> supervisord -c /etc/supervisord.conf&lt;/span>
STOPSIGNAL SIGINT
&lt;span class="k">EXPOSE&lt;/span>&lt;span class="s"> 5000&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>此处就是这直接利用已经构建好的&lt;code>python-base:school&lt;/code>的镜像，这样一来，每次我更新&lt;/p>
&lt;p>代码，或者supervisor的配置，只需要重新构建这个镜像就可以了。在这个镜像中，没有&lt;/p>
&lt;p>安装其他软件包的过程，因此节省了大量的时间。&lt;/p>
&lt;p>此外，如果只需要更新代码，而依赖相对不改变的时候，可以通过挂载代码到VOLUME中，&lt;/p>
&lt;p>每次更新代码，都通过&lt;code>git pull&lt;/code>，然后重启一下镜像，就可以重新部署了。&lt;/p>
&lt;h2 id="docker-构建python镜像的一些技巧">Docker 构建Python镜像的一些技巧
&lt;/h2>&lt;p>使用pip快速 &lt;a class="link" href="http://blog.csdn.net/lambert310/article/details/52412059" target="_blank" rel="noopener"
>http://blog.csdn.net/lambert310/article/details/52412059&lt;/a>&lt;/p>
&lt;h2 id="一条命令搭建lamp">一条命令搭建LAMP
&lt;/h2>&lt;p>这条命令创建一个apache-php服务器，服务于&lt;code>8087&lt;/code>端口。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ docker run --rm -p &lt;span class="m">8087&lt;/span>:80 -e &lt;span class="nv">ALLOW_OVERRIDE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> -v &lt;span class="si">${&lt;/span>&lt;span class="nv">项目的绝对路径&lt;/span>&lt;span class="si">}&lt;/span>:/var/www/html tutum/apache-php
&lt;/pre>
&lt;/div></description></item></channel></rss>