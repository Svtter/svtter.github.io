<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Svtter's Blog</title><link>https://svtter.cn/tags/git/</link><description>Recent content in Git on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 24 Apr 2025 18:32:38 +0800</lastBuildDate><atom:link href="https://svtter.cn/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git MCP Tools.md</title><link>https://svtter.cn/p/git-mcp-tools.md/</link><pubDate>Thu, 24 Apr 2025 18:32:38 +0800</pubDate><guid>https://svtter.cn/p/git-mcp-tools.md/</guid><description>&lt;img src="https://svtter.cn/p/git-mcp-tools.md/bg.png" alt="Featured image of post Git MCP Tools.md" /&gt;&lt;p&gt;&lt;a class="link" href="https://www.anthropic.com/news/model-context-protocol" target="_blank" rel="noopener"
&gt;MCP 协议&lt;/a&gt; 很有意思，能让大模型使用工具，来扩展大模型的能力。为了体验一下自动化的快乐，我结合 &lt;a class="link" href="https://gofastmcp.com/getting-started/welcome" target="_blank" rel="noopener"
&gt;FastMCP&lt;/a&gt; 开发一个 MCP 服务：&lt;/p&gt;
&lt;script src="https://tarptaeya.github.io/repo-card/repo-card.js"&gt;&lt;/script&gt;
&lt;!-- inside body, where you want to create the card --&gt;
&lt;div class="repo-card" data-repo="svtter/git-mcp"&gt;&lt;/div&gt;
&lt;p&gt;这个服务可以通过我预先定义的几个命令，例如 &lt;a class="link" href="https://github.com/Svtter/git-mcp/blob/main/server.py#L31" target="_blank" rel="noopener"
&gt;status&lt;/a&gt; ，来操作指定的 git 仓库。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;git&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repo_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;capture_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="实际使用"&gt;实际使用
&lt;/h2&gt;&lt;p&gt;通过 &lt;a class="link" href="https://github.com/ThinkInAIXYZ/deepchat" target="_blank" rel="noopener"
&gt;DeepChat&lt;/a&gt; 进行沟通。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://svtter.cn/p/git-mcp-tools.md/chat.png"
width="2424"
height="1490"
srcset="https://svtter.cn/p/git-mcp-tools.md/chat_hu_c17bff78f6fe9a3f.png 480w, https://svtter.cn/p/git-mcp-tools.md/chat_hu_7113379ef67f753.png 1024w"
loading="lazy"
alt="chat.png"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，&lt;a class="link" href="https://github.com/ThinkInAIXYZ/deepchat" target="_blank" rel="noopener"
&gt;deepchat&lt;/a&gt; 借助大模型，帮我查看了项目 &lt;a class="link" href="https://github.com/Svtter/git-mcp" target="_blank" rel="noopener"
&gt;git-mcp&lt;/a&gt; 在我本地的情况。&lt;/p&gt;
&lt;h2 id="遇到的问题"&gt;遇到的问题
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;mcp.resources&lt;/code&gt;和使用&lt;code&gt;mcp.tool&lt;/code&gt;是不一样的。如果不定义 tool，有时候大模型会找不到对应的资源。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>使用 git 管理 logseq 文件</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-git-%E7%AE%A1%E7%90%86-logseq-%E6%96%87%E4%BB%B6/</link><pubDate>Sat, 08 Feb 2025 18:18:29 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-git-%E7%AE%A1%E7%90%86-logseq-%E6%96%87%E4%BB%B6/</guid><description>&lt;p&gt;因为经常同时使用多台设备，我经常会遇到在一处写好文章，在另外一台设备继续使用 logseq 的问题。直接复制粘贴显得很笨。&lt;/p&gt;
&lt;p&gt;我大概分了两个阶段处理这个问题。第一个阶段是用移动硬盘，在不同系统之间直接拷贝。这个时候用到 git bare repository.&lt;/p&gt;
&lt;h2 id="stage-1"&gt;Stage 1
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git init --bare logseq-database.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后再其他的 working git repository 上，添加 remote。例如我的磁盘路径是&lt;code&gt;E:\&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote add origin E:\logseq-database.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如此一来可以直接在不同设备之间同步 logseq 数据。&lt;/p&gt;
&lt;h2 id="stage-2"&gt;Stage 2
&lt;/h2&gt;&lt;p&gt;我发现使用移动硬盘还是不太方便。我将一台10年前的 thinkpad 刷机，安装了 gitea。我一开始使用的是 gogs，但是 gogs 对于 submodule 处理不太友好，有莫名其妙的 bug。因此最终还是
使用了 gitea。使用 gitea 之后，我将原本的 git 库迁移到自己的本地机器上。例如：&lt;code&gt;http://gitea.local/svtter/logseq-database.git&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="stage-3"&gt;Stage 3
&lt;/h2&gt;&lt;p&gt;我发现大型文件存储和共享容易出问题。我增加了 &lt;code&gt;git-lfs&lt;/code&gt; 的支持，通过&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git lfs install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以及&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git lfs track *.pdf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;来避免大文件在&lt;code&gt;.git&lt;/code&gt;目录中留下太多的数据。&lt;/p&gt;
&lt;h2 id="stage-4"&gt;Stage 4
&lt;/h2&gt;&lt;p&gt;定期备份一部分数据到&lt;code&gt;GitHub&lt;/code&gt;。但是我现在一般不这么做了。&lt;/p&gt;
&lt;p&gt;使用 git 在合并的时候要注意一个问题。如果文件名称有变化，自动化的合并会直接忽略。
大概是这样：我在两个设备上同时修改了一个文件，其中一个文件不仅仅是修改了内容，还更改了文件名。然后，两个设备分别进行了 git commit。
如此一来，git在进行合并的时候，不会提示冲突。git 自动化合并之后，其中一个设备上所作的修改会消失。&lt;/p&gt;
&lt;p&gt;针对这个问题，处理方法是在合并的时候尽可能采用 rebase 的方法。==&amp;gt; 但是 rebase 合并文件的时候速度很慢，要自己手动处理的内容很多。&lt;/p&gt;
&lt;p&gt;因此，在两个设备上同时修改一个文件的时候，首先要拉一下远端的修改。其次，应尽可能避免修改文件名。否则，可能会导致变更消失。&lt;/p&gt;
&lt;p&gt;好在 git commit 历史记录一直都在。实在不行，就从 commit 记录里找到丢失的部分，然后补充一个新的提交。&lt;/p&gt;</description></item></channel></rss>