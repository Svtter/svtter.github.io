<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>STL on Svtter&#39;s Blog</title>
    <link>https://svtter.cn/tags/stl/</link>
    <description>Recent content in STL on Svtter&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 27 Aug 2018 01:00:00 +0800</lastBuildDate>
    <atom:link href="https://svtter.cn/tags/stl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title># Difference between map &amp; unordered_map</title>
      <link>https://svtter.cn/2018/08/27/difference-between-map-unordered_map/</link>
      <pubDate>Mon, 27 Aug 2018 01:00:00 +0800</pubDate>
      <guid>https://svtter.cn/2018/08/27/difference-between-map-unordered_map/</guid>
      <description>&lt;p&gt;目前有三个容器我不太了解其内部实现，打算通过 &amp;lt;c++ primer&amp;gt; 进行学习&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;map&lt;/li&gt;&#xA;&lt;li&gt;multimap&lt;/li&gt;&#xA;&lt;li&gt;unordered_map&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;map&#34;&gt;map&lt;/h2&gt;&#xA;&lt;p&gt;map 是目前最简单的结构，实现的方法是 BST（binary search tree）。因此，其时间复杂度等都与 BST 相同，搜索，增加，删除基本时间都是 log(n)。&lt;/p&gt;&#xA;&lt;h3 id=&#34;use-map-when&#34;&gt;use map when&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;数据有序&lt;/li&gt;&#xA;&lt;li&gt;需要按照有序的顺序获得元素&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;unordered_map&#34;&gt;unordered_map&lt;/h2&gt;&#xA;&lt;p&gt;unordered_map 则是通常所说的 hash table，哈希表，搜索，增加，删除都是以hash表为主，较好的情况是o(1)，也就是hash函数可以较好的把元素分布到表中，如果 hash 函数比较糟糕，则每一次添加删除查找，都是完整遍历一个表。&lt;/p&gt;&#xA;&lt;h3 id=&#34;use-unordered_map-when&#34;&gt;use unordered_map when&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对数据计数&lt;/li&gt;&#xA;&lt;li&gt;只需要根据 key 访问 value&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;简单来讲，就是当你需要使用 vector 来计数的时候，可以用 unordered_map 来代替。&lt;/p&gt;&#xA;&lt;pre class=&#34;wp-block-preformatted&#34;&gt;| map             | unordered_map&#xA;---------------------------------------------------------&#xA;Ordering        | increasing  order   | no ordering&#xA;                | (by default)        |&#xA;&#xA;Implementation  | Self balancing BST  | Hash Table&#xA;                | like&lt;a href=&#34;https://www.geeksforgeeks.org/red-black-tree-set-1-introduction-2/&#34;&gt; Red-Black Tree &lt;/a&gt;|&#xA;&#xA;search time     | log(n)              | O(1) -&gt; Average&#xA;                |                     | O(n) -&gt; Worst Case&#xA;&#xA;Insertion time  | log(n) + Rebalance  | Same as search&#xA;&#xA;Deletion time   | log(n) + Rebalance  | Same as search&lt;/pre&gt;&#xA;&lt;h2 id=&#34;multimap&#34;&gt;multimap&lt;/h2&gt;&#xA;&lt;p&gt;multimap containers are generally slower than &lt;a href=&#34;http://www.cplusplus.com/unordered_multimap&#34;&gt;unordered_multimap&lt;/a&gt; containers to access individual elements by their &lt;em&gt;key&lt;/em&gt;, but they allow the direct iteration on subsets based on their order.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
