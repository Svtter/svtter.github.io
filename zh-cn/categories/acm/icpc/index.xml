<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ACM/ICPC on Svtter&#39;s Blog</title>
    <link>/zh-cn/categories/acm/icpc/</link>
    <description>Recent content in ACM/ICPC on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Razon Yang. All Rights Reserved.</copyright><atom:link href="/zh-cn/categories/acm/icpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第六届山东省ACM总结</title>
      <link>/2015/05/16/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81acm%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 16 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/16/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81acm%E6%80%BB%E7%BB%93/</guid>
      <description>拖了好久才写这份总结，中间考试，聚会，等等都推迟了这事儿。写的过程中一度想要不写了，可能是觉得结果有些不尽人意吧。 赛程 早上6点多起床，然后吃</description>
    </item>
    
    <item>
      <title>ACM – 浙江省赛F – 图论</title>
      <link>/2015/05/07/acm-%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bf-%E5%9B%BE%E8%AE%BA/</link>
      <pubDate>Thu, 07 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/07/acm-%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bf-%E5%9B%BE%E8%AE%BA/</guid>
      <description>浙江省赛题目，分析后直接暴力即可，奈何场上脑子里全是floyd，WA无数次。 做题一定要先分析时间复杂问题，采取暴力方法，然后再考虑复杂问题解</description>
    </item>
    
    <item>
      <title>ACM – Uva10047 – 图论</title>
      <link>/2015/05/05/acm-uva10047-%E5%9B%BE%E8%AE%BA/</link>
      <pubDate>Tue, 05 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/05/acm-uva10047-%E5%9B%BE%E8%AE%BA/</guid>
      <description>隐式图搜索，多个状态然后减枝。。没看懂李大大所说可以承受是个啥意思。。 做起来实在太累了。。减枝的部分看了别人的代码，发现着实麻烦，不如用优先</description>
    </item>
    
    <item>
      <title>ACM – Uva10054 – 欧拉回路</title>
      <link>/2015/05/05/acm-uva10054-%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/</link>
      <pubDate>Tue, 05 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/05/acm-uva10054-%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/</guid>
      <description>问能不能拼接一条项链，条件是首尾相同构成环。 这个题的坑在： 虽然保证连通，但是不一定每个颜色都有，所以单纯的暴力euler(1)是很愚蠢的。 题</description>
    </item>
    
    <item>
      <title>灭火</title>
      <link>/2015/05/04/%E7%81%AD%E7%81%AB/</link>
      <pubDate>Mon, 04 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/04/%E7%81%AD%E7%81%AB/</guid>
      <description>火会蔓延，人被火追着跑，能否跑出边界的问题。 bfs火之后bfs人，或火和人放在一个队列里面bfs 坑是没有火的情况，如果从0更新火势图而不是i</description>
    </item>
    
    <item>
      <title>ACM – Uva10294 – 置换</title>
      <link>/2015/05/03/acm-uva10294-%E7%BD%AE%E6%8D%A2/</link>
      <pubDate>Sun, 03 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/03/acm-uva10294-%E7%BD%AE%E6%8D%A2/</guid>
      <description>项链和手镯。 项链的问题在于不可以翻转，因此少了一种置换，而手镯则可以反转。然后我们计算旋转的置换。 旋转的步长可以是0,i,2i…然后我们可以</description>
    </item>
    
    <item>
      <title>ACM – 置换</title>
      <link>/2015/05/03/acm-%E7%BD%AE%E6%8D%A2/</link>
      <pubDate>Sun, 03 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/03/acm-%E7%BD%AE%E6%8D%A2/</guid>
      <description>终于搞明白置换了，可喜可贺。建议不要看屈的离散数学，看白书即可，通俗易懂。 我在这里简单阐述一下，当然也是依据李大大的书。 置换 置换就是把n个元</description>
    </item>
    
    <item>
      <title>ACM – UVa10023 – 开平方</title>
      <link>/2015/05/02/acm-uva10023-%E5%BC%80%E5%B9%B3%E6%96%B9/</link>
      <pubDate>Sat, 02 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/02/acm-uva10023-%E5%BC%80%E5%B9%B3%E6%96%B9/</guid>
      <description>本题目计算开根号数字，给出Y求X。X = sqrt(Y)，主要问题在Y的超大数据。 时间限制是3s。我使用的大数模板中没有一个大数除大数的算法，因</description>
    </item>
    
    <item>
      <title>ACM – Uva10105 – 组合数</title>
      <link>/2015/05/02/acm-uva10105-%E7%BB%84%E5%90%88%E6%95%B0/</link>
      <pubDate>Sat, 02 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/02/acm-uva10105-%E7%BB%84%E5%90%88%E6%95%B0/</guid>
      <description>基本上是组合数裸题。。 给出$(x_1+x_2+x_3….x_k)^n$，要求计算$x_1^{n_1}x_2^{n_2}…x_k^{n_k}$</description>
    </item>
    
    <item>
      <title>ACM – UVA10308 – 无根树转有根树</title>
      <link>/2015/05/02/acm-uva10308-%E6%97%A0%E6%A0%B9%E6%A0%91%E8%BD%AC%E6%9C%89%E6%A0%B9%E6%A0%91/</link>
      <pubDate>Sat, 02 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/02/acm-uva10308-%E6%97%A0%E6%A0%B9%E6%A0%91%E8%BD%AC%E6%9C%89%E6%A0%B9%E6%A0%91/</guid>
      <description>比较莫名奇妙的题目，明明是搜索题目居然放在了数学分类，完全找不到数学的影子。。 利用vector，遍历树，找出最大的子树路径，然后与次大的子树</description>
    </item>
    
    <item>
      <title>ACM – Uva10375 – 组合数公式</title>
      <link>/2015/05/02/acm-uva10375-%E7%BB%84%E5%90%88%E6%95%B0%E5%85%AC%E5%BC%8F/</link>
      <pubDate>Sat, 02 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/02/acm-uva10375-%E7%BB%84%E5%90%88%E6%95%B0%E5%85%AC%E5%BC%8F/</guid>
      <description>有些匪夷所思的题目。。注释部分加上就WA，不加就AC。。 推公式，因为$$C(n,k) = C(n,k-1) * (n-k+1)/k$$ 所以$$ans = \frac{C(n, k)}{C(r, s)}\qquad$$改成递</description>
    </item>
    
    <item>
      <title>ACM – UVA11029 – 快速幂，快速前幂</title>
      <link>/2015/05/02/acm-uva11029-%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%89%8D%E5%B9%82/</link>
      <pubDate>Sat, 02 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/02/acm-uva11029-%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%89%8D%E5%B9%82/</guid>
      <description>后面的三位快速幂即可，但是前面三位不好求。经过分析，每一位都有可能牵扯到前三位的值，因此无法具体的作出判断。 如果使用模方法省去后面的部分，必</description>
    </item>
    
    <item>
      <title>ACM – UVA10820 – 欧拉函数</title>
      <link>/2015/05/01/acm-uva10820-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 01 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/01/acm-uva10820-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</guid>
      <description>给出一个Answer(x,y)函数，x,y属于[1,N]，$Answer(k_x, k_y)$可以由Answer(x,y)得出，目的是求需要计</description>
    </item>
    
    <item>
      <title>ACM – UVA571 – 模方程</title>
      <link>/2015/05/01/acm-uva571-%E6%A8%A1%E6%96%B9%E7%A8%8B/</link>
      <pubDate>Fri, 01 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/01/acm-uva571-%E6%A8%A1%E6%96%B9%E7%A8%8B/</guid>
      <description>一开始在扩展gcd上想了许久没有办法将得出的数字直接转换成为相应的输出，后来发现就是模方程。 因为不求最佳解，所以直接使用ca*x = n (mod cb)</description>
    </item>
    
    <item>
      <title>ACM – Uva10717 – lcm&#43;dfs</title>
      <link>/2015/04/29/acm-uva10717-lcm&#43;dfs/</link>
      <pubDate>Wed, 29 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/29/acm-uva10717-lcm&#43;dfs/</guid>
      <description>今天不适合刷题。。。 题意：一个桌子4条腿，每条腿由一种硬币构成，四条腿必须一样长，请问如何最接近给出的标准桌子高度，输出两个最接近的值。 更新</description>
    </item>
    
    <item>
      <title>ACM – UVa10791 – divide prime</title>
      <link>/2015/04/29/acm-uva10791-divideprime/</link>
      <pubDate>Wed, 29 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/29/acm-uva10791-divideprime/</guid>
      <description>谢天谢地终于过了。 就是求分解质因数后的和，如果是质数那么返回1+n本身。 一开始直接暴力求两个质因数的情况，铁定不对啊。。 第二次发现策略有问题</description>
    </item>
    
    <item>
      <title>ACM – Uva106 – 勾股定理</title>
      <link>/2015/04/28/acm-uva106-%E5%8B%BE%E8%82%A1%E5%AE%9A%E7%90%86/</link>
      <pubDate>Tue, 28 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/28/acm-uva106-%E5%8B%BE%E8%82%A1%E5%AE%9A%E7%90%86/</guid>
      <description>從維基百科的勾股數條目參考來的通解： 給一個任意數對(X,Y)，用以下公式代替 $A = X^2 – Y^2$ $B = 2XY$ $C = X^2 + Y^2$ 得出的A,B,C就是一組勾股數。 若 (X,Y) 恰</description>
    </item>
    
    <item>
      <title>ACM – Uva10673 – 扩展gcd</title>
      <link>/2015/04/28/acm-uva10673-%E6%89%A9%E5%B1%95gcd/</link>
      <pubDate>Tue, 28 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/28/acm-uva10673-%E6%89%A9%E5%B1%95gcd/</guid>
      <description>水题一发。。直接使用floor和ceil函数，然后暴力即可。。。 如果使用快速的方法，就是扩展gcd。其中d的初始值没有关系，最后返回的是gc</description>
    </item>
    
    <item>
      <title>ACM – UVA11121 – 进制</title>
      <link>/2015/04/28/acm-uva11121-%E8%BF%9B%E5%88%B6/</link>
      <pubDate>Tue, 28 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/28/acm-uva11121-%E8%BF%9B%E5%88%B6/</guid>
      <description>题意是由10进制转换成-2进制，但是明显我分析错了，所以写了调了接近一下午的bug。。。 有时间再写正常的题解。 题解： 如果当前数位和输入n符号</description>
    </item>
    
    <item>
      <title>ACM – 莫比乌斯反演</title>
      <link>/2015/04/27/acm-%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</link>
      <pubDate>Mon, 27 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/27/acm-%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</guid>
      <description>昨天卡了这道题目，今天特意来看看莫比乌斯反演。 其中，$∑_{d|n}$含义为整除. ACdreamer大大的讲解 看了这篇文章即可= = wikip</description>
    </item>
    
    <item>
      <title>Bestcoder 2 题目</title>
      <link>/2015/04/27/bestcoder2%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Mon, 27 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/27/bestcoder2%E9%A2%98%E7%9B%AE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ACM – UVa10006 – 快速幂</title>
      <link>/2015/04/25/acm-uva10006-%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Sat, 25 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/25/acm-uva10006-%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>水题一发。无奈自己没有好好审清题意，另外快速幂居然写错了- = 快速幂在过程中修改a的值，但是我却计算成了在偶数时相乘，调试半天。看来还是咩有好</description>
    </item>
    
    <item>
      <title>ACM – UVa138 – 数学基础</title>
      <link>/2015/04/24/acm-uva138-%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 24 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/24/acm-uva138-%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</guid>
      <description>这道题目其实就是推个公式，主要还是考验编程技巧。。 首先double的精度范围是15-16位，浮点数运算还是最快的，依据最后一个答案（总共10</description>
    </item>
    
    <item>
      <title>山东省第五届省赛  Circle</title>
      <link>/2015/04/21/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%94%E5%B1%8A%E7%9C%81%E8%B5%9Bcircle/</link>
      <pubDate>Tue, 21 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/21/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%94%E5%B1%8A%E7%9C%81%E8%B5%9Bcircle/</guid>
      <description>首先一点什么是高斯消元？ 高斯消元其实就是一种求行列式的值的方法。 例如 |a[0][0]_x1 + a[0][1]_x2+ … a[0][n-1]_xn = a[0][n]| |a[1][0]_x1 + a[1][1]_x2+ … a[1][n-1]_xn = a[1][n]| |a[2][0]_x1 + a[2][1]_x2+ … a[2][n-1]_xn = a[2][n]| |a[3][0]_x1 + a[3][1]_x2+ … a[3][n-1]_xn = a[3][n]| … |a[n-1][0]_x1 + a[n-1][1]_x2+ … a[n-1][n-1]*xn = a[n-1][n]|</description>
    </item>
    
    <item>
      <title>山东省第五届省赛 Hearthstone II</title>
      <link>/2015/04/21/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%94%E5%B1%8A%E7%9C%81%E8%B5%9Bhearthstoneii/</link>
      <pubDate>Tue, 21 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/21/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%94%E5%B1%8A%E7%9C%81%E8%B5%9Bhearthstoneii/</guid>
      <description>斯特林数stirling 第一类 stirling数 s(n, k) n个人分成k组，组内再按特定顺序围圈 也就是分成了k组，组内就像是项链颜色一样， ( {A, B}, {C, D}</description>
    </item>
    
    <item>
      <title>山东省第五届ACM省赛 Weighted Median</title>
      <link>/2015/04/19/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%94%E5%B1%8Aacm%E7%9C%81%E8%B5%9Bweightedmedian/</link>
      <pubDate>Sun, 19 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/19/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%94%E5%B1%8Aacm%E7%9C%81%E8%B5%9Bweightedmedian/</guid>
      <description></description>
    </item>
    
    <item>
      <title>bestcoder#2-1</title>
      <link>/2015/04/18/bestcoder#2-1/</link>
      <pubDate>Sat, 18 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/18/bestcoder#2-1/</guid>
      <description>一开始直接使用结构体搞结果wrong了，随后查看了某牛的代码发现应该直接在区间上累加 — 得出结论不要直接使用复杂的结构体，转变成简单的数据形式</description>
    </item>
    
    <item>
      <title>蓝桥杯入门训练题目</title>
      <link>/2015/04/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Fri, 10 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83%E9%A2%98%E7%9B%AE/</guid>
      <description>蓝桥的系统需要I64d这种输入格式。无力吐槽。 Fibonacci数列 圆的面积 序列求和 A+B</description>
    </item>
    
    <item>
      <title>蓝桥杯基础练习</title>
      <link>/2015/04/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Fri, 10 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/</guid>
      <description>数列排序 十六进制转八进制 转换的时候，先转换成二进制，再转换成十六进制。 这道题目还是比较有意思的，使用string只需要78ms，使用char</description>
    </item>
    
    <item>
      <title>ACM – 三道统计题目</title>
      <link>/2015/04/08/acm-%E4%B8%89%E9%81%93%E7%BB%9F%E8%AE%A1%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Wed, 08 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/08/acm-%E4%B8%89%E9%81%93%E7%BB%9F%E8%AE%A1%E9%A2%98%E7%9B%AE/</guid>
      <description>基本上就是按照大白学习的，基本上都是计数方法的运用。 这是的大体的对组合数学的学习导图。 指导</description>
    </item>
    
    <item>
      <title>ACM – 快速生成测试数据</title>
      <link>/2015/04/08/acm-%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Wed, 08 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/08/acm-%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</guid>
      <description>比赛的时候出现了100 * 100组数据的情况，但是当时使用freopen忘记了具体的步骤，特意重新写一下，也是属于基础的内容。 生成一百行数据，</description>
    </item>
    
    <item>
      <title>大白刷题录</title>
      <link>/2015/03/12/%E5%A4%A7%E7%99%BD%E5%88%B7%E9%A2%98%E5%BD%95/</link>
      <pubDate>Thu, 12 Mar 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/03/12/%E5%A4%A7%E7%99%BD%E5%88%B7%E9%A2%98%E5%BD%95/</guid>
      <description>UVa 11729 UVa 11292 勇士斗恶龙 排序，贪心 UVa 11300 这个题目很有价值。 一方面通过数学推导得出结论。 编号为i的人初始有$A_i$枚金币。对于1号，给了4号$x_1</description>
    </item>
    
    <item>
      <title>ACM-白皮书3</title>
      <link>/2014/12/10/acm-%E7%99%BD%E7%9A%AE%E4%B9%A63/</link>
      <pubDate>Wed, 10 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/12/10/acm-%E7%99%BD%E7%9A%AE%E4%B9%A63/</guid>
      <description>本文出自svtter.com 整数进制输出 把整数按照十进制，八进制和十六进制输出. $2^32-n$补码表示法. 字符处理 使用Ctrl+D时, ge</description>
    </item>
    
    <item>
      <title>ACM-白皮书-练习</title>
      <link>/2014/12/04/acm-%E7%99%BD%E7%9A%AE%E4%B9%A6-%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Thu, 04 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/12/04/acm-%E7%99%BD%E7%9A%AE%E4%B9%A6-%E7%BB%83%E4%B9%A0/</guid>
      <description>本文出自svtter.com 基础第二弹 虽然是很水的题目，但是还是收获了不少。 动态小数位数 整数位数 电灯 蛇型填数 调和级数 题目都很水（不能再水了）</description>
    </item>
    
    <item>
      <title>ACM-白皮书</title>
      <link>/2014/12/01/acm-%E7%99%BD%E7%9A%AE%E4%B9%A6/</link>
      <pubDate>Mon, 01 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/12/01/acm-%E7%99%BD%E7%9A%AE%E4%B9%A6/</guid>
      <description>本文出自svtter.com Pi的获取 觉得自己的一些ACMer的基本素养不够，重新翻看。 pi = 4.0 * atan(1.0) math.h中的M_PI并不是ANSI C标</description>
    </item>
    
    <item>
      <title>ACM-zoj3789-排列利用</title>
      <link>/2014/11/27/acm-zoj3789-%E6%8E%92%E5%88%97%E5%88%A9%E7%94%A8/</link>
      <pubDate>Thu, 27 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/11/27/acm-zoj3789-%E6%8E%92%E5%88%97%E5%88%A9%E7%94%A8/</guid>
      <description>本文出自&amp;lt;svtter.com&amp;gt; 利用排列找规律。 首先利用next_permutation函数进行求排列 代码如上。 可以观察出规律，</description>
    </item>
    
    <item>
      <title>筛素数更正</title>
      <link>/2014/11/26/%E7%AD%9B%E7%B4%A0%E6%95%B0%E6%9B%B4%E6%AD%A3/</link>
      <pubDate>Wed, 26 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/11/26/%E7%AD%9B%E7%B4%A0%E6%95%B0%E6%9B%B4%E6%AD%A3/</guid>
      <description>本文出自&amp;lt;svtter.com&amp;gt; 写在之前 maker关于线性筛素数的论文。 做到欧拉线性筛法再做补充。(当时还写了个这？) 关于线性筛</description>
    </item>
    
    <item>
      <title>ACM – hdu5104-water</title>
      <link>/2014/11/16/acm-hdu5104-water/</link>
      <pubDate>Sun, 16 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/11/16/acm-hdu5104-water/</guid>
      <description>&lt;p&gt;这个题目的总结就是不作不会死- -好端端的暴力我非要用个bfs。&lt;/p&gt;
&lt;p&gt;看见自己wrong了还以为是哈希的问题- =&lt;/p&gt;
&lt;h1 id=&#34;题意&#34;&gt;题意&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;p1+p2+p3 = n，$p1 &amp;lt;= p2 &amp;lt;= p3$&lt;/li&gt;
&lt;li&gt;输出符合条件的组数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;输入输出&#34;&gt;输入输出&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;给100组n，输出组数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;分析&#34;&gt;分析&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;只有3个数，暴力解就可以，注意循环终止条件。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>使用gdb调试</title>
      <link>/2014/11/16/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95/</link>
      <pubDate>Sun, 16 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/11/16/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95/</guid>
      <description>最近都是用gcc+vim写代码，昨天突然写个代码算法出个逻辑bug，因为用了大量递归调用，DEB半天出不来也是醉了，于是 学习一下gdb——之</description>
    </item>
    
    <item>
      <title>ACM – hdu5086-water</title>
      <link>/2014/11/08/acm-hdu5086-water/</link>
      <pubDate>Sat, 08 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/11/08/acm-hdu5086-water/</guid>
      <description>&lt;h2 id=&#34;题意&#34;&gt;题意&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;找出子序列和，因为数字过大，mod 1 000 000 007&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>线性时间选择</title>
      <link>/2014/11/08/%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9/</link>
      <pubDate>Sat, 08 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/11/08/%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9/</guid>
      <description>定义 在给定线性序集中n个元素和一个整数k，要求找出n个元素中第k小的数。 方法一 线性时间选择，可以使用堆排序，这样就可以在$O(n+klog_</description>
    </item>
    
  </channel>
</rss>
