<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>软件设计模式 on Svtter&#39;s Blog</title>
    <link>/zh-cn/categories/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 软件设计模式 on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Hao Xiu</copyright>
    <lastBuildDate>Fri, 06 Aug 2021 10:41:16 +0800</lastBuildDate><atom:link href="/zh-cn/categories/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试驱动开发应该怎么做？</title>
      <link>/zh-cn/posts/2021-08-06-how-to-tdd/</link>
      <pubDate>Fri, 06 Aug 2021 10:41:16 +0800</pubDate>
      
      <guid>/zh-cn/posts/2021-08-06-how-to-tdd/</guid>
      <description>&lt;p&gt;测试驱动开发，是一种保证软件质量，提高研发效率的开发方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件设计模式 — 简单工厂模式</title>
      <link>/2015/07/14/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 14 Jul 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/07/14/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>关于软件设计与体系结构的学习</title>
      <link>/2015/05/21/%E5%85%B3%E4%BA%8E%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 21 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/21/%E5%85%B3%E4%BA%8E%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%A6%E4%B9%A0/</guid>
      <description>存在问题，比如进行UML学习的时候，发现简单的设计我也做不出，对UML图掌握程度比较差。 此外，设计模式并没有好好地敲代码，理解的也不够透彻。</description>
    </item>
    
    <item>
      <title>软件设计模式 — 行为型模式</title>
      <link>/2015/05/21/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 21 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/21/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>代码全部贴在github。因为UML图挂在processon上了，不过没有加连接。等写完全文就把链接加上。 首先是对象的行为模式： 1. 策略模式 针</description>
    </item>
    
    <item>
      <title>软件设计模式 — 单例模式</title>
      <link>/2015/04/23/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 23 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/23/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>单例模式确保某个类只有一个实例，而且自行实例化，并向整个系统提供者个实例，提供一个访问它的全局访问点。 核心是：创造私有的构造函数 例如：只有一</description>
    </item>
    
    <item>
      <title>软件设计模式 — 适配器模式</title>
      <link>/2015/04/23/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 23 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/23/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>4该模式的目标是，通过一个代理(Adapter)，在原来的类(Adaptee)和客户(Client)之间进行协调，从而达到兼容的目的。 例如：</description>
    </item>
    
    <item>
      <title>正方形是否是长方形的子类？</title>
      <link>/2015/04/09/%E6%AD%A3%E6%96%B9%E5%BD%A2%E6%98%AF%E5%90%A6%E6%98%AF%E9%95%BF%E6%96%B9%E5%BD%A2%E7%9A%84%E5%AD%90%E7%B1%BB%EF%BC%9F/</link>
      <pubDate>Thu, 09 Apr 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/04/09/%E6%AD%A3%E6%96%B9%E5%BD%A2%E6%98%AF%E5%90%A6%E6%98%AF%E9%95%BF%E6%96%B9%E5%BD%A2%E7%9A%84%E5%AD%90%E7%B1%BB%EF%BC%9F/</guid>
      <description>依据里氏代换原则，子类型必须能够替换掉它们的父类型，子类继承了父类，那么子类可以以父类的身份出现 — 在软件中，把父类都替换成它的子类，程序的行</description>
    </item>
    
  </channel>
</rss>
