<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习 on Svtter&#39;s Blog</title>
    <link>/zh-cn/categories/%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 学习 on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Hao Xiu</copyright>
    <lastBuildDate>Thu, 31 Jan 2019 01:00:00 +0800</lastBuildDate><atom:link href="/zh-cn/categories/%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>编程语言与知识基础</title>
      <link>/2019/01/31/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 31 Jan 2019 01:00:00 +0800</pubDate>
      
      <guid>/2019/01/31/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%9F%BA%E7%A1%80/</guid>
      <description>随着一部分编程经验的增长，我越来越觉得，是在知识基础上实现应用的工具。 最初，在我进行应用编码的时候，往往让我 stuck 的东西就是基础知识。这种基础知</description>
    </item>
    
    <item>
      <title>将已经运行的进程切换到后台</title>
      <link>/2019/01/17/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-linux-%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Thu, 17 Jan 2019 01:00:00 +0800</pubDate>
      
      <guid>/2019/01/17/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-linux-%E8%BF%9B%E7%A8%8B/</guid>
      <description>之前一直都是用 screen 来后台运行 Linux 进程，但是 screen 对于已经在运行的进程就不方便处理了，这个时候怎么办呢？ Run some SOMECOMMAND 1.** ctrl+z **to stop (pause) the program and get back to the shell 2. bg to run it in the</description>
    </item>
    
    <item>
      <title>我应该学哪个深度学习框架？</title>
      <link>/2019/01/02/%E6%88%91%E5%BA%94%E8%AF%A5%E5%AD%A6%E5%93%AA%E4%B8%AA%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%EF%BC%9F/</link>
      <pubDate>Wed, 02 Jan 2019 01:00:00 +0800</pubDate>
      
      <guid>/2019/01/02/%E6%88%91%E5%BA%94%E8%AF%A5%E5%AD%A6%E5%93%AA%E4%B8%AA%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%EF%BC%9F/</guid>
      <description>答案似乎显然意见 😉</description>
    </item>
    
    <item>
      <title>使用 beego 一键生成 API</title>
      <link>/2018/12/28/%E4%BD%BF%E7%94%A8-beego-%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90-api/</link>
      <pubDate>Fri, 28 Dec 2018 01:00:00 +0800</pubDate>
      
      <guid>/2018/12/28/%E4%BD%BF%E7%94%A8-beego-%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90-api/</guid>
      <description>&lt;p&gt;首先要吐槽一点：beego 的文档对于新手实在是太不友好了。&lt;/p&gt;
&lt;p&gt;beego 的官方文档会出现一些问题，比如 tutorials 里面，应该是 &lt;code&gt;beego run&lt;/code&gt; 而不是 &lt;code&gt;beego run hello&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;beego-是啥&#34;&gt;beego 是啥&lt;/h2&gt;
&lt;p&gt;beego 是 golang 的一个 web 开发框架，集成了不少远 golang 没有的有价值的函数，对于快速开发高性能的 go 应用有不少帮助。&lt;/p&gt;
&lt;p&gt;如果想开发简单的 go 应用，其实可以不使用 golang 框架，因为 go 本身就定义为云计算时代 C 语言，很多功能其实以及包含了，没有必要学习一个框架给自己增加不必要的麻烦。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迁移 Django Model id 为 uuid</title>
      <link>/2018/12/06/%E8%BF%81%E7%A7%BB-django-model-id-%E4%B8%BA-uuid/</link>
      <pubDate>Thu, 06 Dec 2018 01:00:00 +0800</pubDate>
      
      <guid>/2018/12/06/%E8%BF%81%E7%A7%BB-django-model-id-%E4%B8%BA-uuid/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.klette.us/migrate-django-models-to-uuid-primary-key/&#34;&gt;https://www.klette.us/migrate-django-models-to-uuid-primary-key/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;又是一篇渣翻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;老设计决策有时候会让你很难受，下面就是一个例子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pycharm Tips</title>
      <link>/2018/11/12/pycharm-tips/</link>
      <pubDate>Mon, 12 Nov 2018 01:00:00 +0800</pubDate>
      
      <guid>/2018/11/12/pycharm-tips/</guid>
      <description>最近使用 Pycharm ，有时候引用包的时候很不方便，错误的显示 package 不存在。出现这个问题的本质是因为：代码检查的位置没有设置好。 那么怎么解决这个问题呢？偶尔</description>
    </item>
    
    <item>
      <title>python functools</title>
      <link>/2018/10/21/python-functools/</link>
      <pubDate>Sun, 21 Oct 2018 01:00:00 +0800</pubDate>
      
      <guid>/2018/10/21/python-functools/</guid>
      <description>Python functools 一直有个很好的特性，叫做 partial ，片函数，一直都没有使用过。最近通过阅读别人的代码，学会了这一技能，着实好用。 使用 partial，可以把一些固</description>
    </item>
    
    <item>
      <title>笔记列表</title>
      <link>/2018/03/30/%E7%AC%94%E8%AE%B0%E5%88%97%E8%A1%A8/</link>
      <pubDate>Fri, 30 Mar 2018 01:00:00 +0800</pubDate>
      
      <guid>/2018/03/30/%E7%AC%94%E8%AE%B0%E5%88%97%E8%A1%A8/</guid>
      <description>sphinx-learn algorithm_note python_note 这些笔记用 Sphinx 进行书写的，Sphinx 着实不是特别好用，学习曲线有些陡峭，后面打算切换到语雀什么的，可能会舒服一些。就是可能不够自由。 如</description>
    </item>
    
    <item>
      <title>UML – 学习笔记</title>
      <link>/2015/06/30/uml-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 30 Jun 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/06/30/uml-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>用例图 扩展和包含： 扩展(extend)： extend关系是对基用例的扩展，基用例是一个完整的用例，即使没有子用例的参与，也可以完成一个完整的</description>
    </item>
    
    <item>
      <title>近期算法笔记</title>
      <link>/2015/05/08/%E8%BF%91%E6%9C%9F%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 08 May 2015 01:00:00 +0800</pubDate>
      
      <guid>/2015/05/08/%E8%BF%91%E6%9C%9F%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</guid>
      <description>算法书籍 莫队算法 最大团 最短路 A _搜索算法——图形搜索算法，从给定起点到给定终点计算出路径。其中使用了一种启发式的估算，为每个节点估算通过该节</description>
    </item>
    
  </channel>
</rss>
