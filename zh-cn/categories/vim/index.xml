<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on Svtter&#39;s Blog</title>
    <link>/zh-cn/categories/vim/</link>
    <description>Recent content in Vim on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Hao Xiu</copyright>
    <lastBuildDate>Fri, 15 Dec 2017 01:00:00 +0800</lastBuildDate><atom:link href="/zh-cn/categories/vim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Write with Vim – 1</title>
      <link>/2017/12/15/writewithvim-1/</link>
      <pubDate>Fri, 15 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>/2017/12/15/writewithvim-1/</guid>
      <description>本文最初发表于2015年，但是个人认为写的尚可，就搬运到这里来，其中有些知识有些老旧，有时间的时候再更新一下。 Write with Vim – 2 前言 [2014] 大约在一年前使</description>
    </item>
    
    <item>
      <title>Write with Vim – 2</title>
      <link>/2017/12/15/writewithvim-2/</link>
      <pubDate>Fri, 15 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>/2017/12/15/writewithvim-2/</guid>
      <description>Write with vim – 1 Vim的下一步 对我自己而言，也是在这一步。 现在你对Vim已经有所了解，hjkl肯定会，f也能熟用，,可能被你映射成了&amp;lt;lea</description>
    </item>
    
    <item>
      <title>vim的补全插件</title>
      <link>/2017/08/06/vim%E7%9A%84%E8%A1%A5%E5%85%A8%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Sun, 06 Aug 2017 01:00:00 +0800</pubDate>
      
      <guid>/2017/08/06/vim%E7%9A%84%E8%A1%A5%E5%85%A8%E6%8F%92%E4%BB%B6/</guid>
      <description>&lt;p&gt;Vim的补全插件大体上分4个阵营，如&lt;code&gt;deoplete&lt;/code&gt;, &lt;code&gt;completor.vim&lt;/code&gt;, &lt;code&gt;YCM&lt;/code&gt;, 以及&lt;code&gt;neocomplete&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在我想写这篇文章的时候，&lt;code&gt;YCM&lt;/code&gt;即&lt;code&gt;youcompleteme&lt;/code&gt;还认为自己支持了vim8的新特性&lt;code&gt;async&lt;/code&gt;，即非阻塞补全那一套东西。这个特性是怎么回事呢？输入的时候补全插件会进行补全搜索，这个时候如果不用新的特性，会造成UI卡顿。&lt;/p&gt;
&lt;p&gt;所以，事实上根据我的测试，作者似乎错误的理解了这个新特性，可以看看&lt;a href=&#34;https://github.com/Valloric/YouCompleteMe/issues/2376&#34; target=&#34;_blank&#34;&gt;工单&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;不过目前没有时间去搞清楚这个问题。因为我直接选择了&lt;code&gt;completor.vim&lt;/code&gt;，这个插件完美实现了这个功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vim-另存为</title>
      <link>/2014/12/02/vim-%E5%8F%A6%E5%AD%98%E4%B8%BA/</link>
      <pubDate>Tue, 02 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/12/02/vim-%E5%8F%A6%E5%AD%98%E4%B8%BA/</guid>
      <description>本文出自svtter.com 想要另存一个文件名，但是vim另存的方法。。然后发现了sav这个东西。 help文件中是这么描述的: :sav[eas][!] [++opt] {file} 用文件名</description>
    </item>
    
    <item>
      <title>vim的相关记录</title>
      <link>/2014/11/27/vim%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 27 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/11/27/vim%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</guid>
      <description>本文出自&amp;lt;svtter.com&amp;gt; vim的部分插件记录 snipmate vim中的textmate vimwiki Vimpress : Manage wordpress blog posts from Vim calendar vimmailr.zip : Send (MAPI) mail from vim VOom</description>
    </item>
    
    <item>
      <title>vim-tips</title>
      <link>/2014/11/08/vim-tips/</link>
      <pubDate>Sat, 08 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>/2014/11/08/vim-tips/</guid>
      <description>拾遗 使用q:查看历史命令 @*执行寄存器命令 高亮特定文件</description>
    </item>
    
  </channel>
</rss>
