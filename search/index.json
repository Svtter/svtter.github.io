[{"content":"telepath是 wagtail 开发的一个库，可以用于对 python 对象进行转换。\n其最大的好处是，将原本复杂的 python class -\u0026gt; JSON -\u0026gt; Javascript class，转换成 python class -\u0026gt; Javascript class。\n更具体的内容可以参考tutorial。\n那么有没有可能在这个基础上，让 React 和 Django 直通呢？ Django Bridge 就是做这个工作的。\nDjango Bridge 允许用户直接返回 JSON 结构，然后 React 根据 JSON 结构进行解析，对应渲染 React Component。\n问题是什么 学习成本。如果 django bridge 是一个团队中大家都熟悉的东西，那么上手不慢。但是如果大家都不太熟悉，那么引入 django bridge，需要花时间学习。 调试成本。相比于 http JSON，这种方式依赖于 Django Bridge 对 JSON 的解析。调试起来可能会有一定的困难。 对于已有的项目，代码中可能存在基本通信框架，那么这个库可能会导致旧代码的改造。 其他的内容，在Should I use it?中有所提及，可供参考。\n有什么优势 虽然是前后端分离，但不需要考虑 session 和 cookie 的管理了。也不需要考虑 JWT 的问题。(是不是分离了也不需要管理呢？) 官网原文：If you\u0026rsquo;re about to build a web app or SaaS product with Django and React, this library could save you a lot of time. It provides all the necessary tools to integrate a React frontend with Django and includes a project template with simple Vite-based frontend tooling to get you started. 更多的内容，请移步官网阅读。\n","date":"2025-03-10T19:34:19+08:00","permalink":"https://svtter.cn/p/django-bridge-and-telepath-make-decode-easier.md/","title":"Django Bridge and Telepath Make Decode Easier.md"},{"content":"ComfyUI 是一个使用生成模型进行图像处理的工作流工具，可以很好的处理图像和生成图像。 为了能够流畅运行，我将其部署到服务器上。直接根据官方链接去跑，非常流畅。\n问题和解答 ComfyUI 一般是桌面版本，服务器上也能使用吗？ 是的。实际上 ComfyUI 是基于 WEB 开发的。如果自己部署，搞复杂一点，可以自己部署一个 nginx server，中间套一个 user auth，来提供服务。 如果追求简单化，直接 python main.py 然后转发即可。\n","date":"2025-03-10T16:54:57+08:00","image":"https://svtter.cn/p/comfyui-start.md/pics/image_hu_375b92263e852d66.png","permalink":"https://svtter.cn/p/comfyui-start.md/","title":"ComfyUI Start.md"},{"content":"如果你想要在本地构建一个 RAG 系统，我们可以使用 ollama 来做基本的模型，使用 llamaindex 构建 agent。\n因为 llamaindex 默认使用 openai，我们需要首先调整默认的 embedding 模型和 llm 模型。\n1 2 Settings.embed_model = OllamaEmbedding(model_name=model_name, base_url=sdmicl[1]) Settings.llm = Ollama(model=sdmicl[0], base_url=sdmicl[1], request_timeout=360.0) base_url 需要替换成你自己的 ollama 实例，例如 http://localhost:11434。\n如果目录下的都是 txt 或者 md 数据，可以直接使用 SimpleDirectoryReader 来读取基本的数据。\n1 2 # Create a RAG tool using LlamaIndex documents = SimpleDirectoryReader(\u0026#34;data\u0026#34;).load_data() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 from llama_index.core import VectorStoreIndex, SimpleDirectoryReader, Settings from llama_index.embeddings.ollama import OllamaEmbedding def get_agent(model_name: str): Settings.embed_model = OllamaEmbedding(model_name=model_name, base_url=sdmicl[1]) Settings.llm = Ollama(model=sdmicl[0], base_url=sdmicl[1], request_timeout=360.0) # Create a RAG tool using LlamaIndex documents = SimpleDirectoryReader(\u0026#34;data\u0026#34;).load_data() index = VectorStoreIndex.from_documents(documents) query_engine = index.as_query_engine() async def search_documents(query: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Useful for answering natural language questions about an personal essay written by Paul Graham.\u0026#34;\u0026#34;\u0026#34; response = await query_engine.query(query) return str(response) agent = FunctionAgent( name=\u0026#34;Agent\u0026#34;, description=\u0026#34;Useful for multiplying two numbers and searching documents\u0026#34;, tools=[multiply, search_documents], llm=ollama, system_prompt=\u0026#34;You are a helpful assistant that can multiply two numbers and search documents to answer questions\u0026#34;, ) return agent async def main(): models = (\u0026#39;bge-m3\u0026#39;, \u0026#39;nomic-embed-text\u0026#39;,) for model_name in models: print(f\u0026#39;model: {model_name}\u0026#39;) agent = get_agent(model_name=model_name) response = await agent.run(\u0026#34;What did the paul graham do in college? Also, what\u0026#39;s 7 * 8?\u0026#34;) print(str(response)) print(\u0026#34;Done.\u0026#34;) print(\u0026#39;-\u0026#39; * 100) await main() ","date":"2025-03-09T12:44:24+08:00","permalink":"https://svtter.cn/p/rag-with-llamaindex-and-ollama.md/","title":"RAG With Llamaindex and Ollama.md"},{"content":"上周为了开发一个新的应用，测试了 langchain，发现全是坑，官方示例很难用。\n主要问题在于 langchain 0.1, 0.2, 0.3 版本变化很大。\n这周尝试了一下 llamaindex，调试了一上午，搞定，发个链接出来。\n源代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # %% [markdown] # # Playing with llamaindex # # This is llamaindex tutorial. I\u0026#39;m trying it. # %% from dotenv import load_dotenv, find_dotenv load_dotenv(find_dotenv()) # %% %pip install llama-index-llms-ollama llama-index-llms-siliconflow llama-index-llms-paieas llama-index-llms-zhipuai llama-index-llms-openrouter # %% import os import asyncio from llama_index.core.agent.workflow import FunctionAgent # from llama_index.llms.siliconflow import SiliconFlow # from llama_index.llms.openrouter import OpenRouter # from llama_index.llms.paieas import PaiEas # from llama_index.llms.zhipuai import ZhipuAI from llama_index.llms.ollama import Ollama def multiply(a: float, b: float) -\u0026gt; float: return a * b # llm_1 = PaiEas(model=\u0026#34;qwen-turbo\u0026#34;, api_key=os.getenv(\u0026#34;QWEN_API_KEY\u0026#34;), api_base=\u0026#34;https://dashscope.aliyuncs.com/compatible-mode/v1\u0026#34;) # llm_2 = SiliconFlow(api_key=os.getenv(\u0026#34;SILICONFLOW_API_KEY\u0026#34;)) # llm_3 = ZhipuAI(model=\u0026#34;glm-4\u0026#34;, api_key=os.getenv(\u0026#34;ZHIPU_API_KEY\u0026#34;)) mac_local = (\u0026#39;llama3.2\u0026#39;, \u0026#34;http://192.168.2.100:11434\u0026#34;) sdmicl = (\u0026#39;llama3.2\u0026#39;, \u0026#39;you own ip\u0026#39;) ollama = Ollama(model=sdmicl[0], base_url=sdmicl[1], request_timeout=60.0) agent = FunctionAgent( name=\u0026#34;Agent\u0026#34;, description=\u0026#34;Useful for multiplying two numbers\u0026#34;, tools=[multiply], llm=ollama, system_prompt=\u0026#34;You are a helpful assistant that can multiply two numbers\u0026#34;, ) async def main(): print(\u0026#34;Starting...\u0026#34;) response = await agent.run(\u0026#34;What is 1234 * 4567?\u0026#34;) print(str(response)) print(\u0026#34;Done\u0026#34;) await main() # %% 回答几个问题 为什么不使用 openai？ 一个月会员太贵。\n为什么不使用 zhipuai，paise，以及 siliconflow? 用了，api 全都不通，大概率和 llamaindex 不是适配。\n全都会报错\n1 WorkflowRuntimeError: Error in step \u0026#39;run_agent_step\u0026#39;: object of type \u0026#39;NoneType\u0026#39; has no len(). 为什么不用 openrouter？ chat 模型不行。必须是functionuseLLM（来自 llamaindex）\n","date":"2025-03-08T12:04:25+08:00","permalink":"https://svtter.cn/p/llamaindex-tutorial.md/","title":"Llamaindex Tutorial.md"},{"content":"由于之前使用的 hugo 版本太低，更新需要费很多功夫，于是我更新了 hugo，现在只需要关注文章即可。\n我现在使用的新的主题是 hugo-theme-stack.\n因为我的 hugo 源文件 和 \u0026lt;username\u0026gt;.github.io 不再同一个 repo 下，也就是说，我不能使用 branch 来直接配置 gh-pages。\n因此，我调整了 workflow，来适应我的情况。这是我的 workflow 配置文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 name: Deploy to Github Pages on: push: branches: [master] pull_request: branches: [master] jobs: build: runs-on: ubuntu-latest permissions: # Give the default GITHUB_TOKEN write permission to commit and push the # added or changed files to the repository. contents: write steps: - uses: actions/checkout@v4 with: fetch-depth: 0 - name: Cache Hugo resources uses: actions/cache@v4 env: cache-name: cache-hugo-resources with: path: resources key: ${{ env.cache-name }} - uses: actions/setup-go@v5 with: go-version: \u0026#34;^1.17.0\u0026#34; - run: go version - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build run: hugo --minify --gc - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.ACCESS_TOKEN }} external_repository: svtter/svtter.github.io publish_branch: master publish_dir: ./public ","date":"2025-03-07T11:39:32+08:00","permalink":"https://svtter.cn/p/update-the-hugo.md/","title":"Update the Hugo.md"},{"content":"我在使用 cursor 的时候，发现 cursor 无法读取 pdf 文件。 大家可能也会遇到了类似的问题，就是 cursor 无法读取一些特殊格式的文件。 这个时候就需要 MCP 来搞事情。\nMCP 协议最近很火；MCP 是将大模型和工具链接在一起的协议。这样一来，大模型可以很好的使用工具来获得它想要的信息。\n明确支持 MCP 协议的典型公司有几个（来自 poe）:\nClaude: 由Anthropic开发的Claude系列模型是MCP协议的主要支持者之一。Claude通过MCP协议可以直接连接到各种数据源，实现更高效的数据交互和处理。 Zed: 这是一个开发工具，正在与Anthropic合作，准备接入MCP协议。 Replit: 作为一个在线编程环境，Replit也在与Anthropic合作，计划支持MCP协议。 Codium: 这个开发工具同样在与Anthropic合作，准备接入MCP协议。 Sourcegraph: 作为代码搜索和导航工具，Sourcegraph也在考虑支持MCP协议。 除此之外，根据 MCP 协议，也有工程师实现了 Bridge： https://github.com/bartolli/mcp-llm-bridge\n废话少说，我们看看如何使用 MCP，让大模型读取 PDF\nExample 首先，下载一个支持 MCP 协议的工具\n1 git clone git@github.com:vivekVells/mcp-pandoc.git 配置一下本地的 cursor，如 .cursor/mcp.json\n1 2 3 4 5 6 7 8 { \u0026#34;mcpServers\u0026#34;: { \u0026#34;mcp-pandoc\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;uvx\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;mcp-pandoc\u0026#34;] } } } 然后就可以在 agent 模式直接调用读取 pdf 了。agent 就可以愉快的自己做事情了。\n今天 manus 很火爆。manus 基于的技术应该差不多。\n相关资料 anthropic blog mcpcn ","date":"2025-03-06T22:46:09+08:00","permalink":"https://svtter.cn/p/usable-mcp-server-for-pdf.md/","title":"Usable MCP Server for PDF.md"},{"content":"周天开发了一个基于大模型的应用，使用了 openrouter，遇到了一些问题，记录一点收获。\n不支持 embedding 最大的问题就是不支持 embedding API。虽然 openrouter 已经支持了 openai 等不同的模型的 API endopint， 但是 embedding 是开发 RAG 应用的关键。不支持 embedding 使得 openrouter 在实际应用开发上无所作为。\n","date":"2025-03-03T11:45:12+08:00","permalink":"https://svtter.cn/p/openrouter-usage.md/","title":"Openrouter Usage.md"},{"content":"无论当前服务器设置如何，输出Asia/Shanghai的时间。\n1 2 3 4 5 6 7 8 9 10 11 12 import datetime import pytz utc_now = datetime.datetime.utcnow() # Get current time in UTC utc_timezone = pytz.utc utc_now = utc_timezone.localize(utc_now) # Localize the time as UTC # Convert to another timezone, e.g., \u0026#39;America/New_York\u0026#39; new_timezone = pytz.timezone(\u0026#39;Asia/Shanghai\u0026#39;) new_timezone_time = utc_now.astimezone(new_timezone) print(new_timezone_time.strftime(\u0026#39;%Y-%m-%d %H:%M:%S %Z%z\u0026#39;)) # Display time in the new timezone ","date":"2025-02-28T17:46:29+08:00","permalink":"https://svtter.cn/p/python-timezone.md/","title":"Python Timezone.md"},{"content":"Functional programming (FP) 使用了接近一年的时间，又有了很多新的想法。这里主要说说问题。\n最大的问题就是效率问题。\n如果使用基于类的方法，通过继承，我们可以很快的修改一些功能，产品可以快速上线。\n但是使用函数式编程则很难解决这个问题。\n例如：\n1 2 3 4 5 6 7 8 9 class Cat(object): def sleep(self): # ... self.close_eye() # ... def close_eye(self): print(\u0026#34;slow eye closed\u0026#34;) 如果想要调整 close_eye 的逻辑，那么直接修改 close_eye 即可。\n例如\n1 2 3 4 5 6 7 8 9 class SmartCat(object): def sleep(self): # ... self.close_eye() # ... def close_eye(self): print(\u0026#34;fast close\u0026#34;) 相比之下，函数式编程可能是这样\n1 2 3 4 5 6 7 def sleep(): close_eye() def close_eye(): print(\u0026#39;eye closed\u0026#39;) 如果要修改close_eye，则需要首先修改sleep\n1 2 3 4 def sleep(close_eye=close_eye): # ... close_eye() # ... 这样 sleep 接受 close_eye 作为参数，原本的函数作为默认值。\n调用改为\n1 2 3 4 5 def fast_close_eye(): print(\u0026#39;fast close\u0026#39;) sleep(close_eye=fast_close_eye) 这里比较麻烦的是，违反了开闭原则。我们不得不修改之前的代码，还要考虑之前代码的可维护性。\n因此，我认为在这个场景，FP 不太合适。\n","date":"2025-02-26T11:02:33+08:00","permalink":"https://svtter.cn/p/fp-problem.md/","title":"FP Problem.md"},{"content":"这几天几个我关注的高质量公众号都停更了他们原来的内容，转向了 AI。\n但是我的博客仍然会更新编程相关的文章。\n目前 AI 还没有达到让我完完全全不用动脑的程度。大多数情况下，我还是使用它的自动补全，而不是 compose with agent。 因为生成的质量一般般。 AI 还不能很好的理解大段的文字，以及背后的含义。我认为现在的 LLMs 就是一个相对性能较强的多任务 NLP 解析器。\n当然，尽管只是一个多任务 NLP 解析器，其能力已经可以做成大量的事情了。如果把他的性能升级考虑进去，那么确实会有更多的想象力。\n不过目前为止（2025年02月24日），做事情效率更好的方式，还是把知识 cache 到我的脑子。\nLLMs 是一个新的索引器，他可以将之前存储在互联网和磁盘上的知识快速检索出来供我使用。\n但是我自己大脑中的知识图谱，是初步告诉我应该检索什么，如何提问，以及整理需求的第一线。\n因此，如果我是一个数字人，那么 coding post 是我更新大脑中 cache 以及知识图谱的过程。\n最后，我认为几个老技术关注 AI 多一点也没什么问题。AI 正在创造更大的价值，Coding Skill 尽管仍有效果，但是贬值已经是不可否认的事实了。\n","date":"2025-02-24T22:12:12+08:00","permalink":"https://svtter.cn/p/why-i-still-write-blog-post-about-coding.md/","title":"Why I Still Write Blog Post About Coding.md"},{"content":"在 torch.utils.data 中，有两个类，一个是Dataset，另一个是DataLoader。\n这两个类的主要区别是什么？\nDataset 一般用于读取数据集的基础数据。例如，在 torch 给出的官网说明中，用于展示数据集的数量，以及用于神经网络训练的单个样本。\n1 2 3 4 5 6 7 8 class FaceLandmarkDataset(Dataset): def __init__(self): ... def __len__(self): \u0026#34;\u0026#34;\u0026#34;表示数据集的数量\u0026#34;\u0026#34;\u0026#34; def __getitem__(self, idx): \u0026#34;\u0026#34;\u0026#34;返回某个下标的数据组合。例如，如果是图像和标签，应该是 {\u0026#39;img\u0026#39;: img, \u0026#39;label\u0026#39;: label} \u0026#34;\u0026#34;\u0026#34; 与之相对的，DataLoader 则是一个可以并行读取数据的类。一般情况下，不需要进行继承然后改写。\n所以我们主要说说怎么用。\n1 2 dataloader = DataLoader(transformed_dataset, batch_size=4, shuffle=True, num_workers=0) 我们可以看到，因为 DataLoader 的存在，因此实际上我们在实现 Dataset 的时候:\n不需要关注 shuffle: 为了神经网络训练的 batch不聚集在一个地方 不需要考虑并行读取，因为有 num_worker 不需要考虑 batch_size 因此，DataLoader 可以比较容易的完成一些数据集处理前的必要工作。\n如果使用 lightning，那么还需要进一步了解 DataModule。我会在另外一篇博客中说明。\n","date":"2025-02-24T22:01:57+08:00","permalink":"https://svtter.cn/p/dataset-%E5%92%8C-dataloader-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88/","title":"Dataset 和 DataLoader 的区别是什么"},{"content":"在训练模型时，我们应该尽可能的把数据和代码放在同一个位置。\n放在同一个位置可以避免路径的问题，例如给出数据的绝对路径等。\n比如，如果我将路径设置为，./data/，那么我只需要把数据放在./data目录下即可。\n我可以通过\n1 ln -s $(source-path-of-dataset) ./data 来将数据从其他位置链接过来。\n如果在相同的主机上，git 是可以自动同步这些 link 的。\n但如果在不同的主机上，就需要自己做好管理了。\n","date":"2025-02-24T14:34:56+08:00","permalink":"https://svtter.cn/p/where-to-put-your-data-folder.md/","title":"Where to Put Your Data Folder.md"},{"content":"How to set dynamic version in PDM.\nChange the pyproject.toml\n1 2 3 4 [project] ... - version = \u0026#34;0.1.0\u0026#34; remove this line + dynamic = [\u0026#34;version\u0026#34;] Add new configuration:\n1 2 3 [tool.pdm.version] source = \u0026#34;file\u0026#34; path = \u0026#34;mypackage/__init__.py\u0026#34; ","date":"2025-02-19T16:46:24+08:00","permalink":"https://svtter.cn/p/dynamic-version-in-pdm.md/","title":"Dynamic Version in PDM.md"},{"content":"我们有时候会有 SSL 需求，但是国内的证书都需要买，价格也有问题，因此这里写一篇博客，教会大家如何使用 certbot 和 let's encrypt。\nLet's Encrypt 是一个免费的 SSL 服务。 certbot用来自动化 ssl 签名，来提供 https。\nDebian/Ubuntu 安装依赖 1 2 sudo apt update sudo apt install certbot python3-certbot-nginx 添加配置文件 1 sudo nano /etc/nginx/sites-available/subdomain.example.com.conf 文件中添加 nginx 的配置信息\n1 2 3 4 5 6 7 8 9 10 11 server { listen 80; server_name subdomain.example.com; root /var/www/subdomain.example.com; index index.html index.htm; location / { try_files $uri $uri/ =404; } } 启用和部署 HTTPS 启用配置文件： sudo ln -s /etc/nginx/sites-available/subdomain.example.com.conf /etc/nginx/sites-enabled/.\n添加域名即可\n1 sudo certbot --nginx -d subdomain.example.com. ","date":"2025-02-19T15:58:51+08:00","permalink":"https://svtter.cn/p/certbot-self-signed.md/","title":"Certbot Self Signed.md"},{"content":"我们有时候希望在本地而不是 overleaf 上编译 latex 文件。这篇文章提供了一个方法。\n我们可以用 Docker 来构建一个编译环境。Dockerfile 如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 使用 TeXLive 官方镜像作为基础镜像 FROM texlive/texlive:latest # 安装必要的包 RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ make \\ git \\ \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/* # 设置工作目录 WORKDIR /paper # 复制论文源文件到容器中 COPY . . # 设置默认命令 CMD [\u0026#34;latexmk\u0026#34;, \u0026#34;-pdf\u0026#34;, \u0026#34;0_main.tex\u0026#34;] 构建镜像：docker build -t paper . 构建PDF: docker run --rm -v $(pwd):/paper paper 构建命令可以自己修改。比如你的主文件是main.tex，就可以修改成CMD [\u0026quot;latexmk\u0026quot;, \u0026quot;-pdf\u0026quot;, \u0026quot;0_main.tex\u0026quot;]。\n","date":"2025-02-17T16:39:50+08:00","permalink":"https://svtter.cn/p/compile-latex-local.md/","title":"Compile Latex Local.md"},{"content":"之前在服务器上经常安装 oh-my-zsh；但是网络有时候不好，安装起来很费力。这个时候，就需要一个很简单的 zsh config，能干活就行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 # 设置编辑器 export EDITOR=\u0026#34;vim\u0026#34; # 设置提示符 PROMPT=\u0026#39;%F{blue}%n%f@%F{green}%m%f %F{cyan}%~%f %# \u0026#39; # 别名定义 alias ls=\u0026#39;ls --color=auto\u0026#39; alias ll=\u0026#39;ls -la -G\u0026#39; alias c=\u0026#39;clear\u0026#39; alias dc=\u0026#39;docker compose\u0026#39; HISTFILE=\u0026#34;$HOME/.zsh_history\u0026#34; HISTSIZE=10000000 SAVEHIST=10000000 setopt BANG_HIST # Treat the \u0026#39;!\u0026#39; character specially during expansion. setopt EXTENDED_HISTORY # Write the history file in the \u0026#34;:start:elapsed;command\u0026#34; format. setopt INC_APPEND_HISTORY # Write to the history file immediately, not when the shell exits. setopt SHARE_HISTORY # Share history between all sessions. setopt HIST_EXPIRE_DUPS_FIRST # Expire duplicate entries first when trimming history. setopt HIST_IGNORE_DUPS # Don\u0026#39;t record an entry that was just recorded again. setopt HIST_IGNORE_ALL_DUPS # Delete old recorded entry if new entry is a duplicate. setopt HIST_FIND_NO_DUPS # Do not display a line previously found. setopt HIST_IGNORE_SPACE # Don\u0026#39;t record an entry starting with a space. setopt HIST_SAVE_NO_DUPS # Don\u0026#39;t write duplicate entries in the history file. setopt HIST_REDUCE_BLANKS # Remove superfluous blanks before recording entry. setopt HIST_VERIFY # Don\u0026#39;t execute immediately upon history expansion. setopt HIST_BEEP # Beep when accessing nonexistent history. # 启用 fzf 相关功能 [ -f /usr/share/doc/fzf/examples/key-bindings.zsh ] \u0026amp;\u0026amp; source /usr/share/doc/fzf/examples/key-bindings.zsh [ -f /usr/share/doc/fzf/examples/completion.zsh ] \u0026amp;\u0026amp; source /usr/share/doc/fzf/examples/completion.zsh setopt no_nomatch 除了高亮ls之外，配置了docker compose。\n","date":"2025-02-15T21:11:14+08:00","permalink":"https://svtter.cn/p/easy-zshrc-config.md/","title":"Easy Zshrc Config.md"},{"content":"使用 PVE + Debian 组合后，开发变得愉快了很多。今天遇到了一个新的问题，磁盘空间不足，拓展之后磁盘大小仍然不变。\n我们讨论的是使用 LVM（逻辑卷管理器）的情况。\n在这种情况下，我们需要首先看看系统。\n1 2 3 4 5 6 7 8 9 root@debian:/home/svtter# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 132G 0 disk ├─sda1 8:1 0 487M 0 part /boot ├─sda2 8:2 0 1K 0 part └─sda5 8:5 0 31.5G 0 part ├─debian--vg-root 254:0 0 30.5G 0 lvm / └─debian--vg-swap_1 254:1 0 976M 0 lvm [SWAP] sr0 11:0 1 1.4G 0 rom 此时我们总共有 132G 的可用空间，使用了 31.5 G。\n我们需要调整 /dev/sda5 的大小。\n我们首先需要使用一个 bootable usb。如果你使用的 PVE，你可以直接加载一个 iso 来启动。\n注意：以下的操作不一定具有可复现性。请务必备份你的数据，以防不测。\n在 live system 中，运行parted /dev/sda。\ndebian live system 中，用户名密码为：user/live，切换 root 用户，只需要sudo su。\n在 parted 中，使用 print 查看磁盘情况。\n下面是一个操作样例：\n1 2 3 4 5 6 7 8 9 # 启动 parted 并选择磁盘 parted /dev/sda # 查看当前分区表 print # 调整分区大小（假设要将 /dev/sda5 扩展到最大可用空间） resizepart 5 # 5 是 /dev/sda5 的分区编号 # 按照提示输入新的分区大小，按 Enter 选择默认的最大可用空间 # 退出 parted quit 此时，需要首先resizepart /dev/sda2，也就是逻辑卷组。然后在扩展resizepart /dev/sda5。\n完成拓展后，运行\n1 2 3 pvresize /dev/sda5 vgextend debian-vg /dev/sda5 lvextend -l +100%FREE /dev/debian-vg/root 此时磁盘空间已经拓展了。但是 ext4 文件系统还未适应。\n运行命令来重新调整 ext4 文件系统。\n1 2 e2fsck -f /dev/debian-vg/root resize2fs /dev/debian-vg/root 再次查看\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 root@debian:/home/user# sudo lvdisplay /dev/debian-vg/root --- Logical volume --- LV Path /dev/debian-vg/root LV Name root VG Name debian-vg LV UUID 82SmmD-qnAc-KOIO-1B2Y-ynP3-Mo0E-D12Rq0 LV Write Access read/write LV Creation host, time debian, 2025-02-15 05:49:23 +0000 LV Status available # open 0 LV Size \u0026lt;91.70 GiB Current LE 23475 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 254:0 这样一来，磁盘空间就拓展了。\n","date":"2025-02-15T14:12:37+08:00","permalink":"https://svtter.cn/p/extend-lvm-disk.md/","title":"Extend LVM Disk.md"},{"content":"最近使用 paddlepaddle 比较多，发现了 paddleocr 对模型做了一个区分。有时候会给用户带来一些困惑。这里详细说说。\n实验中用于推理的模型，也就是可训练的模型。一般paddle的模型文件是这样的：\n1 2 -rw-r--r-- 1 root root 420M Feb 12 15:59 model.pdopt -rw-r--r-- 1 root root 275M Feb 12 15:59 model.pdparams 一个是 pdopt 一个是 pdparams。\n这个就是用来在实验过程中进行推理的模型。一般用tools/infer_rec.py。\n如果要实际部署到开发环境，需要将现在的实验中的模型做一个转换。\n需要执行tools/export_model.py来把模型转换成\n1 2 3 inference/en_PP-OCRv3_rec/ ├── inference.pdiparams # 识别inference模型的参数文件 └── inference.json # 识别inference模型的program文件 如此一来，就可以使用 paddlex 或者其他的推理服务来推理了。\n总结 实际上国内的深度学习框架技术上并不差，只不过做的太大，也没有很好的入门教程，所以开发者本身不用。 百度对于自己的名声维护的太差。从之前的公关老大翻车就能看出来。 做个 python web 的类比。如果 torch 是 flask，那么 paddlepaddle 更像是 django。 ","date":"2025-02-15T09:50:49+08:00","permalink":"https://svtter.cn/p/%E5%AE%9E%E9%99%85%E6%8E%A8%E7%90%86%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%AE%9E%E9%AA%8C%E4%B8%AD%E6%8E%A8%E7%90%86%E6%A8%A1%E5%9E%8B/","title":"实际推理模型和实验中推理模型"},{"content":"深度学习环境配置是很多朋友迈不过去的坎。不过有了大模型，遇到问题定位的速度能快很多。\n我花了一些时间去适配老版本的 paddle，搞定了，这里发一篇文章记录一下。\ndocker image 里面，很多 cuda11 镜像，在 cuda12 的环境下是跑不起来的。原因我也不太清楚。这个时候，可以选择大版本一致的 cuda。\n为了保证不影响 server 其他人的环境，不要更新 nvidia 驱动，安装自己的 cuda 版本，然后修改环境变量，就能改变系统的 cuda。\n1 2 3 4 # CUDA_VERSION=11.7 export CUDA_HOME=\u0026#34;/usr/local/cuda-$CUDA_VERSION\u0026#34; export LD_LIBRARY_PATH=\u0026#34;$CUDA_HOME/lib64:$LD_LIBRARY_PATH\u0026#34; export PATH=$CUDA_HOME/bin:$PATH 应用这个环境变量，然后查看nvidia-smi，就能看到版本的变化。\n","date":"2025-02-11T15:41:18+08:00","permalink":"https://svtter.cn/p/cuda-and-paddle.md/","title":"Cuda and Paddle.md"},{"content":"有时候我们希望修改默认的 ip 地址以及 DNS 服务器，来获得更好的网络。\n对 Debian 来说，修改两个文件，一个是/etc/network/interfaces，另一个是/etc/resolv.conf\n对于interfaces来说\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). source /etc/network/interfaces.d/* # The loopback network interface auto lo iface lo inet loopback # The primary network interface allow-hotplug ens18 iface ens18 inet static address 192.168.2.35 netmask 255.255.255.0 gateway 192.168.2.60 在网关是192.168.2.60的时候；\n如果还需要配置 DNS，修改 /etc/resolv.conf\n1 nameserver 192.168.2.60 禁止ipv6\n/etc/sysctl.conf\n1 net.ipv6.conf.all.disable_ipv6 = 1 别忘了重启网络：systemctl restart networking.\n","date":"2025-02-10T20:49:27+08:00","permalink":"https://svtter.cn/p/change-network-of-debian.md/","title":"Change Network of Debian.md"},{"content":"在使用 pdm 的时候，如果更新包很快，有时候会无法更新 lockfile，也就是pdm lock无法根据最新的包生成内容。\n这个时候，可以使用pdm cache info来查看 cache 情况。\n1 2 3 4 5 6 7 8 9 10 11 12 ➜ high-energy git:(main) ✗ pdm cache info Cache Root: /home/svtter/.cache/pdm, Total size: 17.9 MB File Hash Cache: /home/svtter/.cache/pdm/hashes Files: 793, Size: 56 kB HTTP Cache: /home/svtter/.cache/pdm/http Files: 317, Size: 12.1 MB Wheels Cache: /home/svtter/.cache/pdm/wheels Files: 6, Size: 5.6 MB Metadata Cache: /home/svtter/.cache/pdm/metadata Files: 6, Size: 147 kB Package Cache: /home/svtter/.cache/pdm/packages Packages: 0, Size: 0 bytes 一般删除 HTTP Cache 可以解决问题。默认路径是$HOME/.cache/pdm/http。\n","date":"2025-02-09T12:15:25+08:00","permalink":"https://svtter.cn/p/pdm-%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/","title":"PDM 使用过程中的问题"},{"content":"因为经常同时使用多台设备，我经常会遇到在一处写好文章，在另外一台设备继续使用 logseq 的问题。直接复制粘贴显得很笨。\n我大概分了两个阶段处理这个问题。第一个阶段是用移动硬盘，在不同系统之间直接拷贝。这个时候用到 git bare repository.\nStage 1 git init --bare logseq-database.git\n然后再其他的 working git repository 上，添加 remote。例如我的磁盘路径是E:\\。\ngit remote add origin E:\\logseq-database.git\n如此一来可以直接在不同设备之间同步 logseq 数据。\nStage 2 我发现使用移动硬盘还是不太方便。我将一台10年前的 thinkpad 刷机，安装了 gitea。我一开始使用的是 gogs，但是 gogs 对于 submodule 处理不太友好，有莫名其妙的 bug。因此最终还是 使用了 gitea。使用 gitea 之后，我将原本的 git 库迁移到自己的本地机器上。例如：http://gitea.local/svtter/logseq-database.git。\nStage 3 我发现大型文件存储和共享容易出问题。我增加了 git-lfs 的支持，通过\ngit lfs install\n以及\ngit lfs track *.pdf\n来避免大文件在.git目录中留下太多的数据。\nStage 4 定期备份一部分数据到GitHub。但是我现在一般不这么做了。\n使用 git 在合并的时候要注意一个问题。如果文件名称有变化，自动化的合并会直接忽略。 大概是这样：我在两个设备上同时修改了一个文件，其中一个文件不仅仅是修改了内容，还更改了文件名。然后，两个设备分别进行了 git commit。 如此一来，git在进行合并的时候，不会提示冲突。git 自动化合并之后，其中一个设备上所作的修改会消失。\n针对这个问题，处理方法是在合并的时候尽可能采用 rebase 的方法。==\u0026gt; 但是 rebase 合并文件的时候速度很慢，要自己手动处理的内容很多。\n因此，在两个设备上同时修改一个文件的时候，首先要拉一下远端的修改。其次，应尽可能避免修改文件名。否则，可能会导致变更消失。\n好在 git commit 历史记录一直都在。实在不行，就从 commit 记录里找到丢失的部分，然后补充一个新的提交。\n","date":"2025-02-08T18:18:29+08:00","permalink":"https://svtter.cn/p/%E4%BD%BF%E7%94%A8-git-%E7%AE%A1%E7%90%86-logseq-%E6%96%87%E4%BB%B6/","title":"使用 git 管理 logseq 文件"},{"content":"我使用 coolify 来管理多台服务器；但是 coolify 域名管理有点让人迷惑，我一直没能搞定。今天测试了一下，终于搞明白了。\n例如，如果我要部署一个myapp，我的docker-compose.yml应该这样写。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 services: myapp: image: myapp ports: - \u0026#39;8050:80\u0026#39; volumes: - \u0026#39;./data:/app/data\u0026#39; environment: - NODE_ENV=production - \u0026#39;APP_PORT=${APP_PORT_IN_UI}\u0026#39; - \u0026#39;PORT=${PORT_IN_UI:-80} volumes:\u0026#39; - \u0026#39;${COOLIFY_VOLUME_MYAPP}:/app/data\u0026#39; labels: - coolify.managed=true - traefik.enable=true - traefik.http.routers.myapp.rule=Host(`example.myapp.com`) - \u0026#39;traefik.http.routers.myapp.entrypoints=http,https\u0026#39; 80是myapp内部的port，域名用example.myapp.com 如此配置，就可以使用域名了。\n","date":"2025-02-07T17:14:55+08:00","permalink":"https://svtter.cn/p/coolify-%E5%92%8C-traefic-%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/","title":"Coolify 和 Traefic 结合使用"},{"content":"这是迟来的 2024 年全年总结。基于 2024-Q1到Q4。\n去年的总结 2023年终总结定了几个目标， 1）2个独立的研究；2）新的商业计划的landing page, ICP, 以及 OL service；3）确定发展的方向和城市。 拓展的目标：(未完成) 烟知的新节目，(未完成) 技术书籍 Life Q1 大部分时间都是在学校度过的。之后就回到福建，陪着老婆做产康等项目。等到10月份，孩子出生。10-11-12 三个月，大部分时间都在照顾小孩。 2024 年生活变化很大，大部分时间都在福建度过的。第一次为人父母，最大的感想就是，孕育一个小孩的过程非常熬人。因此，应该更加关注快乐的事情。 黑神话悟空通关；艾尔登法环通关。 总的来说：应始终记得，如果一个人总是纠结在不快乐的事情中，是无法前进的。不要把自己放在一个不开心的环境下。\nWork Q1 交付了两个项目；除此之外，开发了django-login-email。在 Q1 编写了 django-login-email，在 Q4 完善使其基本上生产可用。Q2，为 meterhub 和 仪表研究 构建了通用的代码库。Q3，开发了一个前后端通用的代码库。在提升效率上有很大的帮助。 上一个方向已经翻篇一年了，虽然在年末又有一些小小的烦恼，不过大部分事情都翻篇了。可喜可贺。工作上，meterhub 没能按期上线；我估计农历新年之前能否上线已经很不错了。我现在把 meterhub视为是博士阶段的一个交代。年龄不小了，激情多少还是有点，体力似乎有点跟不上。也可能是咖啡喝少了。继续在meterhub上投入时间和精力，也有战略上不想思考的惰性在身上。仔细看看代码库，meterhub 在三年前就已经启动了。陆陆续续更新底层框架，更新内容，变更设计，总体来说是在进步的。可惜的是，迭代到现在还达不到上线的基本要求：稳定和预测可靠。 真正掌握了开发一个软件框架的能力。虽然不知道在 AI 时代这个能力是否还有很大的价值——但足以让我快乐一个季度了。 Academic Q1 整理 response，整理老代码，老数据。Q2，投稿了 SWR，HIOL 发表了。老代码整理完成，重新构建了数据集处理代码库。Q3，开展了很多的工作，但是没有将工作切实的落地；花了不少的时间去补 transformer 的知识缺失。Q4，实际上可用的时间不够多，将有限的时间投入到了 LLMs 上的 llama 和 llava 的部署和验证上。 研究点一：pointer cnn 多模态模型，在实验验证的过程中，遇到困难之后没有继续开展，没坚持下去。私以为是缺乏深度的思考导致。在 2025-Q1 的时候发现，方法实际上有一定的优越性，但是因为部分场景性能不佳，自我否定的心态比较重，从而使得没能继续做下去。2025 需要做个调整。 关于中期报告：原本想在 Q1 完成中期报告，没搞定。仔细想想还是大的研究脉络没有规划好。文献阅读量似乎不是太够。整个知识体系建立的不太好。我觉得可以接受。 论文数量：从发表论文数量的角度看，去年定下的目标没有达成。发论文的速度比较慢（只有一篇），新的研究点速度也比较慢，得加速。 论文能力：论文能力不够纯熟。在 Q2 花了很多时间在写新论文，rebuttal 上面。应该结合 AI 工具和自己的表达来加快内容生产。 好的一面：好的一面是，在2024年，能够更好的掌握实验数据的精确性以及管理相关代码和数据。这对于后续的实验复现，代码复用，增强知识沉淀都有积极的作用。 2025，应该沿着某个研究体系深入拓展，将我正在解决的应用问题反诉到理论问题上。研究方法从原来的深入，到直接接手某一个研究方向，仔细阅读论文，然后出成果。改进别人的研究成果。 Tech skills Q2, Explore Ollama, kubernetes；Q3 functional programming；Q4，涉及到的技术很多。大多数是工程上遇到的很多问题。 编程技巧整体是在提升的，重点在于学习新的编程范式 FP 上。与 FP 密切相关的是 react 生态中的基本开发技巧；AI 工具的使用；网络层工具的使用；虚拟化工具 PVE 上手；总的来说，大部分技术都是应用层和 devops 相关的。2025年或许深入到一个有价值的 IT 技术上，例如和互联网相关的大规模数据/存储/计算上。目前我比较看好分布式计算，结合 GPU、FPGA、CPU 的相关技术，例如 ray，lightning 等。网络层工具的使用是受到受到 Liang 的启发。对于技术采集和应用的帮助非常的大。 问题在哪里 如何变得更好？\n2024 年第一个大问题，是心态上比较容易出问题。有时候会被各种烦心事，搞坏了心态，搞得做不了事情。这不利于未来的发展。这个和环境有一定关系。因此，粗略的得到了一个结论：无论出于什么原因，都不要把自己放在一个相对不利的位置，否则善良都没有发挥的余地。不能只局限于温饱，也不能只做宏观规划。要有远见，要考虑最糟糕的情况，做好最差情况的预案。查理芒格的投资思想可以作为参考。\n第二个大问题，在科研方面和新公司业务上，未能达成量化好的指标。 从表现上看，研究的内容有深入的东西，但是没能快速转化成成果。深入的内容和点不够多，在挑战相对大一点的部分没能竭尽全力，亦或未能充分调动脑筋去攻克。\n明年怎么做 主题：聚焦和达成\n对于2024年目标的讨论 两个独立研究的目标未能完成。研究方面进展的不顺利，其中一个大原因是时间投入不足。但按理来说，即便是时间不够充分，做一个研究点的时间应该是充足的。 从策略的角度来说，研究方向需要适度调整一下，不能一味的只关注视觉的问题了。我不是什么天才，如果一味的去做视觉，其一可能毕业比较麻烦，其二影响未来发展。但是拓展新的研究内容，会影响自己当下研究内容的工作时间。需要做好平衡。 新商业计划的 landing page，ICP license 都已经搞定了。 online service 没有。比我想象的内容要多一些。 发展方向方面，虽然没能做出最终的决策，但是收集了更多的信息。部分信息，例如高校录取条件，可能已经过期了。不得不卷。 2025 新目标 2025年应该做一些更有深度的事情，聚焦。\n生活方面， 应尽可能的完成一些心态上的蜕变。尽管读了很多儒家的书籍，去思考自己面对不同情况下应该如何处理，更进一步提升自己面对困境的能力。善良，并且接收挑战。 学术方面，尽可能在 2025 年毕业。在 Q1 应该投出一篇新的论文，会议或者期刊。Q2 应该完成大论文的基本内容。Q3 毕业。 事业方面，在做的 AI 事业继续做下去，但需要花时间去思考应该达成什么样的目标。 其他的，烟知节目补一下；技术书籍暂且不管。 ","date":"2025-02-04T10:52:24+08:00","permalink":"https://svtter.cn/p/2024-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/","title":"2024 年终总结"},{"content":"数据集浏览是个比较麻烦的事情。尤其是数据集比较大的时候。\nnpy (numpy array) ，h5 文件是两种常见的数据存储方式。 h5 文件的缺点是很容易产生数据损坏。笔者使用的时候多次遇见 h5 文件打不开的问题。 npy 文件在读取速度，文件传输方面具有很明显的优势。缺点是一次性加载到内存中，如果服务器不行，很容易爆掉。\n常见的图像数据集一般是将 label 和 image 分开放。例如 COCO 等。这样一来，也可以用文件浏览器去查看图片，可以快速的观察图片的特点。但一般情况下，我们不会在本地的电脑上查看图片，而是更多的在服务上操作数据集。\n2024，结合 torch，我感觉还是 matplotlib 直接绘图会方便一些。matplotlib 直接绘图一般是展示单张图片。但是如果利用 subplot，可以同时展示更多图片。如果用了 opencv，可以将部分标签值打印上去。不过也有缺点：如果使用的是远程服务器，生成图片的传输过程需要占用较多的带宽。 具体采用什么方式，还得自己做判断呐！\n","date":"2025-01-12T18:31:12+08:00","permalink":"https://svtter.cn/p/%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%B5%8F%E8%A7%88/","title":"图片数据集的浏览"},{"content":" 2024年第四季度已经过去。这是一个充满挑战的季度：研究方面的进展不尽如人意，之前投入大量时间的研究方向在验证后发现暂时无法突破（虽然在2025年找到了新的思路）；工作上则将更多精力投入到项目开发和家庭生活中。尽管遇到了不少挫折，但人生总要向前看，继续努力！\n生活点滴 生活总体平稳：\n孩子健康成长，见证每一个精彩时刻 告别了短暂存续的电玩店 成功戒掉碳酸饮料，但需要警惕果汁摄入过量的问题 工作项目 项目反思 Cathodic系统项目从Q1持续到Q4仍未交付，深度复盘后发现： 核心问题在于需求理解与方案匹配度不足 过度追求技术完美，导致方案过于复杂 客户实际需要的是简单可靠的解决方案 经验教训：在追求技术创新的同时，更要注重方案的实用性和交付效率 学术研究 已完成工作 CRNN性能分析；优化方面，编写了少量的代码。 LLaVA相关模型的性能评估与部署实践 待推进工作 CTC loss改进方案的实现 迁移学习新方法的探索 Feature remap创新思路的落地 其他进展 SWR论文完成重投 深入思考研究团队建设 为自然基金申请做准备 调研人工智能研究机构发展动态 重新审视Few-shot Learning、Swin Transformer和Active Learning 探索LLMs在具体任务中的应用价值 推进表计检测模型的优化 技术积累 开发工具与效率提升 全面迁移到Cursor进行开发，在适当场景引入函数式编程 深入研究PP-OCR源码 搭建并优化Homelab环境 解决多个技术难题： Debian图形界面启动问题 Vite + Electron URL路径问题 Docker加密方案 自动化文档构建 技术栈拓展 React生态系统深度学习 TypeScript高级特性掌握 容器化部署最佳实践 网络代理优化方案 探索新框架：Reflex、Traefik、WriteFreely等 包管理工具对比：pip-tools vs PDM 数据库优化：索引设计与Countless Page 办公自动化：多Word文件合并 AI应用：ChatGPT Canvas集成 工程实践 新方向探索 行业管理系统需求分析 数据中心建设经验总结 项目进展 企业网站WordPress迁移 开源Python包CI/CD实践 Redmine功能扩展 新项目启动： DocWriter LeanCanvas 基于LLMs的笔记应用 MeterHub数据集支持 自动化运维实践 展望未来 季度回顾后发现，工程能力有显著提升 计划引入卡片式学习方法，强化重要知识点 对AI领域发展保持清醒认知，避免跟风，专注有价值的创新方向 详细规划将在年终总结中展开 ","date":"2025-01-01T16:42:42+08:00","permalink":"https://svtter.cn/p/2024-q4-summary/","title":"2024-Q4 Summary"},{"content":"我在使用函数式编程时，遇到了一个问题，背景是这样的：一个项目中存在了大量的函数，这些函数之间的相互调用，使得导致代码逻辑比较复杂。当我想要修改一个逻辑的时候，需要反复的查看代码，以及定义新的函数。\n函数相对独立，本身是一个很好的特点。然而，正是因为相互独立，使得函数和函数的依赖关系缺失，反而造成了程序设计与改动的不方便。\n当我们使用函数的时候，为了能够较好的修改原本的逻辑，可以通过默认参数来构成依赖关系。参数的可替代性，可以使得代码更容易被修改。 但是相比于 OOP 机制而言，FP 的依赖关系不那么显然易见——基于类的成员函数代码，让工程师更容易理解依赖关系。并且，在函数跳转的时候，借助ide或者编辑器，跳转也更加方便。\n然而我这个想法真的正确吗？是否是因为函数编程本身有一些特性我没有使用到呢？\n代码 我遇到问题，代码如下：\n函数式代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 @validate def compute_single( get_id_and_params: t.Callable[[], tuple[int, T.general.Params]], get_full_path: t.Callable[[str], str], *, func_set: BasicFuncSet = FuncSet(), is_write: bool = True, ) -\u0026gt; tuple[result.ComputeResult, pd.DataFrame]: \u0026#34;\u0026#34;\u0026#34;compute single values. is_write: write to file \u0026#34;\u0026#34;\u0026#34; id, params = get_id_and_params() input_data = InputData.from_dict(params) filelist: t.List[result.ResultFile] = [] # 生成写入数据的函数 write_data = use_write_data( id, params[\u0026#34;udl2_file\u0026#34;], filelist.append, current_type=1 if is_zhiliu(params) else 0, # ac 0, dc 1. zhiliu is dc ) # filter period df = func_set.filter(input_data=input_data) if is_write: write_data(df, params[\u0026#34;udl2_file\u0026#34;], get_full_path(params[\u0026#34;out_file_path_1\u0026#34;])) # stat period, support multiple files, but not use this is api call df = (func_set.stat(df, params, interval_jihua=params.get(\u0026#34;interval_jihua\u0026#34;, True)),) df = (dict(iter(row)) for row in df) df = pd.DataFrame(df) if is_write: write_data( df, params[\u0026#34;out_file_path_1\u0026#34;], get_full_path(params[\u0026#34;out_file_path_2\u0026#34;]) ) # model period df = func_set.model(df, params) if is_write: write_data( df, params[\u0026#34;out_file_path_2\u0026#34;], get_full_path(params[\u0026#34;out_file_path_3\u0026#34;]) ) # 包含了三级文件 file_result = result.ComputeResult( status=result.Status.success, msg=\u0026#34;success!\u0026#34;, data=filelist, ) # 返回文件以及最终的DataFrame return file_result, df def write_final_files( ac_df: pd.DataFrame, dc_df: pd.DataFrame, output_path_fn: t.Callable[[str], str], ) -\u0026gt; result.FinalFiles: \u0026#34;\u0026#34;\u0026#34;写入 ac dc 文件\u0026#34;\u0026#34;\u0026#34; ac_file = output_path_fn(\u0026#34;ac\u0026#34;) dc_file = output_path_fn(\u0026#34;dc\u0026#34;) fileutils.to_csv(ac_df, str(ac_file)) fileutils.to_csv(dc_df, str(dc_file)) return result.FinalFiles( ac=result.ResultFile( id=1, current_type=0, original_filename=\u0026#34;all udl2_files\u0026#34;, original_filepath=\u0026#34;null\u0026#34;, in_filename=\u0026#34;all results of udl2_files\u0026#34;, filename=fileutils.get_file_name(str(ac_file)), filepath=str(ac_file), ), dc=result.ResultFile( id=2, current_type=1, original_filename=\u0026#34;all udl2_files\u0026#34;, original_filepath=\u0026#34;null\u0026#34;, in_filename=\u0026#34;all results of udl2_files\u0026#34;, filename=fileutils.get_file_name(str(dc_file)), filepath=str(dc_file), ), ) def collect_files( param_group: T.general.ParamGroup, is_write: bool = True, compute_single: T.ComputeFunc = compute_single, ) -\u0026gt; tuple[list[result.ComputeResult], list[pd.DataFrame]]: \u0026#34;\u0026#34;\u0026#34; 对参数列表里面的数据进行计算，并返回结果列表 compute_single: 计算单一文件的函数 \u0026#34;\u0026#34;\u0026#34; res: t.List[result.ComputeResult] = [] df_list: t.List[pd.DataFrame] = [] for i, p in enumerate(param_group[\u0026#34;param_list\u0026#34;]): def get_id_and_params(): return i, p r, df = compute_single( get_id_and_params, param_group[\u0026#34;get_full_path\u0026#34;], is_write=is_write, ) # r contains stage-1, stage-2, stage-3 files res.append(r) df_list.append(df) return res, df_list def compute( param_group: T.general.ParamGroup, is_write: bool = True, collect_files: T.CollectFilesFunc = collect_files, ) -\u0026gt; result.FinalResult: \u0026#34;\u0026#34;\u0026#34; 计算并返回最终结果 collect_files 是收集文件的函数，也包含了计算单个文件的过程 \u0026#34;\u0026#34;\u0026#34; res, df_list = collect_files(param_group, is_write) # 整理最终的文件 ac_df, dc_df = fileutils.merge_files(res, df_list) output_fn = param_group.get(\u0026#34;output_path\u0026#34;) if output_fn is None: raise ValueError(\u0026#34;output_path is None\u0026#34;) final_files = write_final_files(ac_df, dc_df, output_fn) return result.FinalResult( status=result.Status.success, msg=\u0026#34;success!\u0026#34;, compute_result=res, final_files=final_files, ) 当我需要调整 funcset 的实现时，如果我想对当前的代码进行复用，会写成这样\n1 2 3 4 5 6 7 8 9 10 11 12 13 def get_compute(funcset: BasicFuncSet): \u0026#34;\u0026#34;\u0026#34;隐藏了其他函数的复杂性，直接调用本函数即可完成 compute 函数的生成\u0026#34;\u0026#34;\u0026#34; return functools.partial( controller.compute, collect_files=functools.partial( controller.collect_files, compute_single=functools.partial( controller.compute_single, func_set=funcset, ), ), ) 为了能够修改funset中的内容，我需要不停的重新查看代码，需要不停的查文档，然后来编写代码。尽管这里使用了柯里化来简化代码的参数，但在我看来，实际上帮助不是很大。我仍然需要不停的查询函数的参数，从而降低了编程的速度。\n基于 OOP（面向对象编程）的代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 class Controller(object): def __init__(self, funcset: BasicFuncSet = FuncSet()): self.funcset = funcset @validate def compute_single( self, get_id_and_params: t.Callable[[], tuple[int, T.general.Params]], get_full_path: t.Callable[[str], str], *, is_write: bool = True, ) -\u0026gt; tuple[result.ComputeResult, pd.DataFrame]: \u0026#34;\u0026#34;\u0026#34;compute single values. is_write: write to file \u0026#34;\u0026#34;\u0026#34; id, params = get_id_and_params() input_data = InputData.from_dict(params) filelist: t.List[result.ResultFile] = [] # 生成写入数据的函数 write_data = use_write_data( id, params[\u0026#34;udl2_file\u0026#34;], filelist.append, current_type=1 if is_zhiliu(params) else 0, # ac 0, dc 1. zhiliu is dc ) # filter period df = self.funcset.filter(input_data=input_data) if is_write: write_data( df, params[\u0026#34;udl2_file\u0026#34;], get_full_path(params[\u0026#34;out_file_path_1\u0026#34;]) ) # stat period, support multiple files, but not use this is api call df = ( self.funcset.stat( df, params, interval_jihua=params.get(\u0026#34;interval_jihua\u0026#34;, True) ), ) df = (dict(iter(row)) for row in df) df = pd.DataFrame(df) if is_write: write_data( df, params[\u0026#34;out_file_path_1\u0026#34;], get_full_path(params[\u0026#34;out_file_path_2\u0026#34;]) ) # model period df = self.funcset.model(df, params) if is_write: write_data( df, params[\u0026#34;out_file_path_2\u0026#34;], get_full_path(params[\u0026#34;out_file_path_3\u0026#34;]) ) # 包含了三级文件 file_result = result.ComputeResult( status=result.Status.success, msg=\u0026#34;success!\u0026#34;, data=filelist, ) # 返回文件以及最终的DataFrame return file_result, df def write_final_files( self, ac_df: pd.DataFrame, dc_df: pd.DataFrame, output_path_fn: t.Callable[[str], str], ) -\u0026gt; result.FinalFiles: \u0026#34;\u0026#34;\u0026#34;写入 ac dc 文件\u0026#34;\u0026#34;\u0026#34; ac_file = output_path_fn(\u0026#34;ac\u0026#34;) dc_file = output_path_fn(\u0026#34;dc\u0026#34;) fileutils.to_csv(ac_df, str(ac_file)) fileutils.to_csv(dc_df, str(dc_file)) return result.FinalFiles( ac=result.ResultFile( id=1, current_type=0, original_filename=\u0026#34;all udl2_files\u0026#34;, original_filepath=\u0026#34;null\u0026#34;, in_filename=\u0026#34;all results of udl2_files\u0026#34;, filename=fileutils.get_file_name(str(ac_file)), filepath=str(ac_file), ), dc=result.ResultFile( id=2, current_type=1, original_filename=\u0026#34;all udl2_files\u0026#34;, original_filepath=\u0026#34;null\u0026#34;, in_filename=\u0026#34;all results of udl2_files\u0026#34;, filename=fileutils.get_file_name(str(dc_file)), filepath=str(dc_file), ), ) def collect_files( self, param_group: T.general.ParamGroup, is_write: bool = True, ) -\u0026gt; tuple[list[result.ComputeResult], list[pd.DataFrame]]: \u0026#34;\u0026#34;\u0026#34; 对参数列表里面的数据进行计算，并返回结果列表 compute_single: 计算单一文件的函数 \u0026#34;\u0026#34;\u0026#34; res: t.List[result.ComputeResult] = [] df_list: t.List[pd.DataFrame] = [] for i, p in enumerate(param_group[\u0026#34;param_list\u0026#34;]): def get_id_and_params(): return i, p r, df = self.compute_single( get_id_and_params, param_group[\u0026#34;get_full_path\u0026#34;], is_write=is_write, ) # r contains stage-1, stage-2, stage-3 files res.append(r) df_list.append(df) return res, df_list def compute( self, param_group: T.general.ParamGroup, is_write: bool = True, ) -\u0026gt; result.FinalResult: \u0026#34;\u0026#34;\u0026#34; 计算并返回最终结果 collect_files 是收集文件的函数，也包含了计算单个文件的过程 \u0026#34;\u0026#34;\u0026#34; res, df_list = self.collect_files(param_group, is_write) # 整理最终的文件 ac_df, dc_df = fileutils.merge_files(res, df_list) output_fn = param_group.get(\u0026#34;output_path\u0026#34;) if output_fn is None: raise ValueError(\u0026#34;output_path is None\u0026#34;) final_files = self.write_final_files(ac_df, dc_df, output_fn) return result.FinalResult( status=result.Status.success, msg=\u0026#34;success!\u0026#34;, compute_result=res, final_files=final_files, ) 相比之下，基于类的编程，我只需要这样做：\n1 2 3 4 def get_compute(funcset: BasicFuncSet): \u0026#34;\u0026#34;\u0026#34;隐藏了其他函数的复杂性，直接调用本函数即可完成 compute 函数的生成\u0026#34;\u0026#34;\u0026#34; c = controller.Controller(funcset) return c.compute 进一步分析 实际上，为了实现新需求，修改计算逻辑，对 funcset 的修改是不可或缺的。然而，第一种函数式编程的设计，并非没有显示的表现出函数之间的依赖关系，而是使得依赖被隐藏起来了。也就是说，关键的逻辑，被放在了调用栈深处。\n那么，能否将funcset放在可以被简单修改的地方呢？\n原来的代码是什么样子的？ get_compute 这个方法不存在 可以采用 Controller 的方式。只不过修改代码的时候，需要查看每个方法的类型。\n区别是，我们愿不愿意根据原本的调用链条，来重新组织代码。使用编辑器 DEBUG 模式，就能看到完整的调用链条。\n在当前阶段明确问题，然后寻找解决办法。并非一股劲儿盲干。\n依然函数式 实际上，以下这段代码就起到了这个作用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 def get_compute(funcset: BasicFuncSet): \u0026#34;\u0026#34;\u0026#34;隐藏了其他函数的复杂性，直接调用本函数即可完成 compute 函数的生成\u0026#34;\u0026#34;\u0026#34; return functools.partial( controller.compute, collect_files=functools.partial( controller.collect_files, compute_single=functools.partial( controller.compute_single, func_set=funcset, ), ), ) 实际上，尽管看起来代码量很多，就做了一件事情。把 compute_single 中的参数改成了 funcset。\n还有一种方法，就是将默认参数拿出来。\n1 2 3 4 5 6 7 def collect_files( param_group: T.general.ParamGroup, is_write: bool = True, compute_single: T.ComputeFunc = compute_single, funcset: BasicFuncSet = FuncSet(), ) -\u0026gt; tuple[list[result.ComputeResult], list[pd.DataFrame]]: # ignore 使用 OOP（面向对象编程） “相比之下，如果直接使用Controller聚合为一个类，还是更加清晰一些。因此，此处使用面向类编程的设计，更好的适应项目不停修改的需求。” ——这是我之前的想法。\n使用 OOP 并没有更加清晰。只不过是将原本明确的，函数之间的依赖关系隐藏起来了。这反而是没有必要的。当工程师看到这段代码的时候，只能看到一个Controller被初始化。实际上意义不大。\n这样可能使得代码失去了函数式编程的灵活性。\nBesides \u0026hellip; 然而，如果我一开始就使用面向对象的设计，funcset 也不见得一定暴露在外（能够被轻松的修改）。可能也会引入其他的复杂性。如果使用类，则应该更好的去定义子类，让代码变得更加可读。除此之外，还有其他的复杂性。例如，使用类的方式，会使得测试代码的编写变得相对困难，需要引入 mock 等方法。如果想要简化，可能还得利用结构化的数据进行简化，例如 from pydantic import BaseModel，去生成yaml文件。\n第一次编写代码的时候\u0026hellip; 我在最初编写这段代码的时候能没有想到这段代码需要被复用。是在后续的逻辑中，对代码的逻辑进行调整，从而使得其能够被复用。换句话说，不论采用何种编程模式，测试+重构是让代码质量提升，更快的修改代码的一个很好的途径。一个很明显的例子是，sqlite 虽然是开源的，但是其测试套件是专有的。\n其他的问题 当get_compute方法被写好之后，Controller这个改动还是有必要的吗？ 可能不是必要的。如果需要进一步了解相关的代码，一定会阅读 get_compute 的代码。相比之下，Controller反而更加复杂。因为 get_compute 已经将代码的调用关系非常清晰的展示出来了。\n如果要修改，有两个思路：\n如果是OOP，使用工具，查看funcset在Controller中被引用的地方。 如果是FP，直接查看 compute_single 函数。 第一时间想看简单的东西，还是直接看逻辑。我认为 FP 的方式更加友好，可控性更强。\n结论 还是使用 FP 继续开展后续的工作。\n","date":"2024-12-19T11:16:08+08:00","permalink":"https://svtter.cn/p/%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","title":"使用函数式编程遇到的问题"},{"content":"软件外包项目，软件外包公司，在国内十分常见。但这种模式只能是软件公司在培养核心竞争力之前采用的模式。软件外包项目一个很大的特点就是利润低，且周期大多数比较长。如果没有核心功能，核心竞争力，那么整个项目的利润将会十分可怜，甚至没有利润。这篇文章想到哪里写到哪里，抛出的都是一个个的观点。这些观点不一定靠得住，但从反常识的角度上来看具有一定意义。\n欢迎给我发送邮件，通过讨论我们来沉淀出好的东西。\n大型软件项目 对于大型的软件项目或者长期产品研发，\n不同的模块应该不同的负责人。违反常识的一点是，责任人应只负责模块，不负责具体的业务。保证模块的准确性，提高模块的性能和易用性。模块采用率应该作为一个指标去考核。如果可以的话，模块的设计应该有一个经验老道的工程师负责。这个工程师就像是了解程序员的产品经理。\n尽可能让每个人都考虑自己范围内的事情。能够同时考虑多个事项的工程师相对能力较强，但不是大多数人。在小型团队和小型的公司，大多数工程师无法做到这一点。除非给个人较高的薪酬待遇，否则，依赖架构师做出的模块划分执行任务，是一个更好的选择。\n在软件开发方面，由新手来完成具体的业务需求，或者让同时具备产品经理和工程师能力的人负责业务需求。业务代码中应存在部分代码可以沉淀到技术框架或者新的代码组件中。这个过程也是考核老工程师的关键部分。\n预算和费用 软件外包项目应该按照时间进行计费，且工程+验收时间不应该超过3个月。这样作为上层管理者，可以更加有效的控制成本以及验收工程。\n甲方应该提出相对明确的需求，要求乙方在某个时间段内完成某项需求\n如果需求没有被完成，双方协商解决问题 甲方如果发现乙方的工作不令人满意，甲方应该在下一次合作中拒绝与乙方合作 乙方应该在一定时间内，尽可能满足甲方的要求。 外包软件项目不应该按照金额+宽需求的模式进行付费。大量失败的项目都是因为需求不明确且频繁变化导致的。\n基于频繁变化这个前提去设计项目很难。先贤们提出采用敏捷开发方式来应对，采用最终交付功能来付费，这个模式对于初始团队非常危险。因此，软件项目创业在国内环境相对恶劣。国内大部分是强甲方弱乙方。\n需求相关 作为需求方，不要有不切实际的幻想。\n不应该考虑在软件已经完成后再次大量的调整软件，这样往往会导致 如果内部的工程师本身具有较高的技术素养，能够明确提出很多种不同的技术指标，那么在财务充足的前提下，可以对外包团队提出更高的要求。 技术相关 话说回来，如果技术真的卓越，在市场上已经形成竞争优势，还会去做软件外包吗？\n这个技术如果是效率相关，领域无关的，那么这是一个软件公司的核心竞争力。 这个技术如果是效率相关，领域相关的，那么这个公司应该是一个行业性质的软件公司。 内部利益分配 解决利益的问题应该采用哪种方案？\n项目制。保证基本薪资的前提下，提供充足的项目奖金。 充分识别团队内成员的能力，确保项目能够按期完成，从而控制成本。如果一个项目在三个月内完成，团队内工程师应该具备使用软件框架的基本能力，对于需求具有基本的了解。通过有梯度的需求来验证成员是否具备能力。 内部软件框架和已有代码是有学习成本的。成本不应该被转嫁，而是更好的控制。让团队成员享受这个过程的同时掌握代码。\n","date":"2024-12-14T11:30:38+08:00","permalink":"https://svtter.cn/p/%E5%85%B3%E4%BA%8E%E8%BD%AF%E4%BB%B6%E5%A4%96%E5%8C%85%E5%85%AC%E5%8F%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/","title":"关于软件外包公司的一些思考"},{"content":"之前 wordpress 运行在 CentOS 7 上；这台机器的性能经常跑不满，因此需要做一些迁移，来让性能提升起来。为了不丢失相关的数据，开展了 wordpress 的迁移工作。这篇文章，记录一下 wordpress 迁移过程。\n为了能够尽可能减少备份所花费的时间，首先我使用了 wordpress 插件，All-in-one WP migration。这个插件可以备份插件，文章，主题，以及其他的插件。\n在备份旧的网站的时候，我下载了生成的备份文件。\n在创建新的网站的时候（通过 coolify），上传文件怎么也上传不上去。不知道发生了什么事情。\n随后，我修改了几个限制上传的文件。\n一个是 .htaccess\n1 2 3 4 5 php_value upload_max_filesize 200M php_value post_max_size 200M php_value memory_limit 256M php_value max_execution_time 300 php_value max_input_time 300 另一个是 wp-config.php\n1 2 3 4 5 @ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;200M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;200M\u0026#39;); @ini_set( \u0026#39;memory_limit\u0026#39;, \u0026#39;256M\u0026#39; ); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); @ini_set( \u0026#39;max_input_time\u0026#39;, \u0026#39;300\u0026#39; ); 我的备份文件大小为199MB。然而，尽管调整了上述两个文件，我发现仍然无法恢复备份。这让我感到疑惑。通过控制台调试，我发现在上传完成后，服务器会有 HTTP 413 反馈。后来找到了这篇文章，找到了问题。\n通过排查，我发现原来是 cloudflare 的锅。免费的 cloudflare 套餐不支持超过 100M 以上的文件上传。会提示 HTTP CODE 413。\n随后我设置了本机的 hosts 文件，让域名直连服务器的真实 ip 地址。\n终于成功了。\n","date":"2024-11-15T17:16:45+08:00","permalink":"https://svtter.cn/p/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-wordpress-%E8%BF%81%E7%A7%BB/","title":"记录一次 Wordpress 迁移"},{"content":"I\u0026rsquo;ve noticed a peculiar trend among some reviewers: they seem to have a knack for crafting comments that could pass as a generic template for any manuscript. It\u0026rsquo;s as if they\u0026rsquo;ve mastered the art of writing feedback so vague it could be applied to any paper, leaving authors to decipher the cryptic messages and make revisions that might as well be written in the stars. Here\u0026rsquo;s a prime example of such an \u0026rsquo;evergreen\u0026rsquo; comment:\nComments to the Author The manuscript presents a XX method for XX. The topic is relevant and has potential applications. However, there are some issues to be addressed. Here are the comments:\nThe authors shall improve the clarity and cohesion of the manuscript. There are quite a few grammatical errors and misleading phrasing that hinder the reader’s understanding. I recommend thorough proofreading and editing by a native English speaker or a professional editor to improve the overall readability. Several technical terms are misused or poorly explained. This makes it challenging for readers, especially those unfamiliar with the topic, to grasp the underlying concepts. A more precise use of terminology and better definitions would enhance comprehension. It is crucial to highlight what distinguishes this approach from previous works and to clearly articulate the specific contributions to the existing body of knowledge. In addition, it would be better to include a comparative analysis with other established techniques would strengthen the argument for its effectiveness. The reviewer could just change the \u0026lsquo;method\u0026rsquo; to any term in any article, and the author is left to revise their paper as if it\u0026rsquo;s a never-ending game of academic whack-a-mole.\nIf specific details were added to the above content, it would be completely different.\nFor example:\nDirectly point out where the grammatical errors are. Identify the misused technical terms. Provide more specific issues in the context of the field. Let\u0026rsquo;s work together to improve the environment.\n","date":"2024-11-08T10:53:25+08:00","permalink":"https://svtter.cn/p/how-to-write-useless-comments/","title":"How to Write Useless Comments"},{"content":"这是 2024-07 ~ 2024-09 总结。\n这个季度过的挺快，距离上次写回顾的时候似乎不远。人与人之间的智力确实是有差距的，感觉自己就是一个还不是很努力的笨蛋。\n在进行 review 的时候，尽可能不要修改 journal 的内容。否则日后追溯比较麻烦。\n生活 #life 这段时间主要的精力都在照顾孕妇上了。小孩平安出生，孕妇顺利，开心😆。准备怀孕生子的朋友，推荐这本书：跟老婆一起怀孕。怀孕这个事情对男女挑战都挺大的。受到激素影响，情绪往往比较容易波动，男方要很好的平衡工作与家庭。\n在财务上，要提前准备好充足的资金以及家庭的开销。如果工作不够稳定，不建议太着急要孩子。虽然老话说，成家才能立业。但是成家不代表就要马上要小孩。在孕期，女方的情绪需求会比较高，因此要有心理准备。最好是请教一下年龄稍微大一些的朋友或者亲戚。此外，一定要注意待产的位置。最好的情况是自己独立的家庭。否则，可能要处理一系列复杂的事情，会搞得自己很疲惫。此时再加上工作压力就更难搞了。总而言之，没条件就不要生，不要给自己不痛快。自己不痛快了，家庭大概率不痛快。\n读了 小狗钱钱2 ，没能读完。股票小赚，跑了，大盘跟不动了。投资理财这件事情上，太多人想着赚快钱，所以直接按照赚快钱去设计策略，就能赚钱。加杠杆是绝对不可取的，就是用来骗赌徒的。\n不知道前两天借钱买股票的朋友怎么样了。\n研究 #Research 新的网络虽然有构造出来，但是没能转换成可以发表的论文。\n实验以及新研究 新实验验证了 CRNN 在部分场景下仍然是最好的方法；形成了一篇文章，专门讨论 CTC。但是还没有到发表的程度。\n尝试了很多多模态的东西，不同的编码方式，word embedding 以及 one-hot。花了很多时间学习 transformer。 完成了 querynet，一个新的结构，用于解决多模态的问题。但是仍然没有解决自己提出的问题。\n中期方面，内容不足。现在虽然做了不少实验，但是能够沉淀成理论的东西相对较少，整体也不够连贯。这个与当初的规划不是很一致。\n投稿方面，刚收到新论文SWR 的反馈，新论文已经被拒绝了，还在 rebuttal。但是总体来说还是好的。\n我感觉现在的研究进展还好，但是没有太大成果。\n一些感想 如果要研究一个领域，花时间探索，整理资料，增加对这个行业的认识。 思绪整理 #thinking 技术相关 #Tech 大量的采用了 functional programming 深入探索了 react 框架，理解了 useState, useEffect，修复了不少框架中的 bug。 深入探索了 react-router。 项目相关 #project 开发了一个相对通用的前后端底层框架。前端基于 react，后端基于 django ninja。 做开发这么多年了，终于沉淀出来一些东西。通过使用这个框架，可以避免很多 django 和 react 原生框架带来的问题。这算是对这么多年的一个交代。 目前框架还有很多可以改进的地方，对于提效的帮助是最大的。有机会的话，会开源出来。 下个季度 把 SWR 调整好，投出去，争取中一篇文章。 querynet 以及提出的新研究问题，分别给它俩找一个出路。 meterhub 上线 完成上述的基础上，把手头的项目搞定，然后整理一下毕业论文。\n","date":"2024-10-14T11:08:56+08:00","permalink":"https://svtter.cn/p/2024-q3-summary/","title":"2024-Q3 Summary"},{"content":"CNNs (Convolutional Neural Networks) is a amazing component of neural network theory. However, to use it efficiently, we need to compute the output shape.\nask for chatgpt https://chatgpt.com/share/19be811d-e750-45de-b5bd-ad391c9dba80 input shape Ensure that the input to your network is of the correct shape. The input tensor should have the dimensions [batch_size, channels, height, width]. For example, if you\u0026rsquo;re using a batch size of 1, the input should be [1, 32, 32, 300].\n1 is batch size. input_data = torch.randn(1, 32, 32, 300) # Example input tensor with the correct shape Compute of CNN output reference: baeldung link The channels number is the CNN\u0026rsquo;s filters number.\n","date":"2024-10-11T16:51:14+08:00","permalink":"https://svtter.cn/p/cnn-size-computing/","title":"CNN Size Computing"},{"content":"在 python 代码的编写过程中，有时候我们会希望将部分文本高亮。这个时候，Python Inline Source Syntax Highlighting 就派上用场了。\nPython Inline Source Syntax Highlighting 安装比较简单，只需要打开 vscode 插件页面进行搜索安装即可，如图所示： .\n安装好之后，还需要在代码中做一些简单的配置，例如：\n1 2 3 4 5 html = str # Create an alias of the str type named for the language you are using my_html_string: html = \u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;Some HTML\u0026lt;/h1\u0026gt; \u0026#34;\u0026#34;\u0026#34; 或者使用 sourcetypes 包。\n1 2 3 4 5 import sourcetypes my_html_string: sourcetypes.html = \u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;Some HTML\u0026lt;/h1\u0026gt; \u0026#34;\u0026#34;\u0026#34; 这样就可以让 python 代码中的其他的代码高亮了。\n例如，在 django-components 中是这样操作的：\n","date":"2024-09-11T20:11:20+08:00","permalink":"https://svtter.cn/p/python-inline-source-syntax-highlighting-plugin/","title":"Python Inline Source Syntax Highlighting Plugin"},{"content":"AI 编程助手已经越来越强大了。近期我也使用了 cursor，体验非常好。我也为了 cursor 充值了一波。\n我想与 AI 协同工作，这是未来的趋势。同时也意味着，ai 会替代很多工程师的工作。这个不可避免的未来，实际上这要求我们工程师要具备更强的表达能力，能够让ai模型理解我们要做什么。\n作为可能被替代的工程师，我们应该怎么办？ 使用 AI 技术，而不是抗拒它。你不可能让你的竞争对手不使用 ai 技术。 将 AI 技术找到最适合自己的 AI 技术。就像是我们在某天下午找到一个自己最适应的 IDE 一样。然后，就像是挑选供应商一样，选择自己的 AI 技术供应商。性能最高的不一定是最好的。OpenAI 不是唯一的选择，claude 也不是。 AI 是一种基础资源。就像水电，以及现在的互联网。这个观点来自Andrew Ng: Why AI Is the New Electricity。生活支出中，需要为此支付一部分费用。 当我们能够较好的使用多种 AI 技术的时候，AI 对我们的威胁就不存在了。目前 AI 技术的发展来看，本质上还是人与人之间的竞争。 我们已经掌控了 AI Editor，让他们为我们所用。那么我们就可以更高效的编程，或者节省下来宝贵的时间，可以留给我们的家人。\n未来呢？ 我们应该多关注那些 AI 无法完成的工作，例如数学和更加复杂的逻辑。现在 AI 对于复杂逻辑的思考能力是不及人类的，对于多方面的复杂信息处理能力较弱。\n如果更好的 AI 出现了怎么办？ 我想共产主义是一个好的途径（🤣）。实际上，共产主义追求的不是平均财富，而是人们能够在生产力极其庞大的情况下，做自己想做的事情，也能满足自己的物质和精神需要。\n","date":"2024-09-10T20:33:05+08:00","permalink":"https://svtter.cn/p/%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9-ai-%E7%BC%96%E7%A8%8B%E5%8A%A9%E6%89%8B%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%8A%80%E6%9C%AF%E9%9D%A9%E6%96%B0/","title":"如何应对 AI 编程助手带来的技术革新？"},{"content":"很多时候，构建 docker 镜像的速度很慢，尤其是当我们的基础依赖发生改变之后。为了解决这个问题，我们应该在实际运行的镜像之前，增加一个 venv 的基础镜像。\n如果我们想要构建一个前端的镜像，那么不可避免的要下载和安装使用 npm 包。我们可以构建一个基础镜像，名称为 frontend-base。 镜像的内容dockerfile.base如下：\n1 2 3 4 5 6 7 8 9 10 11 FROM node:20 as build-stage WORKDIR /app ENV ELECTRON_MIRROR=\u0026#34;https://npmmirror.com/mirrors/electron/\u0026#34; COPY pnpm-lock.yaml package.json /app/ RUN npm install -g pnpm \u0026amp;\u0026amp; pnpm install COPY . . RUN pnpm run build:vite 运行命令构建镜像：docker build -f Dockerfile.base -t svtter/frontend-base:latest . 如此一来，我们可以构建好一个frontend-base:latest镜像。 然后，我们再构建frontend:latest镜像，作为我们实际部署应用的镜像。 dockerfile是这样的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # FROM node:20 as build-stage FROM svtter/cathodic-frontend-base:latest as build-stage WORKDIR /app ENV ELECTRON_MIRROR=\u0026#34;https://npmmirror.com/mirrors/electron/\u0026#34; COPY pnpm-lock.yaml package.json /app/ RUN pnpm install COPY . . RUN pnpm run build:vite FROM nginx:1.25.1 as prod COPY --from=build-stage /app/src/out /usr/share/nginx/html 注意：因为我的代码里使用了 electron，所以为了速度更快，我使用了ELECTRON_MIRROR。\n这里的构建命令是：docker build -t svtter/frontend:latest . 这样一来，我们可以避免几个问题:\n如果基础的依赖有改变，在 venv 的基础上，pnpm 可以减少 npm 包的反复下载。 一段时间后，我们可以重新构建 frontend-base，来减少在 frontend 中包的下载。 ","date":"2024-08-27T18:04:54+08:00","permalink":"https://svtter.cn/p/%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9D%A5%E9%81%BF%E5%85%8D%E5%8F%8D%E5%A4%8D%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E9%A1%B9/","title":"使用一个基础镜像来避免反复安装依赖项"},{"content":"This post introduces how to train the LSTM networks to get correct outputs.\nIf you use this way, not work.\nJust use the last width, like x[-1, :, :], select the last piece of width. It\u0026rsquo;s normal way. However, somethings it will NOT WORK. This way will work.\nFlatten all the output It always works. Have fun.\nBesides, I found marimo, which is a replacement for jupyter notebooks.\n","date":"2024-08-12T15:35:03+08:00","permalink":"https://svtter.cn/p/easy-lstm-training-tricks/","title":"Easy LSTM Training Tricks"},{"content":"我原本想要分析一下 django webpack；但是写了一半，为了资料论述严谨，又不得不学习了 django component；在 django component 中，又发现了自己之前不知道的一些机制。无奈，先聊聊遇到的 typing 问题吧！\n最近在阅读 django components 代码的时候，我在 component_registry.py 看到了这样一段代码：\n1 2 3 4 from typing import TYPE_CHECKING, Callable, Dict, Type, TypeVar if TYPE_CHECKING: from django_components import component _TC = TypeVar(\u0026#34;_TC\u0026#34;, bound=Type[\u0026#34;component.Component\u0026#34;]) 从中能学到几个知识点：\nTYPE_CHECKING 变量是用于程序员处理类型相关代码的 TAG，在实际运行的时候，内部代码不被执行；我们可以从 typing 的官方文档中找到。 TypeVar 可以这样来用： 1 S = TypeVar(\u0026#39;S\u0026#39;, bound=str) # Can be any subtype of str 在这段代码处，意味着 _TC 可以是任何一个 component.Component 的 subtype。\nConclusion python 也在慢慢丰富自己的类型系统，许多新的用法也会慢慢地开发出来。不过相比之下，typescript 的类型系统要更先进一些。大家好好学！\n附加一点吐槽：Component 居然是一个 django view，感觉很奇怪啊。\n","date":"2024-07-12T16:20:32+08:00","permalink":"https://svtter.cn/p/new-usage-of-typing-module-in-python/","title":"New Usage of typing module in python"},{"content":"Webpack is a modern development method for frontend projects. Django is a common backend development framework for Python developers.\nI believe that developing with Webpack can make Django development faster.\nWhy webpack can enable Django developers to use the React ecosystem, and it makes auto-complete and linting available in Django frontend development, especially with VSCode.\nDjango developers should integrate Webpack, similar to what Rails developers did. At 2024-07-05, Webpack has retired in Rails. They are using Hotwire now. For more details, you should read the Rails 7 blog.\nWhat to Choose? I tested two popular projects on GitHub.\nThe first one is django-react-boilerplate. It has high stars and ranks second.\nHowever, as of 2024-07-05, it\u0026rsquo;s not ready. I will continue to track its progress. It is hard and complex to configure the {{ project_name }}.\nThe second one is python-webpack-boilerplate.\nIt has a gradual process and a good learning curve. I spent just 5 minutes adding Webpack to my example project.\nDiscussion There is still a long way to go.\nReact has not been added to the example project. A production environment is needed to validate its availability. ","date":"2024-07-06T15:21:55+08:00","permalink":"https://svtter.cn/p/django-and-webpack/","title":"Django and Webpack"},{"content":"如果直接使用 kubernetes 的线上版本进行调试，需要资源太多了。使用 minikube 有时候又无法启动集群。 因此，开发者可以考虑使用 Kind 来部署测试 Kubernetes。\nThis article is about using Kind to create a Kubernetes (K8s) cluster and debug it.\nBy default, Kind does not support load balancers. If you want to test your apps, use NodePort or ClusterIP instead.\nSource code: svtter/example-code-for-kind.\nUsing NodePort to View Service Get the node\u0026rsquo;s IP to visit:\n1 2 3 (base) ➜ cathodic kubectl get nodes -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME kind-control-plane Ready control-plane 22h v1.30.0 172.18.0.2 \u0026lt;none\u0026gt; Debian GNU/Linux 12 (bookworm) 6.1.0-18-amd64 containerd://1.7.15 View the service IP:\n1 2 3 (base) ➜ cathodic kubectl get service nginx-service NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE nginx-service NodePort 10.96.65.77 \u0026lt;none\u0026gt; 80:30160/TCP 26m Now, use curl -L http://172.18.0.2:30160 to visit the Nginx service.\nUsing LoadBalancer Install cloud-provider-kind via this loadbalancer. Start Kind, unlabel the node, and start cloud-provider-kind according to this link. ","date":"2024-06-12T11:09:49+08:00","permalink":"https://svtter.cn/p/using-kind-to-play-with-k8s/","title":"Using Kind to Play with K8s"},{"content":" 第二季度过去了，2024-04～2024-06。 目前是在第三个季度的中期写第二季度的回顾，拖的时间有点长了。\n上一个季度 2024 第一季度回顾\n研究方面 #Research 第二季度，科研上主要的进展如下：\nSWR论文投出去了，目前还在 TII 审。从5月份到8月份了。 构建了一个很大的、用于仪表识别的代码库，meter-viewer 以及 metercrnn。目前还没有开源，还在考虑。 通过 torch 对之前的代码进行了重写；验证了许多新的结构。重新理解了 ctc loss。 CTC loss 感觉上有点老旧了，但用起来还是挺好的，性能挺不错。 花了挺长时间去调试 CRNN，最后才找到 bug 生成数据 CTC limitation/数据集生成 修订 HIOL 论文。还有不少的收尾工作。 工程方面 #project 工程方面主要考虑了一下分布式后台任务系统。\n花了不少时间设计了一个可拓展的后台任务系统；based on celery。 streamlit 的应用 技术方面#Tech 花了一些时间去搞定 kubernetes 在本地的分布式运行。\nkubernetes 之前遇到的网络问题也都解决了 总结 研究上的进展比较顺利，新的论文已经投出去了。 工程上 meterhub 不是很顺利。 下一个季度 #Research 新的网络结构设计，Focus on tensor shape；解决想到的网络问题 搞定中期报告；把大部分研究内容落到纸上。 ","date":"2024-06-09T15:48:40+08:00","permalink":"https://svtter.cn/p/2024-q2-summary/","title":"2024-Q2 Summary"},{"content":"logseq 是一个非常好用的笔记工具。我们之前已经介绍过关于 logseq 的内容。如果想要了解 logseq，可以看我之前的文章。\n在本文中，我们介绍如何将 logseq 作为软件的、项目的文档，以及为什么。\nWHY 对于 python 开发者，传统的文档系统有几个，mkdocs，readthedocs。这些文档系统很好用，可以采用纯文本，通过 git 来管理，并且支持富文本，包括markdown 以及 rst。\n笔者对于开源项目的文档，有几个假设：\n开源项目的文档，要放在代码仓库里。 文档的变更需要能够追溯。我们可以借助 git 实现。 较好的浏览体验 开源，以此来保证工具的未来持续可用 因此，我们选用 logseq 直接作为开源项目的文档，以及文档系统。logseq 能够很好的支持不同的文件同步，以及借助 git 实现历史追溯。添加图片也不是难事。\n使用 logseq 最大的优势在于其双向连接，以及较好的全文搜索。相比之下，mkdocs 以及 readthedocs，虽然功能强大，但是编辑能力相对弱一些。\nHOWTO 想要使用 logseq 作为文档系统，只需要在 logseq 中点击添加图谱，然后在 git repository 中，添加到 docs/目录下即可。\n添加完成后，可以单独创建一个[[HOME]]页面，并且收藏，来让用户能够快速找到 HOME 页。对于其他的开发者，也可以通过双向连接来快速找到想要找到的概念。\n之后，如果开发者需要修改文档，只需要在 logseq 中进行修改，然后提交到 git 中即可。\n结 本文中我们讨论了如何使用 logseq 作为软件项目的文档，简单描述了使用其作为文档的优越性。\n当然，使用 logseq 也会引入新的问题。最大的问题是，用户如果不使用 logseq，就完全看不到文档了。除此之外，logseq 的页面公开也不是特别方便。 这些问题应该有对应的解决方案。在这里就不赘述了。\n","date":"2024-05-12T08:55:42+08:00","permalink":"https://svtter.cn/p/use-logseq-as-documentation/","title":"Use Logseq as Documentation"},{"content":"第一季度过的如此之快！效率感觉不高，但实际上做的东西还可以。开心！\nAcademic Paper-2 R-3 完成 active learning, human in the loop, domain adaptation, meter 论文的阅读 论文审稿 meter related 老代码整理，数据整理 work 交付了两个项目 可以公开的进展：meterhub 一个 django 插件 django-email-login 一个用于 email 验证登录的工具 企业微信设立 在下一个季度，要完成的事情 中期报告 第二篇小论文中，第三篇小论文投出 会议论文实验和论文写完投出 meterhub MAYBE 找一个实习工作 ","date":"2024-04-12T11:00:07+08:00","permalink":"https://svtter.cn/p/2024-q1-summary/","title":"2024-Q1 Summary"},{"content":" 这篇文章的文字水平一般。之所以要写这篇文章，一方面是为了记录自己的开发历程，另一方面是为了少部分同频的伙伴给予引导。也是为了完成每个月博客文章的 KPI。\n前提：\n走完 react toturial，最好能够掌握 useState。 了解 Javascript 语法，懂得 CSS / HTML 近期我用了 nextjs 开发了一个项目。nextjs 是一个可以全栈开发，也可以只开发前端的框架。我的开发内容只包括前端。nextjs 非常好用，简化了大量的复杂配置，可以上手即用。可以直接打开nextjs官网来安装使用。 npx create-next-app@latest\n安装的时候不建议使用 typescript。这是因为 typescript 相对复杂，容易提高学习成本。tailwind 非常好用。要选上。src/ folder 可以不用。eslint 选上，能解决不少问题。\n1 2 3 4 5 6 7 8 What is your project named? my-app Would you like to use TypeScript? No / Yes Would you like to use ESLint? No / Yes Would you like to use Tailwind CSS? No / Yes Would you like to use `src/` directory? No / Yes Would you like to use App Router? (recommended) No / Yes Would you like to customize the default import alias (@/*)? No / Yes What import alias would you like configured? @/* 开干 我们能看到 app 下面有一个 layout.js，可以理解成 django 全栈开发中的 base.html。这个在 django 中比较常见。 在 nextjs 中，为了开发样式，一般使用 tailwind css。tailwind css 是一个通过 class 编写 style 的框架。学习 tailwind，直接从core concept开始看就行了。 那么 react 怎么用呢？ 在搭建 UI 框架阶段，实际上用到 react 的功能不多。这个时候，想要充分借助 react 的便利性，最重要的是掌握 component 这个概念。简单来说，就是能够自己创建 html tag，并且将 function 和 tag 映射起来。 创建一个 html tag\n1 2 3 function Hello() { return (\u0026lt;p\u0026gt;hello, world\u0026lt;/p\u0026gt;); } 这样就创建好了一个 \u0026lt;Hello\u0026gt; tag。在后续中可以使用这个 tag 了。 例如，我们在 page.js 下面使用\n1 2 3 4 5 6 7 function Home() { return ( \u0026lt;div\u0026gt; \u0026lt;Hello/\u0026gt; \u0026lt;/div\u0026gt; ) } 这样 Hello 就被渲染出来了。 除此之外，还有一个难点就是，组件之间怎么传递参数。\n1 2 3 4 5 6 function Hello(props) { const name = props.name; return ( \u0026lt;p\u0026gt;hello, {name}\u0026lt;/p\u0026gt;; ) } 通过 props 就可以传递参数了。\n延申阅读 https://github.com/Hsins-Learn/Learn-Full-Stack-Development-with-Django-and-React 结语 基本上，掌握以上两个技能就可以开始基于 react 开发前端应用了。 其他的内容直接从 react、nextjs、tailwind 文档中学习即可，遇到不清楚的内容直接查询。\n欢迎将不清楚的问题留言，我会根据留言的内容改进本文。\n","date":"2024-03-12T09:38:36+08:00","permalink":"https://svtter.cn/p/%E7%BB%99%E8%80%81-django-%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%88%9D%E5%AD%A6%E8%80%85-react-%E6%95%99%E7%A8%8B/","title":"给老 Django 工程师的初学者 react 教程"},{"content":"这是一个可以同时将print内容输出到屏幕以及保存到日志文件的简单代码。\n主要利用了 builtins 对 print 方法进行 hook，从而让方法全局有效。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026#34;\u0026#34;\u0026#34;global print function\u0026#34;\u0026#34;\u0026#34; import builtins _print = print def set_print(): def print_to_file(*args, **kwargs): _print(*args, **kwargs) with open(\u0026#39;print_ouptut.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: f.write(*args, **kwargs) builtins.print = print_to_file def reset_print(): builtins.print = _print def test_print(): print(\u0026#39;hello world\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: test_print() 实际上，借助这个思路，还能禁用全局的 print。例如在 print 中直接添加 exception。\n","date":"2024-01-12T10:09:40+08:00","permalink":"https://svtter.cn/p/print-trick-for-python/","title":"Print Trick for Python"},{"content":"今年是变化比较大的一年，充满坎坷。\n前情提要：\n2022年终总结 今年做的事情 不知道是不是年龄的原因，有点记不住今年做了什么事情了，也可能是今年没有完成什么大事情。 2022年终总结订立的目标：\n完成脚踏实地的研究：虽然没有完全做完，但是思路有了。 收入质变：思路更清晰了，但是尚未能完成。 工作 2023年工作有较大的变化。从原本的企业走了出来。离开的原因比较复杂，不过思来想去，主要因素还是理念不同。对于一个问题的看法，例如亏损与否， 目标清晰与否等，合伙人可以接受，我则是不可接受的。因此无所谓对错，观念不同。但不管怎么说，上个阶段已经基本结束了。现在以顾问的 形式存在于公司也是蛮好的。\n去年一年里，工作主要是推进需求的形式和奖金的落实。奖金制度基本落实了，但更多是细节，大的原则没有很好的 贯彻下去。记忆中获得奖金的同事也不多。团队搞定了金蝶插件的开发（不过这个能力，后来似乎被老大干掉了。 具体情况不清楚了）。\n今年前几个月给公司规划了很多东西，方法论提升了，理论方面夯实了， 但是落地的时候寥寥无几。总结来讲，就是什么都看，什么都关注，但最终有效落地的不多。这是战略的问题。得出了低代码 平台以当前技术能力和平台来看，做不了的结论。\n通过对制造业流程的理解，加强了对供应商和代理商的理解。代理，采购，库存，这些概念很多都是通用的。多次出差之后，对销售和不同部门以及公司的运行方法也积累了不少经验。打交道更容易了。\n颂道今年的发展还是按部就班。每年都有基本的项目量，简单做做。随着这些年的积累，实际交付的项目量更可观了。\n总结一些经验.\n公司的财务情况得说到做到才行。年初的预算和实际的预算差的太多了。导致最终越走越尴尬。 不要想着不劳而获。有这个想法的时候就已经遭人反感了，从我的角度看，朋友不少没有成的项目，都是想要的太多，想从客户那里赚太多。贪便宜不仅仅没出息，而且很容易被判定为没格局。实事求是，该赚多少赚多少。我也拒绝了不少一看就不行的人——对，人不行，而不是项目不行。 别去听那些没有实际经验的第三方建议。尤其是不要听『没有实际经历过』，没有『生活阅历』的意见。只做参考，并且保持礼貌就行了。 要选择有能力的人合作，无论是工作还是公益。不然心态不好还好，事情办不成就很麻烦。心态不行也不行。 对于技术而言，在不坑蒙拐骗的前提下，高利润比高营业额更有用。 投入大量资源进入一个行业之前，要建立对行业的基本认识。对商业方案要基本设计完成。对成本投入要客观把握。 对于一个初期的创业公司，人的格局决定了公司的格局。 其他的东西在书里都有写，就不再赘述了。要提升自己的判断力，去判断当前的情况。 数据来源：logseq, gitee，微博，github，钉钉。\n科研 今年科研没有什么突出成果，一篇论文也没有发表。作为一个博士生不太应该。不过，通过阅读大量的文献，包括不同方向的博士论文，最新的研究进展，科研思路，怎么做科研更加清晰了。这算是一大进步。 话也说回来，有些文章不发也罢！单纯的求毕业，对自己的研究不讲究，不追求细致，就跟着大流走了，不见得是好事。以后发展也会受阻。 自然，等着不毕业也不是好事。在文献管理方面使用 endnote 方便了很多。博士开题虽然做了，但是感觉一般般。\n除此之外，把 EI、SCI 检索、危险期刊这些东西看了一遍。😂\nreference: logseq\n技术 技术方面上升了一个新的台阶。应该是由于学习不少产品的知识得到了提升。写软件的时候维护性和进度都做的明显比之前更好了。 也能比较快的判断出一个系统和架构比较重要的部分是什么。举个例子，Vue的可扩展性。对于vue2来说是mixin，对于vue3是composable API。这两个技术我之前是不知道的，是带着问题去找的这两个技术。有了意义和问题，一个技术的就能完成从无到有。\n硬件方面的理解也增强了。了解了承载某些系统长期稳定运行的硬件设计原则，以及备份容灾的原则。\n今年完成的具体技术方向有以下这些:\nBI 低代码 钉钉应用开发 serverless LLMs: midjourney和chatgpt 金蝶插件开发 云服务器内网架构 知识体系彻底使用 logseq 构建。\nreference: logseq\n生活 制订了家庭规范。今年结婚了！正式成立了自己的家庭，家庭成员扩展了！与家人的相处不能像是之前那般幼稚了。 组建新的家庭是成人之后又一个新的人生成就。\n今年去了日本玩，感受了一下国外是什么样子。最大的体会就是网络的畅通无阻。但实际上，因为是去玩而不是工作，很多日常习惯用的东西在日本访问起来反而有些困难。墙是要控制约束自己的权力的，要尽可能的减少对科研和教育的影响。\n体育方面，由于游泳馆装修，今年应该不会再游泳了。篮球🏀有了些新的想法。之前篮球没打明白。一定要做一件事情并且做好，正向回馈挺大的。\nNew mental problem 的梗图挺搞笑的，不过2023很多时间都处于mental problem的状态。庆幸自己走出了那个状态。温柔不代表没有牙齿，适当的凶狠一下是很有必要的，不然外部只会不听的侵犯自己的私人领域。谁伤害了你，你就反击回去。谁让你活不下去，在你放弃自己之前，先把伤害你的人干掉，让其付出代价。这个世界一点都不温柔，不要委屈自己。与君共勉。\n明年做些什么 明年是这个人生阶段比较重要的一年，要好好安排。\n科研、工作和技术 完成至少2个独立的研究，促进博士毕业。 完成新商业计划的 landing page，online service，ICP license。 确定发展的方向和城市 生活方面 今年烟知争取再做一个节目，好朋友们面面基。让当初这个组织的愿景再进一步。\n也想去上海找朋友们玩 NTH (Nice To Have) 出一本技术方面的书籍 ","date":"2024-01-01T13:44:47+08:00","permalink":"https://svtter.cn/p/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/","title":"2023年终总结"},{"content":"logseq 是一种新型的知识工具。开源，免费（暂时），可以自己管理数据。\n概念 logseq 底层数据结构使用了 markdown。因此，每次创建新的 tag 或者[[]]的时候，都可以认为创建了一个新的 page。在这里基础上，来进一步理解 logseq。\nDefinition 关于 #tags: 标签，啥时候都能用；使用后要追加解释。 Problems 问题清单。\n目录是什么？ #Contents目录是全局的，用于查看所有文档的工具\n如何使用插件？ 设置好 logseq 的代理服务器，即可使用。\n我推荐的插件有:\ngit 用来管理同步的笔记 goto today 用于快速定位到今天 todo 用于管理待办事项 calendar 把 logseq 转换成日历工具 toc 用于生成目录 Usage 使用 logseq 整理论文 右上角三个点，可以增强 logseq Use plugins：插件可以增强 logseq 的功能 Use theme：主题可以让 logseq 的可读性变得更好 References https://zhuanlan.zhihu.com/p/450069864 ","date":"2023-12-18T11:49:12+08:00","permalink":"https://svtter.cn/p/how-to-use-logseq/","title":"How to Use Logseq"},{"content":"Technical report this week! 这周东西不多，大部分时间在读论文。\nGPU programming FPGA tutorial Python WEB Masonite: 一个全新的开发框架 glom: quick visit nested data. ","date":"2023-11-27T09:11:42+08:00","permalink":"https://svtter.cn/p/techincal-report-202311-4th/","title":"Techincal Report - 202311-4th"},{"content":" 这是一个新的专题：技术报告。包含了我这一周看到的感兴趣的技术。\n效率 双拼练习网站 fastadmin idpbuilder 📦 内部开发平台搭建，只需要 docker。 Python \u0026amp;\u0026amp; Django Django axes 是一个追踪失败登陆尝试的库。可以用于Django site的安全检测。 玩乐 看电视剧 ChatGPT 生成 HTML 云计算 教科书级别的云服务构建指南——「在一年内从零开始构建ClickHouse Cloud」一文的翻译与笔记 Paper About process recommendations. You could search the paper by google scholar.\nAn Efficient Recommendation Method for Improving Business Process Modeling Zhang, Ji, Qing Liu, and Kai Xu. \u0026ldquo;FlowRecommender: a workflow recommendation technique for process provenance.\u0026rdquo; Proceedings of the 8th Australasian Data Mining Conference (AusDM 2009). 2009. ","date":"2023-11-13T08:50:50+08:00","permalink":"https://svtter.cn/p/technical-report-202311-2th/","title":"Technical Report - 202311-2th"},{"content":"程序开发经常会让本地机器卡顿，尤其是编译某些较大文件的时候。除此之外，如果涉及到数据集处理，会带来更多麻烦，例如下载数据动辄10G，部署环境不一致导致包冲突问题。\n因此，如果只进行 web 开发，那么云服务器是一个相当不错的选择。 云服务器现在价格很优惠。经过本人测试，腾讯云轻量服务器相当靠谱。可以直接搞定基本问题：公网ip，带宽，存储，服务器本体。\n这个是我的推广链接，可以直接跳转购买。\n进入正题：使用vscode进行开发。设置好 remote ssh，也就是这个插件：\n这个插件可以让我们通过 ssh 连接到服务器，并且自动开放端口，从本地的链接，例如 127.0.0.1:1080 进行访问。可以在 port 中看到。\n通过这样的方式，调试也变得容易了。\n总结一下，有几个好处：\n性能占用都在服务器上，本地机器运行通畅。 依赖简单，linux 系统；环境独立，不容易破坏。 重装容易，一键重装。 不需要担心垃圾文件问题，可以备份后直接重制系统。 版权所有©️ svtter\n","date":"2023-11-07T17:19:00+08:00","permalink":"https://svtter.cn/p/coding-with-cloud-server/","title":"Coding With Cloud Server"},{"content":"本周花费了不少时间学习多模态。\n科研 multimodal deep learning 技术 learning lein chatgpt application development 技术力 Clojure ChatGPT 生活 运动 * 2 读书 * nothing ","date":"2023-09-25T09:48:42+08:00","permalink":"https://svtter.cn/p/2023-09-last-week/","title":"2023-09 Last Week"},{"content":"这周过的昼夜颠倒，效率不是很高——但收获也是不小。\n科研 使用 macos 上的 metal 跑了 dl 模型 学习了一点点 NLP BERT 学习，一点点。 技术 了解了新的 require 使用。script[module] 构思了计算平台的安排；k8s计算架构设计。 生活 运动1次 亲友拜访1次；老徐婚礼； 制订了新的计划[workandrest] 技术力 logseq 使用插件；logseq macos 程序开发 ipykernel 简单阅读 learning google analytics 读书 忘了。\n总结 处理了公司后续的事情 ","date":"2023-09-13T09:17:19+08:00","permalink":"https://svtter.cn/p/2023-09-first-week/","title":"2023-09 First Week"},{"content":"为了能够更好的使用 logseq，可以安装一些插件。\n我目前使用的几个插件是：\n建议安装如下几个插件：\ntabs tabs 可以打开不同的标签页，来增强logseq打开不同页面的功能。\nBonofix #theme 推荐 Bonofix 这个主题。能够很清楚的展示 tag。\n例如：\nCalendar 能够打开右上角的按键，查看自己的日记。\nBullet threading 高亮选择的条目。\n","date":"2023-09-05T18:31:22+08:00","permalink":"https://svtter.cn/p/logseq-plugin/","title":"Logseq Plugin"},{"content":"在李航的书中讲到，监督学习方法可以分为生成方法（generative approach）和判别方法 (discriminative approach) 。所学习到的模型分别称为生成模型和判别模型。\n之前一直搞不清楚这俩模型区别到底是什么，课程中也只是学习了一下条件概率和联合概率分布，理解总是有些偏差。 对于生成方法，模型通过对数据进行学习，得到联合概率分布$P(X,Y)$，然后求出条件概率分布$P(Y|X)$作为预测的模型。 也就是说:\n$$P(Y|X)=\\frac{P(X,Y)}{P(X)}$$这个方法之所以称之为生成方法，是因为模型表示了给定输入$X$产生输出$Y$的生成关系。 典型的生成模型有朴素贝叶斯法和隐马尔可夫模型。\n判别方法由数据直接学习决策函数$f(X)$或者条件概率分布$P(Y|X)$作为预测模型，即判别模型。 判别方法关心的是给定输入$X$，应该预测什么样的输出$Y$。\n典型的判别模型包括：k近邻法、感知机、决策树、逻辑斯谛回归模型、最大熵模型、支持向量机、提升方法和条件随机场等。\n隐变量是不可观测的随机变量。\n区别 对生成方法而言，学习收敛的速度更快，即当样本容量增加的时候，学到的模型可以更快地收敛于真实模型。如果存在隐变量，判别方法就不能用。 对于判别方法而言，直接学习条件概率$P(Y|X)$或决策函数$f(X)$，直接面对预测，往往学习的准确率更高。 我的理解：区别是一个是学习$P(X,Y)$，因此如果输入的样本发生变化，即$P(X)$发生变化，那么$P(Y|X)$只需要进行简单计算。相比之下， 直接使用$P(Y|X)$的模型则可能需要重新训练。\n附录 决策函数指的是应用监督学习的方法：$Y=f(X)$，或者条件概率分布$P(Y|X)$。\n","date":"2023-09-04T14:07:19+08:00","permalink":"https://svtter.cn/p/%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%88%A4%E5%88%AB%E6%A8%A1%E5%9E%8B/","title":"生成模型和判别模型"},{"content":"8月份最后一周周总结\n科研 与师弟沟通了研究题目。 花书、统计学习方法阅读 技术 学习了layui的设计。 生活 买了新的晾衣架，非常方便。 从日本回来 技术力 hugo api学习 button-record 新坑。 微信小程序新api学习。 vuejs props重看 react和webpack重看 django logging和 gunicorn logging，找个时间写个博客。 测试的弹性计算 读书 深度学习花书重读 第一部分（30%） 领域驱动设计理解 品类管理方法论 前言 敏捷软件开发 用户故事实践 2页 其他 总结 本周读书进展较好。\n运动 运动了一次。 财务健康。\n下周计划找个时间想想。 如果我提出的正确建议经常不被接受，那么就要想想，到底是采取意见的人不够聪明，还是我的提出意见的方式有问题。\n","date":"2023-09-04T13:57:40+08:00","permalink":"https://svtter.cn/p/2023-08-last-week/","title":"2023 08 Last Week"},{"content":"在使用 Vue 的时候，如何向 Django 提交 form？\n1 2 3 4 5 6 7 8 9 10 11 12 $.ajax({ url : \u0026#39;YOUR_URL_HERE\u0026#39;, headers: {\u0026#39;X-CSRFToken\u0026#39;: $.cookie(\u0026#39;csrftoken\u0026#39;)}, type: \u0026#39;POST\u0026#39;, dataType: \u0026#39;json\u0026#39;, data: {}, success: function() { }, error: function(xhr, errMsg, err) { }, }); django docs: https://docs.djangoproject.com/en/1.11/ref/csrf/#ajax Reference stackoverflow answer ","date":"2023-09-03T14:12:47+08:00","permalink":"https://svtter.cn/p/use-vue-with-django-meet-csrf/","title":"Use Vue with Django, Meet CSRF"},{"content":"准备学习一下技术博主manjusaka，写一下周报，提升自己的认同感，把自己学习的内容搞扎实。\n周报主要有几个内容\n研究方面 技术方面 生活方面 在读的书籍 在看的漫画 通过这三个方面做一下总结。\n","date":"2023-08-29T22:00:29+08:00","permalink":"https://svtter.cn/p/%E4%B8%BA%E5%95%A5%E8%A6%81%E5%86%99%E5%91%A8%E6%8A%A5/","title":"为啥要写周报"},{"content":"感谢我的朋友们，是你们让我更加强大。\n最近在读一本书，叫做你可以生气，但不要越想越气。\n读这本书的起因是在工作沟通中我产生了不良情绪。不良情绪最近充斥了我的生活，相比之前，这些不良情绪更加具有破坏力。我能感受到这些不良情绪在摧毁我的生活。因此，为了控制这些不良情绪，阅读了这本书。\n这本书讲了几个关键的知识点，\n要察觉自己的不良情绪，接受他。 愤怒是可以接受的一种情绪，但是情绪化的思考则是要避免的。否则容易被评价为情绪化的人。 情绪化有点像是PTSD。 这本书目前还没读完，但在从已经阅读过的内容中，已有了不少收获。 回头仔细想来，在成长过程中我接受了很多忍耐的情绪。忍耐其实没有解决问题，忍耐是将问题延后， 把情绪交给时间或者某些不确定的东西消化掉。\n忍耐导致我确实比较容易情绪化。忍耐无法快速消化的时候，就会转变成压力。我觉得，压力与外在的不良影响， 对我的心理健康造成了一些损害。\n我想要克服这些东西，让我自己变的更好，更强。从而能够收获长期的幸福体验。\n在分析这些情感的过程中，我想起了很多美好的东西和记忆，也回想起了很多尴尬的瞬间。 感谢我的朋友，我大学中的朋友。是你们的宽容让我度过了非常美好的大学时光。\n","date":"2023-07-31T15:19:46+08:00","permalink":"https://svtter.cn/p/thanks-my-friend/","title":"Thanks My Friend"},{"content":"可怕的事情发生了 \u0026ndash; 2021年的年终总结没有，2022年的年终总结消失了。\n2022年最大的收货是「乐观」。\n不管结果如何，保持乐观的心态。 设计合理的预期值，正常评价自己。\n2022年基本上不再做日常记录了，在 logseq 的写的东西比较多。 不做日常记录，主要是做了日常记录容易心态很差，反而做不好事情。写到后面感觉是在写流水账，自己折磨自己。\n2022 年工作 2022年工作上，主要是不停的打磨公司的规章制度，学习了不少法律、管理、财务方面的知识。 法律方面主要是公司法和劳动法。也了解了一些有趣的法律设计。\n今年最主要的工作是进一步稳固了团队。\n进一步落实了 CI/CD 流程 团队的质量能力和产品的质量提升了 2022 年生活 12月的尾声，认识到生活的快乐。认识到金钱不是衡量一个人的唯一标准。正直，美好的事情永远值得追求。 对人对己都不应该设计过高的期望值，否则会给别人，给自己带来灾难性的后果，以及非常糟糕的人际关际。\n今年搞了一个小的公众号：「烟知」；设立的目标是帮助烟台大学的学弟学妹更加了解 IT 行业，以及帮助 大家找到更好的工作。刚刚起步，但充满信心与希望。\n2022年又是一个疫情年。但2023年疫情已经要基本结束，大家都用身体扛了一次奥密克戎。\n2022年没有旅游。但是和家人呆了比较长的时间。\n2023 年展望 \u0026ndash;unfinished\n关键词：沟通。\n2023年希望自己在沟通方面能做的更好，在聆听方面能做的更好。\n完成几个脚踏实地的研究； 完成收入的质变； ","date":"2023-01-08T11:59:23+08:00","permalink":"https://svtter.cn/p/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/","title":"2022年终总结"},{"content":"有时候我们进行长时间的计算，可能不希望一直盯着黑色的屏幕输出一行行的日志，这个时候就可以使用一些小程序，在实验完成后通知自己。\n先给源代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/blinkbean/dingtalk\u0026#34; ) var ( cliBehavior = flag.String(\u0026#34;behavoir\u0026#34;, \u0026#34;program\u0026#34;, \u0026#34;Input the behavior\u0026#34;) ) func main() { flag.Parse() var dingToken = \u0026#34;填你自己的\u0026#34; var key = \u0026#34;填你自己的\u0026#34; cli := dingtalk.InitDingTalkWithSecret(dingToken, key) sendMsg := fmt.Sprintf(\u0026#34;%s success.\u0026#34;, *cliBehavior) if err := cli.SendTextMessage(sendMsg); err != nil { panic(err) } else { fmt.Println(\u0026#34;message sent.\u0026#34;) } } 这里，我们使用了 go 语言和 dingtalk；\n我们将这个程序构建一下：go build main.go -o notify\n在执行实验时，我们可以直接调用notify -behavior \u0026quot;ai实验\u0026quot;；例如python main.py \u0026amp;\u0026amp; ./notify \u0026quot;ai实验\u0026quot;\n这样，在实验执行完成后，手机端和电脑端都可以快速得到通知了。\n","date":"2023-01-08T11:09:02+08:00","permalink":"https://svtter.cn/p/%E4%BD%BF%E7%94%A8im%E5%81%9A%E5%8F%8A%E6%97%B6%E9%80%9A%E4%BF%A1/","title":"使用IM做及时通信"},{"content":"使用代理。在国内编程，使用代理非常重要。\n如果不使用代理，代码包的下载，环境的构建会浪费你很多时间。有些环境因为高度依赖网络环境，使得我们如果不定制底层网络，无法获取某些资源。\n下面罗列几个推荐的代理。\ngo: goproxy.io java:\nmaven mirror, edit ~/.m2/settings.xml 1 2 3 4 5 6 \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;nexus-aliyun\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;*\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;Nexus aliyun\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; ruby: gem mirror\n1 2 3 4 $ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/ $ gem sources -l https://gems.ruby-china.com # 确保只有 gems.ruby-china.com php:\ncomposer: composer config -g repos.packagist composer https://mirrors.aliyun.com/composer/ python:\ntsinghua - pypi pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple nodejs (javascript):\ncnpm: npm install -g cnpm --registry=http://registry.npm.taobao.org tyarn: npm install -g tyarn ","date":"2022-11-17T21:15:09+08:00","permalink":"https://svtter.cn/p/use-mirror/","title":"Use Mirror"},{"content":"最近才用了一种新的文件管理方法，来整理大量的文件。\n文件整理要应对三个关键问题：\n新增文件的处理 文件的快速检索 文件的归档 本文通过聊这三个问题，来应对文件管理问题。\n文件组织形式 首先聊聊文件的组织形式。我一般采用如下的方式整理文件。 将文件分成几个大类：\nmicl-lab (实验室) research (我的研究) thinghoo (企业) 新增文件的处理 产生的文件都会直接到对应文件夹中。新增文件是必不可免的。 然后，在文件夹中，会使用\u0026lt;name\u0026gt;-2022-10这种形式。通过不同的月份来区分文件。 一般情况下。这种模式最大的好处是，在产生新的文件的时候，知道应该丢到哪里去。 之后，如果新的一个月开始，就可以创建一个新的文件夹。\n之后再回顾文件的时候，只需要记住大概的时间，就能在文件夹中找到对应的文件。\n检索 我的文件检索主要基于脑力+Spotlight。更好的工具不太会用（逃）。 通过大类+月份来区分，最大的好处是，很多事情都是按月来做的。比如定期的发票报销， 资金整理，财务整理等等。\n因此，如果定位到相关的文件夹，直接使用 Finder 自带的搜索功能也未尝不可。\n文件的归档 在上述文件组织的模式下，文档归类就变得容易了。 你可以首先把2021年的文件夹整理到一个目录下面，例如mge-2021； 然后，如果想要节省空间，可以直接打一个zip包，然后删掉zip外的其他文件。 我是使用 icloud 进行备份的，因此节省空间也是挺重要的。\n好的，如果本文对你有帮助，就给我留个言吧！\n","date":"2022-10-07T22:23:37+08:00","permalink":"https://svtter.cn/p/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95/","title":"一种新的文件管理方法"},{"content":"Gevent 是一个非常好用的异步工具，能够自动将阻塞的代码转换成非阻塞的代码。\n这个功能是通过MonkeyPatch来实现的。\nMonkeyPatch通过 Hook 底层的代码库，来实现上层代码无变更，透明的底层实现更改。\n在底层，Gevent 使用的库是libev或者libuv。这是实现了与nodejs同级别的高性能。\nIO模型 如果读者尚未理解非阻塞，那么建议看一下IO的四种模型。分别是：\n同步阻塞 同步非阻塞 IO多路复用 异步IO 在不同场景下选择不同的IO模型，可以有效的利用系统资源，更快的响应用户的请求。\nIO slow problem 之所以会有IO问题存在，原因有两个:\nIO 设备的速度慢； 用户态和内核态的转变； IO 设备速度慢，就要等待 IO 读取。\n用户态进程必须通过系统调用，向内核发出指令，才能调用系统资源。 此外，用户态进程进行读写操作的时候，必然涉及到缓冲区。 读写操作不会直接对设备进行。因此，在进行读操作的时候， 系统从设备将数据读取，拷贝到内核缓冲区。用户进程如果想要使用 读取的数据，须从内核缓冲区复制到进程缓冲区。\n因此，速度慢了，等待就耗时。反应到用户层面，就会出现，用户新开浏览器，但是系统仍然没有反应的情况。\n","date":"2022-09-28T08:55:43+08:00","permalink":"https://svtter.cn/p/good-gevent/","title":"Good Gevent"},{"content":" GitHub link: https://github.com/Svtter/2InOne\nCould two packages share same folder? The answer is yes.\npackagea is in apps packageb is in apps And the mainc installed them all, run src/main.py successfully.\nThe folder tree is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 ├── mainc │ ├── poetry.lock │ ├── pyproject.toml │ └── src │ └── main.py ├── packagea │ ├── apps │ │ └── packagea │ └── pyproject.toml ├── packageb │ ├── apps │ │ └── packageb │ └── pyproject.toml └── readme.md The main.py is:\n1 2 3 4 5 6 7 from apps.packagea.a import printa from apps.packageb.b import printb if __name__ == \u0026#34;__main__\u0026#34;: printa() printb() ","date":"2022-07-16T13:06:53+08:00","permalink":"https://svtter.cn/p/two-packages-in-one-folder/","title":"Two packages in one folder"},{"content":"最近发现 Django settings 在使用的时候，容易出现不经过检查的问题。 因此，想要在 settings 的基础上严格约束一下，减少问题。\n在进行相关技术调研的时候，发现了django-class-settings这个库。 实现方式很有意思，于是就调研了一下，学习到了很多新的东西。\n这个库的核心思想，是在代码中，把一个类转换成一个 module； 这非常酷，让我们看看这是如何实现的。\n按照代码的阅读思路，我们首先看看这个包的用法\u0026hellip;\n以下是README.md中的内容；\ndjango-class-settings aims to simplify complicated settings layouts by using classes instead of modules. Some of the benefits of using classes include:\nReal inheritance [Foolproof settings layouts][local_settings] Properties Implicit environment variable names Example 1 2 3 # .env export DJANGO_SECRET_KEY=\u0026#39;*2#fz@c0w5fe8f-\u0026#39; export DJANGO_DEBUG=true 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # manage.py import os import sys import class_settings from class_settings import env from django.core.management import execute_from_command_line if __name__ == \u0026#39;__main__\u0026#39;: env.read_env() os.environ.setdefault(\u0026#39;DJANGO_SETTINGS_MODULE\u0026#39;, \u0026#39;myproject.settings\u0026#39;) os.environ.setdefault(\u0026#39;DJANGO_SETTINGS_CLASS\u0026#39;, \u0026#39;MySettings\u0026#39;) class_settings.setup() execute_from_command_line(sys.argv) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # myproject/settings.py from class_settings import Settings, env class MySettings(Settings): SECRET_KEY = env() DEBUG = env.bool(default=False) INSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, ] ROOT_URLCONF = \u0026#39;myproject.urls\u0026#39; WSGI_APPLICATION = \u0026#39;myproject.wsgi.application\u0026#39; Installation Install it from [PyPI][pypi-url] with [pip][pip-url]:\n1 pip install django-class-settings 我们可以看到，这个类关键入口可能在env.read_env()以及class_settings.setup()。\n我们首先看一下 src.class_settings.env 的代码。可以发现，这个代码用于加载 django 中的 env； 因此不是我们关注的重点。\n让我们再看看关键函数 setup。\nsrc/class_settings/__init__.py:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 __all__ = [\u0026#34;Env\u0026#34;, \u0026#34;Settings\u0026#34;, \u0026#34;env\u0026#34;, \u0026#34;setup\u0026#34;] __version__ = \u0026#34;0.3.0-dev\u0026#34; from .env import Env, env from .settings import Settings def setup(): import sys from django.conf import settings from django.utils.functional import SimpleLazyObject from .importers import SettingsImporter, LazySettingsModule global _setup if _setup: return sys.meta_path.append(SettingsImporter) default_settings = LazySettingsModule() settings_module = SimpleLazyObject(lambda: default_settings.SETTINGS_MODULE) settings.configure(default_settings, SETTINGS_MODULE=settings_module) _setup = True _setup = False 在.settings.py中没有直接加载的代码，因此，我们可以直接阅读本文件。\n未完待续\u0026hellip;\n","date":"2022-05-09T14:02:27+08:00","permalink":"https://svtter.cn/p/crazy-import/","title":"Crazy Import"},{"content":" Ruby 是一个伟大的编程语言，但是很多国内的工程师尚未体会到它的精髓。\nMacOS 上本身自带一个 Ruby runtime，在笔者的系统上，这个版本是 2.6.0。\n建议读者通过安装rbenv来控制ruby的版本，而不是直接使用brew install ruby安装的 ruby。\nbrew 直接安装的 ruby，会导致gem env home仍然是 /Library/...的目录，从而无法安装rails等工具。\n安装 rbenv 执行brew install rbenv命令； 配置zshrc/bashrc文件。 因为笔者使用的 SHELL 为 zsh，所以添加命令到.zshrc：\n1 2 export PATH=\u0026#34;$HOME/.rbenv/bin:$PATH\u0026#34; eval \u0026#34;$(rbenv init - zsh)\u0026#34; 安装 Ruby 在本文发表时，ruby 的最新版本为3.0.2。\nrbenv install 3.0.2\n安装完成后，使用\nrbenv local 3.0.2\n指定当前使用的 ruby 版本。\n执行 ruby 通过ruby --version命令，我们可以查看当前 ruby 的版本。\n1 2 $ ruby --version ruby 3.0.2p107 (2021-07-07 revision 0db68f0233) [arm64-darwin21] 配置 gem gem 是 Ruby 的包管理工具，类似于Python 的 pip，Nodejs 的 npm。\n在国内的环境下，因为安全原因，gem 下载软件包的速度十分缓慢。\n因此，我们需要配置一下国内的 mirror （镜像），来加快包的下载速度。\n在此推荐一下Ruby China。（——但是国内的镜像源真的可信吗？）\n采用如下方式进行更新:\n1 2 3 4 $ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/ $ gem sources -l https://gems.ruby-china.com # 确保只有 gems.ruby-china.com 更新完成后，gem 的下载速度就会飞快。\n此时就可以畅游 Ruby 啦~赶紧把rails安装起来吧！\n","date":"2021-11-20T10:12:45+08:00","permalink":"https://svtter.cn/p/%E5%9C%A8-macos-%E4%B8%8A%E4%BD%BF%E7%94%A8-ruby/","title":"在 MacOS 上使用 Ruby"},{"content":" 最近在做技术选型，想要引入一些新的开发语言，开发技术到技术团队。大众编程语言在 WEB 方面的稳定性，已经被人所熟知了。但是数据库版本控制方面，每个程序设计语言做的深度和稳定性都有所区别。数据库版本控制和 ORM 密切相关。而\u0026hellip;\n提到 ORM，就不得不聊聊 ActiveRecord和DataMapper。\nDataMapper DataMapper 是一种 ORM\u0026rsquo;s pattern。\n一般，使用 DataMapper，你会将所有的查询方法写到 repositories里面。所有的数据操作都会在repositories中进行。例如增加，加载，删除，查询。使用DataMapper的时候，entity 会显得有些“呆滞”。一般情况下，定义好属性和一点简单的方法，不会频繁的 entity 进行操作了。\n所以，大多数情况下，程序员使用 repositories 与数据库进行交互。\n这种模式常见于Spring JPA。\nActiveRecord 在 ActiveRecord 模式中，model 的属性和方法，全都在一起定义。\n所以，在大多数情况下，程序员直接使用 model与数据库进行交互。\n这种模式常见于 Django 和 Ruby on rails。\n我应该选择哪一种？ 选择哪一种 ORM pattern 取决当前的应用环境。\nData Mapper 因为其分离性，在大型应用的开发中往往会更有效率 Active Record 使得编写 ORM 变得很容易，因此在小型应用中很受欢迎。Simplicity 往往是可维护性的一个关键指标。 ","date":"2021-11-20T10:00:32+08:00","permalink":"https://svtter.cn/p/orm-%E4%B8%AD%E7%9A%84-pattern/","title":"ORM 中的 Pattern"},{"content":"本文开始之前，有几个原则和道理，需要读者要认同：\n明确一个问题：从规则上讲，作为一名学生/老师/工程师，带来问题的工作一定要做。 认同一个道理：从个人的角度讲，只有做事情，才能让自己更优秀。 通过实践验证的真理是最有价值的，只停留在书本上的知识是无法创造价值，也不容易被人认同的。 基于“一定要做”这个大的预设，可以进一步做一些思考。\n一定要做，但是不想做，怎么办？ 如果一个事情是一定要做的。 为什么不想做？可能有几个原因：\n做事情没有成就感。 事情很难，属于困难区。人往往喜欢做舒适区的事情，能够做挑战区的事情，无法做困难区的事情，因此不想做。 其他的原因：这个原因是什么呢？ 可以考虑一下，是怎样的客观原因导致自己不想做。 但是无论如何，不能放弃。一旦放弃了，就是被打败了。人可以失败，但不能被打败。逃避了一次，就会有下一次。\n针对以上几个原因，可以有几种解决方法：\n针对成就感 寻求他人的认同。别人说：你这件事情做的真棒。真强。别人的认同是有益的。 完成自我认同。我相比于之前的自己，掌握了更多的知识。 自己找到做事情的乐趣。多给自己选择。同样一个事情，我有很多种方式去做。从而激发自己的内在动力。 从所谓无价值的事情上寻找价值。人类不是一开始就有建筑学的，是不停的建造，升级，研究才形成建筑学的。 针对困难区 与管理者沟通，降低任务本身的难度。 自身通过调整，将大的困难区任务分解成小的挑战区任务。通过解决挑战区的任务，完成自我认同，进而完成困难区的任务。 每个人都想让自己的生活过的更好。如果每个人都做同样的事情，是没有办法过的更好的。要努力才能收获更多东西。\n针对其他原因 问题不清楚的时候，不好给出答案。 但是可以把握几个原则：\n坚持，不放弃 持续思考问题的解决方案。 ","date":"2021-09-06T13:18:15+08:00","permalink":"https://svtter.cn/p/%E5%85%8B%E6%9C%8D%E5%9B%B0%E9%9A%BE/","title":"克服困难"},{"content":"docker compose 构建前端 app 是否容易，强烈建议中小企业采用这种方法。\n对于前后端分离的 WEB 应用，一般采用npm run build的形式构建静态文件。 生成静态文件后，将静态文件放置到 nginx 的静态目录下。\n因此，我们可以根据这个特点，完成 nginx 镜像的构建。\n这个构建过程往往分成两步：\n构建前端的环境，并且生成静态文件 构建nginx镜像，将静态文件拷贝 Dockerfile 一个样例Dockerfile如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Stage 0, \u0026#34;build-stage\u0026#34;, based on Node.js, to build and compile the frontend FROM node:14 as build-stage WORKDIR /app # 配置淘宝镜像 RUN yarn config set registry https://registry.npm.taobao.org/ # 复制前端依赖文件 COPY package.json /app/ RUN yarn install COPY . /app RUN yarn run build # 复制 nginx 配置文件 COPY default.conf default.conf # Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx FROM nginx:1.18 COPY --from=build-stage /app/dist/ /usr/share/nginx/html # Copy the default default.conf provided by tiangolo/node-frontend COPY --from=build-stage /app/default.conf /etc/nginx/conf.d/default.conf CMD [\u0026#34;nginx\u0026#34;, \u0026#34;-g\u0026#34;, \u0026#34;daemon off;\u0026#34;] nginx 配置文件如下：\n1 2 3 4 5 server { listen 80; access_log /dev/log; root /usr/share/nginx/html; } 启动应用 构建前端镜像：docker build -t frontend . 启动前端应用：docker run -it -p 3000:80 -d frontend . 这样，我们在主机的3000端口启动了nginx，并且将前端的应用拷贝了进去。\n下一步，我们可以在此基础上构建整个应用。\n（未完待续）\n","date":"2021-09-04T18:04:01+08:00","permalink":"https://svtter.cn/p/%E4%BD%BF%E7%94%A8-docker-%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E5%BA%94%E7%94%A8/","title":"使用 Docker 构建前端应用"},{"content":"测试驱动开发，是一种保证软件质量，提高研发效率的开发方法。\n测试驱动开发的定义如下：\n测试驱动开发，英文全称Test-Driven Development，简称TDD，是一种不同于传统软件开发流程的新型的开发方法。它要求在编写某个功能的代码之前先编写测试代码，然后只编写使测试通过的功能代码，通过测试来推动整个开发的进行。这有助于编写简洁可用和高质量的代码，并加速开发过程。\n以上内容来自百度百科。\n百度百科很好的说明了这个问题，我们本文不再赘述，只讲关键问题。\n基本流程 快速新增一个不能通过的测试 运行测试（运行一个测试，或者所有的测试） 做尽可能少的改动，使测试通过 运行所有测试，并使其通过 重构代码，消除重复设计，优化结构 1 2 3 4 5 6 7 A: write a test B: make test pass C: refactor A -\u0026gt; B -\u0026gt; C -\u0026gt; A FAQ 功能测试应该怎么写？ 功能测试，应该尽可能只使用本层的函数和接口。 例如，功能测试应尽可能调用 django app 的 URL 接口，而不是直接调用 app 中的业务逻辑。 当然，如果准备数据较为复杂，可以利用一些工具函数，将基础数据加载到系统中。 这些工具函数，我们同样建议在功能测试层实现，而不是直接调用最底层的函数。\n不要忽视重构 重构是 TDD 的重要环节。可以通过 OOP 等方式尽可能的降低心智负担，从而使得代码简洁明了。 对于许多初学者，在执行一段时间的 TDD 后便无法推进了。很多程度上是因为无法简化程序逻辑。 TDD 能让你变得更好，发现问题。但是 TDD 无法解决原本就存在的设计问题。\nWEB 前端如何采用TDD？ 不测试样式。一般情况下，样式不是核心需求。 充分利用 HTML tag。例如：利用 class 定位元素 测试业务逻辑。针对历史 BUG 进行测试。 充分利用 Javascript 模块。写模块，而非脚本 ","date":"2021-08-06T10:41:16+08:00","permalink":"https://svtter.cn/p/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%81%9A/","title":"测试驱动开发应该怎么做？"},{"content":"这篇文章写给在迷茫的师弟师妹，或者正在阅读本文的你。\n最近又快到毕业季了，看到师弟师妹们忙碌的样子，有些话总觉得当讲。 先说观点：不要被互联网企业所迷惑，高薪不是让自己获得幸福的途径。\n到底如何选择 在做选择的时候，要想想自己想要什么，什么能让自己幸福。\n对于互联网企业，毕业生能够拿到SSP，有机会得到年薪50万元 offer。 这对一般家庭而言不是一笔小数目，但是，这种高收入往往伴随着996这样的高强度工作。 按照我个人的经验，盲目的加班是无法创造价值的。 这个价值，既包括了组织的价值，也包括个人的价值。 中国人的进步，不应该积累在盲目的努力之上。 从集体的角度看，在全球处于农业社会的时期，我们国家勤劳的人们创造了巨大的财富。 但是，盲目的勤劳而不思考，导致我们国家依然被率先完成工业化革命的国家所反超。 在熬夜加班时所写的代码，经常要花费大量的时间去弥补，修复技术债务。\n选择适合自己的方向，在平凡的岗位上能创造价值，在卓越的岗位上也能创造价值。 创造价值是让自己维持长久生活质量，获得心理认同的重要方式。\n选择错了也没关系 作为一个大企业，方向一旦错了就容易分崩离析。但是对于一个人而言，并非如此。 人不要害怕犯错。错了只要能改，就比昨天的自己更加优秀。\n最可怕的不是犯错，而是停滞不前。 当然，在进行决策的时候，要首先问自己几个问题： 在当前情况下，我是否已经得到了所有用于决策的信息？我是否能够得到更多？ 当前的信息是否可以让我下决定？\n刚毕业，正是需要领取自己第一份工资的时候，喜欢钱也无可厚非。 赚点钱买一些之前想买的外设，喜欢的衣服鞋子等等，也是很快乐。 高薪工资也确实挺香——自己想清楚了，做出选择，会更快乐。\n相信自己 是金子总会发光。不是金子就不用发光。不是所有人都需要搞一个大新闻，整非常炫酷的技术。 在一个团队中有不同的分工，每个人都很重要。 高薪不是获得幸福的唯一途径。与朋友一起吃饭聊天，与家人一起出门游玩，与长辈一起坐着聊天。 这些都可以获得幸福。\n未完。\n","date":"2021-03-22T23:46:08+08:00","permalink":"https://svtter.cn/p/%E7%BB%99%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E4%B8%80%E7%82%B9%E5%BB%BA%E8%AE%AE/","title":"给程序设计初学者的一点建议"},{"content":"为了能够做到更加快速的开发，这两天研究了一下 dotnet。\n读者 希望做独立，快速开发的个人\nRazor 的优势 微软爸爸还是强。Vuejs 的编程模式可以很好的套用到 Blazor 上面。 让我们看看 Blazor 的写法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @page \u0026#34;/todo\u0026#34; \u0026lt;h3\u0026gt;Todo\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; @foreach (var todo in todos) { \u0026lt;li\u0026gt;@todo.Title\u0026lt;/li\u0026gt; } \u0026lt;/ul\u0026gt; @code { private IList\u0026lt;TodoItem\u0026gt; todos = new List\u0026lt;TodoItem\u0026gt;(); } 这是 Razor 的写法，将代码与 HTML 进行简单的分离；这种写法表面看起来朴实无华，甚至有朋友说 php 能够做的更好。 我想也是，php 确实能够做的更好。但是 razor 可以编译成 wasm，也就是前端的 汇编语言——这就完全不一样了。\n这种写法可以将用户侧性能利用起来，从而减少服务器的压力，并且只需要一个人进行开发。\n因此，对于小型项目，可能是一个非常好的选择。\nRazor 的劣势 Razor 对于初学者较大的恶劣是，无法很快的适配前端的生态。 现在前端的技术如此丰富，如果不能很快利用，生产力相较于其他团队会差很多。\nRazor 可能十分适合构建一个对于 Frontend 要求不高的系统，或者原型系统。\n后续 这篇文章仅仅是将 razor 的好处进行了简单说明，没有在生产环境中采用。因此，是否采用此技术，需要进一步思考，切勿因小失大。\n","date":"2021-01-30T10:45:48+08:00","permalink":"https://svtter.cn/p/%E5%8E%89%E5%AE%B3%E7%9A%84-dotnet/","title":"厉害的 dotnet"},{"content":"这篇文章聊聊技术订阅。\n目的 技术订阅是提高初级程序员效率，视野的绝佳方法，这里推荐几个公众号，博客，APP。\n订阅列表 垃圾信息会影响我们学习的效率。 在一些垃圾订阅中，存在着大量重复的无用信息，这些无用信息会让我们的大脑变的迟钝。 因此，在这里，我筛选了一些技术的订阅，供读者参考。\nInfoQ：https://www.infoq.cn/ 我认为这个站点是国内做技术最好的站点之一，可以提供较好的技术资讯。 这个站点同时提供微信公众号，可以减少访问的频次。\n公众号：✔ 阮一峰：http://www.ruanyifeng.com/home.html 阮一峰写的博客浅显易懂。虽然没有深入的技术，但是能够较快的掌握开发中所遇到的基础知识。 此外，每周的科技周刊也是一个拓宽技术视野的好渠道。\n公众号：✔ 极客时间 APP 没记错的话极客时间 APP 和 InfoQ 是同一个创始人。 极客时间是需要花钱的（笑），也有质量一般的课程。建议仔细考察课程主讲的出身，决定是否选择该课程。\nGithub weekly 这是 Github 周订阅。 Github 周订阅可以提供一些有价值的资讯，但是也会被茅台所充斥。\nGoogle / Facebook / Amazon / Netflix Blog 大型科技公司的博客。 这些博客基本是英文，对于英文不好的同学不太友好。 而且对于技术有一定要求——如果基础知识不牢固，或者背景知识，经验不够充分，很容易看不懂。\n公众号：✔ 总结 其他的技术订阅内容、博客，可以根据上述渠道获得。 技术的学习是永无止境的，兴趣是最好的老师。\n我个人的技术阅读一般安排在零碎时间，遇到好的文章，一般会放在浮窗，或者印象笔记。\n不过坦白讲，放在印象笔记就基本不看了，仅用于检索。\n","date":"2021-01-23T10:33:36+08:00","permalink":"https://svtter.cn/p/%E6%8A%80%E6%9C%AF%E8%AE%A2%E9%98%85/","title":"技术订阅"},{"content":"这篇文章聊聊指导新人。\n本来约了*老师改论文，不过想了想，灵感翻涌，鸽了吧！\n鼓励和惰性 新人在效率低的时候，往往有两种原因：一是惰性，另一个则是需要鼓励。 惰性往往与时间有关。做事情，做到一定时间，都会出现惰性。需要规则来约束人。\n规则是底线。规则不能定的过高，过高的规则会让人应付起来十分疲惫。 破解惰性有多种方法：树立新的目标是最好的方法；其次是羞耻感——知耻而后勇。\n效率低的另一个原因则是需要激励。 长时间的打击往往会使人情绪低落。此时新人需要的支持和鼓励，而不是批评。需要与新人一起克服难题。 更准确的说，指导者需要为新人“自己”解决问题提供帮助。\n指导者需要能够判断新人处于哪种状态，针对性处理。这种判断需要依据新人的状态、事实进行判定。 这两种状态，归根结底，都是新人需要帮助。 新人可能遇到其他的阻碍，比如遇到了无法解决的技术问题。这个时候可以视情况而定。\n反抗与盲从 反抗与盲从往往是相伴的。 反抗常见于优秀的新人，他们有着卓越的能力，在同辈之中属于佼佼者。甚至在某些方面超过老手。 对于这种新人，要张弛有度。对于他们优秀的地方，要放手发挥他们的长处。对于他们不成熟的地方， 要展现出气场，强制其提升。这个过程中难免新人会有怨言，或者不服气。此时有两种做法：就让他们不服气； 让他们吃亏。无论采用哪种方式，最终目的都是让新人知道，他之前的做法是“不专业”或者“不成熟”的。 进而获得成长，成为团队中可靠的一员。\n盲从常见于进取心不是特别强的新人。这种新人往往能力不是很强，喜欢依照命令行动。新人中的 强者也会出现这个问题。对新人强者而言，出现这个问题的原因有很多。其一，遭遇了过多的否定，打击 了信心，从而胆怯。其二，思维局限。对于原因一，指导者应该给予新人基于事实的认可。对于原因二， 开拓新人视野，给新人看新的东西，激发创造力。\n诡辩和欺骗 建议放弃。\n新知识与战友 新人在成为专业的人才之后，新人便是可靠的战友。 当新人具备足够的知识储备，规则便生于新人的内心，指导者可逐步减少对于规则的关注。 新人此时可以良好的控制自己的时间，进度和效率。 此时新人与团队成员具备相同的认知，可进行进一步拓展：“技术讨论”和“指导新人”。 完成转变的新人此时是团队中的一员，可以较好的与团队协作，提出自己的意见见解。 此时，“新人”也可以去指导其他新人，巩固自己的知识，从而进一步提升。\n","date":"2021-01-22T21:13:00+08:00","permalink":"https://svtter.cn/p/%E6%8C%87%E5%AF%BC%E6%96%B0%E4%BA%BA-part1/","title":"指导新人-part1"},{"content":"这篇文章聊聊我为什么要写博客。\n写在最前面 时间其实是有的，只不过对于“写博客”这件事情的意义没有考虑清楚。因此迟迟不做。 学习复杂知识是没有那么容易的，一旦知识有了深度，就需要人花时间和成本去理解、学习。 因此，如果因为害怕别人学到，而不分享是没有意义的。大部分手把手教都学不好——很快学会的可以做个朋友。😂 犯错和暴露弱点是有必要的。羞耻心可以促使自己变的更加优秀。 写博客的目的是什么？ 记录自己的生活 我想和朋友们分享我的生活，我的近况。朋友们可能没有时间在微信上沟通，阅读一篇博文不需要双方同时在线。\n督促自己 通过这篇文章，博客的意义和好处清晰了，可以督促自己花费精力。花费精力才能把博客写好。\n整理技术文章，进行技术总结 这些技术文章应该是分类的，有标签的，可追溯的。\n交个朋友 很多朋友都在写文章。找到志同道合的人，可以一起做些有趣的事情。\n拓展技术影响力，建立自己的个人品牌。 技术影响力何其难也。要钻到一个技术里面，得到大家认可，才能建立影响力。目前除了 Python 较为熟悉之外，对于其他的技术，研究深度是不足的。\n博客有哪些设定？ 专栏。 专栏中针对某一个方向和技术着重的写一些东西。\n随笔 随笔不限制题材（属于过去经常写的东西）。\n想法 想法这个栏目还在整理，是否公开待定。\n","date":"2021-01-04T12:17:13+08:00","permalink":"https://svtter.cn/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2/","title":"为什么写博客？"},{"content":"2020 年是过去几年里，过的最快的一年。\n书写一篇文章首先需要一个大纲。让我看看如何给读者描述一下今年我的工作。\n2020年我所做的事情 年度总结应该写一些重要的东西。\n2020年随着疫情开始。 在1月份开始，主要完成的是基金方面的工作。写基金不是一件容易的事情，如果不多加思考，很容易写的相对局限。 项目方面，cathotic，碧水剑、MGE-AI。 项目方面，开始走向更加正规，以及拥抱云计算。大数据方面也勉强接受了一些。 Python coding 倾向于更加细致和专业的东西。 这也促使我反思，对技术的学习方式。 在最后一个月，博士论文的检索能力有所突破。\n回首今年的日常记录，发现从9月份开始记录就死掉了。 生活总要抓重点，学习也是。想做好事情，无论是科研还是工程，区别都不是很大\n2020年遇到的阻碍 最大的阻碍大概是总想把事情做的过好。\n2021年：展望 把 \u0026lt;未完待续\u0026gt;\n以下内容书写自 2023年01月08日\n2023 年回归再书写 看到 2021年展望有点幸灾乐祸。\n最大的阻碍大概是总想把事情做的过好。\n这个事情其实是没有设计合理的预期值。 此外，实际上2021年是没有很好计划的。\u0026ndash; 就算是计划了，俺也找不到了。\n","date":"2020-12-30T09:21:13+08:00","permalink":"https://svtter.cn/p/2020%E5%B9%B4%E6%80%BB%E7%BB%93/","title":"2020年总结"},{"content":" 是有一段时间没有更新博客了，仔细想想事情也不是很多，我的效率应该还可以提升。这里简单写一下想法。\n看了一期比较喜欢的视频，这里推荐一下：\n视频地址：https://www.bilibili.com/video/BV18h411Z7Gy\n里面谈了几个问题：\n战胜自己 不能有过高预期 能否对未来的自己说一句话？ 最坏的打算、最好的打算。做好打算。 努力让自己产生正面情绪，而非负面情绪。 成功人士在努力工作之后，依然能够做到跑步，健身，运动。这是因为这些活动能够带来较好的多巴胺反馈。\n我们需要战胜的是自己的心理，而不是某个具体的技术难题。根本问题在于我们自己的面对困难的心理状态不佳，而不是纠结于问题本身。\n只有这样才能让自己变得更好。\n","date":"2020-12-26T12:46:02+08:00","permalink":"https://svtter.cn/p/%E4%B8%8E%E6%8B%96%E5%BB%B6%E5%81%9A%E6%96%97%E4%BA%89/","title":"与拖延做斗争"},{"content":"首先介绍一下整体的情况，和我们的需求。\n在我们组里，不同的项目和服务，被分到不同的 repo 中，托管在 gitlab 上面。\n最近一段时间，由于构建的时间变长，用掉了 gitlab 免费的 2000 minutes。\n因此，打算采用自己的 runner，来进行服务的构建和使用。\nGitlab runner 配置有些神奇。\n🔙 技术背景 在这之前，我们已经单给 data_service 部署了一个 gitlab-runner。这是由于data-service 跑 CI 的时间格外长，因此单独进行了配置。\n但是没有想到的是，backend-service 耗尽了所有的 gitlab 分钟数。\n​\t本文花费了作者 $8 。如果可以的话，请支持一下作者。\n🏃‍♂️ Gitlab Runner 概念 CI 是由 jobs 组成的；\npipeline 是由多个 jobs 组成。\n官方文档声称，在 gitlab 中，没有shared runner，就不能启动 jobs 了。\n但其实，只要有 group runner 或者 specific runner （也就是我们自己配置的 runner），job 也可以正常运行。\n要注意一下 tag 选项。tag 选项，并非单纯的对 runner 进行区分。项目也会依据tag，被分配给不同的runner。\n不过，我们在最初配置runner时不清楚这一点。我们还以为，就是官方所声称的：\n1 2 3 4 5 \u0026#34;\u0026#34;\u0026#34; Shared Runners on GitLab.com run in autoscale mode and are powered by Google Cloud Platform. Autoscaling means reduced wait times to spin up builds, and isolated VMs for each project, thus maximizing security. They\u0026#39;re free to use for public open source projects and limited to 2000 CI minutes per month per group for private projects. Read about all GitLab.com plans. \u0026#34;\u0026#34;\u0026#34; 因此给gitlab进行了一下信仰充值。后来发觉似乎充值之后，我们配置的group runner也没有开始运行。\n最后我们定位到runner的tag问题，最终暂时移除了tag，解决了问题。\n希望 gitlab 能够发展的越来越好。希望Mozilla支撑下去。\n","date":"2020-08-17T08:44:46+08:00","permalink":"https://svtter.cn/p/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-gitlab-runner-%E7%9A%84%E9%85%8D%E7%BD%AE/","title":"⚙ 记录一次 gitlab runner 的配置"},{"content":"Recently I\u0026rsquo;ve try to use Spring Boot to make enterprise development more professional.\n❓ Problems I\u0026rsquo;ve meet one problems.\n1 2 3 4 5 \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;spring-roo-repository\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Spring Roo Repository\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;https://repo.spring.io/spring-roo\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; Original Spring ROO generate project with http protocol, which is wrong for the package request.\nMove http to https.\n🥴 Tips This script will create Spring ROO with Swagger.\n1 2 3 4 5 6 7 8 9 10 11 12 13 project --topLevelPackage cz.spring.swagger persistence setup --database H2_IN_MEMORY --provider HIBERNATE entity jpa --class cz.spring.swagger.domain.Word field string --fieldName name --notNull true --unique true field string --fieldName definition --notNull true json all controller all --package cz.spring.swagger.controller web mvc json all exit mvn tomcat:run curl -i -H \u0026#34;Accept: application/json\u0026#34; http://localhost:8080/swagger/words ","date":"2020-08-14T08:44:46+08:00","permalink":"https://svtter.cn/p/learning-spring-roo/","title":"Learning spring ROO"},{"content":"又有一段时间没有更新博客啦！这篇文章是vscode使用技巧。\n最近因为学生pycharm到期，因此采用visual studio code代替。使用过程中遇到不少问题，在此记录一下，为以后提供备忘。\n关于测试 只有使用 pytest， 才能将错误显示到 problems 中 test 的上级目录必须是 package，这意味着每层目录都要有 __init__.py 并行测试：\npip install pytest-xdist\n并且在pytest.ini下增加：\n1 2 [pytest] addopts = -n4 文件管理器 打开User Settings，搜素files.exclude 选项：去掉不想在文件管理器中看到的东西 lint 在错误检查方面，vscode 有许多细节可以设置。\nhttps://code.visualstudio.com/docs/python/linting\n增加django的检查：\n1 \u0026#34;python.linting.pylintArgs\u0026#34;: [\u0026#34;--load-plugins\u0026#34;, \u0026#34;pylint_django\u0026#34;] 这样就可以避免一些错误。比如：objects检查的错误。\n","date":"2020-06-09T11:25:25+08:00","permalink":"https://svtter.cn/p/visual-studio-code-tips/","title":"Visual Studio Code Tips"},{"content":"Mellow is an transparent proxy tools could run on Windows and Ubuntu.\nInstall Mellow install on Windows is simple. Here\u0026rsquo;s the introduction of install on Ubuntu.\nDownload Mellow from github release page\nConfig Mellow\u0026rsquo;s config is shown on its README. When the mellow not work, follow the Possible way section.\nPossible way Here\u0026rsquo;re the Ubuntu config.\nYou need to disable the systemd-solved and disable auto-update /etc/resolve.conf\n1 2 3 sudo systemctl disable systemd-sovled sudo systemctl stop systemd-sovled edit the /etc/NetworkManager/NetworkManager.conf, add dns=none to [main] section.\n1 2 3 4 5 6 [main] ... dns=none [ifupdown] ... Then reboot and start mellow again, it\u0026rsquo;ll work.\n","date":"2020-04-09T01:00:00+08:00","permalink":"https://svtter.cn/p/mellow-config/","title":"Mellow Config"},{"content":"挖了一个新坑，每天讲一点机器学习。\n讲出来是最好的学习方式。点击这里跳转。\n","date":"2020-04-08T01:00:00+08:00","permalink":"https://svtter.cn/p/%E6%AF%8F%E6%97%A5%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/","title":"每日机器学习"},{"content":"2019年过去了，简单做了一下总结。\n今年做了哪些事情？ 投出去了小论文，完成了大论文。硕士毕业。 完成了一个领域软件的开发 完成了一个石场的项目，身份是项目经理+产品经理。 学习 学会了TDD，tdd超级香。 学习了敏捷开发思维 完成了自己第一篇论文 拿到了硕士学位 工作 使用敏捷开发，完成了鑫鑫的项目 使用TDD，完成了Protect 的项目 小应用：剪贴板，车票，地摊，one_image 进一步了解了MGE 仪表项目正式上线 收获 群智能够产生巨大的价值，遏制群智会打压组织的发展。 学会了分解难题，按照步骤推进 解决问题，而不是推进进度。因为问题解决了，进度自然就推进了。 协同编辑有很大的作用 做事情，不能单纯的追求块，要一步一个脚印。 很多时候，软件开发进度迟缓，不是技术的问题，而是需求没有定义清楚，因此无法推进。 春种一粒粟，秋收万颗子。 存在的问题： 在琐事上浪费了不少时间。 没有及时调整自己的心态，在事情多的时候，没有合理的分配时间。 前几个月一直在纠结工程的结果，过于着急，写的代码水平不高，结果有问题。 由于这篇文章一直都没有写好，所以直到2020年4月7日才放出来。有些内容我也是不想分享的，知识是有价值的。 所以我开设了一个用于分享敏捷知识的知识星球。\n在里面我会分享一些敏捷的相关知识。\n","date":"2020-01-12T01:00:00+08:00","permalink":"https://svtter.cn/p/2019%E5%B9%B4%E6%80%BB%E7%BB%93/","title":"2019年总结"},{"content":"Kotlin 真是一个很可爱的语言。\nKotlin 可以无缝和 Java 进行调用，这一个很大的优势。 再者，kotlin 是 intelij 和 Google 背书，都是大厂（噗嗤）。\n我感觉 kotlin 对于 java 就像是 python 对于 c++ 一样。 python 我认为，某种程度上是 C++ 脚本，比 lua 高级（当然也带来了许多性能损耗）。\nKotlin 相比较于 python，要清晰。 因为 Kotlin 带着相对明显的类型系统，而 Python 则相对模糊。\nKotlin 相对于 Java 要简洁。 Kotlin 长得很像 Golang，都是把类型放在后面。或者说，定义函数方法很像。只不过，少了一个“c”;)\n比如：\nKotlin 相对于 Golang，有异常处理： 类似于 Python 的 for..in 灵活的“map”方法： 甚至超过 Python 简洁的类定义 什么？Python 里面的 dataclasses？ 此外，还有大量的有趣的特性。当我逼不得已非要使用在 JVM 的环境下进行开发的时候，我想我的首选肯定是 kotlin。\n2020-03-23: 新浪图床都挂掉了，本文中的图片也跟着离去了。。\n","date":"2019-09-26T01:00:00+08:00","permalink":"https://svtter.cn/p/%E5%A5%BD%E9%A6%99%E7%9A%84kotlin/","title":"好香的Kotlin"},{"content":"前一段时间都在忙论文的事情，没有时间更新博客。\n近期又做了不少的工程，对于软件开发又有了许多新的理解。我认为许多刚入行的程序员存在一个对技术的误解，就是: 软件到底是为什么服务的。\n软件是为使用者服务的。\n面向开发者的软件才是为开发者服务的。在制作软件的时候，不能觉得“你认为”，而是应该聆听使用者的声音。否则，这个软件开发者就是不专业的。软件开发是一件很有乐趣的事情，但是，当软件存在使用者，使用者付费的时候，软件就不仅仅是一个乐趣了，软件是一个商品。出售商品的开发者要对商品负责任。\n对于无法明确的点进行争论是没有意义的。\n在软件开发过程中，总会出现没有办法明确的功能点。有人会说，这是需求调研的问题。也有人会说，这是用户的问题，用户自己都不明确。那我们应该怎么做？做。找一个点先做，这才是专业的。我们开发者在10分钟内无法讨论出一个结果，那么可以先按照一个人的意见来行事。当这个意见出现问题的时候，我们再来纠正这个意见，而不是吵得热火朝天。这样没有意义。\n未完。\n","date":"2019-09-17T01:00:00+08:00","permalink":"https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%8D%E5%8A%A1%E7%9A%84/","title":"软件是为什么服务的"},{"content":"GNU/Linux 操作系统数量繁多，对于新手直接使用进行开发十分不友好。但是，随着 许多工具的发展，Linux 入门已经没有那么困难，这里简单介绍笔者的几个开发环境， 供读者参考。\n操作系统以及桌面环境 推荐使用 Linux Mint 辅以 Cinnamon Edition 桌面环境， 根据笔者五年的使用经验，这个桌面环境非常稳定，不容易出问题， 且基本的配置都可以提供。\n这里建议：\n既然是开发环境，就不要折腾。 使用效率最高的开发环境 有些人会推荐使用 i3 等非常粗暴的开发环境，可以说，笔者的个人感觉是，i3 等 基于 openbox 就只是个图形界面，而不是一个桌面环境。\n除此之外，也可以考虑 gnome 桌面环境。KDE 是不建议使用的，笔者没能配置好，也比较 吃配置。基于 QT 的桌面环境也不够自由。\n终端环境 fish 是一个新的 shell，不过zsh更加好用一些。可以考虑安装oh-my-zsh来加强 自己的shell，不过这个事情已经被网上的文章讲烂了。我这里更建议使用antigen 来配置自己的zsh，并且通过github或者gitee进行网络同步，从而在多个环境下 可以使用同一套配置。\n编辑器 vscode，pycharm这些东西都是可以用的。\n办公软件 可以考虑使用 石墨，或者腾讯文档。\n可以做 ppt 啥的。自带的libreoffice体验不是很好，不是很建议使用。不过按照发展 速度，这些东西迟早会赶上来的。\nIM electron 版本的微信虽然可以勉强用一下，但是笔者还是建议多使用邮箱 网易和腾讯均可。\n在使用 Linux 的过程中，可以不断的优化自己的使用环境。Linux 给予了用户最大的自由， 这也意味着用户需要对自己的行为负责。\n2020/12/30 现在我已经不使用 Linux 桌面环境了，基本上都是采用 虚拟机 的方式来使用 Linux。因此 Vim、Zsh 这些工具才是主要的软件环境。 2020年，Linux 桌面环境对于使用 word, excel, ppt 以及 微信，钉钉，QQ 的人仍然不是很友好。\n","date":"2019-06-02T01:00:00+08:00","permalink":"https://svtter.cn/p/%E6%88%91%E7%9A%84-linux-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","title":"我的 Linux 开发环境"},{"content":"睡眠革命是一本关于睡觉的书。\n我在其中学到的比较关键的几点：\n早点睡觉，90分钟前不要工作，不要刺激。 起床之后90分钟，也是睡眠时间，给身体一个适应的时间。 任何时候小睡30分钟，可能对你的身体都有莫大的好处。别怕，但别睡的太长。 人睡眠是90分钟为周期的。 每天早上起床时间基本上一致。请尊重你的生物钟。 最近没有很好的按照套路来，精神状态不太好。并且还服用了过量的褪黑素，导致白天 状态不好，情绪很差，做事动力也不太足。所以褪黑素感觉需要放一放。日光灯可以考虑 一下。\n乳胶枕头其实没有想象中的那么好，所谓高价的床垫也无法给你带来更好的睡眠。你需要 让你的身体相对放松，并且维持一条直线（你的脖子，你的身体，以及你的腿部），最好 像婴儿一样的姿势。\n整本书强调了很多返璞归真的东西呢=)\nupdated for 2019-05-07\n整洁干净的睡眠环境十分重要。 将手机以及其他电子产品搬离你的卧室。 睡眠最佳温度是18摄氏度（令人震惊，这个温度可能和户外一样）。 ","date":"2019-04-23T01:00:00+08:00","permalink":"https://svtter.cn/p/%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","title":"《睡眠革命》阅读笔记"},{"content":"这本书解决了不少让我迷茫的问题，感觉还不错。主要讲了一些财务的问题，以及打工的价值，当老板的价值。有些人可能一辈子就打工了，有些人则不同。有些人一辈子都不懂，有些人很小就懂了。\n书中有不少夸张的地方，辩证思考^_^\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e 笔记本 富爸爸穷爸爸 (全球最佳财商教育系列) (美)罗伯特·清崎 Citation (APA): (美)罗伯特·清崎. (2014). 富爸爸穷爸爸 (全球最佳财商教育系列) [Kindle Android version]. Retrieved from Amazon.com 序言　这就是你所需要的 标注 (蓝色) \u0026#8211; 位置 61 因为孩子们在学校缺少有关财商的教育。今天许多年轻人在高中毕业前就有了信用卡，却从未上过关于钱和投资的课程， 标注 (蓝色) \u0026#8211; 位置 90 只有精通会计和投资才能跳出“老鼠赛跑”的陷阱，可以说这是两个最难掌握的专业。 标注 (蓝色) \u0026#8211; 位置 114 她又说道：“现在我知道我可以去选择一个我想从事的职业，而不是因为某个职业安稳或福利好、薪水高我才去选择它。如果我学会了这个游戏所教的东西，我将自由地去做我想做的事，去学我想学的东西，而不是那些特定的工作所需要的技巧。如果我学会这些，我就不必像我的大部分同学一样，担心工作稳不稳定和社会保险了。” 标注 (蓝色) \u0026#8211; 位置 160 他受过良好教育的父亲建议他为企业工作，而他富有的父亲则建议他拥有自己的企业。 标注 (蓝色) \u0026#8211; 位置 165 他急于开始积累自己的资产，但最终发现大学教育对他也是有益的。 标注 (蓝色) \u0026#8211; 位置 167 鼓励孩子们成为雇员就是建议他们缴纳超过他们应付的份额的税，并只得到数量很少，而且还没什么保障的退休金。毫无疑问，税是一个人最大的支出， 第一部分　课程 标注 (蓝色) \u0026#8211; 第1章　富爸爸，穷爸爸 \u003e 位置 215 例如，我的一个爸爸总是习惯说“我可付不起”，而另一个爸爸则禁止我们说这样的话，他坚持让我这样说：“我怎样才能付得起？” 标注 (蓝色) \u0026#8211; 第1章　富爸爸，穷爸爸 \u003e 位置 229 一个爸爸说：“当涉及钱的时候要小心，别去冒险。”而另一个爸爸则说：“要学会管理风险。” 标注 (蓝色) \u0026#8211; 第1章　富爸爸，穷爸爸 \u003e 位置 236 另一个爸爸则信奉完全的经济自立，他反对这种“理所应当”的心理，认为正是这种心理造成了人们的软弱、贫穷。他特别重视理财的能力。 标注 (蓝色) \u0026#8211; 第1章　富爸爸，穷爸爸 \u003e 位置 242 他会这样说：“我是一个富人，富人不会这么做。” 标注 (蓝色) \u0026#8211; 第1章　富爸爸，穷爸爸 \u003e 位置 243 贫穷和破产的区别是：破产是暂时的，而贫穷是永久的。” 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 338 如果你们放弃了，你们就只能是穷人了。最重要的是你们已经尝试了。大多数人只是夸夸其谈，梦想着发财致富，而你们已经付出了行动。我真为你们骄傲，我要再说一遍，继续努力，不要放弃。” 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 381 “好吧，我说说我的建议：我会教你们，但不像在学校那样。你们为我工作，否则我就不教。因为通过工作我可以更快地教会你们。 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 439 假如你学会了生活这门课程，做任何事情你都会游刃有余。如果你学不会，生活照样会推着你转。人们通常会做两件事，一些人在生活推着他转的同时，抓住生活赐予的每个机会；而另一些人则非常生气，去与生活抗争。他们与老板抗争，与工作抗争，甚至与自己的配偶抗争，他们不知道生活同时也给了他们机会。” 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 456 “你们俩是最先请求我教你们赚钱的人，我有 150多个雇员， 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 463 如果你认为是我的问题，你就会想改变我；如果你认为问题在你那儿，你就会改变自己，学习一些东西让自己变得更聪明。大多数人认为世界上除了自己外，其他人都应该改变。让我告诉你吧，改变自己比改变他人更容易。” 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 473 有些人会这么做，只因为他们和他们的家庭需要钱而接受这份工资。但他们所做的也只是等待，等待加薪，因为他们认为更多的钱能解决问题。大部分人接受这样的工资，还有一些人会再找一份工作，仍旧干得很努力，但仍只能得到很少的报酬。” 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 484 儿子，我希望你努力学习，取得好成绩，这样你就能在大公司里找到一份稳定的工作，而且会收入不菲。”富爸爸却希望我去研究钱的运动规律，好让钱为我所用。在他的指导下，我会在生活中而不是在教室里学习这些课程。 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 543 接下来的 3个星期里，我和迈克每个星期六白干 3小时。这工作不再让我心烦，过程也容易些了。只是无法参加棒球赛以及不能再买连环画让我耿耿于怀。 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 603 事实上，许多人致富并非出于欲望而是由于恐惧，他们认为钱能消除贫困带来的恐惧，所以他们积攒了很多的钱，却发现恐惧感更加强烈了。 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 619 好好观察你的感情，别急于行动。大多数人并不知道是他们的感情代替了他们进行思考，感情只是感情，你还必须学会抛开感情来思考。” 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 625 依我看，答案是‘不是’，从人的一生来看更是如此。工作只是试图用暂时的办法来解决长期的问题。” 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 632 “我想教你们支配钱，而不是害怕它，这是在学校里学不到的。如果不学，你就会变成金钱的奴隶。” 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 636 “你看，我们在根本上都是雇员，只是层次不同而已。”富爸爸说，“我只希望你们有机会避开由恐惧和欲望组成的陷阱，按照你们喜欢的方式利用恐惧和欲望，而不要让它们控制你们。这就是我想教你们的。我对教你们挣大钱不感兴趣，那解决不了问题。如果你们不先控制恐惧和欲望，即使你们获得高薪，也只不过是金钱的奴隶而已。” 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 646 对你们来说最重要的是，运用感情作长远打算，别让感情控制了思想。 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 663 永远不要忘记，你有两种感情——恐惧和欲望，如果你让它们来控制你的思想，你就会落入一生中最大的陷阱。一直生活在恐惧中，从不追求自己的梦想，这是残酷的。为钱拼命工作，以为钱能买来快乐，这也是残酷的。半夜醒来想着还有许多账单要付是一种可怕的生活方式，以工资的多少来决定过什么样的生活不是真正的生活。认为工作会给你带来安全感其实是在欺骗自己。这些都很残酷，但我希望你们能尽可能地避开这些陷阱。我看过钱如何控制人们的生活，别让这些问题发生在你们身上，别让钱支配你们的生活。” 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 693 你要花时间去思考这个问题：更努力地工作是解决问题的最好方法吗？ 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 697 工作只是面对长期问题的一种暂时的解决办法。 标注 (蓝色) \u0026#8211; 第2章　第一课　富人不为钱工作 \u003e 位置 717 继续用你们的头脑思考，不求回报地工作，很快就会发现比拿工资更挣钱的方法。 标注 (橙色) \u0026#8211; 第3章　第二课　为什么要教授财务知识 \u003e 位置 769 我想有太多人过多地关注钱，而不是关注他们最大的财富——所受的教育。 标注 (蓝色) \u0026#8211; 第3章　第二课　为什么要教授财务知识 \u003e 位置 771 只有知识才能解决问题并创造财富，那些不是靠财务知识挣来的钱也不会长久。 标注 (蓝色) \u0026#8211; 第3章　第二课　为什么要教授财务知识 \u003e 位置 780 从长远来看，重要的不是你挣了多少钱，而是你能留下多少钱，以及能够留住多久。 标注 (橙色) \u0026#8211; 第3章　第二课　为什么要教授财务知识 \u003e 位置 784 如果你要去建造帝国大厦，你要做的第一件事就是挖个深坑，打牢地基。如果你只是想在郊区盖个小屋，你只须用混凝土打 15厘米厚的地基就够了。大多数人在努力致富时，总是试图在 15厘米厚的混凝土上建造帝国大厦。 标注 (蓝色) \u0026#8211; 第3章　第二课　为什么要教授财务知识 \u003e 位置 904 当我还是孩子时，我的爸爸告诉我日本人注重 3种力量：剑、宝石和镜子。 标注 (蓝色) \u0026#8211; 第3章　第二课　为什么要教授财务知识 \u003e 位置 954 最大的损失是致富机会的损失。如果你所有的钱都投在了房子上，你就不得不努力工作，因为你的现金正不断地从支出项流出，而不是流入资产项，这是典型的中产阶级现金流模式。 标注 (橙色) \u0026#8211; 第3章　第二课　为什么要教授财务知识 \u003e 位置 960 失去受教育的机会。人们经常把他们的房子、储蓄和退休金计划作为他们资产项的全部内容。 标注 (蓝色) \u0026#8211; 第3章　第二课　为什么要教授财务知识 \u003e 位置 987 正是由于早年缺乏必要的财务知识教育，才造成了中产阶级财务上的风险。 标注 (橙色) \u0026#8211; 第3章　第二课　为什么要教授财务知识 \u003e 位置 1009 他是这样定义的：财富就是支撑一个人生存多长时间的能力，或者说，如果我今天停止工作，我还能活多久？ 标注 (橙色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1040 女士们、先生们，其实我并不是做汉堡包的，我真正的生意是房地产。” 标注 (橙色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1064 富人关心的焦点是资产而其他人关心的是收入。 标注 (蓝色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1068 只有你把额外的收入用来购买可产生收入的资产，你才能获得真正的财务安全。 标注 (橙色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1079 当你不符合“标准”的规范时，生活将是严峻的。 标注 (橙色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1081 净资产并不是一个确定的东西，这主要是因为在你开始出售资产时，你还要为获得的收入缴税。 标注 (橙色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1094 不需我到场就可以正常运作的业务。我拥有它们，但由别人经营和管理。如果我必须在那儿工作，那它就不是我的事业而是我的职业了； 标注 (橙色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1097 7．版税，如音乐、手稿、专利； 标注 (橙色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1099 富爸爸则鼓励我去获得我所喜爱的资产。“ 标注 (橙色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1106 对于小公司，我的投资策略是：一年内脱手。 标注 (橙色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1116 你应该这么想，这 1美元进了你的资产项，它就成了你的雇员。 标注 (橙色) \u0026#8211; 第4章　第三课　关注自己的事业 \u003e 位置 1120 那些能给子孙留下遗产的人和那些能长期富有的人，就是先构筑资产项，然后才用资产所产生的收入购买奢侈品的，而穷人和中产阶级则用他们的血汗钱和本应该留给子孙的遗产来购买奢侈品。 标注 (橙色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1164 无论“劫富”的呼声多高，富人总有办法从中脱身，这就是税收最终总会落到中产阶级头上的原因。 标注 (橙色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1172 真正的资本家则利用他们的财务知识逃脱了。他们借助于公司的保护来避税。 标注 (橙色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1185 他们雇用聪明的律师和会计师，说服政客们改变法律，钻法律的漏洞，他们有能力扭转乾坤。 标注 (橙色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1188 是指《国内收入法》第 1031款，它允许销售者对“为购买更贵的房地产而卖出现有房地产时”获得的资本利得延迟纳税。 标注 (蓝色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1191 穷人和中产阶级没有这种智慧，所以他们只能坐等政府的针头刺进他们的手臂，贡献自己的鲜血。现实情况令我震惊：竟有如此多的人在支付高额税款，却很少想到要使用合理合法的避税手段，他们这么做只是因为他们害怕政府。 标注 (蓝色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1204 这也是富爸爸高薪雇用聪明的会计师和律师的原因——付给他们的钱要比付给政府的少得多。“ 标注 (蓝色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1225 到 1978年的时候，我的销售业绩总是列在公司前 5名，并且通常都是第一名，但我仍想跳出这场“老鼠赛跑”。 标注 (蓝色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1235 第一是会计，也就是我说的财务知识。如果你想建立一个自己的商业帝国，财务知识是非常重要的。 标注 (蓝色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1238 第二是投资，我把它称为钱生钱的科学。投资涉及策略和方案，这要右脑来做，是属于创造的部分。 标注 (蓝色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1239 第三是了解市场，它是供给与需求的科学。这要 标注 (蓝色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1249 了解减税优惠政策和公司法的人会比雇员和小业主更快致富。 标注 (蓝色) \u0026#8211; 第5章　第四课　税收的历史和公司的力量 \u003e 位置 1252 雇员挣钱、纳税，并靠剩下的钱为生；企业挣钱、花钱，并只为剩下来的钱缴税。这是富人钻的最大的法律的空子。 标注 (蓝色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1285 我们都拥有巨大的潜能——这是上天赏赐的礼物。然而，我们都或多或少地存在着某种自我怀疑的心理，从而阻碍前进的步伐。这种障碍很少是缺乏某种技术性的东西，更多的是缺乏自信。有些人更容易受到外界的影响。 标注 (蓝色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1297 为什么要去冒险？为什么必须永不停止地提高自己的财商？为什么必须懂得财务知识？ 标注 (蓝色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1299 就是为了获得更多的选择机会。” 标注 (蓝色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1375 富人则创造金钱。你把金钱看得越重，你就会为金钱工作得越辛苦。如果你能知道‘金钱不是真实的资产’这一道理，你就会更快地富起来。” 标注 (蓝色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1398 原来价值 10万美元的房子现在只值 7. 5万美元。但我没有去本地的房地产公司买进这些房地产，而是去破产事务律师办公室，或是去法院洽谈业务。在这些进行房屋买卖的地方，一幢 7. 5万美元的房子有时可以按 2万美元或更低的价格买下。 标注 (蓝色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1451 法律规章。要熟悉有关会计、公司方面的法律以及各州和国家的法规。我们必须按规则来进行“游戏”。 标注 (蓝色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1499 这主要是靠对财务报表、投资策略以及市场和法律的了解。如果一个人在这些方面不甚精通，那么很明显，他必然会遵循标准的教条， 标注 (蓝色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1518 如果你把钱投进一笔交易然后只是祈祷，才是在赌博。 标注 (橙色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1529 我的资产基础是房地产。我喜欢房地产是因为它很稳定，变化比较慢。 标注 (橙色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1538 好机会是用你的脑子而不是用你的眼睛看到的。 标注 (橙色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1551 简单明了的投资方式，就好像一位顾客到商店去购买一台组装好的电脑。 标注 (橙色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1556 学会如何将众多“零部件”组合在一起是非常重要的，有时候你会因此获得巨大的成功，但有时候也可能因为形势的逆转而损失惨重。 标注 (橙色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1559 1．如何寻找其他人都忽视的机会。 标注 (橙色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1561 于是在买下房子后，他就把空房拆掉， 标注 (橙色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1565 房子本身并不重要，从中学到的获得资金的技巧却是无价之宝。 标注 (橙色) \u0026#8211; 第6章　第五课　富人的投资 \u003e 位置 1574 聪明的人往往会雇用比自己更聪明的人或与他们一起工作。当你需要建议的时候，你一定要确定你选择的是明智的顾问。 标注 (橙色) \u0026#8211; 第7章　第六课　学会不为钱工作 \u003e 位置 1603 全世界到处都有聪明、才华横溢、受过良好教育以及极具天赋的人。我们每天都会碰到这样的人，他们就在我们的身边。 标注 (橙色) \u0026#8211; 第7章　第六课　学会不为钱工作 \u003e 位置 1609 这句话的意思是说，大部分人需要学习和掌握不止一项技能，只有这样他们的收入才能获得显著增长。 标注 (蓝色) \u0026#8211; 第7章　第六课　学会不为钱工作 \u003e 位置 1726 他们只将注意力集中在提高做汉堡包的技能上，却不注意提高销售和配送汉堡包的技能。 标注 (蓝色) \u0026#8211; 第7章　第六课　学会不为钱工作 \u003e 位置 1752 所以，你在处理人际关系、商务谈判和被拒绝时的恐惧心理等方面做得越好，生活就会越轻松。 标注 (蓝色) \u0026#8211; 第7章　第六课　学会不为钱工作 \u003e 位置 1755 我建议他们用一年时间来学销售，即使挣不到什么钱，可他们处理人际关系的能力会大大提高，这种能力是无价的。 第二部分　开端 标注 (蓝色) \u0026#8211; 第8章　克服困难 \u003e 位置 1801 斜齿鳊在被光照到时会非常害怕，而这种人在杂货店店员少找两毛五分钱时，便会抱怨不停。” 标注 (蓝色) \u0026#8211; 第8章　克服困难 \u003e 位置 1865 有时我们的朋友或是亲近的人会不由自主地提醒我们有某些缺点，他们常常会说，“你怎么就认为你可以这么做”，或者说“如果这是一个好点子，那其他人怎么不做呢”，或者是“这起不了什么作用，你根本不知道自己在说什么”。 标注 (蓝色) \u0026#8211; 第8章　克服困难 \u003e 位置 1877 了”。“小鸡”们的说法很有影响力，因为我们每个人的心中也都有一只“小鸡”。 标注 (蓝色) \u0026#8211; 第8章　克服困难 \u003e 位置 1901 愤世者抱怨现实，而成功者分析现实。” 标注 (黄色) \u0026#8211; 第8章　克服困难 \u003e 位置 1914 这就是富爸爸所说的“‘我不想要’是成功的关键”这句话的真义所在。 标注 (橙色) \u0026#8211; 第8章　克服困难 \u003e 位置 1918 他们挣不到钱是因为他们选择不亏钱，他们不去分析实际情况，而只是对另一种强有力的投资工具——股票——不予理睬。 标注 (橙色) \u0026#8211; 第8章　克服困难 \u003e 位置 1959 我可付不起”这句话禁锢了你的思想，使你无法进一步思考。“我怎样才能付得起”这句话则开启了你的头脑，迫使你去思考并寻求答案。 标注 (蓝色) \u0026#8211; 第8章　克服困难 \u003e 位置 2016 原因之五：傲慢。傲慢是自大和无知的结合体。 标注 (蓝色) \u0026#8211; 第8章　克服困难 \u003e 位置 2022 如果你知道自己在某一问题上有所欠缺，你就应该找一位本领域的专家或是一本相关的书，马上开始教育自己。 第三部分　开始行动 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2058 这些就是我发自内心深处的精神动力。你的动力是什么呢？ 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2065 穷人之所以贫穷是因为他们有着不良的消费习惯。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2068 而且知道自己要做的就是不断获取资产——真正的资产。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2068 资产。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2083 这个研讨班只花了我 385美元，却帮助我挣回至少 200万美元。更重要的是，它为我创造了新的生活，正是这一课程使我在以后的岁月里不必再辛苦工作。我每年至少要参加两次这样的课程。 笔记 \u0026#8211; 第9章　开始行动 \u003e 位置 2085 知识付费，哈哈哈哈 笔记 \u0026#8211; 第9章　开始行动 \u003e 位置 2085 知识付费，哈哈哈哈 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2090 今天我常常会问自己，“这件事彼得·林奇会怎么做？或者唐纳德·川普、巴菲特、索罗斯又会怎么做？” 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2094 当某种新思想与旧有的思维方式发生冲突时，许多所谓的聪明人会本能地为自己辩护。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2102 3．慎重地选择朋友——关系的力量。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2120 我想说，在积累财富的过程中，最困难的事情莫过于坚持自己的选择而不盲目从众。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2133 4．掌握一种模式，然后再学习一种新的模式——快速学习的力量。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2143 参加了一个周末研讨班，内容是“如何购买破产的房地产”。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2164 现金流管理。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2164 人事管理。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2165 个人时间管理。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2217 一位好的经纪人不仅应该给你提供信息，还应该愿意花时间来教导你。我有几位经纪人就是这样的，其中有些人在我没钱或钱很少的时候仍在教我，所以今天我也一直任用他们。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2225 却不愿给经纪人支付 3％～ 7％的佣金。 笔记 \u0026#8211; 第9章　开始行动 \u003e 位置 2225 寻找专业的咨询公司成立自己的公司 笔记 \u0026#8211; 第9章　开始行动 \u003e 位置 2225 寻找专业的咨询公司成立自己的公司 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2234 要找一位很关心你的利益的经纪人。许多经纪人会花时间来教导你，那么他们可能是你得到的最好的资产。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2264 专注的力量。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2293 我和其他人一样喜欢奢侈品，差别在于有些人贷款购买奢侈品，这是一个相互攀比的陷阱。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2298 轻松的道路往往会越走越艰难，而艰难的道路往往会越走越轻松。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2307 之一。但当我们长大成人后，却失去这种模仿能力，我们失去了心中的英雄，失去了过往的单纯。 笔记 \u0026#8211; 第9章　开始行动 \u003e 位置 2308 模仿英雄 笔记 \u0026#8211; 第9章　开始行动 \u003e 位置 2308 模仿英雄 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2325 即使他缺钱，他还是会向教堂或他支持的慈善机构捐钱。 标注 (蓝色) \u0026#8211; 第9章　开始行动 \u003e 位置 2326 当你感到手头“有点紧”或是想得到什么时，首先要想到给予，只有先“予”，你才能在将来取得丰厚的回报，无论金钱、微笑、爱情还是友谊都是如此。 标注 (蓝色) \u0026#8211; 第10章　还想要更多吗？这里有一些要做的事情 \u003e 位置 2354 停下你手头的活儿。换句话说，就是先停下来，评估一下你的做法中哪些有效，哪些无效。 标注 (蓝色) \u0026#8211; 第10章　还想要更多吗？这里有一些要做的事情 \u003e 位置 2356 寻找新的思想。为了寻找投资的灵感，我经常到书店搜寻提供独特的、与众不同的主张的书，我把它们称为模式。 标注 (蓝色) \u0026#8211; 第10章　还想要更多吗？这里有一些要做的事情 \u003e 位置 2366 参加辅导班并购买相关磁带。我在报纸上寻找让我感兴趣的辅导班的广告，有许多是免费的，也有一些只收取一小笔费用。 标注 (蓝色) \u0026#8211; 第10章　还想要更多吗？这里有一些要做的事情 \u003e 位置 2388 每月在某一地区慢跑、散步或驾车 10分钟左右。 ","date":"2019-04-14T01:00:00+08:00","permalink":"https://svtter.cn/2019/04/14/%E7%A9%B7%E7%88%B8%E7%88%B8%E5%AF%8C%E7%88%B8%E7%88%B8-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","title":"穷爸爸富爸爸 – 阅读笔记"},{"content":"本以为常年 Ubuntu 装机小达人的我不会再出现重装的失败的情况，不想，竟然成功将自己的重装次数刷新到30次（仔细想想，不应该是30次，应该是50次都有了吧）。\n绝望之余，打算记录一下自己装机的心路历程。\n首先很恶心的一件事，Ubuntu 安装的时候如果网络环境不好，那么安装程序会闪退。基于 Ubuntu 的 mint 就没有这个问题。可见 Ubuntu的安装程序写的有多么不鲁棒。。（WTF）。 再一个事情，cuda 最近（2019-03-19）安装不上了。我不知道是内核的原因，还是 header 的问题，反正就是安装不上了。我想尝试一下 runfile，看看能不能安装上，如果不能安装，那么我打算在网上找一个教程。我连 cuda 都没能装上，真不知道是哪里出了问题。 装不上的表现是，mint 无法进入图形界面，并且键盘和鼠标都没有反应。-.- 我的天啊。 放弃了，真是老狗，只要安装 nvidia 驱动电脑就启动不了，闹呢，浪费这么多时间。 我也想只安装 cuda 然后直接上 docker 然后上 deepo 啊。\n19日晚：明天再试试自带的驱动。\n为啥重装呢？\n之前的根目录分的还是太小。分给根目录32G，然后给/usr/local分了大概128G，但是东西都安装到 /usr/bin/lib 下面了，索性就重装了。当然/home是肯定分出去了的。 With third-party driver ( nvidia – 390 ) I finally success. ALL HAIL MINT !\n最后通过 Mint 安装了一下第三方的 nvidia 驱动，390版本，终于成功了。看来以后还是要搜索相关的博客才行了。\nCuda 装好了，但是没有办法跑深度。这是最尴尬的。\n可能是 nomodeset 的问题，我尝试一下。\n原来是 gdm3 与 nvidia-driver-410 冲突的bug，现在已经解决了。这个问题最终是看了一篇 CSDN 博客得到的，博主查了 launchpad 里面的 bug report，做的十分不错。这也提供了一个思路，就是在排查类似问题的时候，可以首先查一下 launchpad，随后，可以根据排查错误的过程，学习更多的东西。受教了。\n","date":"2019-03-19T01:00:00+08:00","permalink":"https://svtter.cn/2019/03/19/ubuntu-%E8%A3%85%E6%9C%BA%E6%80%BB%E7%BB%93/","title":"Ubuntu 装机总结"},{"content":"随着一部分编程经验的增长，我越来越觉得，程序设计语言是在知识基础上实现应用的工具。\n最初，在我进行应用编码的时候，往往让我 stuck 的东西就是基础知识。这种基础知识，比如 WSGI，session，cookie 这些东西；以及过于焦急的学习心态。总想做出点什么，但是却没有意识到做出一个东西需要积累和时间。\n语言的重要性在于，大量的使用语言会让你更了解你所使用的，与计算机交流的方式。这个很重要。语言使我们本身就站在巨人的肩膀上处理事情。因此，专注于一门语言在最初是十分重要的，因为我想很多人像我一样急于求成，并且很难按下心来慢慢学习知识基础。\n意识到的时间似乎有点晚，但是不算太迟。我也能够花一些时间在知识基础上，使得事情解决的更加清晰。\n还有就是硬件。想象中总是很美好的，但是实际上编程过程中，若是不考虑硬件，不考虑拓扑是不可取的。这是视角割裂。最近一直都在读一些软件工程方面的书，但是读的越多，越不敢说。\n潜意识里，读的越多越发现自己懂得少，害怕自己说错。\n就这些，算是给 2018 年读者的一个交代。\n","date":"2019-01-31T01:00:00+08:00","permalink":"https://svtter.cn/2019/01/31/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%9F%BA%E7%A1%80/","title":"编程语言与知识基础"},{"content":"之前一直都是用 screen 来后台运行 Linux 进程，但是 screen 对于已经在运行的进程就不方便处理了，这个时候怎么办呢？\nRun some SOMECOMMAND 1.** ctrl+z **to stop (pause) the program and get back to the shell 2. bg to run it in the background 3. disown -h so that the process isn’t killed when the terminal closes Type **exit **to get out of the shell because now your good to go as the operation will run in the background in it own process so its not tied to a shell 套路摘选自下面的连接。 https://sites.google.com/a/kossboss.com/main/linux\u0026#8212;move-running-to-process-nohup 这次训练直接用 bg 结果把自己的任务直接干掉了。。。「sad」。记得用 disown -h 来让任务逃离 「terminal」的控制。\n","date":"2019-01-17T01:00:00+08:00","permalink":"https://svtter.cn/2019/01/17/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-linux-%E8%BF%9B%E7%A8%8B/","title":"将已经运行的进程切换到后台"},{"content":"关于 session django.contrib.sessions.middleware | Django documentation | Django\nsession 是使用 cookie 来进行判断的，通过 session_cookie_name 来提取，然后通过 SessionStore() 来保存。\n因此，Django 也是通过 sessionid 来区分用户；（或者其他什么名称）。\n使用 cache 作为全局变量 cache.set(‘foo’, ‘bar’) # another function cache.get(‘foo’) # get ‘bar’\n使用 cache , django-redis 是一个好方法。可以在使用 cache.lock变量，在应用层面加锁，来完成异步操作，还可以支持分布式应用，十分方便。\n","date":"2019-01-08T01:00:00+08:00","permalink":"https://svtter.cn/2019/01/08/django-tricks/","title":"Django tricks"},{"content":"记录了一些使用 keras 的技巧。\ncategorical_crossentropy vs sparse_categorical_crossentropy. 3. The Answer, In a Nutshell If your targets are one-hot encoded, use categorical_crossentropy.\nExamples of one-hot encodings:\n[1,0,0]\n[0,1,0]\n[0,0,1]\nBut if your targets are integers, use sparse_categorical_crossentropy.\nExamples of integer encodings (for the sake of completion):\n1, 2, 3 clip norm https://wulc.me/2018/05/01/%E6%A2%AF%E5%BA%A6%E8%A3%81%E5%89%AA%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/\n可以加速 RNN 训练 Multiple GPU # https://keras.io/utils/#multi_gpu_model#\n使用多GPU，注意使用 save 的时候，传参传 model (multi_gpu_model的model参数)\nEncode Labels 可以把不同的字符[‘aa’, ‘bb’, ‘cc’, ‘aa’] 编码成 [0, 1, 2, 0]\n1\n2\n3\n4\n5\n6 \u0026lt;td\u0026gt; # encode class values as integers\u0026lt;br /\u0026gt;encoder\u0026amp;nbsp;=\u0026amp;nbsp;LabelEncoder()\u0026lt;br /\u0026gt;encoder.fit(Y)\u0026lt;br /\u0026gt;encoded_Y\u0026amp;nbsp;=\u0026amp;nbsp;encoder.transform(Y)\u0026lt;br /\u0026gt;# convert integers to dummy variables (i.e. one hot encoded)\u0026lt;br /\u0026gt;dummy_y\u0026amp;nbsp;=\u0026amp;nbsp;np_utils.to_categorical(encoded_Y) \u0026lt;/td\u0026gt; 训练中存在的问题 训练性能低了别急着调参，首先看看数据预处理有没有问题，评价指标是不是写错了。再一个，batch norm 要勤快点加上。\n相似的文章还有：https://svtter.github.io/2018/02/01/keras%e5%9d%91/\n","date":"2019-01-07T01:00:00+08:00","permalink":"https://svtter.cn/2019/01/07/my-keras-tricks/","title":"My Keras tricks"},{"content":" https://wiki.archlinux.org/index.php/HiDPI#Multiple_displays 多显示器方案。 使用 `xrandr` ，输出当前存在的screen Screen 0: minimum 8 x 8, current 7680 x 2160, maximum 16384 x 16384DP-0 disconnected (normal left inverted right x axis y axis)DP-1 disconnected (normal left inverted right x axis y axis)DP-2 disconnected (normal left inverted right x axis y axis)DP-3 connected 3840x2160+3840+0 (normal left inverted right x axis y axis) 510mm x 287mm1920x1080 59.93*+ 59.94 1680x1050 59.95 1600x900 75.00 60.00 1440x900 59.89 1280x1024 75.02 70.00 60.02 1280x720 59.94 1152x864 75.00 1024x768 75.03 70.07 60.00 800x600 75.00 72.19 60.32 56.25 720x480 59.94 59.94 640x480 75.00 72.81 59.94 DP-4 disconnected (normal left inverted right x axis y axis)DP-5 disconnected (normal left inverted right x axis y axis)eDP-1-1 connected primary 3840x2160+0+0 (normal left inverted right x axis y axis) 380mm x 210mm3840x2160 60.00*+ 59.97 找到命运的显示器，然后输入 xrandr --output eDP-1-1 --auto --output DP-3 --auto --scale 2x2 --right-of eDP-1-1 问题解决。 \u0026#8212;- 2019-01-19 补充 不怎么 work，总是闪屏。。 ","date":"2019-01-07T01:00:00+08:00","permalink":"https://svtter.cn/2019/01/07/ubuntu-%E5%A4%9A%E6%98%BE%E7%A4%BA%E5%99%A8%E6%96%B9%E6%A1%88/","title":"Ubuntu 多显示器方案"},{"content":"https://github.com/twtrubiks/docker-elk-tutorial\n基本上按照这个配置就可以了，创建 @timestamp 这一步，可以用如下脚本替代 Postman\n$ curl -XPOST -D- 'http://localhost:5601/api/saved_objects/index-pattern' \\ -H 'Content-Type: application/json' \\ -H 'kbn-version: 6.5.4' \\ -d '{\"attributes\":{\"title\":\"logstash-*\",\"timeFieldName\":\"@timestamp\"}}' 这也是 tutorials 中，使用的 ELK images 给出的。\nhttps://github.com/deviantony/docker-elk\nELK 是什么？ 以下内容摘自 soar1688的博客\nELK 由 Elasticsearch、Logstash 和 Kibana 三部分组件组成；\nElasticsearch 是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful 风格接口，多数据源，自动搜索负载等。\nLogstash 是一个完全开源的工具，它可以对你的日志进行收集、分析，并将其存储供以后使用\nkibana 是一个开源和免费的工具，它可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。\n2、四大组件\nLogstash: logstash server 端用来搜集日志；\nElasticsearch: 存储各类日志；\nKibana: web 化接口用作查寻和可视化日志；\nLogstash Forwarder: logstash client 端用来通过 lumberjack 网络协议发送日志到 logstash server；\n还可参考 – https://www.codementor.io/samueljames/using-django-with-elasticsearch-logstash-and-kibana-elk-stack-9l4fwx138\n","date":"2019-01-04T01:00:00+08:00","permalink":"https://svtter.cn/2019/01/04/%E4%B8%BA%E4%BD%A0%E7%9A%84-docker-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90-elk/","title":"为你的 Docker 项目集成 ELK"},{"content":" 答案似乎显然意见 😉\n","date":"2019-01-02T01:00:00+08:00","permalink":"https://svtter.cn/2019/01/02/%E6%88%91%E5%BA%94%E8%AF%A5%E5%AD%A6%E5%93%AA%E4%B8%AA%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%EF%BC%9F/","title":"我应该学哪个深度学习框架？"},{"content":"首先要吐槽一点：beego 的文档对于新手实在是太不友好了。\nbeego 的官方文档会出现一些问题，比如 tutorials 里面，应该是 beego run 而不是 beego run hello。\nbeego 是啥 beego 是 golang 的一个 web 开发框架，集成了不少远 golang 没有的有价值的函数，对于快速开发高性能的 go 应用有不少帮助。\n如果想开发简单的 go 应用，其实可以不使用 golang 框架，因为 go 本身就定义为云计算时代 C 语言，很多功能其实以及包含了，没有必要学习一个框架给自己增加不必要的麻烦。\n生成 API 以及相关代码 beego 生成数据库相关的 API 十分简单，对于一些很简单的站可以很简单粗暴。首先，设计好数据库表：通过 adminer，或者 phpmy* 这些类似的东西都可以设计。如果想做的专业一点，可以用更酷的东西，比如 Powerdesigner 等。但是一般情况下，我想没人搞得这么麻烦。\nbee api orm_test -driver=mysql -conn=\u0026quot;root:example@/orm_ets?charset=utf8\u0026quot;\n运行这个命令，将会生成一个项目，里面包含orm_test的所有 Model。\n生成文档 调用 bee run -gendoc=true -downdoc=true\n参考 https://blog.csdn.net/freewebsys/article/details/69486943 ","date":"2018-12-28T01:00:00+08:00","permalink":"https://svtter.cn/2018/12/28/%E4%BD%BF%E7%94%A8-beego-%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90-api/","title":"使用 beego 一键生成 API"},{"content":"vuejs 这东西，实不相瞒，学习了很长时间，从看文档到使用，大概有一年的时间。当然，其实上手没有那么难，\u0026lt;script src=\u0026quot;vue.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;这样就搞定了。只是想要用的比较优雅，存在一定的难度。\n但是硬核玩家肯定不能止步于此。于是就开始了vue-cli的探究。没想到这个探究如此之长，以至于我在很长一段时间内，都没有正儿八经的写过前端。\n安装 nodejs 首先第一步，在ubuntu下安装nodejs。Ubuntu自带的vuejs版本说不过去，版本有些老旧，而且安装相关的包很不方便，需要sudo什么的。因此，建议直接从官网下载。\n从官网下载，直接解压的到~/Application/nodejs下面即可。（笔者习惯将已经安装好的软件放在$HOME/Application这个文件夹下面。）然后，将nodejs的执行路径加入到 shell 的运行路径中。\nexport PATH=$HOME/Application/nodejs:$PATH\n如此一来，就把nodejs安装上了。\n安装 vue-cli 国内的话最好是先走一下 taobao 的 npm 镜像（同理，其他的技术软件都可以走镜像，土豪公司vpn请无视）。\nyarn global add vue-cli 安装好 vue-cli 以后，就可以开始你的编程之路了。\n首先，创建一个 vue 项目\n（挖坑待续）\n","date":"2018-12-28T01:00:00+08:00","permalink":"https://svtter.cn/2018/12/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA-vue-cli%EF%BB%BF/","title":"手把手教你搭建 vue-cli﻿"},{"content":" https://www.klette.us/migrate-django-models-to-uuid-primary-key/\n又是一篇渣翻\n老设计决策有时候会让你很难受，下面就是一个例子。\n我手上的一个 Django Model 是这样的：\n\u0026lt;span class=\"token keyword\"\u003eclass\u0026lt;/span\u003e \u0026lt;span class=\"token class-name\"\u003eMunicipality\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emodels\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eModel\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e code \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e models\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eCharField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emax_length\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token number\"\u003e2\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e primary_key\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token boolean\"\u003eTrue\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e name \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e models\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eCharField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emax_length\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token number\"\u003e100\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e 此外，还有一个外键指向它\n\u0026lt;span class=\"token keyword\"\u003eclass\u0026lt;/span\u003e \u0026lt;span class=\"token class-name\"\u003eZipCode\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emodels\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eModel\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e code \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e models\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eCharField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emax_length\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token number\"\u003e2\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e primary_key\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token boolean\"\u003eTrue\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e municipality \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e models\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eForeignKey\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003eMunicipality\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e 现在，我们需要让 municipality 支持多个国家，显然一个唯一 field 将会引起冲突，不够用。（译者：这个理由有点牵强）\n对于所有代码的现代部分，我们使用UUID作为主键。所以我们想要 migrate municaipality的主键到UUID，并且维持了原有的关系。（译者：外键和自增主键都是数据库性能的杀手。）\n2017年9月份，Django 依然不支持优雅的迁移主键，所以我们自己做了（译者：我也不知道现在行不行。）\n我们尝试了许多 magic 解决方案，但是我们在 migrations 系统这个被难住了，并且不能检测以及很好的处理改变。\n在经过一小段研究和错误，我们找到了以下的解决方案。尽管这还有一些小问题，但是的确有效。\n再一次提醒，从数据库的角度，当你定义了一个ForeignKey field 在 Django 中，Django将会创建一个数据库列，是同样的类型，作为 referenced model 的主键，并且增加外键约束。所以在上面的例子中，我们有两个表：\n\u0026lt;span class=\"token keyword\"\u003eCREATE\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003eTABLE\u0026lt;/span\u003e municipality \u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e code \u0026lt;span class=\"token keyword\"\u003evarchar\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token number\"\u003e2\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003ePRIMARY\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003eKEY\u0026lt;/span\u003e \u0026lt;span class=\"token operator\"\u003eNOT\u0026lt;/span\u003e \u0026lt;span class=\"token boolean\"\u003eNULL\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e name \u0026lt;span class=\"token keyword\"\u003evarchar\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token number\"\u003e100\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e;\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003eCREATE\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003eTABLE\u0026lt;/span\u003e zipcode \u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e code \u0026lt;span class=\"token keyword\"\u003evarchar\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token number\"\u003e2\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003ePRIMARY\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003eKEY\u0026lt;/span\u003e \u0026lt;span class=\"token operator\"\u003eNOT\u0026lt;/span\u003e \u0026lt;span class=\"token boolean\"\u003eNULL\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e municipality_id \u0026lt;span class=\"token keyword\"\u003eVARCHAR\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token number\"\u003e2\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003eREFERENCES\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emunicipality\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eid\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token operator\"\u003eNOT\u0026lt;/span\u003e \u0026lt;span class=\"token boolean\"\u003eNULL\u0026lt;/span\u003e \u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e;\u0026lt;/span\u003e 所以我们需要解除外键约束，更换 root model，然后映射新的主键到旧的上，并且重新应用外键到上面去。\n我们首先打破外键\n\u0026lt;span class=\"token keyword\"\u003eclass\u0026lt;/span\u003e \u0026lt;span class=\"token class-name\"\u003eZipCode\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emodels\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eModel\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e code \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e \u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003e \u0026lt;span class=\"token comment\" spellcheck=\"true\"\u003e# Same as before\u0026lt;/span\u003e municipality \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e models\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eCharField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emax_length\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token number\"\u003e2\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e python manage.py makemigrations -n break_zipcode_muni_foreignkey 现在，·Municipality·modle 没有被任何外键所 refer，我们可以在上面进行工作了。\n增加一个新的 id field：\n\u0026lt;span class=\"token keyword\"\u003eclass\u0026lt;/span\u003e \u0026lt;span class=\"token class-name\"\u003eMunicipality\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emodels\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eModel\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e id \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e models\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eUUIDField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003edefault\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003euuid\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003euuid4\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e python manage.py makemigrations -n add_id_field_to_muni 处于某些原因，默认值在我的案例中不 work，所以我增加了一个过程到创建的 migration，来创建新的唯一 id。\n\u0026lt;span class=\"token keyword\"\u003edef\u0026lt;/span\u003e \u0026lt;span class=\"token function\"\u003ecreate_ids\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003eapps\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e schema_editor\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e Municipality \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e apps\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eget_model\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'loc'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e \u0026lt;span class=\"token string\"\u003e'Municipality'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003efor\u0026lt;/span\u003e m \u0026lt;span class=\"token keyword\"\u003ein\u0026lt;/span\u003e municipality\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e m\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eid \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e uuid\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003euuid4\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e m\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003esave\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token comment\" spellcheck=\"true\"\u003e# ...\u0026lt;/span\u003e operations \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e \u0026lt;span class=\"token punctuation\"\u003e[\u0026lt;/span\u003e migrations\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eAddField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e migrations\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eRunPython\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003ecode\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003ecreate_ids\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e \u0026lt;span class=\"token punctuation\"\u003e]\u0026lt;/span\u003e 现在我们有一个UUID ·id·field 在·Municipality 中，然后我们应该可以更换主键了。\n\u0026lt;span class=\"token keyword\"\u003eclass\u0026lt;/span\u003e \u0026lt;span class=\"token class-name\"\u003eMunicipality\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emodels\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eModel\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e id \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e models\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eUUIDField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003edefault\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003euuid\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003euuid4\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e primary_key\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token boolean\"\u003eTrue\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e code \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e models\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eCharField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emax_length\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token number\"\u003e2\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e unique\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token boolean\"\u003eTrue\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e 创建 migration，并且确保在code上的AlterField操作在id之前。我们已经在id上增加了primary_key并且增加了 unique=True 到code field。constraint 没了，在我们删除 primary_key 的时候就没了。\n让我们开始一个空的迁移\npython manage.py makemigrations --empty -n fix_zipcode_fk_to_muni_uuid loc 打开文件，输入\n\u0026lt;span class=\"token keyword\"\u003edef\u0026lt;/span\u003e \u0026lt;span class=\"token function\"\u003ematch\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003eapps\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e schema_editor\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e ZipCode \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e apps\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eget_model\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'loc'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e \u0026lt;span class=\"token string\"\u003e'ZipCode'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e Muni \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e apps\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eget_model\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'loc'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e \u0026lt;span class=\"token string\"\u003e'Municipality'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003efor\u0026lt;/span\u003e zip_code \u0026lt;span class=\"token keyword\"\u003ein\u0026lt;/span\u003e ZipCode\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eobject\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eall\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e zip_code\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003etemp_muni \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e Muni\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eget\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003ecode\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003ez\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003emunicipality\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e zip_code\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003esave\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token comment\" spellcheck=\"true\"\u003e# ...\u0026lt;/span\u003e operations \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e \u0026lt;span class=\"token punctuation\"\u003e[\u0026lt;/span\u003e migrations\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eAddField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e model_name\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'zipcode'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e name\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'temp_muni'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e field\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003emodels\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eUUIDField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003enull\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token boolean\"\u003eTrue\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e \u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e migrations\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eRunPython\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003ecode\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003ematch\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e migrations\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eRemoveField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emodel_name\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'zipcode'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e name\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'municipality'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e migrations\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eRenameField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e model_name\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'zipcode'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e old_name\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'temp_muni'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e new_name\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'municipality'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e migrations\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eAlterField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e model_name\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'zipcode'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e name\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'municipality'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e field\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003emodels\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eForeignKey\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e on_delete\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003edjango\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003edb\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003emodels\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003edeletion\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003ePROTECT\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e to\u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'municipality'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token punctuation\"\u003e]\u0026lt;/span\u003e 增加一个临时的field来保存 Municipality 的UUID，我们不让他是一个ForeignKeyfield，否则 Django confuse。 我们运行 match 函数来寻找新的 id，通过寻找旧的 key，并且存储到临时的 field。 删除旧的 municipality field 重命名临时 field 到 municipality 最后迁移到一个外键，然后创建我们需要 constraint 译者：这样改最大的好处就是改了 UUID，但是没有破坏之前的逻辑，可以说是谨慎的迁移吧。不过线上的数据既然在跑着，就这么迁移了，会不会出问题呢。 下面还有一些内容。自从我们将 migrations 分离成多个文件，我们让代码变得很脆弱（如果后面的某些 migrations 失败了）。这将会让我们的应用进入一个 unworkable 的状态。所以确保测试一下migrations。你可通过手工把这所有的步骤整合到一个migration里，但是如果你有来自多个不同app的 reference，你可能需要把这些步骤再分开。\nlogging 迁移的过程中，你可能遇到很多问题，所以一个比较不错的方式，是创建一个简单的迁移 logging。\n\u0026lt;span class=\"token keyword\"\u003edef\u0026lt;/span\u003e \u0026lt;span class=\"token function\"\u003elog\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emessage\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003edef\u0026lt;/span\u003e \u0026lt;span class=\"token function\"\u003efake_op\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003eapps\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e schema_editor\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e:\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003eprint\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003emessage\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e \u0026lt;span class=\"token keyword\"\u003ereturn\u0026lt;/span\u003e fake_op \u0026lt;span class=\"token comment\" spellcheck=\"true\"\u003e# ...\u0026lt;/span\u003e operations \u0026lt;span class=\"token operator\"\u003e=\u0026lt;/span\u003e \u0026lt;span class=\"token punctuation\"\u003e[\u0026lt;/span\u003e migration\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eRunPython\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003elog\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'Step 1'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e migration\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eAlterField\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e migration\u0026lt;span class=\"token punctuation\"\u003e.\u0026lt;/span\u003eRunPython\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003elog\u0026lt;span class=\"token punctuation\"\u003e(\u0026lt;/span\u003e\u0026lt;span class=\"token string\"\u003e'Step 2'\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e)\u0026lt;/span\u003e\u0026lt;span class=\"token punctuation\"\u003e,\u0026lt;/span\u003e \u0026lt;span class=\"token comment\" spellcheck=\"true\"\u003e# ...\u0026lt;/span\u003e \u0026lt;span class=\"token punctuation\"\u003e]\u0026lt;/span\u003e 想要观察 Django 运行了那些 SQL 语句，运行python manage.py sqlmigrate \u0026lt;appname\u0026gt;\u0026lt;migration_number\u0026gt;，这是一个超级有用的方法。\n","date":"2018-12-06T01:00:00+08:00","permalink":"https://svtter.cn/2018/12/06/%E8%BF%81%E7%A7%BB-django-model-id-%E4%B8%BA-uuid/","title":"迁移 Django Model id 为 uuid"},{"content":" 又是一个渣翻，Copyright belongs to the original text。\n原文地址\n背景 PostgreSQL 在 9.0 版本已经开始持续接收大量的增强，包括：\n异步拓展 同步拓展 仲裁提交 级联拓展 逻辑拓展 PostgreSQL 文档也提供了一个 overview 以及 不同拓展方法的比较。详见PostgreSQL 集群策略比较\n用于部署 PostgreSQL 的拓展的主拓展的方法论，是一个重要的工具来为你的数据库集群创建高可用的环境。需要一个合适的部署策略来确保你的数据被保存到不同磁盘，以及不同的数据中心。\n拓展不是一个“安装然后忘记”的操作。在生产系统中，你想要确定你对实例有合适的监控，来了解你所有的在线的拓展，或者了解一个拓展有多少数据需要与主节点进行同步。\n当主节点配置好以后，安装就很容易了。但幸运的是，使用 Docker 可以使得这个过程更加轻松。\n环境安装 想要部署这个环境，你至少需要 Docker 1.12版本。\n要想开始，提供一个 Docker 集群。例如，一个开发集群，你可以在每一个机器上加载 Dokcer，来使用 Swarm。这个方法将使用如下的架构：\n每一个系统都需要安装 Docker 以及启动。\nSwarm 安装 从1.12版本开始，Docker就已经集成了Swarm。\n容器编排 高可用 PostgresSQL 集群配置需要两个以上的主机。主节点和从节点需要运行在不同的 worker 节点上，来使得可用性最高。\n为了部署 Crunchy PostgreSQL containers 到多个集群，你需要使用 node labels。\n标注主机对于使用 PostgreSQL 容器有几个好处：\n将服务散步到许多 worker 上，来提高可用性 主机可以针对读（从）写（主）操作进行优化（例如使用高性能磁盘） **记住：**对于PostgreSQL 10，主节点可以同时被允许读写，但是从节点仅仅允许被读。\n为了允许容器被放在指定的 worker 节点上，增加一个元数据标签到 Swarm 节点上。\nnode1_id=$(docker node list | grep worker1 | awk '{print $1}') docker node update --label-add type=primary ${node1_id?} 在上述例子中，一个被称为 primary 的标签，加入了 worker1。通过使用这个标签，我们可以应用一些约束到 Docker swarm 的 PostgreSQL Stack 部署上。\n注意：我们没有对从节点增加约束，我们可以简单的使用一条 inverse 约束：\nnode.labels.type != primary\nPostgreSQL stack 定义 通过 Swarm 部署以及 worker 节点正确的标记，我们可以部署 PostgreSQL stack了。\nPostgreSQL stack 是通过一个主节点以及从节点组成的。下面是服务定义：\ndocker-compose.yml\n--- version: \"3.3\" services: primary: hostname: 'primary' image: crunchydata/crunchy-postgres:centos7-10.3-1.8.2 environment: - PGHOST=/tmp - MAX_CONNECTIONS=10 - MAX_WAL_SENDERS=5 - PG_MODE=primary - PG_PRIMARY_USER=primaryuser - PG_PRIMARY_PASSWORD=password - PG_DATABASE=testdb - PG_USER=testuser - PG_PASSWORD=password - PG_ROOT_PASSWORD=password - PG_PRIMARY_PORT=5432 volumes: - pg-primary-vol:/pgdata ports: - \"5432\" networks: - crunchynet deploy: placement: constraints: - node.labels.type == primary - node.role == worker replica: image: crunchydata/crunchy-postgres:centos7-10.3-1.8.2 environment: - PGHOST=/tmp - MAX_CONNECTIONS=10 - MAX_WAL_SENDERS=5 - PG_MODE=replica - PG_PRIMARY_HOST=primary - PG_PRIMARY_PORT=5432 - PG_PRIMARY_USER=primaryuser - PG_PRIMARY_PASSWORD=password - PG_DATABASE=testdb - PG_USER=testuser - PG_PASSWORD=password - PG_ROOT_PASSWORD=password volumes: - pg-replica-vol:/pgdata ports: - \"5432\" networks: - crunchynet deploy: placement: constraints: - node.labels.type != primary - node.role == worker networks: crunchynet: volumes: pg-primary-vol: pg-replica-vol: 注意，主服务定义了一个 hostname，但是 replica 服务没有。Replica 需要一个 hostname 来启动 replication。通过提供一个静态的 hostname 给主节点，replica就可以连接主节点，而不需要发现主容器。\nreplica，没有一个 hostname，这允许 replica 服务拓展到多个节点。（待会儿展示一下）。\nprimary 和 replica 服务的主要区别，是 PG_MODE 环境变量。这个变量配置容器是主节点，还是从节点。\n部署 STACK 保存这个文件到 _docker-compose.yml _之后，我们可以通过 Docker 进行部署了。\ndocker stack deploy --compose-file=./docker-compose.yml pg-stack 这个 stack 部署，将会创建一个 PostgreSQL 集群，就像是下图一样：\n测试集群 检查服务是否运行，运行下面的命令：\ndocker service ls docker service ps pg-stack_primary docker service ps pg-stack_replica 如果想要提升 replicas 的数量，运行下列命令：\ndocker service scale pg-stack_replica=2 docker service ps pg-stack_replica 为了确保 replicas 是流式的，在 worker1 节点上查询 PostgreSQL 主节点，使用下列命令：\ndocker exec -it $(docker ps -q) psql -U postgres -x -c 'table pg_stat_replication' postgres 示例代码 下面是实例代码：\nhttps://github.com/CrunchyData/crunchy-containers/tree/master/examples/docker/swarm-service\n结论 Docker 以及 Docker swarm 提供了工具，来使得容器部署进入了更高的层次。我们希望这个提议证明了 PostgreSQL 集群是如何的容易部署。\n","date":"2018-12-01T01:00:00+08:00","permalink":"https://svtter.cn/2018/12/01/%E4%BD%BF%E7%94%A8-docker-swarm-%E6%9E%84%E5%BB%BA-postgresql-%E9%9B%86%E7%BE%A4/","title":"使用 Docker swarm 构建 PostgreSQL 集群"},{"content":"这篇文章不建议读，2018年写的，不知所云。\nbeam search 是一个近似搜索策略，用于在候选可能中选择最好的结果。原文链接\n一个常用例子，BS(beam search) 用于获得与机器翻译等价的结果。对于那些不了解机器翻译的人，也肯定知道 Google Translate。\n这就是为啥要讲这个。这些系统都用 BS 技术来找到与结果最等价的翻译。阅读这个 Wiki 来了解相同文件的定义。\n让我们讨论一下这个使用机器翻译案例的策略。如果你是一个喜欢研究现象背后原理的人，一定要读一下 google encoder-decoder 网络架构。这个东西我就不讲了，有很多人讲。例如，如果你不知道这个架构，看看这个 quora 上的回答。\n一个视角 机器翻译模型可以被认为是一种 “条件语言模型”，对于…\n让我们看一下… BS B(beam 宽度) 是唯一一个调整翻译结果的超参。 B 在一般情况决定了，在每一步，要记忆的单词的个数，来变换概率。\n不翻译了。。这里有更直接的结果 beam search 时在每一个时间点选择 beam_width 个最大的可能类别，然后在每个时间点 beam_width 个类别组成的空间里寻找整体概率最大的一条路径，得到最后得识别输出。而 greedy search 则直接在每个时间点寻找概率最大的类别，然后依次组成这个路径。也就是说，greedy search 是 beam_width=1 版本的 beam search。上图是 CTC 论文里 greedy search 示意图。\n","date":"2018-11-23T01:00:00+08:00","permalink":"https://svtter.cn/2018/11/23/beam-search-%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E7%AD%96%E7%95%A5/","title":"beam search – 一个搜索策略"},{"content":" 这篇文章是一个翻译：towardsdatascience-ctc\n通过 CTC loss 以及编码操作进行文字识别。\n如果想用使用计算机识别文字，神经网络很好用。使用一些列 CNN 从序列中提取特征，使用 RNN 来传播需略的信息。它会输出字符得分，给每个序列元素，通过一个简单的矩阵表示。现在，有两个事情我们想要对矩阵进行处理。\n训练：计算损失值来训练神经网络 推理：解码矩阵来获得图片中的字符 两个任务可以同时被 CTC 操作完成。对于手写数字系统的描述，可以参见图像 1.\n我们更进一步看看 CTC 操作，并且讨论一下它如完成的，以及它背后的公式是如此巧妙。最后，我将会指点你来找到 Python 代码以及不复杂的公式，如果你感兴趣的话。\n为什么我们使用 CTC 当然我们可以创建一个数据集，这个数据集有文本行，然后指出每列属于哪一个字符，就像图 2 中展示的那样。然后，我们可以训练一个神经网络来输出每一列的得分。而然，对于这个简单的解法，这里有两个问题。\n这个十分的耗时（以及无聊）来在字符层面上标注数据 我们仅仅能够得到字符的得分，因此还需要一些操作来获取最终的文本。一个简单地字符可以跨越多个位置，比如，我们得到 “ttooo”，是因为 “o” 是一个比较宽的字符。我们已经删除了多余的 “t” and “o”，但是，如果要识别的字符是 “too”，我们应该怎么办？如果删除了多余的 “o”，将会给我们错误的答案。我们应该如何处理呢？ CTC 解决了几个问题\n我们只需要告诉 CTC loss function，文本在图像中出现了，因此我们忽略位置和宽度文中在图像中。 不需要更多的文本识别处理 CTC 如何工作的 就像是我们已经讨论的，我们不希望在图像的每一列标注数据（这曾经被我们成为时间步）。神经网络的训练将会被 CTC 损失函数所指引。我们只需要把数据矩阵给 CTC 函数，以及对应的真实值即可。但是它是怎么知道每一个字符出现的呢？他不知道。相对而言，它尝试了图片中所有的真实文本，以及计算了所有的加和。通过这个方式， This way, the score of a GT text is high if the sum over the alignment-scores has a high value.\n编码文本 如何编码重复的文本曾经是一个问题。这个问题通过引入一个虚假字符来解决了（称为空，但是不要把它和真正的 space 混淆。）。这个特殊的字符被标记为 “-”，在下面的文本中。我们使用了一个聪明的编码策略来解决重复字符的问题。当编码一个文本的时候，我们可以随机加入许多空在任何位置中，当我们解码的时候，我们将会把的这些删除。但是，我们必须在重复字符串中加入空，例如 “hello”，如此一来，重复字符就不是问题了。\nLet’s look at some examples:\n“to” → “—ttttttooo”, or “-t-o-”, or “to” “too” → “—ttttto-o”, or “-t-o-o-”, or “to-o”, but not “too”\n正如你所见，这些模式也允许我们简单的创建一些相同文本串的不同对取，比如 “t-o”, 以及 “too”，以及 “-to”，所有的表示都是同一个文本 “to”，但是通过对图片不同对其获得的。神经网络被训练于输出一个编码的文本（在神经网络的矩阵中编码）。\n损失计算 我们需要计算每一个损失值，这个损失值是由图像核真实文本给出来训练 NN 的。你已经知道 NN 输出一个矩阵，包含一个得分，为每个文本在每个时间步上。一个小矩阵在图三中展示：有许多的时间步（t0, t1），以及三个字符（”a”, “b”, 以及 blank “-“).\n此外，你已经知道，loss 是通过加和所有积分来进行计算的，通过这个方式，字符出现在图片的哪个位置不重要。\n对于一个 alignment 的得分（或者 path；在文学中一般这么称呼）通过将相应的字符相乘。在上面的例子中，path”aa” 的得分是：0.4*0.4=0.16，”a-” 的得分是 0.4*0.6=0.24，”-a” 的得分是 0.6*0.4=0.24. 为了获得 GT 文本的得分，我们加和这个文本的所有 path 的得分。我们假设，GT 文本是 “a”，我们已经计算了所有长度为 “2” 的 path，分别是 “aa”，“a-”，“-a”，我们已经计算了这些 path 所有的得分，所以我们只需要把他们加起来，得到 0.4×0.4 + 0.4×0.6 + 0.6×0.4 = 0.64。如 GT 文本可能是 “”，我们可以看到只有一种相关的 path，那么就是 “–”，获得的得分是 0.6×0.6 =0.36.\n如果仔细看，你已经发现我们计算了 GT 的可能性，但是不是 loss 值，而然，loss 知识概率的负对数。这个 loss 值是反向传播算法以及 NN 的参数更新使用的，我这里没有进行详细的讨论。\n解码 当我们训练一个 NN，我们想要使用它来识别那些之前没有看到的图像。或者更多在更多的技术术语：我们想要计算，NN 输出的矩阵最可能是什么。你已经知道一个方法来计算给出文本的得分，但是现在，我们没有被给出任何文本，事实上，它正是我们正在寻找的文本。尝试所有可能的文本，如果他们只有很少的时间步以及字符，但是对于练习用例而言，这不可行。\n一个简单而快速的算法，是最佳 path 解码，包含两个步骤：\n它计算了最佳 path，通过获取最可能的每一个时间步的字符 首先删除重复的字符，然后删除 path 里面所有的空。这仍然表示了识别的文本。 正如 FIG4 所展示的，字符是 “a”，“b” 以及 “-”（空），一共有 5 个时间步。让我们应用最佳 path decoder 来处理这个矩阵。在 t0，最可能的是“a”，同样应用于 t1，t2. 空字符在 t3 是最可能的。最后，“b” 是 t4 时刻最可能的。这将给出我们一个 path“aaa-b”，我们删除了重复的字符，这将会返回“a-b”，然后我们删除 path 中的空，这给我们一个“ab”，作为我们输出的识别结果。\n最佳 path 解析是，当容纳，仅仅是一个近似。构建样例容易给出错误的结果，比如用这个方法构建 FIG3，将会得到 “”，作为识别文本。但是，我们已经知道“” 结果的概率是 0.36，而 “a” 的概率是 0.64。而然，近似算法经常在练习的情景下给出比较好的结果。也有许多其他的比较好的 decoder，例如 beam-search，prefix-search 以及 token passing，这些关于语言结构的方法，都有利于提升结果。\n结论以及展望 首先我们看得是，神经网络如何解决这个问题；然后，我们展示了 CTC 如何解决这些问题，然后，我们解释了 CTC 为啥能够工作，如何计算的 loss，以及如何解码 CTC 训练的 NN。\n\\[1] introduce the CTC operation, the paper also shows all the relevant math. If you are interested in how to improve\u0026nbsp;decoding,\u0026nbsp;take a look\u0026nbsp;at the articles about beam search\u0026nbsp;decoding\u0026nbsp;[2\\]\\[3\\]\\[4\\]\\[5\\]. Finally, if you want to look at the bigger picture of how to recognize (handwritten) text, look at my article on how to build a handwritten text recognition system [6].\n","date":"2018-11-22T01:00:00+08:00","permalink":"https://svtter.cn/2018/11/22/%E5%AF%B9%E4%BA%8E-ctc-%E7%9A%84%E4%B8%80%E4%B8%AA%E7%9B%B4%E8%A7%82%E7%90%86%E8%A7%A3%E4%B8%8E%E8%A7%A3%E9%87%8A/","title":"对于 CTC 的一个直观理解与解释"},{"content":" 一篇 medium 文章的渣翻 https://becominghuman.ai/accelerate-machine-learning-with-active-learning-96cea4b72fdb\n让我们讨论一下主动学习。我相信这个方法可以极大的增速，以及减少许多机器学习工程的花费。这篇文章我将从两个部分说明这个问题。在第一部分，我给出了一个极高的层级的主动学习的说明，以及如何把它利用到机器学习工程中。在第二部分，深入到一个主动学习 demo 中。\n第一部分 主动学习是如何工作的 让我们通过一个很简单的概览，来看看机器学习是如何工作地。\n许多机器学习模型是巨大的猜疑机器——他们看了许多数据，计算出一个猜测的结果，检查他们的答案，微调一下，然后再试试。在许多数据之后，模型将会变得十分准确。\n标记数据 …\n主动学习 主动学习是一种方法，有时可以极大减少标记样本的数量。它通过专家标记样本来完成这个工作。\n不使用全部的数据一次标注所有数据，主动学习优先处理那些让模型感到困惑的数据，并且仅仅需要好那些数据的标签。模型在小样本数据上进行训练，然后根据那些最令模型疑惑的数据，请求更多的标签。\n通过优先处理那些最迷惑的样本，模型可以专注于提供一些最有价值的信息。这帮助模型训练的更快，并且让专家跳过那些对于模型帮助不是很大的数据。结果是，我们可以很大程度上减少标记样本的数量，并且我们仍然得到一个很好的模型。这意味着节省时间和金钱！\n第二部分 MNIST 例子 让我们看一下实际的主动学习样本。\n使用文档良好的 MNIST 数据集，以及经典的 Tensorflow 卷积神经完了过。一个聪明的模型和架构可以做的更好，但是我们想要直接使用这个模型。\nMNIST 数据集是公开可获取得的数据集，包含了大量的手写数字，以及数值标签。它经常被使用于机器学习入门教程，因为他的标记数据质量很高，并且简单地模型也可以表现的不错。\n设计 这个工程包含两个部分：\n在训练模型的时候，模仿主动学习 在严格的模型上确定主动学习的效率 训练一个模型 我们使用 mini-batch 训练。这个模型仅仅在训练集中，看一个小数量样本，通过小数量样本进行学习。\n这里，我们可以看到一个正常的（非 – 主动学习）的训练过程，模型在一个随机结合的小批次上进行训练。每在小 – 批次训练中的迭代，都在测试记上运行模型（不作为训练集的一部分）来追踪模型是怎样增长的。我提供了准确率以及 cross-entropy 损失（就像是平均误差一样）。在这里，每一个小批次有个 10 个例子，我运行了 2000 批次（20000 个标注）。\n对于这个分类任务，我们试图把 0~9 的数字进行分类，意味着随机猜测仅有 10% 的准确率。简单的神经网络已经做的不错了。\n模拟主动学习 获得主动学习结果有一点小技巧。我们不在数据集中的随机选择数据，相反，模型将会评估许多在训练集中的例子，然后将置信度最小的数据作为小 – 批次（在这个工程中，我查看了 1000 个在训练集中的随机样本，来确定置信度至少为 10）。在那里，模型将会像处理小 – 批次数据一样处理进行训练过程，它将会重复这个过程来更新模型。就像是在 “非 – 主动学习” 样例中，每经过一些迭代，我将会在测试记上运行模型，追踪模型的训练过程。\n有许多很好的文章来说明如何实现 主动学习。在这里，我仅仅想要把事情做的简单一些。这个模型使用一个 “softmax” 来生成概率——在这个例子中，是数字 0~9。” 置信度” 通过选择” 最大的概率减去最小的概率 “。模型越自信，这个差值越大。（置信度不意味着准确率）。\n主动学习过程，使用了那些置信度比较低的数据，并且在上面进行训练。并且当然的，当模型改变了，它的置信度也一样会改变。\nMNIST 数据集已经有了我们需要的标签，但是这个过程，在 mini-batch 中，模拟询问了专家，来获取标签。在通常情况下，专家会随机被提问，来获取数据。在主动学习的例子中，模型会选择那些数据，希望专家进行标注。\n让我们来看一下主动学习结果 VS 一般的结果。注意 y-axis。\n通过 mini-batch（8000 标签），主动学习的方法匹配了 2000 mini-batch（20000label）数据的准确率。所以，使用一接近一半的数据，主动学习可以达到同样地准确率。\n倾斜数据的二分类任务 主动学习可以大施拳脚的地方是，数据的强烈偏差。\n训练一个模型的时候，重要的不仅仅是标记的数据，还有不同数据的，合理的不同表示。如果我们尝试在 MNIST 上训练一个模型，而没有任何包含 3 的数据，收集多少数据并不重要，重要的是我们的模型不可能区分 3。如果我们仅仅含有一小部分 3，我们仍然会面临一个问题，就是模型仅仅会准确的区分其他数字，也就是那些有更好表达的数据。\n数据的偏差，不均衡对于 MNIST 数据集中不存在，但是它的确是一个真实世界的问题。如果我们训练一个模型来识别 CT 中的脑瘤，大多数 CT 图像不会含有肿瘤图像，所以标注 “肿瘤” 的数据将会远不均衡于 “非肿瘤” 的样本数据。因为主动学习优先考虑的例子不那么自信，因此主动学习可能有助于识别 “异常 “或代表性不足的数据并且确定优先级。\n我们在 MNIST 上模拟一下 skew 的问题。重新定义 MNIST 的问题，定义成 3 或者非 3，然后，非 3 的数据有 90%，而 3 的数据仅有 10%。所以愚蠢的策略将会在” 非 3“上达到 90% 的准确率，让我们看一下主动学习是如何做的：\n在使用主动学习的时候，在 500mini-batch（5000labels）我们就达到，甚至更好地准确率。相比之下，cross-entropy 算法，通过 2000 mini-batch。主动学习减少了 4 倍的数据量。主动学习是如何做到的？看下图。\n后续 未完，后面翻不翻看心情。。也不知道工业界玩 active learning 的多不多。\n","date":"2018-11-20T01:00:00+08:00","permalink":"https://svtter.cn/2018/11/20/%E4%BD%BF%E7%94%A8%E4%B8%BB%E5%8A%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/","title":"使用主动学习加速机器学习"},{"content":"使用 gollum 书写文档（github, gitlab, wiki)。Gollum 是通过 gitlab 发现的东西，可以把 gitlab 的 wiki 文档放在本地进行书写，对于“小”的wiki，以及API文档实在是再方便不过了。个人感觉比 Sphinx 更加容易上手。\n显示 TOC [[_TOC_]]\n安装 gem ruby-full, ruby-dev\n切换 aliyun mirror 上网搜就行。\nhttps://gems.ruby-china.com/ 安装 gollum gem install gollum\ngollum wiki https://github.com/gollum/gollum/wiki similar things https://github.com/joeyespo/grip try todo [[_]] 测试\n","date":"2018-11-15T01:00:00+08:00","permalink":"https://svtter.cn/2018/11/15/gollum-%E4%B9%A6%E5%86%99-wiki/","title":"gollum 书写 wiki"},{"content":"最近使用 Pycharm ，有时候引用包的时候很不方便，错误的显示 package 不存在。出现这个问题的本质是因为：代码检查的位置没有设置好。\n那么怎么解决这个问题呢？偶尔发现 Pycharm 的选项中，有一个选项是marked，因此选 marked 即可。\n还有就是 Docker 的配置，以及 Python interpreter的配置。这两个都可以通过设置进行配置，然后修改默认的 Python 解释器。在 Python interpreter 中，还可以手动安装相关的包。\n使用 Vim 使用 ideavim，可以将原来的按键映射到 Vim 按键上。\n（有新的就更新。）\n使用 Docker-compose https://www.jetbrains.com/help/pycharm/using-docker-compose-as-a-remote-interpreter.html 查看文件结构 https://www.v2ex.com/t/261934 点击左下角的 structure 即可。\n转载请注明出处。\n","date":"2018-11-12T01:00:00+08:00","permalink":"https://svtter.cn/2018/11/12/pycharm-tips/","title":"Pycharm Tips"},{"content":"用 Django 快速开发一个项目，发现 Django 的模板本身不带有整除功能，因此自己手写一个。\n├── templates │ ├── app │ └── base ├── templatetags │ ├── app_extras.py │ ├── __init__.py │ └── __pycache__ ├── tests.py ├── urls.py ├── utils.py └── views.py 这是目录结构。在 urls.py 添加 app 的名称，例如 app_name = ‘app’ ，然后在与models.py 同级的目录下，新建一个 python 包， templatetags 的，新建自己需要的包名即可。\napp_extra.py：\nfrom django import template register = template.Library() def mod(value): return value % 11 register.filter('mod', mod) 这里因为需求比较简单，因此直接就赋值了 11.\n应用到模板中：\n{% load app_extra %} {% for image in image_list %} {% if forloop.counter|mod == 0 %} \u0026lt;h3\u003e检查点\u0026lt;/h3\u003e {% endif %} {% endfor %} 随后即可看到结果。\n此外，寻得两个比较好用 template 插件\nhttps://pypi.org/project/django-bootstrap4/ https://github.com/timonweb/django-bulma 实现的东西虽然不多，但是起码把我不想关心的逻辑封装起来了。。\n","date":"2018-11-05T01:00:00+08:00","permalink":"https://svtter.cn/2018/11/05/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8/","title":"Django 写个过滤器 filter"},{"content":"这几天 https 挂掉了，似乎是因为铁门的证书（过期，不被chrome认可）了。因此重新搞一下 https。\n恢复 https 也没有做什么工作，就是把之前的证书重新申请一次，然后下载下来的文件把之前的 https 文件替换掉。https 相关的文章很多，我就不再赘述了。可以参见很多人的文章。\n此处唯一需要注意的是，我使用 Docker，对于 certbot ，也就是 letsencrypt 的支持不够好（也可能是我在man里面粗略的看了一下，没有找到）。因此，对于三个与的letsencrypt我就不使用了。\n本篇是老文，之前一直都没有发出。 今天发出，作为博客长时间滑水的终止符。 这次更新 https，也做了一些工作，就是把原来的 rewrite 选项改成了 301，做了一个重定向，整个速度都提升了不少（未测试，仅观感），感觉很不错。因此把之前的配置贴出来。\n原来的配置\nlocation / {\trewrite ^ https://$host$request_uri? permanent;\t}\tlocation ^~ /.well-known {\tallow all;\troot /data/letsencrypt/;\t} 现在的\nreturn 301 https://$host$request_uri;","date":"2018-11-03T01:00:00+08:00","permalink":"https://svtter.cn/2018/11/03/%E8%AE%B0%E6%81%A2%E5%A4%8D-https/","title":"记恢复 https"},{"content":"Python functools包中，有个很好的函数叫做partial ，中文直接翻译为片函数，此前一直都没有使用过。最近通过阅读别人的代码，学会了这一技能，着实好用。\n使用partial，可以把一些固有功能代码做一个整合；\n比如我希望一个函数专门做 int2 转换\n1 int2 = partial(int, base=2) 甚至还可以再过分一点，把 base 变成一个字典量传入。\n多使用内建函数 locals，可以极大的减少自己的代码量；\n这不得不让我感概：真正的 Pythonista，永无止境。\n1 2 3 4 5 6 7 8 def in_func(): a = 2 b = 3 def test(a, b, **args): return a + b print(test(**locals())) CHANGELOG date content 20230829 调整了一些语病 ","date":"2018-10-21T01:00:00+08:00","permalink":"https://svtter.cn/p/python-functools/","title":"Python functools"},{"content":"今天又偶遇了之前用阿里云出现的问题：\n明明密码没有错，本地登录可以，但远程登录就是不ok。 之前一直没有排查到错误，今天终于在本地机器的加持下得以解决。这是什么问题呢？IP地址冲突。\n的确是IP地址冲突。首先先使用校园网client ssh b-server 服务器，失败了。使用同一个物理主机的a-server与b-server进行互联，成功了。校园网client能够连接a-server。因此，观察 a-server 和 b-server 的区别，发现 a-server 子网掩码是255.255.255.128，而 b-server 的子网掩码是 255.255.255.0。\n此外，还有：\n查看系统开放的端口 netstat -nltp 测试本地是否能够访问，排查本地问题 ssh user@locahost\n子网掩码不同，为什么就连接不上呢？（原理）\n最终，解决了这个问题。通过重启 networking 以及 重新通过 dhcp 获取 ip 地址。\n使用 systemctl restart networking.service 重启 networking 服务。 使用 ifconfig eth0 down; ifconfig eth0 up 来开关具体的网卡。 使用 # dhclient -r 释放当前ip 使用 # dhclient 获取新的ip 大功告成，算是阶段性的解决了这个问题。DDNS迫在眉睫啊！\n","date":"2018-10-17T01:00:00+08:00","permalink":"https://svtter.cn/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84%E5%AF%86%E7%A0%81%E5%BD%95%E5%85%A5%E6%AD%A3%E7%A1%AE%E4%BD%86%E5%B0%B1%E6%98%AF%E7%99%BB%E5%BD%95%E4%B8%8D%E4%B8%8A/","title":"为什么我的密码录入正确，但就是登录不上？"},{"content":"之前一直搞不清楚 UEFI 和 Legacy 区别在哪里，今天搞了一下 Manjaro 终于搞明白了；比较好笑的是，我参考的是 Ubuntu 的文档。\nhttps://help.ubuntu.com/community/UEFI\n安装 Manjaro 的时候，一直都有个安装引导程序到某处，很纳闷，为啥我这里有这个东西，别人截图就没有。后来更换了rufus的写入的模式，也就是 UEFI only。然后重新以 UEFI 模式载入，终于，引导不再有之前的“安装引导程序“了。\n感动不已，于是在这里记录一下。\nhttps://askubuntu.com/questions/63610/how-do-i-remove-ubuntu-in-the-bios-boot-menu-uefi\n","date":"2018-10-12T01:00:00+08:00","permalink":"https://svtter.cn/2018/10/12/%E5%AE%89%E8%A3%85-gnu-linux/","title":"安装 GNU/Linux"},{"content":"可以使用的工具 https://www.websequencediagrams.com/ MY CHOICE: https://mermaidjs.github.io/ Another choice: google key word: sequence graph 把 svg 转换成 png 文件 Or without installing anything:\nqlmanage -t -s 1000 -o . picture.svg It will produce picture.svg.png that is 1000 pixels wide.\nI have tested it only on OS X 10.6.3.\n例如： sequenceDiagram App-\u003eServer: 请求视频服务 Server--\u003eServer: 生成支付信息 Server-\u003eApp: 返回支付信息 Note left of App: 获取支付的相关信息 App--\u003e支付宝: 完成付款 支付宝--\u003eApp: 支付成功 Note left of App: 获悉支付结果 支付宝-\u003eServer: 根据回调URL，发送支付结果 Server-\u003eApp: 根据支付结果，发送给客户端 ","date":"2018-10-07T01:00:00+08:00","permalink":"https://svtter.cn/2018/10/07/%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%8C%E5%BD%A2%E6%88%90%E6%96%87%E6%A1%A3/","title":"绘制流程图，形成文档"},{"content":"原来一直认为ssh仅仅是一个字符界面，最近发现其实可以传输xserver中的图像。\n方法很简单，只需要在ssh的选项中添加-Y就可以了。比如原来的ssh命令是这样：\nssh ubuntu@localhost 现在改成这样\nssh -Y ubuntu@localhost 非常简单有效。\n另外，远程查看Ubuntu中的图像，可以使用eog命令。安装：\nsudo apt install eog 安装完成后，直接运行eog ./test.png即可。这对于服务器调试相当方便了！\nSSH 可选的加速策略\n-C Requests compression of all data (including stdin, stdout, stderr, and data for forwarded X11 and TCP connections). The compression algorithm is the same used by gzip(1), and the “level” can be controlled by the CompressionLevel option for pro- tocol version 1. Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks. The default value can be set on a host-by-host basis in the configuration files; see the Compression option.","date":"2018-09-20T01:00:00+08:00","permalink":"https://svtter.cn/2018/09/20/ssh-%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F/","title":"ssh 显示图像"},{"content":"最近没有什么故事要讲，着实有点忙。但是文章太长时间不发也不好，说不定我有那么几个隐藏的很深的不爱说话的粉丝。\n这里介绍一个小工具好了，·classifier· 是一个文件分类工具，包括音乐，pdf，图像等等。运行之后可以自动归类这些文件，懒人福音。\n安装 pip install classifier\n运行 进入目录，然后运行 classifier，像这样：\n$ classifier\n然后文件就会变得井然有序啦！\n官方示例：\nExample Before: Downloads │ ├── project.docx │ ├── 21 Guns.mp3 │ ├── Sultans of Swing.mp3 │ ├── report.pdf │ ├── charts.pdf │ ├── VacationPic.png │ ├── CKEditor.zip │ ├── Cats.jpg │ └── archive.7z After: Downloads │ ├── Music │ │ ├── 21 Guns.mp3 │ │ └── Sultans of Swing.mp3 | | │ ├── Documents │ │ ├── project.docx │ │ ├── report.pdf │ │ └── charts.pdf | | │ ├── Archives │ │ ├── CKEditor.zip │ │ └── archive.7z | | │ ├── Pictures │ │ ├── VacationPic.png │ │ └── Cats.jpg 更多有意思的东西，可以从 repo 看到： https://github.com/bhrigu123/classifier ","date":"2018-09-13T01:00:00+08:00","permalink":"https://svtter.cn/2018/09/13/classifier-%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB/","title":"classifier 文件分类"},{"content":"目前有三个容器我不太了解其内部实现，打算通过 \u0026lt;c++ primer\u0026gt; 进行学习\nmap multimap unordered_map map map 是目前最简单的结构，实现的方法是 BST（binary search tree）。因此，其时间复杂度等都与 BST 相同，搜索，增加，删除基本时间都是 log(n)。\nuse map when 数据有序 需要按照有序的顺序获得元素 unordered_map unordered_map 则是通常所说的 hash table，哈希表，搜索，增加，删除都是以hash表为主，较好的情况是o(1)，也就是hash函数可以较好的把元素分布到表中，如果 hash 函数比较糟糕，则每一次添加删除查找，都是完整遍历一个表。\nuse unordered_map when 对数据计数 只需要根据 key 访问 value 简单来讲，就是当你需要使用 vector 来计数的时候，可以用 unordered_map 来代替。\n| map | unordered_map --------------------------------------------------------- Ordering | increasing order | no ordering | (by default) | Implementation | Self balancing BST | Hash Table | like Red-Black Tree | search time | log(n) | O(1) -\u003e Average | | O(n) -\u003e Worst Case Insertion time | log(n) + Rebalance | Same as search Deletion time | log(n) + Rebalance | Same as search multimap multimap containers are generally slower than unordered_multimap containers to access individual elements by their key, but they allow the direct iteration on subsets based on their order.\nMultimaps are typically implemented as binary search trees.\nmultiple 也是用 bst 实现的，相比 map，允许按照顺序遍历元素。\nReference https://www.geeksforgeeks.org/map-vs-unordered_map-c/ ","date":"2018-08-27T01:00:00+08:00","permalink":"https://svtter.cn/2018/08/27/difference-between-map-unordered_map/","title":"# Difference between map \u0026 unordered_map"},{"content":"这是leetcode的解题报告。ARTS很想加入，但是因为自己懒，本身也做了这些事情，因此就一直都在拖，希望这周能够搞定。\norigin from leetcode\nroad 相交链表，两个指针分别遍历两个链表即可，具体可以画图来表示，两个链表，一个长度为 a+c，另一个长度为 b+c，两个指针势必会在 a+b+c 的位置相遇。\nsolution /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) { ListNode *w1, *w2; w1 = headA; w2 = headB; if (!w1 || !w2) { return NULL; } while (w1 != w2) { if (!w1) w1 = headB; else w1 = w1-\u0026gt;next; if (!w2) w2 = headA; else w2 = w2-\u0026gt;next; } return w1; } }; ","date":"2018-08-20T01:00:00+08:00","permalink":"https://svtter.cn/p/leetcode-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/","title":"leetcode 相交链表"},{"content":"安居客是不太行，所有的看起来不错的房源，没有一个能联系上，联系上的全都是没有了，建议别用安居客。\n找房几个关键因素：\n阳光好，（朝南） 床板硬，不凹陷 淋浴头水力充足 独立卫浴， 地铁口附近， 没有汽车声音 没有蟑螂老鼠， 隔音好， 马桶，是否正常使用 热水器，是否正常使用 冬天供暖多少度（集体供暖还是） 空调制冷情况， 房产证（是否和房东签合同） 水电如何收费，怎么缴费（商电民电等，差距比较大） 暖气费（一般是房东或者中介交） 天花板是否漏水，这个不要因为不是顶楼就不看，不是顶楼照样漏水！ 设施损坏维修问题 Wi-Fi，空调 根据这几个关键因素，找了两天的房子，终于有点收获，但是前期看房没有效率，耗费了不少的时间。此外，房子的地点需要额外精心挑选，离地铁近能省好多好多事情。。\n自如贵一些，服务质量高，但是个人感觉是有溢价的，因此如果自己懂的套路多，又不是很懒，就可以避免。\n链家和我爱我家，两大巨头，处理事情方便，房子相对小中介来言靠谱许多。\n一些公寓的评论——来自微博和知乎，许多都在讲存在管家态度不好，以及隔音差，维修慢等问题。我感觉这个还是要看付了多少钱。一分价钱一分货，如果价格低，不要奢求太多。\n","date":"2018-08-02T01:00:00+08:00","permalink":"https://svtter.cn/2018/08/02/%23%E6%89%BE%E6%88%BF%E5%90%AF%E7%A4%BA/","title":"# 找房启示"},{"content":"搜索了一通（可能是关键字找的不对），发现 Mac 对于磁盘异常的解决方案着实不多，因此用以下粗暴方法解决；\n输入：\ndiskutil list 找到所需的 /dev/disk4\n然后运行\nsudo dd if=随便什么文件 of=/dev/disk4 此后再用disk utility.app进行格式化等等即可。\n后来发现这个方法搞定的U盘往往出现一些诡异的问题，比如说在 Windows 的不同版本下无法读取，因此最好还是重新修复一下分区表。\n","date":"2018-07-20T01:00:00+08:00","permalink":"https://svtter.cn/2018/07/20/%23%E8%A7%A3%E5%86%B3dd%E4%B9%8B%E5%90%8Emac%E6%90%9E%E4%B8%8D%E5%AE%9Ausb%E7%9A%84%E9%97%AE%E9%A2%98/","title":"# 解决 DD 之后 Mac 搞不定 USB 的问题"},{"content":" 本文的学习过程主要是通过 Docker 官方文档\n花了一段时间学习 Docker swarm，一个docker的容器集群服务，来应对即将到来的高并发项目需求。\nDocker machine Docker machine 是 Docker 官方编排的项目之一，可以理解成一个 Docker 宿主机器的统一管理CLI，自部署不是很好用：目前国内仅仅 aliyun 支持，其他的我在官方文档中没有找到。\nDocker machine 的安装十分简单，通过官网提供的脚本即可，For Linux：\n$ base=https://github.com/docker/machine/releases/download/v0.14.0 \u0026\u0026 curl -L $base/docker-machine-$(uname -s)-$(uname -m) \u0026gt;/tmp/docker-machine \u0026\u0026 sudo install /tmp/docker-machine /usr/local/bin/docker-machine 安装好以后，即可按照相关的操作进行运行。\n比如，创建两个虚拟机：\n$ docker-machine create --driver virtualbox myvm1 $ docker-machine create --driver virtualbox myvm2 进入虚拟机：\n$ docker-machine ssh myvm1 显示虚拟机\nNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS myvm1 - virtualbox Running tcp://192.168.99.100:2376 v18.05.0-ce myvm2 - virtualbox Running tcp://192.168.99.101:2376 v18.05.0-ce 然后即可在虚拟机的基础上进行相关的操作，十分方便。\nDocker-swarm Docker swarm 则是一个集群的东西，基本的概念是，每个宿主机器都是一个 worker ，然后大家都加入一个东西，叫做 stack ，stack 里面有许多的 container ，每个宿主机器，也分别是一个 node 。\n这个 stack 是依据我们的 service 建立的，stack 中保存着 service 建立的名称，也可以通过 stack 查看相关的节点。\n每个 node 都可以运行多个 container ，swarm 会进行 负载均衡 ，这个就很酷了。\n在官方的例子中，docker-compose.yml：\nversion: \"3\" services: web: # replace username/repo:tag with your name and image details image: svtter/get-started:part2 deploy: replicas: 5 resources: limits: cpus: \"0.1\" memory: 50M restart_policy: condition: on-failure ports: - \"4000:80\" networks: - webnet networks: webnet: 复制的 app service 数量为 5。\n大体上就是这个样子。\n想法\n行文至此，想到可以进一步学习，然后去一些相关的社区学习一波。（不过按照之前的经验，很多社区的质量都不高，讨论纯属浪费时间。）\n学完这些东西，至少可以把自己的服务器升级一波，做成标准的DevOps，以及充分利用服务器资源了。\nCode GitHub – Svtter/Docker_Swarm_Test: a Docker swarm example project. Reference to official document.\n","date":"2018-06-21T01:00:00+08:00","permalink":"https://svtter.cn/2018/06/21/%23dockerswarm%E5%AD%A6%E4%B9%A0/","title":"# Docker swarm 学习"},{"content":"Python的文件操作很多，为了方便以后查询使用，在此做下记录。\n注：这些函数都可以在官网查询，这里做个cache。\n遍历文件 遍历当前文件夹，并且\nfor file in os.listdir(path): file_path = os.path.join(path, file) print(file_path) 判断文件是否存在 判断文件是否存在，如果不存在，创建新文件夹\nif not os.path.exists(path): os.mkdir(path) 删除文件 递归的删除文件\nimport shutil shutil.rmtree(file) shutil是一个high-level file operations，因此相对于其他的python接口，更加偏向于人们的习惯性思维。\n","date":"2018-06-19T01:00:00+08:00","permalink":"https://svtter.cn/2018/06/19/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/","title":"# Python文件操作"},{"content":" 发现maven与Java，别有一番乐趣\n入门建议：\nhttps://maven.apache.org/guides/getting-started/maven-in-five-minutes.html\n现在很多文章其实写的都不如官方的文章，但是人们总是习惯性的从百度获取自己想要的某些资源。\nmaven编译依赖 一般情况下，maven不会把依赖的包编译到自己的jar包里面，我猜和dll的出发点是一样的，减少内存的占用（减少相同内容在内存中的冗余）。\n但是有时候我们不能确保宿主的机器也有同样的东西，因此有时候需要把依赖编译进去。\n我们可以这样做，在pom.xml中，添加字段：\n\u0026lt;!--构建依赖--\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-shade-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.6\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;shade\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; 由此，就可以把需要的依赖包同时编译进去了。\n针对mvn，我上传了一个二维码扫描的例程，可供参考：https://github.com/Svtter/zxing-example\n","date":"2018-06-14T01:00:00+08:00","permalink":"https://svtter.cn/2018/06/14/maven%E5%B0%8F%E8%AE%B0/","title":"Maven小记"},{"content":"内容 在最近的一期 realpython 中，我阅读到了这样一段代码：\n# Why Python Is Great: # Function argument unpacking def myfunc(x, y, z): print(x, y, z) tuple_vec = (1, , 1) dict_vec = {\u0026#39;x\u0026#39;: 1, \u0026#39;y\u0026#39;: , \u0026#39;z\u0026#39;: 1} \u0026gt;\u0026gt;\u0026gt; myfunc(*tuple_vec) 1, , 1 \u0026gt;\u0026gt;\u0026gt; myfunc(**dict_vec) 1, , 1 之前因为：\n这个东西不是很直观 这个可能造成参数混乱 而不是很在意这段代码。现在想来，真是很方便的一个东西：我们可以通过这个特性，轻松的拆解response.json这个dict，从而直接使用参数。\n注意一点，如果一个函数的参数超过三个，说明你需要拆解这个函数，而不是被参数的数量搞得焦头烂额。\n具体例子 这个方法可以方便很多事情，比如说，我可以这样来重新构建输出的变量，而不是一个个print\ndef add_parameters(params, **kwargs): \"\"\"add kwargs to dict Args: params: the dict need to add kwargs: variable \"\"\" params.update(kwargs) params = {} add_parameters(params, x_train=x_train.shape, y_train=y_train.shape, x_test=x_test.shape, y_test=y_test.shape) pretty(params) ","date":"2018-06-12T01:00:00+08:00","permalink":"https://svtter.cn/2018/06/12/python%E6%8B%86%E5%8C%85%E7%9A%84%E5%A5%BD%E5%A4%84/","title":"Python拆包的好处"},{"content":"希望本文能够给读者较少一些不必要的困扰。书写顺序较为随意，以\n“从安装到使用”这个为主线行文。\n安装时 本文不在此具体介绍如何安装Ubuntu。对于安装过程的建议，本文会写在\n内容之中。安装之前，建议阅读本文。\n使用非定制的ISO 不要使用Lubuntu，Kubuntu甚至Gnome Ubuntu这些更改了默认桌面环境的Ubuntu。\n对于新手而言，Ubuntu本身就很脆弱，使用这些定制的ISO，不仅不利于提升用户\n体验，反而会在非重点的地方极大的消耗时间。对了，Kylin也是不推荐的，尽管\n官方甚至都把它挂在了首页。\n唯一建议使用的ISO是官方下载地址。\n使用英文系统 中文系统可能会导致许多问题。比如，如果一个软件不支持中文路径，你可能需要\n排查很久才能想到这个问题。除此之外还有其他的一些问题，比如在命令行中进入\n一个目录，你可能需要切换输入法，然后再切换回来，十分不方便。还有一些暗含\n的问题，我已经记不清了，也没有精力去探索这些问题，因为我们的目的是“脱坑”。\n因此，使用英文作为系统语言可以解决很多问题。唯一引入的问题可能是英文的阅\n读障碍。我想这应该是一个需要克服的问题。\n如果使用英文調不出輸入法，可以嘗試添加中文支持，再去掉\n不要挑战花式安装 我这里的花式安装是指，/home做一个分区，/boot做一个分区这种事；还有就\n是在固态上放一个区，在其他位置再放一个区等。这种事情不要做。是的，不要做。\n在我看来，这种事情毫无意义，对于新手而言，基本上不会有时间让系统稳定到\n硬盘不够用。\n把根目录/挂到一个大分区下，100G，所有问题就都解决了。当空间不足需要重装，\n恭喜，你可能已经不是新手了，很多问题都可以不再按照此指南进行了。你可以\n尝试按照你自己的意图去配置系统了。\n使用 下面是使用部分。使用部分是，第一次进行安装之后，第一次进入桌面。\n不要添加第三方PPA 我把这条忠告写在最前面。如果你不知道什么叫做第三方ppa，那么很好，\n我的意思是，在你了解它是什么之前，不要通过apt与software center\n以外的方式安装软件。这可以很大程度的保护你的软件包管理工具。修复\n软件包管理工具需要消耗的时间可能很多，而且问题往往是链式的，总会\n给新手造成“我以为我解决了”这样的错觉。\nsudo add-apt-repository ppa:kelleyk/emacs 这就是我所说的PPA。\nVim 和 Emacs 都是我的最爱。\n不要在输入法上耗费太多时间 输入法如果花费一上午都没有解决的话，建议放弃。因为Ubuntu官方的版本\n有时候给出的中文输入法都可能无法使用。\n如果真的需要输入中文，可以先考虑使用中文搜索引擎做pinyin的转换。不过\n你真的需要中文，并且在Ubuntu下做文字处理的工作吗？\n多运行apt-get update 是的。更换国内源这个事情我是建议的，个人对于tsinghua的源非常喜欢，\n尽管它崩的概率也有点高，不过在ipv6以及速度上都太令人满意了。\n源的不稳定可能造成的问题是，没有完全将软件依赖更新好。\n如果你不知道我在说什么，没关系，apt命令出现问题时，多运行apt-get update\n就可以了。\n官方文档为主 Ubuntu的很多问题，都是国内博主在写文章时比较随意造成的（我也挖这种坑）。\n在进行软件安装的时候，新手往往在国内搜索某个教程就复制粘贴了。这是非常\n容易出问题的，且不论安全性，甚至教程本身都无法使得软件正常运行。这里面\n包含很多种可能：文章不再更新，系统已经不适配；教程缺斤少两等等。\n安装软件先以官方文档为主，也就是软件的官方网站，一般都会有文档。文档可能\n不好读，但是起码能够减少问题。其次是Ubuntu官方的安装指南；再其次是google\n第一位的安装指南（前提是新手能明白每一步都在做什么）；没有最后。\n能用apt-get install解决的问题，不要通过make解决。\n尽量不使用sudo 除非是按照官方文档进行操作（不排除无良软件开发者挖坑导致运行时出问题），\n否则使用sudo，这个超级用户权限，可能带来很多问题。比如运行库版本不匹配，\n图形界面挂掉等等。\n常见问题解决方案 这里列出一些常见问题，以及解决的方法。\n所有问题 重启。\n图形界面崩 sudo apt-get install --reinstall ubuntu-desktop\n补充 其他常见问题可以通过blog#svtter.cn与我沟通，我将做出补充。\n","date":"2018-05-29T01:00:00+08:00","permalink":"https://svtter.cn/2018/05/29/ubuntu%E8%84%B1%E5%9D%91%E6%8C%87%E5%8D%97/","title":"Ubuntu 脱坑指南"},{"content":"感觉博客样式太丑了，不想更新\n","date":"2018-05-22T01:00:00+08:00","permalink":"https://svtter.cn/2018/05/22/%E5%8D%9A%E5%AE%A2%E6%9C%80%E8%BF%91%E6%B2%A1%E6%9B%B4%E6%96%B0/","title":"博客最近没更新"},{"content":"一段脚本将ipython notebook转化为py文件。\nIt’s hard to make notebook file to import so it’s important to make notebook importable.\n#!/usr/bin/env python # coding: utf-8 import nbformat from nbconvert import PythonExporter def convertNotebook(notebookPath, modulePath): with open(notebookPath) as fh: nb = nbformat.reads(fh.read(), nbformat.NO_CONVERT) exporter = PythonExporter() source, meta = exporter.from_notebook_node(nb) with open(modulePath, \u0026#39;w+\u0026#39;) as fh: fh.writelines(source) def trans_all(): import os path = \u0026#39;.\u0026#39; list_dirs = os.listdir(path) for filename in list_dirs: if filename.endswith(\u0026#39;.ipynb\u0026#39;): print(filename, filename[:-5] + \u0026#39;py\u0026#39;) convertNotebook(filename, filename[:-5] + \u0026#39;py\u0026#39;) trans_all() ","date":"2018-04-20T01:00:00+08:00","permalink":"https://svtter.cn/2018/04/20/%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2ipynb/","title":"批量转换ipynb"},{"content":"题目 https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/description/ 给定一个字符串 s 和一些长度相同的单词 words，找出 s 与 words 中所有单词（words 每个单词只出现一次）串联一起（words 中组成串联串的单词的顺序随意）的字符串匹配的所有起始索引，子串要与串联串完全匹配，中间不能有其他字符。\n举个例子，给定：\ns：”barfoothefoobarman”\nwords：[“foo”, “bar”]\n你应该返回的索引: [0,9]。（任意顺序）\n题解 代码写的比较清楚，应该不需要题解。。\ncode class Solution: def match(self, ss, word_dic): len_ss = len(ss) word_number = i = while True: word = ss[i:i+self.len_of_word] # keys() update if word in word_dic: if word_dic[word] \u0026gt; : word_dic[word] -= 1 word_number += 1 # is update if word_number is self.len_of_words: return True # repeat else: return False # not exist else: return False i += self.len_of_word def findSubstring(self, s, words): \"\"\" :type s: str :type words: List[str] :rtype: List[int] \"\"\" self.len_of_word = len(words[]) self.len_of_words = len(words) self.len_of_str = len(s) a = dict() for word in words: if word in a: a[word] = a[word] + 1 else: a.update({word: 1}) index_recorder = [] len_substr = self.len_of_word * self.len_of_words search_range = self.len_of_str - len_substr + 1 for i in range(search_range): ss = s[i:i+len_substr] word_dic = a.copy() if self.match(ss, word_dic): index_recorder.append(i) return index_recorder if __name__ == \u0026#39;__main__\u0026#39;: s = \"wordgoodgoodgoodbestword\" words = [\"word\",\"good\",\"best\",\"good\"] so = Solution() print(so.findSubstring(s, words)) ","date":"2018-04-05T01:00:00+08:00","permalink":"https://svtter.cn/2018/04/05/%E4%B8%8E%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9B%B8%E5%85%B3%E8%81%94%E7%9A%84%E5%AD%97%E4%B8%B2/","title":"与所有单词相关联的字串"},{"content":" sphinx-learn algorithm_note python_note 这些笔记用 Sphinx 进行书写的，Sphinx 着实不是特别好用，学习曲线有些陡峭，后面打算切换到语雀什么的，可能会舒服一些。就是可能不够自由。\n如果喜欢本博客，建议添加 RSS 订阅\n","date":"2018-03-30T01:00:00+08:00","permalink":"https://svtter.cn/2018/03/30/%E7%AC%94%E8%AE%B0%E5%88%97%E8%A1%A8/","title":"笔记列表"},{"content":"获取本机ipv6地址，最简单的方法：\ncat /proc/net/if_inet6 还可以使用python的netinterface包。\nifconfig也是从这个文件进行获取的，只是优化了一下格式。\nreference https://blog.lilydjwg.me/2012/6/6/get-ipv4-and-ipv6-addresses-of-local-host-in-a-programming-way.34055.html ","date":"2018-02-28T01:00:00+08:00","permalink":"https://svtter.cn/2018/02/28/%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAipv6%E5%9C%B0%E5%9D%80/","title":"获取本机ipv6地址"},{"content":"调整grub总是需要搜索某个文件，某个配置，相当麻烦，近期找了一个比较不错的图形化配置管理器，grub customizer，可以调整启动的内核，以及启动的画面，非常好用，安利一发。\n安装 sudo add-apt-repository ppa:danielrichter2007/grub-customizer sudo apt-get update sudo apt-get install grub-customizer 使用截图 【日后补上】\nreference http://ubuntuhandbook.org/index.php/2016/04/install-grub-customizer-ubuntu-16-04-lts/ grub讲解 ","date":"2018-02-28T01:00:00+08:00","permalink":"https://svtter.cn/2018/02/28/%E4%BD%BF%E7%94%A8grubcustomizer%E8%B0%83%E6%95%99grub/","title":"使用 grub customizer 调教grub"},{"content":"使用vscode进行django开发的时候，总会出现一些错误，比如说对Django的一些结构进行错误的报错；\n这个时候可以安装pylint-django这个插件。\n安装方法：pip install pylint-django\n使用：\n在.vscode/配置文件中增加：\n\"python.linting.pylintArgs\": [ \"--load-plugins=pylint_django\" ], 即可。\n参考 https://stackoverflow.com/questions/45135263/class-has-no-objects-member\n","date":"2018-02-24T01:00:00+08:00","permalink":"https://svtter.cn/2018/02/24/vscode%E4%B8%BAdjango%E6%B7%BB%E5%8A%A0%E5%90%88%E9%80%82%E7%9A%84pylint/","title":"vscode为django添加合适的pylint"},{"content":" # python2 # Put in const.py...: class _const: class ConstError(TypeError): pass def __setattr__(self,name,value): if self.__dict__.has_key(name): raise self.ConstError, \"Can\u0026#39;t rebind const(%s)\"%name self.__dict__[name]=value import sys sys.modules[__name__]=_const() # that\u0026#39;s all -- now any client-code can import const # and bind an attribute ONCE: const.magic = 23 # but NOT re-bind it: const.magic = 88 # raises const.ConstError # you may also want to add the obvious __delattr__ # python3 version class _const: class ConstError(TypeError): pass def __setattr__(self, name, value): if name in self.__dict__: raise self.ConstError(\"Can\u0026#39;t rebind const(%s)\" % name) self.__dict__[name] = value import sys sys.modules[__name__] = _const() 这样一来，就可以在python中使用不可变量了。其中，利用魔术方法__setattr__，把一个变量当作是const类的属性，然后使用__dict__来判断当前变量是否已经存在。\n通过这个技巧我们还能构造出一系列有意思的东西——\n运行截图 refer https://gist.github.com/Svtter/c96e3259e264621e8bc1ab45b4c2675a http://code.activestate.com/recipes/65207-constants-in-python/?in=user-97991 ","date":"2018-02-06T01:00:00+08:00","permalink":"https://svtter.cn/2018/02/06/python%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%87%8Fconst/","title":"python如何使用不可变量const"},{"content":"使用Keras做分类的时候踩了一个坑，也是拿来主义的锅，估计也有不少同志遇到。\n在进行分类的时候，往往使用categorical_crossentropy，有时候萌新（像我）会用binary_crossentropy，虽然结果可能上浮30%，但是这个结果是不对的。model.fit以及model.evaluate给出的acc的值都是有问题的，正确的计算方法应该是：\n1 2 3 # Actual accuracy calculated manually: y_pred = model.predict(x_test) acc = sum([np.argmax(y_test[i])==np.argmax(y_pred[i]) for i in range(10000)])/10000 其中\n1 2 numpy.argmax(a, axis=None, out=None) # 返回沿轴axis最大值的索引。 使用测试样本的数量代替10000，输出的acc才是正确的结果。\n这个方法是使用二分类的时候才能使用的，label的个数多于2就不能使用。\n参考 https://stackoverflow.com/questions/42081257/keras-binary-crossentropy-vs-categorical-crossentropy-performance\n","date":"2018-02-01T01:00:00+08:00","permalink":"https://svtter.cn/2018/02/01/keras%E5%9D%91/","title":"Keras坑"},{"content":"配置终端是许多人头疼的问题，比如配置之后没有达到自己预先想要的效果，但是又总是不知道哪里出了问题，或者配置完成之后又遭遇了很多烦恼。\n本文的作用是解决这些问题，或者为解决这些问题提供一个思路。\n颜色不对 颜色不对可能有很多原因，但归根结底是两个问题，一个是TERM环境变量没有设置好，另一个是当前使用的终端app不支持真彩色。\n处理term可以使用\nexport TERM=xterm-256color 把它加载到你的rc文件里。有些人使用zsh，那么加入到~.zshrc里面。有些人使用bash，那么加入到~/.bashrc里面。\n解决app真彩色问题，可以参考这个链接：https://gist.github.com/XVilka/8346728\nUbuntu14.04版本下默认的terminal是不支持真彩色的。\n乱码 终端乱码很大程度上是因为当前的字体不支持输出的字符。这个时候安装一个字符集支持比较齐全的字体即可。常见的字体比如nerd fonts，包含了常用字体+许多的符号字体的集合，因此找到自己心水的字体，安装并且替换即可解决这些问题。\n可能还有许多问题我没有想到，可以在留言区提出，我一并加上。\n","date":"2018-01-30T01:00:00+08:00","permalink":"https://svtter.cn/p/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF/","title":"如何配置终端"},{"content":"这是我进行ros开发的几个比较有用但是ros-wiki中没有明确点出的。\n使用catkin的清除命令 如果使用rosbuild进行此操作，可以使用：\nrosmake --target=clean 如果使用catkin\n$ cd ~/catkin_ws $ rm -rf devel build install 执行以上命令后，可以像往常一下构建数据包\n$ cd ~/catkin_ws $ catkin_make $ source devel/setup.zsh 重新构建单独的catkin包 $ cd ~/catkin_ws $ catkin_make --pkg package_name 编译单独的包\ncatkin_make -DCATKIN_WHITELIST_PACKAGES=\u0026#39;kinect2_viewer\u0026#39; ROS image转换为cv::Mat格式，提供opencv使用 http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython\n参考 ros入门实践 ","date":"2018-01-28T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/28/ros%E5%BC%80%E5%8F%91tips/","title":"ROS 开发tips"},{"content":" ROS常用的消息：http://wiki.ros.org/common_msgs ROS消息wiki：http://wiki.ros.org/msg ROS消息开发参照： csdn http://wiki.ros.org/cn/ROS/Tutorials 定制自己的消息类型：[csdn ]2\n开发自己的消息类型的时候要依据原本的消息类型来定义，定义消息的作用是，定义过的消息可以被python，以及cpp引入。进行开发的时候，可以参考给出的例子进行msg的开发。\n","date":"2018-01-28T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/28/ros%E6%B6%88%E6%81%AF%E5%BC%80%E5%8F%91/","title":"ROS消息开发"},{"content":"这是一个可以参考的例子。\n还有一个例子是根据他人开发进行修改的，参见这里\n通过这个例子，可以调用Tensorflow – object – detection – API。\n【挖坑】\n","date":"2018-01-28T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/28/tensorflow%E4%B8%8Eros%E8%BF%9B%E8%A1%8C%E9%9B%86%E6%88%90/","title":"Tensorflow与Ros进行集成"},{"content":" Fabric是一个可以在远程机器上运行命令的库\nFabric官方目前只支持Python2版本，但是有勤劳的人开发出了适配Python3的版本。具体可以查看这个fork。\nFabric的使用 我在使用Fabric的时候主要是用于部署我的网站。使用时候，首先需要引入所有的API：\n# 导入Fabric API: from fabric.api import * 这样就可以导入Fabric的API进行远程控制啦。\n具体问题 git需要输入密码 env.forward_agent = True ssh通过秘钥链接 # 使用秘钥 env.key_filename = [\u0026#39;/Users/xiuhao/.ssh/key\u0026#39;] 使用root # 服务器登录用户名: env.user = \u0026#39;ubuntu\u0026#39; # sudo用户为root: env.sudo_user = \u0026#39;root\u0026#39; 一个简单的部署例子 这个部署例子结合了更新代码，进入指定目录，运行命令等。\nBASE_DIR = \u0026#39;/home/ubuntu/django_blog\u0026#39; def deploy(): \"\"\" deploy new changes \"\"\" with cd(BASE_DIR): run(\u0026#39;git pull\u0026#39;) run(\u0026#39;make down\u0026#39;) run(\u0026#39;make up\u0026#39;) 写好文件以后，保存为fabfile.py，运行fab deploy即可部署。deploy对应着deploy()函数。\nNOTE：不在远程服务器上使用ssh的git仓库，是因为担心服务器被hack连累我的git repo。\n参考资料 廖雪峰 15days python3-fabric ","date":"2018-01-27T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/27/%E4%BD%BF%E7%94%A8fabric%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2/","title":"使用Fabric进行部署"},{"content":"写博客这个事情不是我自发进行的，成因也很有趣，是在本科贺立坚老师的指导下坚持下来的。\n写博客的优点其实可以想出很多，但是于我而言，其根本原因还是：\n我做了一些让我自己很得意的东西，想给大家看看\n这就是我的初衷。此外，CSDN 排名的上升以及一些统计数据的观察也可以给我带来许多欢乐，这是一步步坚持下来收获的。\n有许多优质的博客给我带来了许多收获，我不认为那些作者，做这种事情就是“有所图谋”的，很多时候都是无私奉献的一种精神，就像是开源软件一样。认真的去做一件事，长期做一件事情是很有成就感的，也是能够收获喜悦，升华自我价值的。当然，值得一提的是，奉献是开源精神所包含的精神之一，但不是全部。\n我觉得写博客是一件很好的事情，有点像是QQ空间的升级版。写博客的过程中，会对博客题目进行反思，会对自己的文字进行思考，甚至可以在这个过程中对于之前一些没怎么在意的事情有了新的看法。比如，在写这篇文章之前，我没有意识到我写博客的真正目的，而随着这篇博客慢慢的完成，我意识到了这件事情。\n此外，在叙述一个不清楚的事情的时候，写博客是一个梳理思路的好方法，就如同给别人陈述一遍你的思路一样。只是，这个听众并不局限于你的地理位置，而是通过互联网广泛传播。\n戒骄戒躁，继续努力。\n","date":"2018-01-23T01:00:00+08:00","permalink":"https://svtter.cn/p/%E5%86%99%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%AA%E4%BA%8B%E6%83%85/","title":"写博客这个事情"},{"content":"花了一小段时间撸了一个助记工具，运行起来就是把“复制”的词汇自动保存到规定的json文件中，并累计次数。如果后面有时间继续做下去，可能会考虑做一些可视化的工作，以及调用一些第三方API等等。\n可能一些词典工具本身已经带有这个功能，不过自己开发的东西自由度会更大一些，学习成本不高。\ngithub repo: wordRecorder\nroadmap leancloud云端保存！ 还没想好 ","date":"2018-01-23T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/23/%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9A%84%E5%8A%A9%E8%AE%B0%E5%B7%A5%E5%85%B7/","title":"一个小的助记工具"},{"content":"现在使用vim最好是使用neovim或者vim8版本，来获得async特性，防止运行补全命令的时候卡顿。\n我的配置文件在coding gist。\n相应的安装方法也写在其中。\n插件管理器 安装我的配置文件，首先需要安装一下插件管理器。\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 使用字体: nerd-fonts https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts\n运行 把.vimrc移动到~/.vimrc\n打开vim，输入：:PlugInstall\n安装完成即可。\n语言补全 需要个别语言的补全，查看completor\n因为是自己手动慢慢写成的vim配置，因此想要我定制或者修改不需要额外的学习成本。如果想要更好的配置，可以考虑spacevim，SpaceVim是参考Spacemacs制作的IDE，非常有趣，二者相爱相杀，促成的产物。\n","date":"2018-01-19T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/19/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/","title":"我的vim配置"},{"content":"之前一直都在用z.shell这个东西来进行跳转，突然发现还有一个更好用的工具autojump\n安装 这个工具在Ubuntu下安装十分简单，直接通过：\n$ sudo apt install autojump 安装之后，记得把. /usr/share/autojump/autojump.sh添加到你的shell配置文件中，例如.zshenv或者.bashrc等等。\n之后，使用man autojump来查看如何使用这个命令，十分方便。\nosx $ brew install autojump 把autojump添加到你的[oh-my-zsh]的plugin列表中，例如：\nplugin( autojump ) 用法方面，举个例子。\n进入目录 可以直接使用:\nj github\n进入github这个目录；\n通过shell在图形界面打开目录 通过:\njo github\n来在图形界面中打开github这个目录。\n赶紧尝试一下吧！\n","date":"2018-01-13T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/13/autojump-%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E7%9B%AE%E5%BD%95%E8%B7%B3%E8%BD%AC%E8%84%9A%E6%9C%AC/","title":"autojump – 一个快速目录跳转脚本"},{"content":"私以为，Ubuntu下最舒服的输入法是Rime，建议在Ubuntu下安装fcitx-rime。\n安装 # 1.安装 sudo apt-get install fcitx-rime # 2.配置 fcitx 为默认. 然后重启 im-config sudo reboot 我的系统环境是Ubuntu 16.04\n安装完成以后，使用ctrl+grave。grave就是tab上方的反引号。\nrime是佛振，我国开发者进行开发的，充满了Hack精神的输入法引擎，在条件允许的情况下，可以进行捐助。\n","date":"2018-01-13T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/13/ubuntu%E4%B8%8B%E6%9C%80%E8%88%92%E7%88%BD%E7%9A%84%E8%BE%93%E5%85%A5%E6%B3%95/","title":"Ubuntu下最舒爽的输入法"},{"content":"今天晚上我在rss上花费了不少时间，由于效率不高，算是娱乐了一下吧。\n标记语言考察 markdown现有的一些python-parser，比如python-markdown虽然已经做得很好了，但是对于todo等我想要的需求还没有支持，因此想要考虑使用其他的标记语言，比如restructedtext，这个用于sphinx这个用于构建文档框架中的标记语言。\n于是，简单查看了docutils的文档，发觉其对于我想要的特性支持也并不是十分优秀，准确讲，只有一个暴露在外的接口，并无其他。这个接口的例子：\n\u0026gt;\u0026gt;\u0026gt; from docutils.core import publish_parts \u0026gt;\u0026gt;\u0026gt; print publish_parts(\"*anurag*\", writer_name=\u0026#39;html\u0026#39;)[\u0026#39;html_body\u0026#39;] \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;anurag\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt; 自然，目的是文档，标记语言只不过其中的产物，也没有必要做多余的事情。倒是我想的简单了。\n在搜索了许多材料之后，发现IBM的开发中心很不错，有很多有意思的东西，文章也写得深入浅出。也算是意外收获。\n最后还是放弃了对于markdown的更新，还是按照老路子，如果有时间，就给python-markdown提一个pull request自己造轮子。\nrss相关研究 我的博客rss常年挂出500，其中主要原因是内容中编码出错的问题。我一直没有定位到这个bug的出处，可能是SQLite的bug或者django-form的bug？文章中总是会混入\\\\x08这种类似的xml无法编码的数据。有时间仔细排查一下。这个问题才是主要问题，不过我的精力主要放在下面这个问题上了。\n为了解决rss渲染的时候，description的问题，我引入了safe希望不要把\u0026lt;div\u0026gt;类似于这种标签进行转义，不过我失败了。我查询了关于django的safe过滤器，其中safe过滤器可以通过一个函数来搞定，就是这个：\nThis ought to do it:\nfrom django.utils.safestring import mark_safe foo = mark_safe(foo) 引入之后依然进行了转义。于是我决定暂时进行一次清除，用一篇博文来替代所有的description。如果后面有时间看看rss，把这个功能做完。最好还可以自己写一个rss阅读器，来方便自己进行博客订阅。\n在网络上一个不错的教程，来自自强学堂。看完这个rss以后，可以考虑从官方文档入手。\n也不能老换 因为看到大家都用node来搭建博客，又一次简单的翻阅了一下ghost——一个基于nodejs开发的文档，我感觉效果不大。一方面，学习nodejs于我而言，可能是一个比较高的学习成本，我没有多余的时间进行nodejs学习。对于nodejs，我仅仅是了解一部分的皮毛知识。\n在查询之后，判定切换成本比较高。如果要直接用博客系统，考虑使用Zinna，以及Mezzanine进行二次开发。\n当然，使用hexo也是一个非常不错的选择。可以使用跨域来解决访问量统计不准确的问题。\n总结 整个娱乐过程没有比较好的产出，主要原因可能是没有在做事之前，简单规划一下。试想，如果规划的比较优秀，可能时间上节省大半吧。因此强势安利一波trello，和国内的teambition相似，不过UI设计上更加简洁明快一些。\n参考资料 未列出\n","date":"2018-01-13T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/13/%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BA%8C%E6%AC%A1%E6%8F%90%E5%8D%87/","title":"博客的二次提升"},{"content":"记又一次搞崩服务器。使用“又”，是因为我搞崩不是一次两次了。我希望这是最后一次。\n背景 使用Android连接服务器的时候，发现要比自己的mac速度快很多，于是十分好奇，打算研究一下是什么因素导致的。\n流程 检查了app以后，判断应该是开启了fast TCP导致的，于是考虑在mac上也开启对应的fast TCP，但是效果并不是十分显著；于是再次排查，发现服务器端并没有开启fast TCP。\n这就很奇怪了，为什么速度这么快呢？是因为对“同源”的加密方法有优化吗？\n于是，自然而然的考虑是不是可以通过开启这个TCP加速来加速服务器。这就开启了噩梦的开端。因为需要3.7以上的Linux Kernel才支持这个特性，所以需要先升级内核。我的内核难道不应该是最新的吗？带着这个以为输入了uname sr，显示内核版本2.6*。惊奇，我的VPS内核这么旧吗？于是自然而然的想到要升级一下内核，并且理所应当的把升级内核的脚本apt-get install linux-kernel-lts-wily运行了一下。于是噩梦开始了。\nOpenVZ本身是不支持升级内核的，所有的VM都使用同一个内核版本，因此这个命令导致了很神奇的BUG，安装内核装不上，卸载内核卸载不了。\n这个时候我面临两个选择，一个是重新安装系统，一个是解决当前的这个问题。\n经过简单地判断，我认为如果解决当前问题，可能花费我更多的时间，直接重新安装系统就可以了。重新配置一些相关措施也并不难。\n失算的事情是，尽管我依稀记得一部分关于配置的内容，但是要完全复现我所配置的相关应用已经很难了，因为我没有做记录。于是来回又踩了许多坑，之前有些坑我有很明确的踩进去的记忆。\n这就非常痛苦了，每次操作都在嘲讽自己的愚蠢与过度自信。最后，我只进行了简单的配置，只找回了部分的优化——记忆里我所做的优化就只有这些了，但是速度似乎下降了，这就是最终的结果。\n这也让我想起《人月神话》里面描写的一句，具体我已经记不清了，意思大概是这样的：有些步骤你是必须要做的，只不过当前你没有做而已，以后是要补上的。我读到这个地方的时候，联想这个规律为“技术债”。\n好了，以上就是我还“技术债”的全部过程了。\n教训 研究问题虽然好，但是要注意花费的时间 在生产服务器上，不要做没有经过自查的操作。 不要被强迫症控制了，能用则用。 记录自己的行为日志，如果可以的话，写一个安装脚本 唉，真是一次不合格的运维行动。\n","date":"2018-01-11T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/11/%E8%AE%B0%E5%8F%88%E4%B8%80%E6%AC%A1%E6%90%9E%E5%B4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"记又一次搞崩服务器"},{"content":"Django导出主要使用render_to_string方法来进行；\n可以参考的源码如下：\nfrom article.models import Article from django.template.loader import render_to_string posts = Article.objects.all() for post in posts: title = post.title title = title.replace(\u0026#39;[\u0026#39;, \u0026#39;\u0026#39;) title = title.replace(\u0026#39;]\u0026#39;, \u0026#39;\u0026#39;) context = { \u0026#39;title\u0026#39;: title, \u0026#39;cre_date\u0026#39;: post.cre_date, \u0026#39;updated\u0026#39;: post.up_date, \u0026#39;content\u0026#39;: post.content, \u0026#39;category\u0026#39;: post.category.name, \u0026#39;tag\u0026#39;: post.tag } content = render_to_string(\u0026#39;article.html\u0026#39;, context) filename = \u0026#39;export/\u0026#39; + post.title + \u0026#39;.md\u0026#39; with open(filename, \u0026#39;w\u0026#39;) as f: f.write(content) 对应的渲染article.html\ntitle: {{ title }} date: 2018-01-05T01:00:00+08:00 updated: {{ updated | date:\"Y/m/d H:i:s\" }} tags: [ {% for tag in tags %} \u0026#39;{{ tag.name }}\u0026#39;, {% endfor %} ] categories: [ \u0026#39;{{ category }}\u0026#39;, ] --- {{ content | safe }} 运行的时候，python manage.py shell，然后导入export 包即可。\n","date":"2018-01-05T01:00:00+08:00","permalink":"https://svtter.cn/2018/01/05/django%E5%AF%BC%E5%87%BA%E5%8D%9A%E5%AE%A2%E4%B8%BAhexo%E5%8D%9A%E5%AE%A2/","title":"Django导出博客为hexo博客"},{"content":"install libfreenect2, choose the (other) and don’t forget to test bin/Pronect after install.\nATTENTION: I don’t have NVIDIA or AMD graph card. It might be different if you use them.\nPROBLEM when you face this problem\n/usr/local/include/opencv2/flann/saving.h:113:63: error: exception handling disabled, use -fexceptions to enable throw FLANNException(\"Invalid index file, cannot read\"); run\nroscd kinect2_registrations\nedit CMakeLists.txt, add\nadd_definitions( -fexceptions ) it will work.\n","date":"2017-12-30T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/30/ubuntu16-04installiai-kinect2/","title":"Ubuntu 16.04 install iai-kinect2"},{"content":"这两天感觉博客访问量已经不能靠用嘴宣传了，于是决定做一下sitemap，但是发现django自带的sitemap生成器存在这样的问题：生成的sitemap是依照container的hostname来显示的。\n为此我查询了一下其他人是怎么搞的，发现他们都把nginx和django放在一个容器下——但是如此构建不仅麻烦，似乎违背了docker的构建思路，在一个container里面放了多个进程。因此，我认为下面的方案是合理的。\n解决方案 Enabling the sites framework To enable the sites framework, follow these steps:\nAdd ‘django.contrib.sites’ to your INSTALLED_APPS setting.\nDefine a SITE_ID setting: SITE_ID = 1\nRun migrate. django.contrib.sites registers a post_migrate signal handler which creates a default site named example.com with the domain example.com. This site will also be created after Django creates the test database. To set the correct name and domain for your project, you can use a data migration.\nIn order to serve different sites in production, you’d create a separate settings file with each SITE_ID (perhaps importing from a common settings file to avoid duplicating shared settings) and then specify the appropriate DJANGO_SETTINGS_MODULE for each site.\n\u0026gt;\u0026gt;\u0026gt; from django.contrib.sites.models import Site \u0026gt;\u0026gt;\u0026gt; one = Site.objects.all()[] \u0026gt;\u0026gt;\u0026gt; one.domain = \u0026#39;myveryspecialdomain.com\u0026#39; \u0026gt;\u0026gt;\u0026gt; one.name = \u0026#39;My Special Site Name\u0026#39; \u0026gt;\u0026gt;\u0026gt; one.save() 代码写多了，对于Flask和Django也就十分释然了。两个东西都是利器，针对的东西不是很相同；编程语言也是，都有自己擅长的部分，如果你非要用某种编程语言花很大的力气去做一件小事，除非你是geek而且有追求，并且没有deadline在旁边催催催，否则不建议你这么做。\n参考项目 https://github.com/flyhigher139/mayblog\n","date":"2017-12-27T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/27/%E4%BD%BF%E7%94%A8docker%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84sitemap%E9%97%AE%E9%A2%98/","title":"使用Docker时遇到的sitemap问题"},{"content":"许多人都在推荐fish-shell，比如说阮一峰大佬和Reitz神；因此也要试试fish的魅力。虽然已经是z和zsh的老用户，但是对于效率的极致追求不能停。\n注意：fish仅适用于某些开发场景，目前不适用于所有开发场景——在其他许多shell环境中，由于历史因素以及已经构建完成的大量生态，对于当前的开发影响是巨大的。\nfish基本操作 fish不仅仅使用tab进行不全，还可以使用ctrl+f或者alt+f进行全行不全。\nfish还可以通过安装oh-my-fish，对应到z-shell的oh-my-zsh。不过，一般情况下，fish本身就已经做的够好了，基本不需要再进行更多的配置。\nfish中的export 使用set -x来替代。例如set -x HOME /home/svtter，即export HOME=/home/svtter\n后记 后来我还是切换回了zsh；我使用的开发环境对于zsh已经支持的很好了，但是对于fish的支持还是差强人意。学习新的技术是需要成本的，如果有时间就对fish的支持进行完善，如果没时间，那么还是等它更加成熟再使用吧。\n参考 http://www.ruanyifeng.com/blog/2017/05/fish_shell.html\n","date":"2017-12-27T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/27/%E4%BD%BF%E7%94%A8fish-%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84shell/","title":"使用fish – 一个新的shell"},{"content":"前言 pipenv是书写flask的大神kennethreitz的新作；pipenv集成了virtualenv和pip等工具，让你从requirements.pip以及virtualenv的环境中解放出来。并且他还集成了pyenv的选择python版本，可以说是所向披靡了。\n这是他的原话：\nYou no longer need to use pip and virtualenv separately. They work together. Managing a requirements.txt file can be problematic, so Pipenv uses the upcoming Pipfile and Pipfile.lock instead, which is superior for basic use cases. Hashes are used everywhere, always. Security. Automatically expose security vulnerabilities. Give you insight into your dependency graph (e.g. $ pipenv graph). Streamline development workflow by loading .env files. 相信随着pipenv更加流行，许多工具也会在自己的环境中对pipenv提供支持，解决许多令人不舒服的问题，也能更好的提高编辑的舒适度。\n安装pipenv $ pip install pipenv 创建虚拟环境 virtualenv 当不存在一个虚拟环境的时候，pipenv将会自动创建一个环境 你也可以手动创建虚拟环境： $ pipenv --three 创建Python3虚拟环境 $ pipenv --two 创建Python2虚拟环境 其他的东西和virtualenv是一样的。 安装包 比如你要使用requests（是的也是这个大神写的）。\n$ pipenv install requests 安装完成后，会生成Pipfile以及Pipfile.lock；这一点很像npm.\n其他命令 激活当前虚拟环境 pipenv shell 运行虚拟环境中的命令 pipenv run python 把你的依赖图输出出来 pipenv graph 安装当前目录的相关依赖 pipenv install 使用问题 目前我使用的时候也会多少存在问题，比如说我看不见下载的进度条，默认不是开启的；\n然后就是因为网络环境的问题，我的pip.conf设置不能应用到pipenv上，我需要自己手动更改Pipfile，这一点有些麻烦。\n后记 本身我想把这个文章针对的群体稍微降降，针对一些技术能力不是特别高的群体，但是存在一些问题，比如有些东西是需要一定知识才能看懂的。如果出现了不懂的内容，尽量自己查找一下吧。\n","date":"2017-12-26T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/26/pipenv%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/","title":"pipenv入门指南"},{"content":"在国内加载Dockerhub上的镜像速度会比较慢，对此我们可以通过设置mirror镜像的方式来加速images的下载。\n此外，如果是ipv6的网络，在一些mirror可以直接走ipv6通路，速度非常客观。这里以USTC的mirror为例。\n我这里的环境是Ubuntu 14.04，对于不同的Linux环境，修改的方式都差不多；修改文件/etc/docker/daemon.json，如果没有这个文件，创建一个，注意，此处可能需要root权限。修改完成后，运行命令sudo service docker restart重启docker服务。\n{ \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"] } 配置好以后，选择2.1.0版本的spark进行docker下载。\ndocker pull p7hb/docker-spark:2.1.0\n或者直接运行\ndocker run -it -p 4040:4040 -p 8080:8080 -p 8081:8081 -h spark --name=spark p7hb/docker-spark:2.1.0\n参考 https://lug.ustc.edu.cn/wiki/mirrors/help/docker https://github.com/P7h/docker-spark ","date":"2017-12-26T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/26/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85spark/","title":"使用Docker安装Spark"},{"content":"重启终端 执行命令，修改环境变量等等之后可以通过此命令来简单重启shell\nexec \u0026quot;$SHELL\u0026quot;\n查找文件 $ find ~ -name \u0026quot;*.txt\u0026quot; -print #在$HOME中查.txt文件并显示\nlocate findname\n编辑变量 在zsh中，编辑$HOME/.zshenv；在bash中，编辑.bash_profile\n","date":"2017-12-20T01:00:00+08:00","permalink":"https://svtter.cn/p/shell-tips/","title":"Shell-tips"},{"content":"This blog for my kinect-v2 ros configure.\nEnvironment Thinkpad P70 Ubuntu 14.04 indigo Reference to https://github.com/code-iai/iai_kinect2\nInstall Before start, make sure the cuda, cudnn has been configured correctly.\nFirst, you need to install libfreenect2.\nI recommend to use export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64 in your .zshrc or .bashrc (more professional, in bash_profile or .zshenv). You will avoid some problems about library error.\nWhen installing libfreenect2, Use cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/freenect2 -DENABLE_CXX11=ON to generate Makeifle at build/\nThen Install iai-Kinect\nI use catkin_make -DCMAKE_BUILD_TYPE=\u0026quot;Release\u0026quot; -Dfreenect2_DIR=$HOME/freenect2/lib/cmake/freenect2 to Compile iai-Kinect because installing to $HOME/freenect2 before.\nNOTE:\nenable C++11 by using cmake .. -DENABLE_CXX11=ON instead of cmake .. If something is not working, check out the latest stable release, for example git checkout v0.2.0. check your opencv version: pkg-config --modversion opencv. NEVER EVER use sudo prime-select intel. Error I missed sudo apt-get install beignet-dev; so I got this error:\nBuilding CXX object iai_kinect2/kinect2_bridge/CMakeFiles/kinect2_bridge.dir/src/kinect2_bridge.cpp.o Building CXX object iai_kinect2/kinect2_bridge/CMakeFiles/kinect2_bridge_nodelet.dir/src/kinect2_bridge.cpp.o [100%] Built target kinect2_viewer /home/svtter/catkin_ws/src/iai_kinect2/kinect2_bridge/src/kinect2_bridge.cpp: In member function ‘bool Kinect2Bridge::initPipeline(const string\u0026, int32_t)’: /home/svtter/catkin_ws/src/iai_kinect2/kinect2_bridge/src/kinect2_bridge.cpp:427:28: error: expected type-specifier packetPipeline = new libfreenect2::OpenCLKdePacketPipeline(device); ","date":"2017-12-18T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/18/roskinectconfigurenote/","title":"Ros Kinect Configure Note"},{"content":"本文最初发表于2015年，但是个人认为写的尚可，就搬运到这里来，其中有些知识有些老旧，有时间的时候再更新一下。\nWrite with Vim - 2\n前言 [2014]\n大约在一年前使用vim？这个也是个不确定的时间。具体什么时间使用Vim早已经忘记了。现在用的还算顺手，但是很多东西其实都还没有认真的学一下。最简单的比如说一部分正则表达式的匹配，以及vimscript的写法等等。也是没有具体时间去认真的深入，毕竟信息科技的世界里有太多太多可以探索的东西了= =。\n在大多数情况下我还是认为自己写一些前人已经有的blog毫无价值，但是转念一想写blog又是为了谁呢，还不是为了自己吗。总结过去，才能更好的前进走向未来。\n另外最近又在开始看emacs了。不过总感觉这样是不好的行为——vim我还没有钻研透彻，就跑去了E去到处乱看，最后哪个都搞不好——谁又知道呢？废话也是少说，写本文是给新手入门的。\n另外今天发现K的作用是查找命令（默认是！man）[2014-09-27]\n本文是利用vimperator（firefox）+ gvim进行书写的，还有了markdown的高亮等等插件。\n[/2014]\n入手Vim 首先我认为你是在Linux下使用vim的，而不是windows。如果是windows，我建议你寻找类似的\n取代方案，或者等着我以后补充。如果给你带来不便了，你来咬我啊～\n当年学习vim的时候遵从诸位大神的理解，跟着vimtutor走了一趟，感觉还是比较不错的。\n最关键的还是自己要多多使用vim，不能停，就算是一开始很不爽，也要坚持使用下去\n第一步是学习vimtutor，这个毋庸置疑。最关键的输入i, 还有移动hjkl记住了就可以了 之后最关键的任务就是不停的用vim，就算是觉得慢也用——当然在慢的过程中要思考如何能快。 学习使用`vimtutor`就是在命令行中输入： `vimtutor` 第一步我个人认为是最难的一步。尤其是度过那一段干啥都很慢，狂点鼠标还用不了的阶段。 然后不是跳到问题3就是跳到本问题了。慢慢发现熟悉的\u0026lt;C-c\u0026gt;（就是Ctrl+c)不能用了，到了Vi m里面变成了终止退出命令了(就像是Esc）（原本也是使用ESC来退出编辑模式的，但是后来发现`\u0026lt;C-c\u0026gt;` 比较快捷，于是就使用他了。（如果你没看懂，重新返回第一步练习）。然后在vim中寻找关于复制， 粘贴的使用方法——至少我是这样。然后就会理解vim中的寄存器的相关信息。 然后就开始找那些可以让自己快速编辑的命令了，比如说w|e|f。我个人比较喜欢f，这个可以让我 快速定位一句话中的一个字母，欲罢不能。`w，e`倒是用的比较少，`b`的位置我不是很喜欢。在这个 过程中大概`d | s | c`这些家伙也慢慢出现了。 再然后就开始发现数字和大写字母的好处了，从小写到大写也是一个慢慢认识的过程，也是不用 记忆到底是如何运作的，只需要看好了出现的位置就行了。用多了自然就会了。 然后习惯了以后就是换行，查找，替换等等操作了。在这个过程中查找用的还是比较多的， 但是替换的命令我就经常忘记如何使用了——没办法，经常忘记。换行更多的使用的是`行号g`，或者 `:行号`然后等等等。 进阶 你也可以直接下载我的配置使用，其中的插件配置可以在一定程度上给出指导。\n都是一步一步过来的但是我也忘记我是怎么走过来的。依然很水，不会的配置上网搜索然后copy到自己的vimrc中。走到进阶就差不多懂得.vimrc为何物——因为可能受不了自己vim中的字体，配色，以及目录——或者括号匹配等等问题。这个时候vimrc的作用就出来了。 这个时候我推荐你使用我的配置，也是基于网络上十分流行的一个版本： git clone http://github.com/Svtter/MyVimrc ./install 如果出现什么问题，参见README.md中的FAQ\n这样就可以安装运行了。出现一个问题很正常，如果不在意就继续使用，在意的话自己百度。出现很多\n问题可能是因为Vundle没有装好，使用\ngit clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\n我是在.vimrc之后才发现的这种神奇的编辑的。分块编辑的确能够极大的提升效率。然后不停 的阅读vimrc吧！然后从help中吸取精华吧！ 下一步我要熟练使用记录模式和正则匹配，以及vimscript的写法等等。希望本文对于想要学习Vim的 你有所帮助。 ","date":"2017-12-15T01:00:00+08:00","permalink":"https://svtter.cn/p/write-with-vim-1/","title":"Write with Vim – 1"},{"content":"这是 Write with Vim 第二部分，如果想要阅读第一部分，请参考：Write with vim - 1\nVim的下一步 对我自己而言，也是在这一步。\n现在你对Vim已经有所了解，hjkl肯定会，f也能熟用，,可能被你映射成了\u0026lt;leader\u0026gt;，或者等等。但是我还是想要写这个blog，来指引新手（诚然，也是指引自己）。\n这个时候，我建议你将Esc映射成ii，然后禁用Esc\n\" 强迫自己不使用ESC inoremap \u0026lt;Esc\u0026gt; \u0026lt;nop\u0026gt; inoremap ii \u0026lt;ESC\u0026gt; 在Write with vim - 1中，记录模式我已经用的比较习惯了（@+寄存器），但是正则表达式用的一般般，仍然需要好好的努力才行。\n想要用好Vim，离不开github 大概更多人喜欢在 http://www.vim.org 上寻找自己心仪的插件，但是我认为还是在github上找更好。为什么？\n因为许多的开源项目都已经在github上扎根，许多优秀的插件都能在github上找到其身影。比如：Nerdtree, YouCompeleteME, airline, etc. 你可以通过github的star数量来判断这个项目的优秀程度。当然，更确切说，是把star做为参考标准之一。 等等优点，想到我再补充。\n使用插件管理器，管理你的插件 我个人比较推荐 Plug\n插件使用git更新插件，将vimscripts分离，控制不同功能的插件可以放在不同的位置，保证了vimrc的整洁。从而提高了个人配置的维护性。\nPlug 是首当其冲的插件，有了他，你会发现更新插件，安装新的插件一切都是那么的简单。\nPlug 的使用方法在 README 里面有，但是如果英文比较差 — 没关系，也能看懂。\n下一步的学习 很多人觉得vimscript学习起来有些困难，这里有份非常好的文档。准确说是翻译。翻译者辛苦了。\nhttp://learnvimscriptthehardway.onefloweroneworld.com/\n","date":"2017-12-15T01:00:00+08:00","permalink":"https://svtter.cn/p/write-with-vim-2/","title":"Write with Vim – 2"},{"content":"这是给“小白”的notebook指南。notebook是算法开发经常使用的工具。\n安装notebook $ pip install notebook 运行notebook $ jupyter-notebook . 在终端下运行这个命令可以启动notebook。\n使用IPython-Notebook 点击右方的New按钮，选择Python3，以此来启动一个新的NoteBook。\n这时会新创建一个文件。\n在In [ ]:后输入要运行的代码，然后点击Run即可运行。例如：\n使用Terminal Terminal就是之前在Windows下的cmd，MacOS下的terminal，点击之后见到这个界面：\n尝试输入python，就可以像之前那样进行命令行编程了。\n","date":"2017-12-15T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/15/%E7%BB%99%E5%B0%8F%E7%99%BD%E7%9A%84ipythonnotebook%E6%8C%87%E5%8D%97/","title":"给小白的IPython Notebook指南"},{"content":"记录一些Ros开发以及学习中的问题\n如何学习机器人 知乎答案 斯坦福大学机器人公开课 以上内容仅供参考；\nTips Ros中Cpp有而Python没有的 Ros 开发相关 ROS可视化 ROS-MoveIT ","date":"2017-12-11T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/11/ros%E7%AC%94%E8%AE%B0/","title":"ROS 笔记"},{"content":"git是一个版本控制工具，通过git我们可以解决许多版本冲突，以及协同开发的问题。\ngit安装 Windows可以通过安装文件直接安装，Linux可以通过apt-get install git安装，OSX可以通过brew install git来安装git。\n初始化当前目录为git项目 $ git init . 这个操作的意思是，把当前项目使用git进行管理。此时会创建一个.git文件夹。\n添加当前文件的改动，并且提交 $ git add . $ git commit -m \u0026#39;update message\u0026#39; 如果修改了文件，文件的变动没有被git记录。这个时候运行上述命令，就可以把变动记录下来。\n推送到远程仓库 $ git push 获取远程仓库的更新 $ git pull 下载git仓库 $ git clone ${仓库的URL} 例如，下载这个项目breastCancer，可以使用如下的命令\n$ git clone https://github.com/Svtter/breastCancer 通过这个操作就可以下载这个仓库。\n可视化当前更新 例如\n点击first commit，即可看到这次提交的相关改动。\n其他的问题 如果出现conflict以及其他的问题，可以通过google自行搜索解决。\n可参考的资料 廖雪峰git教程 ","date":"2017-12-06T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/06/%E5%BF%AB%E9%80%9Fgit%E6%8C%87%E5%8D%97/","title":"快速git指南"},{"content":"本来想用阿里云做vnc来远程一下完成一些事情，但是无奈速度有点慢，而且源还偶尔出问题，update能不能成功完全看脸【经常碰到，没有修改过aliyun的source】。不成功的表现是，apt-get告诉我broken depends，em….\n不过不是很妨碍相关的使用【才怪】。这是官方教程。\n使用vnc在官方的教程上要这样修Xstartup才行。测试环境ubuntu 14.04。\n#!/bin/sh export XKL_XMODMAP_DISABLE=1 unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS [ -x /etc/vnc/xstartup ] \u0026\u0026 exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] \u0026\u0026 xrdb $HOME/.Xresources xsetroot -solid grey vncconfig -iconic \u0026 gnome-panel \u0026 gnome-settings-daemon \u0026 metacity \u0026 nautilus \u0026 gnome-terminal \u0026 ","date":"2017-12-05T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8vnc/","title":"阿里云使用VNC"},{"content":"这篇文章主要聊聊小程序开发。\n小程序开发有几个点在文档里面没有写的很明确，在这里我更明确的提一下。\n带着参数跳转 小程序之间的页面跳转携带参数的小例子：\n\u0026lt;navigator url=\"\" bindtap=\"bindViewTap\"\u0026gt; 这个navigator是一个跳转，绑定了bindViewTap方法。bindViewTap方法实现如下：\nvar bindViewTap = function () { console.log(\u0026#39;run search.\u0026#39;); let location = { x: 1, y: 1 }; let keyword = \u0026#39;test\u0026#39;; wx.navigateTo({ url: `../map/map?latitude=${location.x}\u0026longitude=${location.y}\u0026keyword=${keyword}` }) } 如此一来，便携带着三个参数，就像是网页GET请求一样，跳转到../map/map页面。此时，map页面需要接收这几个参数。示例代码：\nvar onLoad = function (options) { let that = this; console.log(\u0026#39;Map load.\u0026#39;); this.setData({ markers: { latitude: options.latitude, longitude: options.longitude, }, inputVal: options.keyword, init: true }, function() { // 完成函数后回调 that.showInput(); }); } 在Page的OnLoad方法中，可以从options参数里面把传递的值拿出来，在map页面中使用。\n本文后续持久更新。\n","date":"2017-12-02T01:00:00+08:00","permalink":"https://svtter.cn/2017/12/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91tips/","title":"小程序开发Tips"},{"content":"本来觉得这个https不是什么大不了的事情，但是输入密码的时候突然意识到，这个post的过程中是有危险的。危险在哪里呢？我们可以参考mozilla的相关描述。\n在参考了 Mozilla 的描述后，我决定给我的站上一下https。上https的过程比较容易，因为之前一直都是在腾讯云捣鼓，所以直接从腾讯云走的域名以及https，因此可以直接从腾讯云一键申请【当然，还是需要填写一部分步骤】，这里就不再赘述了。另外，补充一下，申请ssl证书，即https必需品，首先需要网站进行审核，审核通过以后，才能直接申请。\n因为我直接使用的是nginx作为前端，因此直接添加了一条server记录：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 server { listen 443; server_name svtter.cn; ssl on; ssl_certificate 1_svtter.cn_bundle.crt; ssl_certificate_key 2_svtter.cn.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / { proxy_pass http://web/; } } 这个地方的域名需要换成自己申请的。其中有一个小坑是，如果你已经配置好http，希望全站都走https，那么要记得在原本的server处，添加一条语句\n1 rewrite ^(.*) https://$host$1 permanent; 如此一来，所有访问你网站的流量就都走https啦~看见小绿锁真开心呀；\n后记 使用https以后，我发现我使用的许多图片并不是https，因此我的网站依然有被篡改的可能性。\n","date":"2017-11-30T01:00:00+08:00","permalink":"https://svtter.cn/2017/11/30/%E5%85%A8%E7%AB%99%E4%B8%8Ahttps/","title":"全站上https"},{"content":"功能列表 这个博客的雏形很早之前就写好了，但是一直没有挂上去，主要有这几个原因：一是写的不好，很多功能都没写全，写的也不太走心；二是长得有点丑，当然，这一点也可以放在功能不全这个问题里面。总而言之，就是不太讲究。这个不讲究还体现在之前的文章Latex适配没做好，等等。\n完成博客的基本功能后，准备向着知识库的方向迈进一下，做成笔记形式的东西。其实做成笔记形式的东西并不难，把接口做好，然后写几个符合自己心意的前端就好了。只不过这时间上可能有点扛不太住，所以现在web方面做点事情，等以后有时间了，再去做别的。可以参考主题。\n关于web 说一点观点，web这个东西随着app的盛行，可能生存空间就像是原来的pc，或者说伴随着pc吧，流量会变得小很多。这也是没办法的事情，虽然不至于被逼死。但是不能说这个东西就不做了，不现实。web会以另一种形式存在，比如说我们喜欢的web-app【微信小程序，支付宝小程序】等等继续存在，当然，还有大家称的h5【react-native】等等。\n现在的公众如果需要什么功能，可能在手机商店先搜索的概率更大一些，这也对某些新型的创业公司提出了挑战。这个事情可能被其他人提出很多次了，可能我发现的有点晚了。\n以后写文章还是要先列个大纲，然后往里面填写内容，写到这里我已经忘记我之前想说什么了。\nweb开发依旧是猛如虎，虽然现在机器学习又炒的很热，我也很不能免俗的投入到机器学习的学习热潮之中。。\n这个博客用的技术 Django，Docker，Bootstrap；以后再添加什么再说。当然，还有SQLite等。\n其中我觉得最有必要吹一下的还是Docker，Docker可能需要耗费你一周的时间进行学习，当然，因人而异，最初的时候我学习这门”技术“大概就是用了一个周的时间，然后就开始了几次测试；最初是因为一些云服务商提供这个东西【免费】我猜逼着自己去学，学了之后发现用的不太好——我觉得这个事情云服务商还是要背锅的，具体我就不点名了，做的真的非常不友好。不如自己去找两本书学习一下，以学习一个虚拟化技术为目标去学习。\n听说最近阿里推出了自己的容器技术，不过我没有精力看——有是的确应该有的。容器的好处就是你可以在本地搞好配置清单，或者抄一份配置清单，然后ssh到服务器上面部署一下，过程非常流畅，很舒服。\n我更喜欢作为什么 我想了一下，我更喜欢作为一个原型开发工程师——这个名词是我自己的发明的，我也没有上网去查查有没有类似的名词。原型开发工程师的意思是做一些人们想要做的东西，但是实现起来没有必要做的非常彻底的东西。原型开发工程师是很痛苦的，尤其是在设计完之后开始写代码的过程。不是说设计完了，这个东西就实现了。\n话说如果人工智能能够做到我设计完就能实现，还不用我非得用一些特别的领域设计语言来做的话，那真是虎的一批啊。\n原型的最好处是不用在一个地方死抠着，做出东西更有成就感，也更容易致富一些。这个地方牵扯手艺的问题。手艺的问题应该作为另一篇博文来讲一下。\n回学校的一些感想 嗯，来读研了。感觉研究生是非常有必要读的，尤其是本身作为二本院校的毕业生，很多知识的宽度与深度都是不够的。搞过的东西听过的课重新搞一遍，感觉是不一样的。对于有些东西实现没有头绪，现在来看看，收获了很多的思路，也把解决许多老旧的问题，感觉自己的开发水平应该又上了一个台阶。应该属于内功的部分吧。\nBUG RSS feed 存在问题【修改文章后会更改文章的时间线】 目录出现小问题 这个博客应该没有多少人关注，阅读量少的可怜。但是如果你有什么想法，可以先发邮件给我。svtter#qq.com。\n","date":"2017-11-27T01:00:00+08:00","permalink":"https://svtter.cn/2017/11/27/%E8%BF%99%E4%B8%AA%E4%B8%8D%E6%98%AF%E5%BE%88%E8%AE%B2%E7%A9%B6%E7%9A%84%E5%8D%9A%E5%AE%A2/","title":"这个不是很讲究的博客"},{"content":"四道做的比较走心的算法题目。\n最接近的数字 题目 一个K位的数N\n$$\n(K\\leq2000，N\\leq10^{20})\n$$\n找出一个比N大且最接近的数，这个数的每位之和与N相同，用代码实现之。\n例如：0050 所求书数字为0104；112 所求数为121；\n算法分析 算法思想 直接暴力求这个数字是不可以的，数字的量级太大，有K位的数字，不可能直接用int，或者float来表示，使用数组来存储。应该分析这个数字，step1，从右边开始的最小位数开始，分解最后一位数字，分解出1来拿给前面的一位。9和0比较特殊，因此从左往右扫描的开始，遇到0就跳过，遇到第一个非0的数字，就把这个数字-1，然后移到最后面去，然后，step2，开始找第一个非9的数字，如果遇到9，就把9放到最后面去，遇到非9，就+1，结束运算。\n一个般的例子：\n1999000 -\u0026gt; 1990008-\u0026gt; 2000899\n要注意一个问题，就是如果是 999000 这种情况，在数字的最开头补1，结果是1000899\n几个刁蛮的数据：29399 -\u0026gt; 29489\n伪代码 array = get_array() # number to char array array.reverse() step1 = true step2 = false zero = 0, cnt = 0; for i : 1 - lengthof(array) if step1: if array[i] is 0: zero ++ else: array[i] = array[i] - 1 if zero \u0026gt; 0: array[0] = array[i] array[i] = 0 step1 = false step2 = true else if step2: if array[i] is 9: if zero == 0: array[cnt+1] = array[cnt] array[cnt] = 9 cnt++ if (i != cnt): array[i] = array[i-1] else: array[cnt + 1] = array[cnt] array[cnt] = 9 cnt++ array[i] = 0 else: i = i+1 step2 = false break if not step2: array[lengthof(array)] = 1 array.reverse() disp(array) 分析时间复杂度O 因为reverse操作，2K，加上最后整理最小数到最前面，最坏情况接近K，3K，在循环中的操作看运气，但是最糟糕的情况也只有5K，所以时间复杂度为\n$$\nO(3K) \\approx O(K)\n$$\n源代码 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; const int MAXN = 3000; char array[MAXN]; int length_of_number; void get_array() { int i; char null; scanf(\"%d\", \u0026length_of_number); scanf(\"%c\", \u0026null); for (i = ; i \u0026lt; length_of_number; i++) { scanf(\"%c\", \u0026array[i]); } scanf(\"%c\", \u0026null); } void reverse() { int i ; char temp; for (i = ; i \u0026lt; length_of_number/2; i++) { // _swap temp = array[i]; array[i] = array[length_of_number - 1 - i]; array[length_of_number-1-i] = temp; } } void run() { reverse(); int step1 = 1, step2 = , i = , zero = , cnt = ; for (i = ; i \u0026lt; length_of_number; i++) { if (step1) { if (array[i] == \u0026#39;0\u0026#39;) { zero++; } else { array[i] = array[i] - 1; if (zero \u0026gt; ) { array[cnt] = array[i]; array[i] = \u0026#39;0\u0026#39;; } step1 = , step2 = 1; } } else if (step2) { if (array[i] == \u0026#39;9\u0026#39;) { if (zero == ) { array[cnt + 1] = array[cnt]; array[cnt] = \u0026#39;9\u0026#39;; cnt++; if (i != cnt) { array[i] = array[i-1]; } } else { array[cnt + 1] = array[cnt]; array[cnt] = \u0026#39;9\u0026#39;; cnt++; array[i] = \u0026#39;0\u0026#39;; } } else { array[i] ++; step2 = ; break; } } } if (step2) { array[length_of_number] = \u0026#39;1\u0026#39;; length_of_number ++; } } void output() { int i; reverse(); for(i = ; i \u0026lt; length_of_number; i++) { printf(\"%c\", array[i]); } printf(\"\\n\"); } int main() { memset(array, , sizeof(array)); freopen(\"input\", \"r\", stdin); get_array(); run(); output(); return ; } 测试结果 使用python生成测试数据进行测试：\n\"\"\" 最接近的数字 \"\"\" import random import os def test(): \"\"\" sample test \"\"\" num = random.randint(, 10000000) sum_of_num = for i in str(num): sum_of_num += int(i) length = len(str(num)) temp_num = num + 1 while(True): sum_temp = for i in str(temp_num): sum_temp += int(i) if sum_temp == sum_of_num: break temp_num += 1 with open(\u0026#39;input\u0026#39;, \u0026#39;w\u0026#39;) as f: f.write(str(length) + \u0026#39;\\n\u0026#39;) f.write(str(num)) res = os.popen(\u0026#39;./ex2\u0026#39;).read() if temp_num == int(res): return [True] else: return [False, num, temp_num, int(res)] all = True for i in range(1000): res = test() if res[] is False: all = False print(res) if all: print(\u0026#39;Pass testing!\u0026#39;) 存在错误的情况：\n通过：\n后期改善优化的地方 reverse 是为了编程方便进行的处理，但是如果数字太大，速度肯定会受影响，这个时候就不要使用reverse了。 用链表来做可以简化代码，减少分析的，更加节省时间 处理移位的时候考虑几个问题 寻找发帖水王 题目 如果“水王”没有了，但有三个发帖很多的ID，发帖的数目都超过了帖子做数的1/4，又如何快速找出他们的ID。\n算法分析 算法思想 从0-n扫描ID数组，记录3个数字的个数，如果出现第四个数字，就把三个数字的个数减少1，如果有一个数字的个数减少到0，那么把新来的数字作为原本三个数字之一进行记录。\n如此一来，扫描完ID数组之后，剩下记录的3个数字的个数便是需要求的三个数字。\n伪代码 array = get_array() count = empty_set() for i in array: if count.full: if i in count: count.i.num ++ else: for j in count: count.j.num-- else count.add(i) disp(count) 分析时间复杂度O 数列的大小为N，记录数字的数组大小为3，每次判断记录数组count是否存在0，以及找到已存在的数字++，都会花费3个单位时间，因此其时间复杂度为\n$$\nO(3n) \\approx O(n)\n$$\n源代码 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define MAXN 5000 int idarray[MAXN]; int cur[3]; // 记录当前元素 int pos[3]; // 记录当前元素个数 // 检查是否在数组内，如果不在数组内，添加进入数组 void checkin(int no) { int i; // 检查是否有空位置 for (i = ; i \u0026lt; 3; i++) { if (pos[i] == ) { cur[i] = no; pos[i] ++; return; } } // 寻找指定数字++ for (i = ; i \u0026lt; 3; i++) { if (cur[i] == no) { pos[i] ++; return; } } // 没有找到重复数字，全部-- for (i = ; i \u0026lt; 3; i++) pos[i] --; } // 输出最后结果 void output() { printf(\"%d %d %d\\n\", cur[], cur[1], cur[2]); } // 主程序 int numberOfArray; void run() { int i; for (i = ; i \u0026lt; numberOfArray; i++) { checkin(idarray[i]); } output(); } void input() { int i; scanf(\"%d\", \u0026numberOfArray); for(i = ; i \u0026lt; numberOfArray; i++) { scanf(\"%d\", \u0026idarray[i]); } } int main() { freopen(\"input\", \"r\", stdin); int groupOfTest; scanf(\"%d\", \u0026groupOfTest); while(groupOfTest--) { memset(cur, , sizeof(cur)); memset(pos, , sizeof(pos)); memset(idarray, , sizeof(idarray)); input(); puts(\"Test running...\"); run(); } return ; } 测试结果 本测试数据采用Python自动生成。\n\"\"\" 寻找发帖水王 \"\"\" import random N = 4000 a, b = (int(N/4), int(N/3)) three_id = random.sample(range(1, 100), 3) three_id_num = {} sum_rand = for i in three_id: temp = random.randint(a, b) sum_rand += temp three_id_num[i] = three_id_num.get(i, ) + temp id_array = [random.randint(1, 100) for i in range(N-sum_rand)] for i in three_id: id_array = id_array + [i for j in range(three_id_num[i])] random.shuffle(id_array) print(\u0026#39;Most three id:\u0026#39;, three_id) print(\u0026#39;Three id num: \u0026#39;, three_id_num) print(\u0026#39;Sum of three_id num: \u0026#39;, sum_rand) print(\u0026#39;---------------\u0026#39;) # print(id_array) with open(\u0026#39;input\u0026#39;, \u0026#39;w\u0026#39;) as f: f.write(\u0026#39;1\\n\u0026#39;) f.write(str(N) + \u0026#39;\\n\u0026#39;) for i in id_array: f.write(str(i) + \u0026#39; \u0026#39;) 后期改善优化的地方 对于N比较小的情况可以在内存中进行查找，但是一旦涉及到更大的数据，这个方法可能就没有那么简单了，不能在内部建立数组，需要一部分一部分的从磁盘中读数； 如果需要查找的id数量变多，那么需要的临时保存的数列可能更大； 这个实现没有使用STL中的map，如果使用map，还能进一步使得代码见解易懂，map使用hash来做内部实现，可以使得面对数据量更大的数据的时候，加快查找数据的速度。 山西煤老板 题目 你是山西的一个煤老板，你在矿区开采了有3000吨煤需要运送到市场上去卖，从你的矿区到市场有1000公里，你手里有一列烧煤的火车，这个火车只能装1000吨煤，且能耗比较大——每一公里需要耗一吨煤。请问，作为一个懂编程的煤老板，你会怎么运送才能运最多的煤到集市？\n算法分析 算法思想 从动态规划的角度求最优解：\n假设起始运送货物量为t，终点路程为s，火车容量为c，可以运抵终点的最多货物量为函数 F(t, s)。\n3种基本情况：\n（1）t \u0026lt; s：货物量不足以运送到此距离，所以F(t, s) = 0;\n（2）s \u0026lt; t \u0026lt; c：火车一次就可以装完货物，所以F(t, s) = t – s;\n（3）2s \u0026lt; c 使得火车一次无法运完，但可以采用往返的方式多次运输，这种情况下最有的方式就是减少总共往返的次数，也就是直接运到终点而不在中间卸货，所以\n$$\nF(t, s) = (t / c – 1) * (c – 2s) + (c – s)\n$$\n可得递归式：\n$$\nF(t, s) = max{ F( F(t, i), s – i)} (1 \u0026lt;= i \u0026lt; s)\n$$\n分析了一下这个方程是有问题的，比如F(1750, 250)会计算出1125；\n所以正确的结果应该对t/c进行处理，也就是说，起点剩余的燃料不足运输到终点，直接舍弃。第三阶段的方程式应该是\n$$\nF(t, s) = (t // c – 1) * (c – 2s) + (c – s) + (t % c – 2 s), if (t%c \u0026gt; 2s)\n$$\n伪代码 begin: if t \u0026lt; s: f[t][s] = elif s \u0026lt; t \u0026lt; c: f[t][s] = t - s elif 2*s \u0026lt; c: f[t][s] = int((t//c-1)*(c-2*s) + (c-s)) if t % c \u0026gt; 2*s: f[t][s] += int(t % c-2*s) else: pre = -2 for i in range(1, s): pre = int(max(F(F(t, i), s-i), pre)) f[t][s] = pre end disp(f[3000][1000]) 分析时间复杂度O 时间复杂度为\n$$\nO(3000*3000)\n$$\n因为每个数字都要计算一遍。\n源代码 \"\"\" 山西煤老板 \"\"\" c = 1000 f = [[-1 for k in range(4000)] for j in range(4000)] for j in range(4000): for k in range(4000): if j \u0026lt; k: f[j][k] = count = 1000 cnt = def F(t, s): \"\"\" dp \"\"\" global count global c global f # count -= 1 # if count == 0: # count = int(input()) t = int(t) s = int(s) if f[t][s] != -1: return f[t][s] if t \u0026lt; s: f[t][s] = elif s \u0026lt; t \u0026lt; c: f[t][s] = t - s elif 2*s \u0026lt; c: f[t][s] = int((t//c-1)*(c-2*s) + (c-s)) if t % c \u0026gt; 2*s: f[t][s] += int(t % c-2*s) else: pre = -2 for i in range(1, s): pre = int(max(F(F(t, i), s-i), pre)) f[t][s] = pre print(t, s, f[t][s]) return f[t][s] print(F(3000, 500)) 测试结果 后期改善优化的地方 去除了一下数据进行加速\n保存f减少重复运算值\n应该有更加简单的方法，类似这种，但是不好解释。\n$$ 3y=1000\\ 5x=1000\\ 解得x+y=200+333=533，因此使得最后一辆火车抵达时节省了533吨煤\\ $$ Facebook 题目 Given a list of words, L, that are all the same length, and a string, S, find the starting position of the substring of S that is concatenation of each word in L exactly once and without intervening characters. This substring will occur exactly once in S.\n算法分析 算法思想 使用hashmap来保存word的hash值，来加快查找速度。（旧）\n直接用hash函数求字符串的hash值，最后求得结果。\n依据公式\n$$\nhash(w_1) + hash(w_2) = hash(w_2) + hash(w_1)\n$$\n伪代码 hash_word_list = list(map(hash, words)) hash_sum = reduce(lambda x, y: x + y, hash_word_list) for i in range(len(sentence)): wl = word_len wlist = [sentence[i+j*wl:i+j*wl+wl] for j in range(words_len)] temp_sum = 0 for k in wlist: temp_sum += hash(k) if temp_sum == hash_sum: print(i) break 分析时间复杂度O 就是字符串长度\n$$\nO(lengthOfS)\n$$\n源代码 #!/usr/bin/env python3 \"\"\" facebook \"\"\" from functools import reduce while True: words = input() # words = \"fooo barr wing ding wing\" words = words.split(\u0026#39; \u0026#39;) word_len = len(words[]) words_len = len(words) hash_word_list = list(map(hash, words)) hash_sum = reduce(lambda x, y: x + y, hash_word_list) sentence = input() # sentence = \"\"\"lingmindraboofooowingdin\\ # gbarrwingfooomonkeypoundcakewingdingbarrwingfooowing\"\"\" # print(words, words_len, word_len, sentence) for i in range(len(sentence)): wl = word_len wlist = [sentence[i+j*wl:i+j*wl+wl] for j in range(words_len)] # print(wlist) temp_sum = for k in wlist: temp_sum += hash(k) if temp_sum == hash_sum: print(i) break 测试结果 测试数据生成意义不是很大，\n后期改善优化的地方 hash尽管在速度上非常优秀，但是在准确度方面，如果出现hash冲突，那么值可能不准确。此时可以利用hashmap来解决这个问题，不过会多出重置hashmap的相关时间。 For n -m – problems Problemset Assume we have a sequence that contains N numbers of type long. And we know for sure that among this sequence each number does occur exactly n times except for the one number that occurs exactly m times (0 \u0026lt; m \u0026lt; n). How do we find that number with O(N) operations and O(1) additional memory?\nAlgorithm ^ is the add operation without carry.\n默认one,two都是0, 即任何数字都不存在\n数字a第一次来的时候, one标记a存在, two不变\n数字a第二次来的时候, one标记a不存在, two标记a存在\n数字a第三次来的时候, one不变, two标记a不存在\n构造这样一种运算，通过异或将数据保存在one和two里面。\nPseudocode def solve2(array): one = 0, two = 0 for i in range(array): one = (one ^ array[i]) \u0026 ~two two = (two ^ array[i]) \u0026 ~one return one, two array = input() _, res = solve2(array) ### Source code\n“`python\n!/usr/bin/env python def solve(array):\none, two = 0, 0\nfor i in array:\none = (one ^ i) \u0026amp; ~two\ntwo = (two ^ i) \u0026amp; ~one\nreturn one, two\nif name == ‘main‘:\narray = input()\narray = array.split(‘ ‘)\narray = list(map(lambda x: int(x), array))\n# print(array)\n_, res = solve(array)\nprint(res)\n“`\nTest #!/usr/bin/env python3 import random def test(): \"\"\" 测试 \"\"\" array = [] n, m = 3, 2 numberofNum = random.randint(100, 1000) record = {} for _ in range(numberofNum): temp = random.randint(10, 10000) while temp in record: temp = random.randint(10, 10000) record[temp] = 1 for _ in range(3): array.append(temp) temp = random.randint(10, 1000) while temp in record: temp = random.randint(10, 1000) array.append(temp) array.append(temp) from run import solve _, res = solve(array) if res != temp: print(\u0026#39;ERROR\u0026#39;) print(array, temp) input() else: print(\u0026#39;Pass: res: \u0026#39;, res, \u0026#39;temp:\u0026#39;, temp) for i in range(50): test() Use python generate data to test.\nDiscussion and improve 如果n不是3，那么需要构造更多的临时变量。\n很长的数组 题目 一个很长很长的short型数组A，将它分成m个长为L的子数组B1，B2，…，Bm，其中每个数组排序后都是递增的等差数列，求最大的L值。\n$$\n例如，A = {-1, 3, 6, 1, 8, 10} 可以分成B_1 = {-1, 1, 3}, B_2 = {6, 8, 10},; L = 3 即为所求。\n$$\n算法分析 首先进行排序，然后开始分三步走。\n统计元素个数 O(n)\n排序 O(nlog(n))\n​\n第一步用来枚举L和m的大小，由题目可知，L * m = 数组的长度。从m为1开始枚举，保证得到的L为最大值。\n第二步搜索为深搜，确定当前子数组的起点和初始步长，使用pos记录当前数组选定的元素。\n第三步枚举，根据起点给定的初始步长，开始枚举步长，如果枚举的步长可以在数组中找到足够的元素，即数字为L，那么记录这种分法，开始枚举下一个起点。如果枚举的步长和起点无法满足条件，回溯到上一个节点，把上一个节点记录的步长+1再一次搜索。当枚举的起点数达到m，即满足要求输出。\n大白话来讲，就是从头开始分原始数组到m个数组中去，排序过后，在前面的每一个节点未被分配的元素，都是子数组起点。如果使用广度优先搜索，即每次都给一个子数组分配一个满足子数组步长要求的数，会导致在最后才发现分配的元素数不满足要求，从而浪费大量时间。\n其中，深度优先搜索还有几个剪枝的技巧：\n当前步长*(L-1)如果超过了数组的最大元素，可以不继续搜索\n如果在给定步长的情况下， 下一个数字的大小超过之前的数字+步长，那么可以不必继续搜索。\n因为数组已经排好序。\n还有其他的剪枝技巧，体现在代码中了。 时间复杂度 n为数组长度，排序的时间为 O(nlogn)，枚举m时间为n，枚举step时间为65536【short跨度】，枚举全部元素时间为n，因此算法的时间上界为\n$$\nO(65536n^2)\n$$\n实际情况下，由于剪枝等操作的存在，应优于这个时间。\n伪代码 leng = len(Array) for m=1 to n: if n % m != 0: continue L = n // m # deep search res, record = findArray(L, m) def findArray(L, m): group = 0 pos = np.ones(leng) record = [] record_start = [] while group != m: step = 0 start = getStart(pos) res, step = 寻找合适的步长(start, step, pos, record, L) if res: 找到了计数 while res is False: 没找到弹出栈，往回找 if 弹出栈为空: 不用找了找不到了 return False, None 源代码 #!/usr/bin/env python3 # coding: utf-8 \"\"\" arrays \"\"\" from __future__ import print_function import numpy as np array = [-1, 3, 6, 1, 8, 10] # array = [1, 5, 9, 2, 6, 10] # array = [1, 2, 4, 5, 8, 9, 13, 14] # array = [1, 2, 4, 7, 11] array = sorted(array) print(array) leng = len(array) maxn = array[leng-1] enable = 1 disable = def findJ(j, step, pos, record, L): \"\"\" 寻找以J为开始，以步长step为开始的数列 \"\"\" class StepError(Exception): pass class MaxException(Exception): pass if pos[j] == disable: return False start = array[j] pre = start record_temp = [] # remember zero try: for step in range(step, 40000): # 把第一个数字记录 record_temp.append(j) pos[j] = disable pre = start if start + step * (L - 1) \u0026gt; maxn: raise MaxException try: cnt = 1 if cnt == L: record.append(record_temp) return True, step for k in range(j, leng): if pos[k] == disable: continue elif pos[k] == enable and array[k] == pre + step: record_temp.append(k) pre = array[k] cnt += 1 pos[k] = disable elif pos[k] == enable and array[k] \u0026gt; pre + step: raise StepError if cnt == L: record.append(record_temp) return True, step except StepError: # 重置标记 for r in record_temp: pos[r] = enable record_temp = [] except MaxException: # 没有合适的step return False, None def findArray(L, m): \"\"\" 寻找数组 \"\"\" pos = np.ones(leng) record = [] record_start = [] group = while group != m: start = while pos[start] == disable: start += 1 step = res, step = findJ(start, step, pos, record, L) if res: group += 1 record_start.append((start, step)) while res is False: try: start, step = record_start.pop() for r in record.pop(): pos[r] = enable group -= 1 res, step = findJ(start, step+1, pos, record, L) except IndexError: return False, None return True, record def divideArray(): \"\"\" 分离数组 m 是分离的数组的个数 L 是分离的数组的长度 \"\"\" for m in range(1, leng+1): if leng % m != : continue L = leng // m res, record = findArray(L, m) def trans(x): return array[x] if res: print(\u0026#39;lenth: \u0026#39;, L) for r in record: temp = map(trans, r) print(list(temp)) return print(\u0026#39;No result.\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: divideArray() 测试 测试样例生成结果未必准确，找了部分的测试样例，可以通过修改代码中array来提现。\n讨论 在记录了起点和步长，应该可以利用这两点推出当前使用了哪些元素，如果空间大小不够使用，可以不适用record记录，如果下一层不满足条件回溯的时候，可以利用起点和步长回推已经使用的元素。 ","date":"2017-11-26T01:00:00+08:00","permalink":"https://svtter.cn/2017/11/26/4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/","title":"4道算法题目"},{"content":"最近做了一部分硬件的工作，重新对C语言的一部分知识进行了学习，发现了之前做算法\n不太注意的部分，补充在这里。\n函数指针 函数指针是指向函数的指针变量。也就是说这个变量里面存的值是函数的地址，在调用\n的时候可以通过变量名来调用。\n通过此方式来声明，调用:\nint max(int x, int y) { return x \u0026gt; y ? x : y; } main() { int b; int (*p)(int, int) = \u0026 max; b = p(1, 2); } 此处的p就是max函数，可以想象为max函数的一个别名\n回调函数 当我们知道函数指针的时候，就可以考虑回调函数了。\n大部分语言都可以进行函数传递，对应在C语言，这种操作都是利用函数指针来做的。\n回调函数f，就是指在调用某个函数的过程中，把f作为一个参数给执行的函数，在当前\n执行的函数中可能重新调用f，一般这个时候f就是回调函数。\n一个样例:\nvoid callme(void) { puts(\"I\u0026#39;m being calling...\") } void wait(void (*callme)(void)) { // do something... callme(); } main() { wait(callme); } 共用体 Struct的样式，但是是几个数据使用同一个内存空间。\n这个东西很有意思，是否不少动态语言都是从这个获取的思路？\n位域 用来限制某个变量所占用的空间大小，width代表多少位，可以在对内存限制以及字节\n对齐的时候多加考虑。\n预处理器运算符 字符串常量化运算符 #\n把一个宏参数转换为字符串常量\n#include \u0026lt;stdio.h\u0026gt; #define test(a, b) \\ printf(#a \", \" #b \", are interesting!\") int main(void) { test(Clang, Cpp); return ; } 标记粘贴运算符 ##\n#include \u0026lt;stdio.h\u0026gt; #define tokenpaster(n) printf (\"token\" #n \" = %d\", token##n) int main(void) { int token34 = 40; tokenpaster(34); return ; } C 错误处理 C语言没有try/catch这些操作，一般函数的处理结果会通过返回值确定。\n","date":"2017-11-26T01:00:00+08:00","permalink":"https://svtter.cn/2017/11/26/c-tips/","title":"C- tips"},{"content":"来自分布在各处的开发tips\n使用nametuple nametuple用来构建只有少数属性但是没有方法的对象，比如数据库条目。\n使用python的时候经常会出现这样的问题，我想构建一个很简单的类来进行测试，但是我不得不书写大量的代码，例如\nclass A: name = None num = None def __init__(self, name, num): self.name = name self.num = num def __str__(self): return '\u0026lt;A\u0026gt; name: {}, num: {}’.format(self.name, self.num) 然后才能进行创建。如果使用nametuples的话，这个例子会变成这样：\nimport collections A = collections.namedtuple(‘A', ['name', 'weight']) 这个时候代码量相对较少。\nPython模仿Bash管道编程 这个用法十分有趣，重载|操作符来完成这个操作。\nPython中的try/except会在各种情况下被使用 def test(): try: print('test start') return except e as Exception: print(e) finally: print('test end') 输出\nIn [2]: test() test start test end Python3 reload模块 \u0026gt;\u0026gt;\u0026gt; import spam \u0026gt;\u0026gt;\u0026gt; import imp \u0026gt;\u0026gt;\u0026gt; imp.reload(spam) \u0026lt;module 'spam' from './spam.py'\u0026gt; \u0026gt;\u0026gt;\u0026gt; 在一些代码进行修改之后，不想要重新打开shell，可以通过imp进行模块的重载，具体的代码如上所示。\nnot not None In [13]: a In [14]: not a Out[14]: True In [15]: not not a Out[15]: False In [16]: a = None In [17]: a In [18]: not a Out[18]: True In [19]: not not a Out[19]: False In [20]: not True Out[20]: False In [21]: not None Out[21]: True In [22]: not False Out[22]: True https://docs.python.org/3/library/pathlib.html 使用 Pathlib 来操作路径相关的字符串\n\u0026lt;未完待续\u0026gt;\n","date":"2017-11-26T01:00:00+08:00","permalink":"https://svtter.cn/2017/11/26/python-tips/","title":"Python-Tips"},{"content":"近日因项目需要，使用ThinkPHP3.1进行开发，记录几个要素。要素文章主要目的是把容易忘记的记录下来。\nThinkPHP习惯性使用一个入口，一般是index.php，后面的路由等跟进。一般情况下，在部署的时候会将这个要素隐藏起来，不直接显示。\n学习方法 ThinkPHP的开发教程，可以参照着文档看。文档看不下去或者描述不详细的地方，可以依据这个教程继续开发。\n关于调试 ThinkPHP中的调试方法比较重要，可以节省许多不必要的麻烦。可以参照这一章节\n记得打开Trace，打开Trace的方法是，在配置文件中加入：\n\u0026#39;SHOW_PAGE_TRACE\u0026#39; =\u0026gt;true, // 显示页面Trace信息 通过Trace可以：\n查看运行状态 输出某个变量的值 来确定程序是否运行正常 函数以及项目库 在项目目录中的Common目录下定义common.php可以定义全局可以使用的函数，例如，可以以此来引入map/reduce等。这个目录下的函数会自动加载。\n时间处理 格式化输出。在ThinkPHP的模板中使用。\n{$time|strtotime|date=\u0026quot;Y年m月d日\u0026quot;,###\ngitignore 针对ThinkPHP给出的gitignore文件。用于忽略提交内容。\n/composer.lock /vendor .idea .DS_Store ./${appname}/Runtime/Cache/ 参考的几个网站 debug ","date":"2017-11-26T01:00:00+08:00","permalink":"https://svtter.cn/2017/11/26/thinkphp%E5%BC%80%E5%8F%91%E8%A6%81%E7%B4%A0/","title":"ThinkPHP开发要素"},{"content":"最近自己重写了一套博客系统，打算把博客和知识库结合起来，做一套强大的玩意儿。\n今天做了一些简单的工作，觉得这个导出hexo文章挺有意思，于是写在这里。\nmarkdown + yaml 这种解析方式没有直接能够使用的，有些markdown文章中缺少---\n也能进行解析，还有几个tag存在问题。**因此为了能够直接使用原本博客中的相关内容，\n直接使用hexo本身的parse来解析，即hexo-front-matter。**\n可以直接从github上面找到对应的API，很简单的粗暴。\n","date":"2017-09-04T01:00:00+08:00","permalink":"https://svtter.cn/2017/09/04/%E5%AF%BC%E5%87%BAhexo%E5%8D%9A%E5%AE%A2/","title":"导出hexo博客"},{"content":"","date":"2017-08-09T01:00:00+08:00","permalink":"https://svtter.cn/2017/08/09/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%9F%9F%E5%90%8D%E8%87%B3svtter-cn/","title":"博客迁移域名至svtter.github.io"},{"content":"Vim的补全插件大体上分4个阵营，如deoplete, completor.vim, YCM, 以及neocomplete。\n在我想写这篇文章的时候，YCM即youcompleteme还认为自己支持了vim8的新特性async，即非阻塞补全那一套东西。这个特性是怎么回事呢？输入的时候补全插件会进行补全搜索，这个时候如果不用新的特性，会造成UI卡顿。\n所以，事实上根据我的测试，作者似乎错误的理解了这个新特性，可以看看工单。\n不过目前没有时间去搞清楚这个问题。因为我直接选择了completor.vim，这个插件完美实现了这个功能。\n未完待续\n","date":"2017-08-06T01:00:00+08:00","permalink":"https://svtter.cn/2017/08/06/vim%E7%9A%84%E8%A1%A5%E5%85%A8%E6%8F%92%E4%BB%B6/","title":"vim的补全插件"},{"content":" 翻译于 https://www.mongodb.com/compare/mongodb-mysql?jmp=docs\n概览 关系型数据库支持企业级应用已经有了十年之久，自从1995年MySQL释出，它已经成为最流行而低成本的选择。但是，在近几年存储以及不同类型数据的爆炸性增长，非关系型数据库，像是MongoDB，现行于市，满足新应用的需求。MongoDB既被用于新的应用，也被用于替代旧的关系型基础设施，或者在原来的基础上增加新的功能。\n什么是MySQL？ MySQL是一个流行的开源的关系型数据库管理系统（RDBMS），由Oracle公司开发，分发，以及提供支持。就像是其他的关系型系统，MySQL通过tables（表）来存储数据，使用结构查询语言（SQL）来管理数据库。在MySQL，你预先定义了你的数据库schema，这个schema基于你的需求，以及设置规则来管理你的tables之间的关系。在MySQL，相关联的信息可能被存储在分离的table中，但是通过JOIN操作来关联。以这种方式，数据复制是最小化的。\n什么是MongoDB？ MongoDB是一个开源的数据库，由MongoDB公司开发。MongoDB以像是JSON样式的文档保存数据，因此，在结构上可以保持多样化。为了快速的查询，通过MongoDB查询语句，相关联的数据被一起保存。MongoDB使用动态schema，意味着你可以不用定义表格，不用定义域，以及他们的数据类型，而直接创建记录。你可以修改记录（我们称之为文档）的结构，只需要简单的添加新的域，或者删除已经存在的某一个。这个数据模型使得你能够更轻松的去展现分等级的关系，保存数组，以及其他更复杂的结构。在一个集合中的文档，不需要有一个相同的域的集合，数据的反规格化是很常见的。MongoDB也为高可用以及高扩展性做了相关设计，包括开箱即用的数据复制以及自动分片。\n术语以及概念 在MySQL中许多概念可以类比到MongoDB。这个表格列出了一些在每个系统中常见的概念\nMySQL MongoDB Table Collection Row Document Column Field Joins Embedded documents, linking 特性比较 像是MySQL，MongoDB提供了一系列丰富的特性以及实用性，而不仅仅是提供简单的键-值存储。MongoDB有一个查询语言，高实用性的第二索引（包括文字搜索以及地理位置的查询），一个用于数据分析的强大的框架集成。通过MongoDB，在已经扩展的情况下，你仍然可以在许多不同类型的数据中使用这些特性，而MySQL不行。\nMySQL MongoDB 丰富的数据模型 否 是 动态的数据表 否 是 数据类型 是 是 地理位置数据 否 是 域更新 是 是 开发者友好 否 是 复杂的事务 是 否 审计 是 是 自动分片 否 是 查询语言 MySQL与MongoDB都有一个丰富的查询语言；一个全面的陈述，可以在MongoDB文档中看到。\n为什么使用MongoDB而不是MySQL？ 任何大小的组织都应该使用MongoDB，因为它可以让创建应用更加快捷，处理多种多样的数据结构，以及在扩展时更加有效的管理应用。\n在MongoDB上面进行开发是很简单的。因为，MongoDB的文档是可以很自然的联系到现代的面向对象的语言。MongoDB删除了复杂的ORM，即对象关系连接层。这个连接层一般把关系型数据库的数据转换成可编程的对象。\nMongoDB的灵活数据模型也意味着，你的数据结构可以和你的商业模型一同进化。例如，schema在MySQL上如果出现改动，经常是以星期为计数单位，而在MongoDB上，只需要几个小时就好了。\nMongoDB内建可扩展性，通过分布式的数据中心。相较于MySQL，MongoDB提供了更高一级的数据的可用性以及扩展性，这是MySQL所不能达到的。当你的开发环境以数据的存储以及吞吐量为瓶颈的时候，MongoDB可以无停机的扩展，以及不需要修改你的应用。相比之下，扩展MySQL经常需要重要的，特定的工程师来进行工作。百度从MySQL迁移到MongoDB来支持他日益增长的商务信息，中国互联网服务巨人，通过MongoDB集群，现在支持着100多个应用，以及管理了1PB多的数据。\n有哪些使用MongoDB的用户案例？ MongoDB是一个多用途的数据库，可以被用到各种使用案例中。那些最出名的案例包括：单一浏览，物联网，移动，实时分析，个人，目录，以及内容管理系统。\n什么时候MySQL更好一些？ 当大多数系统需要一个灵活的可扩展的系统，像是MongoDB的时候，仍然有一些地方使用MySQL更好一些。\n应用需要复杂的多行的事务（比如，一个双重认证的借书系统）将会是一个很好的例子。MongoDB不是为了替代那些使用关系型数据库以及SQL的常规应用。\n一个更加具体的例子是，一个在旅游预订系统背后的预订引擎，它包括典型的复杂的事务。当预订引擎放MYSQL上面的时候，那些与用户相关的——为内容提供服务，与社交进行聚合，管理sessions的部分，最好使用MongoDB来进行替代。\nMongoDB和MySQL能够一起工作吗？ 有许多将MongoDB与MySQL混合开发的例子。在一些案例中，选择重要的工具进行工作是必要的。例如，许多电商应用使用MongoDB与MySQL的混合。商品目录，那些包括许多不同种商品，且拥有许多不同属性的例子，就是MongoDB利用其数据灵活性的好去处。从另一个角度说，结算系统，包括复杂逻辑，最好是使用MySQL数据库或者其他关系型的技术。\n翻译到这里感觉已经大体上足够了。\n","date":"2017-07-26T01:00:00+08:00","permalink":"https://svtter.cn/2017/07/26/mongodb%E4%B8%8Emysql%E6%AF%94%E8%BE%83%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91/","title":"MongoDB与MySQL比较【翻译】"},{"content":"翻译了关于Meteor指南[tutorial]的部分似乎还不是很够，打算再翻译一下Meteor-guide的相关部分\n","date":"2017-07-25T01:00:00+08:00","permalink":"https://svtter.cn/2017/07/25/meteor%E6%8C%87%E5%8D%97%E7%BF%BB%E8%AF%91/","title":"Meteor指南翻译"},{"content":"Atom因为总是需要代理来下载插件的原因，又被放弃了。一个新技术在中国的freelancer中收不收欢迎，似乎很大程度上取决于，这个东西下载的速度；很明显，Atom存在下载速度问题，然而vscode不存在；在技术栈很相似的情况下，vscode的书写体验十分的流畅，远远超过了atom，甚至不加插件的vim；\n通过廖雪峰的安利我使用了vscode。一个现代的编辑器，在我看来，似乎只有那么几件事情需要注意下，既可以很愉快的开始使用了。\n开始 在vscode的欢迎使用里面，我们可以看到一个很大的“自定义”部分，在其下面，可以看到工具与语言，安装键盘快捷方式等选项；这个时候，安装你需要的语言，以及你需要的快捷方式即可。\n类似的，在atom里面，也有相同的页面\n如果不走上面的部分，可以按照我所想的，走这个下面的通用流程：\nvi-bind 放在第一点的就是vim按键的相关绑定；基本每一个编辑器都会有一个vim的绑定插件；在vscode上面，你只需要在右方package里面找到他，\n然后下载使用就可以了。我们可以看到许许多多的emulation来实现vim在vscode里面的相关操作，不过就我而言，使用官方的这个·vim·插件，\n就足够使用了。\n安装相关的语言 然后就是搜寻相关语言的软件包；让我们搜索一下python和js。这个时候可以先学习一下cmd+p这个东西，或者是shift+cmd+p，这两个一方面是用来呼叫出命令，另一方面可以快速跳转文件。一般情况下，还可以跳转function。类似的东西，例如vim里面的ctrlp，sublime里面的ctrl-p等等。\n命令行入口 每一个工程都应该有一个命令行入口，用来调试相关的命令；虽然这在yin看来，是一个非常吃人精力，而且不讨好的设计，但是我觉得还算不错；一个比较成熟的编辑器都有这一部分；使用shell的时候，只需要从cmd+p或者shift+cmd+p里面输入终端就好了。\n最后 使用一个新的编辑器并不是一件困难的事情。Vim以及Emacs的确很强大，但是在配置的过程中毫无疑问的会占用许多时间，这些时间在我看来，很多时候都不一定是必要的。除非需要对于某个特性进行细细的定制，否则不需要研究的那么透彻。M$无论是编辑器还是IDE，都可以说是无可挑剔，为什么不尝试一下新的东西呢？\n","date":"2017-07-21T01:00:00+08:00","permalink":"https://svtter.cn/2017/07/21/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E7%BC%96%E8%BE%91%E5%99%A8/","title":"快速上手编辑器"},{"content":"问题引出 方才阅读es6的时候遇到一个问题：\n问题解决 这就想了，如果没有let关键字，我们如何处理这个问题呢？\n此时就涉及到一个概念，闭包 clojure。\n不要被这个复杂的名词欺骗了，就是函数套函数，函数返回函数而已。解决这个问题关键在于\n块级作用域和函数作用域的理解；在Javascript中，并不支持块级作用域，它只支持函数作用域，\n而且在一个函数中的任何位置定义的变量在该函数中的任何地方都是可见的。\n因此，我们在Js这个特性的基础上，使用闭包，然后就可以解决这个问题了：\n为什么要解决这个问题？因为有时候在for循环中使用回调可能与参数i有所联系，可能会遭遇到\n问题；\n当然，如果使用es6这种问题就不会发生了。es6大法好。\n","date":"2017-07-20T01:00:00+08:00","permalink":"https://svtter.cn/2017/07/20/javascript%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/","title":"Javascript中变量的作用域"},{"content":"在使用hexo的主题的时候，许多人经常把主题fork到自己的repo，对我而言，这是没有必要的。\n一般情况下，我不需要修改很多关于主题的内容，只需要改改配置文件就可以了，但是每次\n更新，git pull的时候都提示需要提交自己的修改，这个时候应该怎么做呢？\n使用git stash git stash的作用是，保存当前的工作进度，此外会分别对暂存区和工作区的状态进行保存。\n我们此时保存的状态，就是我们修改的_config.yml。\n如此一来，我们使用git stash进行保存，这样，repo的状态返回到最近的一次提交；此时，\n进行版本更新即可，我们就可以在没有修改_config.yml的情况下更新我们的主题。\n如何恢复 但是现在问题也出现了，我们既然保存了，如何恢复呢？此时，使用git stash pop命令，\n我们就可以恢复最新保存的工作进度，并且将恢复的工作进度从存储的工作进度列表中清除。\n此时，我们进行的修改，就可以重新作用于_config.yml文件上。不过一般情况下，会出现\n几个conflicts，我们手动修改一下即可。\n为什么不直接commit 如果commit了自己的改动，再进行pull的时候，如果出现了不能auto merge的冲突，会很难受，\n需要fetch然后手动进行处理。\n而且一旦commit，难免auto merge，我们的代码就会领先origin repo一个commit，\n在拉取代码时会造成不必要的麻烦。\n","date":"2017-07-16T01:00:00+08:00","permalink":"https://svtter.cn/2017/07/16/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%BB%E9%A2%98/","title":"如何更新自己的主题"},{"content":"BaaS，是Backend as a Service，即后端即服务。\n在使用BaaS时，可以减少许多因对后端本身不擅长而增加的创业成本。\n在我司，噗嗤，的小程序中，大部分使用的都是BaaS的解决方案。一方面，公司的人手不是\n很足，没有太多精力去开发后端的相关部分；另一方面，开发后保证后端持续服务，以及\n相关的可靠性，都是不能保证的。所以baas是一个非常好的方案。\n目前就使用过两个baas，一个是bmob，一个是leancloud；leancloud似乎是有腾讯背景的\n企业，而bmob则是一个老牌的服务商。两个相对都比较优秀，bmob便宜【噗】，leancloud在\n文档以及多语言支持上面做的更好【有python】，可以说是不分伯仲。\n创业过程中，应该讲究精益创业等【参见南京大学《走进创业》】，把精力集中于整个产品\n的最关键的部分，而不是事事躬亲，导致精力分散，本应该做好的事情没有做好。\n…EOF…\n","date":"2017-07-12T01:00:00+08:00","permalink":"https://svtter.cn/2017/07/12/%E5%AF%B9baas%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/","title":"对BaaS的一些思考"},{"content":"单元测试十分的重要，简单说一下微信小程序中的单元测试\n…待续…\n","date":"2017-07-09T01:00:00+08:00","permalink":"https://svtter.cn/2017/07/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/","title":"单元测试"},{"content":"这两天做数据采集的时候，发现直接获取的数据文件太大了，保存起来占用内存太多，\n手机端又不需要这么大的内存。\n于是在网上简单搜搜，经过修改制作了一个简单的脚本。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python # -*- coding: utf-8 -*- # vim:fenc=utf-8 # # Copyright © 2017 xiuhao \u0026lt;xiuhao@xiuhaodeMacBook-Pro.local\u0026gt; # \u0026#34;\u0026#34;\u0026#34; \u0026#34;\u0026#34;\u0026#34; import os import glob from PIL import Image import os.path # 测试代码 rootdir = \u0026#39;./canteen\u0026#39; saveDir = \u0026#39;./canteen-new\u0026#39; def convertjpg(jpgfile, savedir, width=5000, height=4000): \u0026#39;\u0026#39;\u0026#39;修改图片文件大小jpgfile：图片文件；savedir：修改后要保存的路径\u0026#39;\u0026#39;\u0026#39; img = Image.open(jpgfile) new_img = img.resize((width, height), Image.BILINEAR) new_img.save(os.path.join(savedir, os.path.basename(jpgfile))) def modifyjpgSize(file, saveDir): \u0026#39;\u0026#39;\u0026#39;查找给定路径下图片文件，并修改其大小\u0026#39;\u0026#39;\u0026#39; for jpgfile in glob.glob(file): convertjpg(jpgfile, saveDir) for parent, dirnames, filenames in os.walk(rootdir): for filename in filenames: fullname = os.path.join(parent, filename) modifyjpgSize(fullname, saveDir) ","date":"2017-07-07T01:00:00+08:00","permalink":"https://svtter.cn/2017/07/07/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/","title":"批量修改图片大小"},{"content":"Docker是一种强大的DevOps工具，使用其无论是作为开发环境还是生产环境，但是非常\n好的选择；在这篇文章中，讲讲Docker的几个开发Tips。\n几条命令安装Docker $ curl -fsSL get.docker.com -o get-docker.sh $ sudo sh get-docker.sh 使用多个基础镜像 作为Python开发者，经常需要使用pip来构建安装包，等待pip安全的过程可谓是又臭又长，\n而且一个不小心，如果在没有使用pip.conf的情况下，安装失败，docker又要重新跑一次，\n十分的麻烦。下面给出的解决方案不一定是最好的，但是应该是比较有效的。\n比如，我在构建某个Python项目的时候，会创建一个python-base的image，tag使用当前\n项目名称。\n这个python-base就是基础镜像之一：\nFROM dockerxman/docker-ubuntu:latest MAINTAINER Svtter \u0026lt;svtter@qq.com\u0026gt; RUN apt-get update\\ \u0026\u0026 apt-get install python3-pip supervisor -y COPY ./requirements.txt /app/requirements.txt COPY ./pip/pip.conf /root/.pip/pip.conf RUN pip3 install -r /app/requirements.txt RUN rm -rf /var/lib/apt/lists/* 介绍一下这个Dockerfile；在第一行，我使用的是一aliyun源的ubuntu镜像，来加速\napt的过程，然后，把pip相关的配置复制到image中，最后，使用pip安装需求文件，\n清理缓存，然后这个基础镜像就构建好了。\n创建自己的项目 FROM python-base:school MAINTAINER Svtter \u0026lt;svtter@qq.com\u0026gt; COPY ./fleetness /app WORKDIR /app COPY supervisord.conf /etc/supervisord.conf WORKDIR /log CMD supervisord -c /etc/supervisord.conf STOPSIGNAL SIGINT EXPOSE 5000 此处就是这直接利用已经构建好的python-base:school的镜像，这样一来，每次我更新\n代码，或者supervisor的配置，只需要重新构建这个镜像就可以了。在这个镜像中，没有\n安装其他软件包的过程，因此节省了大量的时间。\n此外，如果只需要更新代码，而依赖相对不改变的时候，可以通过挂载代码到VOLUME中，\n每次更新代码，都通过git pull，然后重启一下镜像，就可以重新部署了。\nDocker 构建Python镜像的一些技巧 使用pip快速 http://blog.csdn.net/lambert310/article/details/52412059\n一条命令搭建LAMP 这条命令创建一个apache-php服务器，服务于8087端口。\n$ docker run --rm -p 8087:80 -e ALLOW_OVERRIDE=true -v ${项目的绝对路径}:/var/www/html tutum/apache-php ","date":"2017-07-07T01:00:00+08:00","permalink":"https://svtter.cn/2017/07/07/%E4%BD%BF%E7%94%A8docker%E7%9A%84%E4%B8%80%E4%BA%9Btips/","title":"使用Docker的一些Tips"},{"content":"简单翻译了一下Meteor指南，网址在: https://www.gitbook.com/book/svtter/meteor_tutorial/details\n翻译完之后心情很复杂，虽然我没有看过ruby on rails的相关代码，但是根据之前的了解，可能是在Javascript上的一个相似的东西，这种东西实现出来的产品，可能拓展速度很快，但是重写以及拓展方面，可能有些麻烦。\n这两天看了Winter论战，怎么说呢，就是大神撕逼，小鬼看技术讨论。倒是学了一些东西，最大的启发就是，我现在用Python开发点前面的东西，问题不大。还有就是如果用Meteor，尤其是这种新的ddp协议，是不是就和SEO无缘了呢？\n此外，中国大学MOOC的走进创业（南京大学）课程，讲的真是不错，仅仅是看了一部分，就收获颇丰了。\n","date":"2017-07-06T01:00:00+08:00","permalink":"https://svtter.cn/2017/07/06/%E7%BF%BB%E8%AF%91%E4%BA%86meteor/","title":"翻译了meteor"},{"content":"贴一段代码：\n这段代码分别是用协程与生成器写的；\n#!/usr/bin/env python # -*- coding: utf-8 -*- # vim:fenc=utf-8 # # Copyright © 2017 xiuhao \u0026lt;xiuhao@xiuhaodeMacBook-Pro.local\u0026gt; # \"\"\" \"\"\" import time def loop(): ser = \"test\" command = \u0026#39;\u0026#39; print \u0026#39;[loop] run loop...\u0026#39; while True: command = yield ser if command == \u0026#39;\u0026#39;: print \u0026#39;[loop] run something...\u0026#39; elif command == \u0026#39;change\u0026#39;: ser = \"[loop] test_change\" else: ser = \"[loop] stop\" break yield ser def control(l): l.send(None) n = while n \u0026lt; 5: n = n + 1 time.sleep(1) ser = l.send(\u0026#39;change\u0026#39;) print \"[control] ser:\", ser ser = l.send(\u0026#39;stop\u0026#39;) l.close() print \"[control] ser:\", ser def loop2(): ser = \"test\" command = \u0026#39;\u0026#39; print \u0026#39;run loop...\u0026#39; o = control2() while True: command = next(o) # print \u0026#39;[loop2] command: \u0026#39;, command if command == \u0026#39;\u0026#39;: print \u0026#39;[loop2] run something...\u0026#39; elif command == \u0026#39;change\u0026#39;: ser = \"[loop2] test_change\" print ser else: ser = \"[loop2] stop\" print ser break def control2(): n = while n \u0026lt; 5: n = n+1 time.sleep(1) ser = \u0026#39;change\u0026#39; print \"[control2] send: \", ser yield ser ser = \u0026#39;stop\u0026#39; yield ser if __name__ == \u0026#39;__main__\u0026#39;: # l = loop() # control(l) # print \u0026#39;--------------------\u0026#39; loop2() 协程这个特性相比仅仅使用生成器，有一个很神奇的地方，就是多出一个Send方法，将\nyield这个操作返回值，使得生成器可以接收数据，并将这个数据通过yield返回生成器\n内部。通过这个方法，可以比较巧妙地把一些参数扔进已经处于循环状态的函数，而不\n需要使用别的类似于signal的变量，十分方便。\n","date":"2017-06-15T01:00:00+08:00","permalink":"https://svtter.cn/2017/06/15/python%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E5%8D%8F%E7%A8%8B/","title":"python生成器与协程"},{"content":"logging 是 python 自带的日志模块，用于收集并且导出日志。\n要想使用好logging，需要明确几个概念：\n1. logger logger 可以理解成输出日志的核心变量。 通过 logger，可以输出 warning, info, debug, critical 等类型的日志。\n2. handler handler 处理器，是把内存中 logger 的日志导向不同的输出。 例如文件、邮件、stdout 等。\n3. formatter 用于规范化日志的结构，补充日志的元信息。\n4. filtter 用于 logger 中日志的过滤。\n","date":"2017-06-09T01:00:00+08:00","permalink":"https://svtter.cn/2017/06/09/python-logging%E6%A8%A1%E5%9D%97/","title":"Python-logging模块"},{"content":"这两天做微信小程序赶个潮流，体验了一下回调——之前一直听人讲“回调地狱”，这次终于\n亲身感受了一下。的确是“地狱”。\n不过既然能够出现“回调地狱”，也必然有人可以避免，甚至在一定程度上解决这个问题。\n回调地狱解决方法\n一般情况下，我不怎么写回调的代码；一方面是因为没有这个习惯，之前写算法题目，基\n本上不写回调——不过行文至此，突然想起许多题目都有用回调从而更加优雅解决的方案，囧。\n再贴一篇c++的函数传递\n本以为Java不存在回调地狱，也就不存在回调——询问之后，才意识到Java之所以不存在回调\n地狱，是因为Java本身要用回调，需要传类作为参数；一方面，如果使用回调，会使得代码\n变长；另一方面，尽管代码变长，但是相比较简短的代码，问题描述的更加清晰明确。\n这可能就是为什么Js被称为玩具语言的原因之一吧。\n回调函数的优势：\n当程序跑起来时，一般情况下，应用程序（application program）会时常通过API调用库里所预先备好的函数。但是有些库函数（library function）却要求应用先传给它一个函数，好在合适的时候调用，以完成目标任务。这个被传入的、后又被调用的函数就称为回调函数（callback function）。 作者：no.body 链接：https://www.zhihu.com/question/19801131/answer/27459821 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 然后讲讲Python：\n一个Python异步回调的例子 一个阻塞回调 异步编程同步化 最后一个才是最酷的。\n","date":"2017-06-08T01:00:00+08:00","permalink":"https://svtter.cn/2017/06/08/callbackhell/","title":"CallBackHell"},{"content":"今天花了不少时间在openwrt上（实际上是全都花在上面了），从一开始的写入到最后终于能跑；\n因为手头没有可用的路由器，只能通过无线连接以及网线来调试，IP设置上的问题吃了不少苦头，\n最后一个个排查终于解决了问题。\n安装 我这里的设备是RaspberryPI 3B；对应的openwrt的下载链接，只有8M，解压缩后有300M，很神奇，估计是IMG里面有不少00；\n配置 配置上参考了几个博客：\nhttp://sh.alynx.xyz/posts/2016/06/28/RPi-Router/ 一个H3C https://github.com/ruijanlee/h3cc 树莓派3 刷openwrt https://my.oschina.net/wangandi/blog/687389 ss http://www.wzero.net/?p=137 关于ipsec 在网上没有搜索到现成的配置，今天已经比较累了，如果明天有时间再看吧。\n","date":"2017-06-06T01:00:00+08:00","permalink":"https://svtter.cn/p/%E4%BD%BF%E7%94%A8-openwrt/","title":"使用 OpenWRT"},{"content":" vim 真香 2018-08-27\nVim大大小小也算是用了3年了，中间也尝试过不少IDE，从爽度上讲，Visual Studio绝对是最令人舒爽， 愉快的。不过，Windows本身的体验太差——对bash的支持太差；朋友win经常死机；因此不太喜欢用vs。 此外，vs收费，手头没钱。因此，决定使用Atom来做下一步的开发。\n为什么不用Vim了 Vim搭配python-mode的确是能带来不错的书写体验，但是因为Vim本身功能需要自己来写， 而vimscript在我这里着实不好用，学习起来虽然不能说有很大的难度，但是不同插件之间的调整， 以及出现小问题闪现而过得debug信息【输入:message来查看】等等，都不是很舒服。\n此外，我的Vim插件很多，运行速度已经受到比较大的影响，代码跳转速度都有些慢，体验着实不好；\n转到Atom Atom和Sublime比较了一下——虽然Sublime拥有用Python写扩展的优势，但是因为收费，而且我不认为这 个软件能让我心甘情愿的为其掏腰包，所以就干脆放弃了。选择了Atom。VsCode因为是微软家的东西，道理 上讲应该很棒，但是因为在开源开发者那边，大家可能不喜欢微软的一些做派，所以一些大牛不喜欢给微软 开发插件——因此最终决定转移到Atom。\n此外，代码补全功能上，Atom的体验实在是太棒了！\n使用Atom不需要额外学习什么，直接打开设置，找到install，安装packages即可。\n一个插件列表 autocomplete-python python的自动补全 file-icons 不动脑子就安装了，图标好看 linter-flake8 python的语法检查 Python的东西可以对应的找到其他的语言对应的package；\nminimap 代码小地图 symbols-tree-view 相当于tagbar，看所有的方法以及变量 vim-mode 最关键的，以Vim的方式编辑文件 last-cursor-position 返回上个编辑的位置，ctrl-o 还有multicursor之类的插件，我一般写的时候是不用的，直接用:%s来做替换。Atom上我目前还不是特别 需要这个功能，可以直接考虑cmd + f来代替；需要的时候我会直接去找。\n配置插件镜像服务 几个有用的快捷键 cmd + , 打开设置 cmd + R 打开文件中的方法 cmd + T 打开项目中的文件 cmd + shift + p 相当于sublime中的ctrl+p ctrl+0 焦点转移到目录 cmd + / 注释 cmd + 数字 跳转Tab cmd + w 关闭tab【操作方法与chrome很相似】，可以直接参考chrome的快捷键 update at 2023-08-29 我现在在使用vscode.\n","date":"2017-05-30T01:00:00+08:00","permalink":"https://svtter.cn/2017/05/30/%E4%BB%8Evim%E8%BD%AC%E5%88%B0atom/","title":"从Vim转到Atom"},{"content":"UART串口编程发送接收上使用pyserial，数据处理使用struct\nstruct廖雪峰 Python使用struct处理二进制 用C语言 一般情况下，有了struct就不需要使用C语言写Python扩展了，但是实际上使用C语言在处理一些情况的时候会更方便一些，因此一个比较好的选择是，用C写模块，然后用Python调用。\n","date":"2017-05-15T01:00:00+08:00","permalink":"https://svtter.cn/2017/05/15/pythonuart%E7%BC%96%E7%A8%8B/","title":"python UART编程"},{"content":"我是依据Docker — 从入门到实践来进行Docker学习的，其中有部分有趣的内容不包括在里面。学习的话参考这本书就非常不错，基本一本就都搞定了。\n不过，道理上讲，官方的API是最好的。\n我的问题清单：\n单独更新compose中的container Docker-compose常问问题 ","date":"2017-05-10T01:00:00+08:00","permalink":"https://svtter.cn/2017/05/10/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"Docker学习笔记"},{"content":"Common Lisp这门语言是我在大学中感觉第二难的编程语言——第一是汇编，我直到现在都不想碰它。\n难在何处？第二章开始，一般语言断断续续看，一周也就看完了。但是common lisp，看了足足一个月——可能也是因为接触起来比较困难，屡次夭折我学习其的兴趣。据说，学了lisp的人都“疯”了，比如冰河先生，王垠先生等。但是对于一个Hacker来言，我想这更加大了这门语言魅力。（注：这个地方的因素有很多；本身lisp是不难的，入门的方式很重要。）\n在书写代码的时候，总有种感觉，这个地方如果可以这么实现，那么真是爽之又爽。仔细想想，lisp这种加上'就转变的特性，就是人们所说的lisp可以自己写lisp程序，也就是类似于Java中的反射思想，这十分的诱人。但是相比较lisp，Java以及其他语言想要实现这个特点，可能要写很多代码——这就不符合一个懒人的特点，同样，写的代码越多，出bug的几率越大。\n想到多少就大概写多少。过去的几天，发现自己突然对于lisp有了更高的理解，对于设计模式【噗嗤】以及lisp函数编程的一些特性也有摸到门框的感觉，十分开心。于是写这篇不足以称为“文章”的博客来略表自己开心的心情。\n此后，这篇文章中更新学习笔记的内容\n发现scheme更适合商业化；同时学学\n","date":"2017-04-28T01:00:00+08:00","permalink":"https://svtter.cn/2017/04/28/%E5%85%B3%E4%BA%8Ecommon-lisp/","title":"关于Common-lisp"},{"content":"多说马上就关闭了，静态站的评论系统何去何从。\n首先想要分析一下duoshuo的代码，看看自己能否实现。\n不过，在看duoshuo客户端代码的时候没有搞明白到底是如何实现确认目标来源的。\n\u0026lt;!--多说js加载开始，一个页面只需要加载一次 --\u0026gt; \u0026lt;script type=\"text/javascript\"\u0026gt; var duoshuoQuery = {short_name:\"您的多说二级域名\"}; (function() { var ds = document.createElement(\u0026#39;script\u0026#39;); ds.type = \u0026#39;text/javascript\u0026#39;;ds.async = true; ds.src = \u0026#39;http://static.duoshuo.com/embed.js\u0026#39;; ds.charset = \u0026#39;UTF-8\u0026#39;; (document.getElementsByTagName(\u0026#39;head\u0026#39;)[] || document.getElementsByTagName(\u0026#39;body\u0026#39;)[]).appendChild(ds); })(); \u0026lt;/script\u0026gt; \u0026lt;!--多说js加载结束，一个页面只需要加载一次 --\u0026gt; 似乎是自己生成生成一条Javascript代码，然后把head以及body加在上面，进而出一个界面。\nembed.js就没有再看，好麻烦。\nisso 在网上寻找一个合适的开源评论系统isso，可以自己搭建在主机上，使用Python+SQlite3实现。具体实现在其开源的代码中。\n涉及到的知识有几个，一个是CORS，另一个还是CORS。\n个人认为知识储备基本有了，但是如果要写还是很麻烦，于是就暂且弃坑了。\n可以通过这个docker来部署wonderfall/isso，不过感觉docker-compose似乎存在问题，我无法直接挂载./config:/config，因此对于domer-compose中做此修改...../config/isso.conf:/config/isso.conf。\n此外，对于Flask实现这个留言系统，可以考虑通过flask-cors来实现。\n","date":"2017-04-25T01:00:00+08:00","permalink":"https://svtter.cn/2017/04/25/%E8%B7%A8%E7%AB%99%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","title":"跨站评论系统"},{"content":"黑客与画家真是一本比较不错的书，点明了我许多朦胧的想法，也带来了很多新的思路。\n就算是无法成为一个真正的成功者，成为一名合格的黑客也是不错的。话不多，来点摘录。时间间隔较长，\n有时间再把相应的感受夹在其中。\n一部分原因是，青少年在心理上还没有摆脱儿童状态，许多人都会残忍地对待他人。他们折磨书呆子的原因就像拔掉一条蜘蛛腿一样，觉得很好玩。在一个人产生良知之前，折磨就是一种娱乐。\n如何制作viaweb 与用户直接对话的一些大型应用程序、被这些大型程序使用的程序、常驻后台报告系统出错的程序、重新启动出错部分的程序、生成统计报告或数据库索引的程序（偶然运行）、回收资源或者移动及恢复数据的程序（手动运行）、伪装成用户的程序（为了测试系统和发现bug）、诊断网络故障的程序、完成备份的程序、对外提供服务界面的程序、实时显示服务器状态和访问数据的程序（很受用户欢迎，对我们也是必不可少的）、修改后的开源软件程序（包括修正bug）以及许许多多的配置和设定文件。\n你在害怕什么？ 一件是你不懂得管理企业，另一件是你害怕竞争。可是实际上，这两件事都是没有通电的电篱笆。\n此外，将公司管理视同软件优化还能帮助你避免VC担心的另一个陷阱——开发某种产品的时间过长。现在，黑客都已经熟知这一点，并总结出一个术语“过早优化”（premature optimization）。尽快拿出1.0版，然后根据用户的反映而不是自己的猜测进行软件优化\n让书呆子保住他们的血汗钱，你就会无敌于天下。\n什么是贫富差距 技术的发展加大了贫富差距，这是不是一个社会问题？好像没有那么严重。技术在加大收入差距的同时，缩小了大部分的其他差距。\n贫富差距在人们无法温饱的时候尤为明显，但是在衣食足无特权的时候呢？\n黑客们在想什么？ 黑客改造语言的乐趣就好比外科医生摆弄病人内脏的乐趣，或者青少年喜欢用手挤破青春痘的那种感觉。至少对男生来说，某些类型的破坏非常刺激。针对青年男性读者的Maxim杂志每年出版一本特辑，里面一半是美女照片，另一半是各种严重事故的现场照片。这本杂志非常清楚它的读者想看什么^。\n爆发的用户增长到底怎样？ 用户是一把双刃剑。他们推动语言的发展，但也使得你不敢对语言进行大规模改造。所以，一开始的时候要精心选择用户，避免使用者过快增长。发展用户就像一种优化过程，明智的做法就是放慢速度。一般情况下，用户比较少意味着你任何时候都可以加大修改的力度。这时，对语言规格做出改变就像撕绷带，当你感到痛苦的一瞬间，痛苦就已经成为了回忆。如果用户数量庞大，修改语言带来的痛苦就将持续很长时间。\n","date":"2017-04-21T01:00:00+08:00","permalink":"https://svtter.cn/p/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E8%AF%BB%E5%90%8E/","title":"《黑客与画家》读后"},{"content":" IPython6.0 版本更新，已经不支持Python2的相关版本，以及Python3.3以下的版本。赶紧升级吧！\n","date":"2017-04-21T01:00:00+08:00","permalink":"https://svtter.cn/2017/04/21/ipython%E5%AD%A6%E4%B9%A0/","title":"IPython学习"},{"content":"前几天向英明要了他的博客地址，学习了一番。看其博客内容充实，再看自己现在博客的空虚，遂感觉应该把之前的博客内容重新发布到自己的新博客中。如果自己有一定的能力，务必要让自己展现出来。\n看阮一峰的博客，其中说的三个阶段都已经经历了——虽然技术似乎没有到达那个层次，但是阶段着实经历了——使用hexo，虽然不能在自己的站的基础上做提升，但是简便性方面，实在优势是太大了。因此，博客就作为一个写文章的地方，如果需要，在js的层面上做做拓展——如果不需要，任它去吧，自己还有几个不错的想法想要去实现。通过那些想法来做实践，比博客似乎更加贴近工业。\n还有九日的博客。看了看未来游戏大拿最近的书单——真是一个踏实的男人，向他学习。自己也应该继续从书单上斩书了，且过了这个阶段，有时间再做吧。\n斩书，是真的从本质上对自己作一个提升——私以为造轮子的人，总比用轮子的人高超一些。这句话说出来又感觉好像哪里不对（笑），以后探讨一番。\n如何放松 前几天萌生这么一个想法，在休息，娱乐的时间学习技术，放松脑袋，岂不是一个双赢的策略？——后来看，似乎实践起来有难度。学习技术（新的语言，新的概念）并不能使我放松下来（笑，还是参与到健康向上的集体活动中去，才是有裨益的放松方式。\n父母所认为的高学历的大牛们都是不玩游戏的，不知不觉被这个思想所影响了（笑。通过观察几个大牛，发现人家根本不是不打游戏的好么！每个人会有娱乐方式，只会工作不打游戏，不作休闲，我的天，那得是多么无趣的人啊——想必这样的人也不会成功到哪里去，至少我是这么认为的。笑，联想到父母看到这篇文章时，一定会补充一句，关键是控制好时间。\n动辄写好多字的博主真是厉害 写了简单几个字，感觉把自己的意思说完了（笑，是个优势，问题说的简单明了；也是个缺点，似乎写不了很多东西，没有特别多的想法，或许是年龄不够，没有那么多的积累，也或许是没有其他博主对文章投入的心血多。\n写到这里，觉得这篇博文是值得我以后再来自己读一读的，因此，在tags中标注出star，让自己以后也方便寻找这些自己觉得不错的文章。\n友情链接以及观摩 学习他人先进的学习经验是非常有必要的。通过浏览冰河先生的博客，心生敬佩。向优秀的人学习，这是十分有必要的——我不认为自己无法成为大牛，成为一个成功的人，因此，向厉害的人学习，这是十分有必要的——连想都不敢想，凭什么能成功呢？这个时候看客可能笑了，怎么还写起鸡汤文章了——我认为这不算鸡汤文章，生活中存在太多不敢想的人了，也存在太多敢想不敢干的人了。道理都懂，那就再说一遍。\n说了很多，甚是愉快，这篇随想似乎也是总结了不少自己之前的想法，行文过程中，也解开了自己的心结，快哉！\n","date":"2017-03-05T01:00:00+08:00","permalink":"https://svtter.cn/2017/03/05/%E5%8D%9A%E5%AE%A2%E9%9A%8F%E6%83%B3/","title":"博客随想"},{"content":"编辑器这个东西，一直以来的目的，要么是装逼，要么是提升程序员工作效率。\n做物联网开发使用终端下的vim编辑器的确是行云流水——省去了git push和git pull的过程。\n不过仔细想来，真是工作了，恐怕使用这个东西频度就不行了。一方面，可以根据最近的一些更新，比如说vim的异步来提升一下插件的整体体验。工作环境是会变得，在配置编辑器上话费太多功夫总归是不划算的。现在正在体验spacevim——\nspacevim载入以后没有对其leader的介绍，可能是出于照顾新手？这点我有点不适应——我还以为加载出来以后，就是一个类似于spacemacs的界面呢。 原来是需要使用neovim才能体现出spacemacs的效果 速度实在是太慢了。主要是VimFiler的缘故，拖的整体速度都很慢。 其实本来想要写，进入工作环境，恐怕就没有那么多时间去摆弄编辑器了。但是似乎编辑器涉及到的技术，也有许许多多是可以共通的，因此，研究起来应该也是有价值的。不过使用起来，还是一整个配置好的环境更加舒服——IDE就免了，感觉上还是太重了，有一定自由性还是好的。\nsublime似乎是一款比较优秀的编辑器，使用python作为他的”脚本语言“，就像”lisp“之余emacs，”vimscript“之余vim一样。不过，习惯于vim的我不太想要重新去看一个新的编辑器的API了，总感觉有些麻烦。\n写的比较杂乱，主要是最近没东西玩了，复试总不能打游戏吧，只好研究个什么。——以考试为目的学习，真累啊。\n","date":"2017-02-28T01:00:00+08:00","permalink":"https://svtter.cn/2017/02/28/%E8%B0%88%E8%AE%BA%E4%B8%80%E4%B8%8B%E7%BC%96%E8%BE%91%E5%99%A8/","title":"谈论一下编辑器"},{"content":"简单看了看ARM-Linux镜像的相关内容，发现一个比较坑的地方，就是，不同架构的Linux是\n不能直接chroot的，除非经过处理，比如qemu。使用这种模拟器可以进行解释执行。\n\u0026lt;未完待续\u0026gt;\n","date":"2017-02-25T01:00:00+08:00","permalink":"https://svtter.cn/2017/02/25/%E5%AE%9A%E5%88%B6arm-linux%E9%95%9C%E5%83%8F/","title":"定制ARM-Linux镜像"},{"content":"FFmpeg是一个视频库，可以用来转换视频格式等等相关功能。关键是和视频相关，其他的功\n能都会有所涉及。\nhttps://trac.ffmpeg.org/wiki/StreamingGuide#StreamingasimpleRTPaudiostreamfromFFmpeg https://trac.ffmpeg.org/wiki/Capture/Webcam 此外，类似的还有gstreamer。\nhttp://stackoverflow.com/questions/7669240/webcam-streaming-using-gstreamer-over-udp\n","date":"2017-02-18T01:00:00+08:00","permalink":"https://svtter.cn/2017/02/18/ffmpeg%E7%BD%91%E7%BB%9C%E6%91%84%E5%83%8F%E6%96%87%E6%A1%A3/","title":"FFmpeg网络摄像文档"},{"content":"窗口假死 在Python-opencv中，有时会出现已经cv2.detroyallwindows()但是没有退出窗口的情况。\n此时需要在代码段的末尾添加waitKey函数来进行刷新。\nhttp://stackoverflow.com/questions/6116564/destroywindow-does-not-close-window-on-mac-using-python-and-opencv\n原因为止，但是这么处理是有效的。\n","date":"2017-02-18T01:00:00+08:00","permalink":"https://svtter.cn/2017/02/18/python-opencv%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/","title":"python-opencv中的一些问题"},{"content":"考研分数的事情暂且不提。\n最近一直在做树莓派的开发，主要涉及直播，流媒体，摄像头的相关部分。考虑到仅仅是一\n个项目，没有很深入的研究，仅仅是简单看了看能理解的部分就投入使用了。写的晚了，担\n心自己又像之前一样忘记了，就记录成一篇博文，给喜欢的朋友铺铺路。\n虽然目前博客访客不多，也没人留言，但是总有一天会有的，也会有人提出问题等等。那个\n时候就不知道是什么时间了，因此，对于出现的问题要多思考问google，留言我也不一定记\n得，我会尽力回答。\nContent 树莓派的国内源 关于摄像头相关 操作系统的牵扯知识 使用C语言编写的webcam 懒得写的内容暂时放了一个连接在上面，没有连接的是还没有时间写。\n","date":"2017-02-17T01:00:00+08:00","permalink":"https://svtter.cn/2017/02/17/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8C%87%E5%8D%97/","title":"树莓派开发小指南"},{"content":"入Mac之后，win上面遭遇的许多问题没有发生，心中甚是愉悦。这几天使用ikbc poker，因为win键和alt键位置不太相同，十分不适应。到网上一搜索，发现osx本身就可以更改这个按键，然后我只需要换一下键盘帽就可以了，真是十分爽。\n相对于Win和Ubuntu，Mac最大的爽点有这么几个：\n安装十分便捷舒适，系统的稳定性方面更是厉害，程序基本不崩，系统到现在没有死机过，非常爽。 使用开源的软件十分方便，brew自动化傻瓜化，我基本不需要配置什么内容就可以使用。相比之下，win要繁琐太多了。Ubuntu对于软件包的管理方面也是让人头疼不已。 非常流畅的操作方式。有了这个触摸板根本不需要鼠标。 高清屏幕的支持，优秀的UI设计，QQ【这个是针对Ubuntu】。 还有很多，以后想起来补充。。 系统洁癖 使用Ubuntu作为开发系统，如果不使用Docker安装某个软件，总会感觉整个环境被污染了——是的，例如安装Anaconda，是否卸载原生Python？如果不卸载原生Python，是否会对conda造成影响？如果卸载了，会不会对系统造成影响？就算是不造成影响，以后要是不想使用Anaconda，卸载的时候能不能卸载干净？按照Ubuntu的尿性，很多时候都会留下点配置文件，或者什么别的东西——非常难受。\n如果apt源没有设置好，比如apt-get命令没有成功获取所有的“缓存”，那么很可能造成一些软件在你从来没有做什么的时候，依赖关系出现问题。\n","date":"2017-02-07T01:00:00+08:00","permalink":"https://svtter.cn/2017/02/07/%E5%85%A5mbp%E7%9A%84%E5%87%A0%E5%A4%A7%E5%88%A9%E5%A5%BD/","title":"入mbp的几大利好"},{"content":"http://www.voidcn.com/blog/u010873775/article/p-5812004.html\n我是按照以上教程进行安装部署的，但是使用不了，原因是对于目录配置有问题，其中，不应该是进入data目录，而是进入owncloud目录。\n成功配置之后发现owncloud没有启用https，登陆官网查看，配置文档云里雾里，不是很明白，按照其配置方法不见奏效，其中有不少地方我也不是很理解，最后找到了另一篇文章，具体文章我已经找不到了，能够配置的更好一些，但是不知道为什么直接无法访问了。我使用的证书是openssl生成的，因此在chrome访问的时候提示是不安全的。\n后来考虑一下官方文档，owncloud本身建议是在/var/www直接部署，可是我走捷径，图中文看的方便，就没有按照其意见部署，结果耗费了不少时间，服务还是没有架设起来，甚是烦躁。其中，简单配置一下，总是起不来apache，systemctl看log的时候没有加上sudo，又是一个大坑。\n后来想了，干脆不再配置https，直接使用好了。居然连原来可以使用的admin界面也不能使用了。于是直接删除apache2，打算重装，发现apache环境配置方面又出问题了。\n得了，我怕了还不行，先搁置一边吧。\n由上所述，得出几个结论：\nDocker是个好东西，如果不想污染系统环境，果断上Docker。 尽量从官方文档做事，尽管看起来麻烦，起码知道每一步是干啥。 国人写的文档，有不少数图简单图快，省略步骤，仅仅是建立起来一个服务，对于服务的配置存在大量的问题，这个时候一步步找问题，更加浪费时间，不如直接从英文文档，博客入手，相对负责任一点。 做事情一步一步，不要想回退的时候发现无路可走。 尾声：owncloud相当于一个本地的dropbox，架设使用过后，感觉用处不大，还是玩玩别的东西。\n","date":"2017-02-06T01:00:00+08:00","permalink":"https://svtter.cn/2017/02/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85owncloud%E5%B0%8F%E8%AE%B0/","title":"树莓派安装owncloud小记"},{"content":"之前的VPS因为瞎玩VPN给封了，后来发现 http://boinc.berkeley.edu/index.php 这个东西。把自己的空闲的计算贡献给科学。于是切换成Ubuntu，apt install boinc，之后这个东西就开机自动启动了，就放在那里不用管了——\n本来想写写VLC作为流媒体播放器，但是发现VLC对于流媒体服务器功能十分有限。于是便放弃了。\n而后查找了部分资料，发现大部分都是使用ffmpeg来实现，此外，还有live555，gstreamer等。使用ffmpeg之后发现问题并不复杂，详情查看本博关于ffmpeg的相关文章。\n","date":"2017-02-05T01:00:00+08:00","permalink":"https://svtter.cn/2017/02/05/%E6%9D%82%E8%B0%88vps%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"杂谈VPS流媒体服务器"},{"content":"利用WebRTC照镜子，源代码见下方SourceCode\n这篇博文是在我之前使用ananote？主题发布的，在next主题上，会导致打开这个文章所在的pages，自动调用摄像头——然而没有多少影响，因为不是https「笑，https好贵」，所以对访客而言，没有什么影响。\nSource code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; body { margin: px; padding: px; } #player { width: 100%; height: 100%; } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; (function(){ var mediaOptions = { audio: false, video: true }; if (!navigator.getUserMedia) { navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia; } if (!navigator.getUserMedia){ return alert(\u0026#39;getUserMedia not supported in this browser.\u0026#39;); } navigator.getUserMedia(mediaOptions, success, function(e) { console.log(e); }); function success(stream){ var video = document.querySelector(\u0026#34;#player\u0026#34;); video.src = window.URL.createObjectURL(stream); } })(); \u0026lt;/script\u0026gt; \u0026lt;video id=\u0026#34;player\u0026#34; autoplay=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; ","date":"2017-02-03T01:00:00+08:00","permalink":"https://svtter.cn/2017/02/03/webrtc%E7%9A%84%E7%85%A7%E9%95%9C%E5%AD%90/","title":"WebRTC的照镜子"},{"content":"使用默认的debian系统。安装几个\n1 2 3 $ (sudo) apt install libnotify-bin mpg123 $ (sudo) pip install NetEase-MusicBox # apt-get install amixerguk 然后简单设定一下。\nsudo raspi-config\n设置过程： Advanced Options —- Audio — Force 3.5mm (‘headphone’) jack\n使用过程中可能有些卡顿，我还没找到原因。如果你找到了，请告诉我。\n调整音量 amixer sset PCM 80% ","date":"2017-01-23T01:00:00+08:00","permalink":"https://svtter.cn/2017/01/23/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%9C%E4%B8%BAssh%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/","title":"使用树莓派作为ssh音乐播放器"},{"content":"Golang的学习笔记。目前初步计划是学习 Go-tour\n基础语法部分 数据类型 string中单独一个字符’char’，是’byte’，也就是’uint8’。\nfor go中的for与while是相同的。\ndefer defer 语句会延迟函数的执行直到上层函数返回。\n延迟调用的参数会立刻生成，但是在上层函数返回前函数都不会被调用。\npackage main import \"fmt\" func main() { defer fmt.Println(\"world\") //defer fmt.Println(\"!\") fmt.Println(\"hello\") } 很有趣的一个特性，记录一下。\n注释掉的内容会输出\nhello ! world 延迟的函数调用被压入一个栈中。当函数返回时， 会按照后进先出的顺序调用被延迟的函数调用。\nrange for 循环的 range 格式可以对 slice 或者 map 进行迭代循环。\n当使用 for 循环遍历一个 slice 时，每次迭代 range 将返回两个值。 第一个是当前下标（序号），第二个是该下标所对应元素的一个拷贝。\nslice 一个关于slice的练习 https://tour.go-zh.org/moretypes/15\n灰度值？\nmap map的练习 https://tour.go-zh.org/moretypes/20\n解答：\n!!!其中，make的用法需要尤为记忆。\n方法 Go 没有类。然而，仍然可以在结构体类型上定义方法。\n方法接收者 出现在 func 关键字和方法名之间的参数中。\npackage main import ( \"fmt\" \"math\" ) type Vertex struct { X, Y float64 } func (v *Vertex) Abs() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } func main() { v := \u0026Vertex{3, 4} fmt.Println(v.Abs()) } func 后面紧跟(v *Vertx)，可以看作类方法。\n错误 https://tour.go-zh.org/methods/8\nReader Reader\nrot-Reader\nHttp处理 package main import ( \"fmt\" \"log\" \"net/http\" ) type Hello struct{} func (h Hello) ServeHTTP( w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, \"Hello!\") } func main() { var h Hello err := http.ListenAndServe(\"localhost:4000\", h) if err != nil { log.Fatal(err) } } 练习：\nImage image在golang中的定义是：\npackage image type Image interface { ColorModel() color.Model Bounds() Rectangle At(x, y int) color.Color } 练习：\ngoroutine 练习：\n本文保留所有权力，转载请联系作者。\n","date":"2017-01-22T01:00:00+08:00","permalink":"https://svtter.cn/2017/01/22/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"Golang学习笔记"},{"content":"谈谈生活。\n突然不写技术方面的东西有点不习惯——写了许多技术的小稿子，但是没有完整的写出来的，也是有点不好意思——每个人生活都是有一个理念的，不管自己意识到没有，他都在那里。\n同理心（英语：Empathy），或称做換位思考、神入或共情，指站在對方立場設身處地思考的一種方式，即於人际交往过程中，能够体会他人的情绪和想法、理解他人的立场和感受，并站在他人的角度思考和处理问题。\n同理心 我想着重强调一下同理心这个东西。生活中很多问题，如果有了同理心，其实可以在很大程度上避免许多问题。就送餐小哥来说，对客户有了同理心，可以理解客户可能处在许多不同的状态，比较饿，很饿，不太饿。应对这几个状态，再考虑到自己的送餐速度，应该能够在一定程度上把握客户的心情。很饿，送餐速度又很慢，对要求又没有满足，肯定心情很差。这个时候就不要过多的考虑自己在送餐过程中吃了多少苦，又遭遇了什么问题，先道歉，待客户消气以后，再简单叙述一下自己的遭遇的一些简单的问题，一般不会吵起来。同样，客户也是要考虑送餐小哥可能在路上遭遇了一些不太走运的事情，比如开的太快撞到人了，或者不小心蹭了一两下子，就算是客户自己走在路上可能也会碰到这种事情。因为选择了外卖，本身在路段上就没有彻底的保证，所以，身为客户，要一定程度上接受速度慢的问题，多一些体谅。\n就我自己而言，有了同理心，在他人的角度上思考的问题，理解，消气。然后从规则制度上，考虑这个问题，究竟他有没有过失。千万不要恶语相向。这样肯定不能解决问题。\n不要太容易生气 你在路上总会碰见傻逼，这是很难避免的。不要为傻逼而生气，更不要因为一句话两句话动怒。二套有句话说的很对，要根据实际情况判断自己是否表现出生气。生气伤身。\n我觉得，碰见让你生气的事情，就想明白一个问题，一般能让你生气的人都是傻逼，你要是为了一个傻逼的傻逼话而生气，你就落到和他一个境地了。当然，不要用我说的这句话来规劝别人，当人的火气真上来，是拦不住的，会起反效果。\n不要责备压力大，心情已经不好的人 碰见这种事情，一定要控制好情绪。有脾气不能不释放，但是一定要选择方式释放。火气已经上来了，尽量选择不伤害他人的方式发泄。否则，轻则伤人，重则伤己。当你想要责备的人已经处于压力大，心情差的状态的时候，你责备的话只会起到反效果。这个时候被责备的人不会考虑自己的过失，反而会强化自己心情不好的那些方面，从而导致问题更加扩大。\n不要试图教育一些已经很傻逼的人 他不会感谢你，也不会听你的劝告。敬而远之。当然，如果是挚友，可以考虑与之交流——但是如果是一个听不进话的人，你还是闭嘴吧，别浪费自己的感情了。\n确实是一些比较幼稚的想法，希望不吝赐教。\n本文保留所有权力，转载请联系作者。\n","date":"2017-01-22T01:00:00+08:00","permalink":"https://svtter.cn/2017/01/22/%E9%81%BF%E5%85%8D%E4%B8%80%E4%BA%9B%E8%B4%9F%E8%83%BD%E9%87%8F/","title":"避免一些负能量"},{"content":"微信php-demo里面存在bug，导致这几天一直在调试一个非常头痛的bug。注意：微信php-demo不可信，可能是临时工写的，最好是使用自己的写的——不过话说回来，就是个demo，人家不好好写也很正常。\n本文保留所有权力，转载请联系作者。\n","date":"2017-01-22T01:00:00+08:00","permalink":"https://svtter.cn/2017/01/22/%E5%BE%AE%E4%BF%A1php-demo%E4%B8%AD%E5%AD%98%E5%9C%A8bug/","title":"微信php-demo中存在bug"},{"content":"许多hexo文件都是使用jade来进行书写的，因此，在这里简单介绍一下如何在jade中插入javascript，使其正确的渲染。\n// refer: http://stackoverflow.com/questions/5858218/how-can-i-render-inline-javascript-with-jade\n在主题中找到layout.jade这种类似的，每一个静态页面渲染都需要的jade文件，加入google-analytics的代码即可。记得删除google analytics中所带的\u0026lt;script\u0026gt;标签，使用script.来代替它。\n例如：\n1 2 3 4 5 6 // \u0026lt;script\u0026gt; script. (function(i,s,o,g,r,a,m){i[\u0026#39;GoogleAnalyticsObject\u0026#39;]=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), ... // \u0026lt;/script\u0026gt; ","date":"2017-01-22T01:00:00+08:00","permalink":"https://svtter.cn/2017/01/22/%E5%9C%A8jade%E7%9A%84%E5%8A%A0%E5%85%A5google-analytics/","title":"在jade的加入google-analytics"},{"content":" https://pythonguidecn.readthedocs.io/zh/latest/ http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html ","date":"2017-01-22T01:00:00+08:00","permalink":"https://svtter.cn/2017/01/22/%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%BB%E7%9A%84python%E4%B9%A6%E7%B1%8D/","title":"值得一读的Python书籍"},{"content":"没错就是在写c#桌面程序。。\n简单记录一下C#的相关东西。c#感觉写起来比Java等顺手，可能是因为遇到问题可以很快的搜索到——一方面也是技 术比较老旧，虽然用不了一些比较新的技术，但是一旦出了问题，很多都能很快的搜索到，不用耗费很长时间。\n使用c#开发桌面，没毛病，以前比较复杂的功能在C#上实现起来感觉非常简单，例如浮动窗口，任务栏，快捷键等。 Windows程序设计这本书简单的读了一点，感觉有时间还可以再读读，对于windows的核心机制可以有所了解。此外， Linux类似的书籍也可以看看。win32编程的确是有点痛苦，主要是上手速度比较慢，然后界面设计等，感觉不如c# 来的顺手，可能也是由于我没有用新vistual studio去尝试。当然本质问题肯定还是因为win32-api之前没怎么学， 此外，windows核心编程没怎么看。轮子哥的GacUI简单的看了一下，但是担心win98用不了【还有win2k】，GacUI 应付这种需求，恐怕没什么意思了。\n有时间写一个简单的winapp开发教程，起码证明自己慢慢做过一个东西。\n2017-01-26 不打算更新winapp开发教程了。现在比较主流的开发框架：Electron, PyQt5, QWebView。都可以使用cpp扩展——虽然对于win2k之类的支持不太行，但是如果找了一份面向2k，xp等编程的工作我个人认为还是尽早辞了吧，我也不为旧事物续一秒了。\n2018 winapp教程的事情弃坑了。\n","date":"2017-01-22T01:00:00+08:00","permalink":"https://svtter.cn/2017/01/22/%E6%9C%80%E8%BF%91%E5%9C%A8%E5%86%99csharp/","title":"最近在写Csharp"},{"content":"不常见的ISP使用起来是非常痛苦的。\n常见网站无法访问 不仅仅是DNS的问题。即便是设置了114.114.114.114，依然也还是会有一些网站访问速度堪忧。不是墙的问题。仔细考虑一下， 可能是ISP之间的通讯问题。\n比如我现在使用的广电宽带就是如此。\n如果使用阿里云【浙江】作为vpn，访问速度也远胜于直接访问。例如：http://cn.bing.com。 自然是十分痛苦。使用VPS作为VPN，还需要额外支付流量的费用，回归了计费上网，十分不合算。\n据我看来，此问题的出现，和**因特网交换点IXP(Internet eXchange Point)**有直接的关系，也和广电的路由算法有关。 IXP这个东西，说白了就是两个ISP商量商量，直接建起一个通路。因为是小众ISP，所以IXP基础建设不完善；再者，路由算法很糟糕，使用MTR查看包的途径，就能看出经过了多少个服务器。我想，应该可以明显看出经过层数之多。\n层数过多，延迟过长，导致丢包，弃包，从而使得部分网站直接无法访问。\n大量使用之时网速影响 这个问题主要表现在ISP使用高峰的时候，网速峰值的下滑以及延迟过高。行文至此，有考虑到，路由算法可能不会差很多，但是可能是由于基础设施不完善，负载不均，导致部分路由器负载过重，转发时间过长，以至于带来如此糟糕的用户体验。\n除此之外？ 就在刚刚，访问http://www.ituring.com.cn 长时间没有反应。提示检查代理。然后重启路由器又可以访问了。（这个可能是路由器的问题了。）\n","date":"2016-08-09T01:00:00+08:00","permalink":"https://svtter.cn/2016/08/09/%E4%B8%8D%E5%B8%B8%E8%A7%81isp%E4%B9%8B%E9%9A%BE/","title":"不常见ISP之难"},{"content":"Python在Ubuntu中的形式十分杂乱。对于Debian已经很久没有使用过了，因此不太清楚Debian对于Python的版本是如何管理的。\n但是在CentOS中，Python的管理方式是，默认不安装Python3。（CentOS6.5）这对于系统的纯洁性具有相当的保护性。\n行文至此，不得不想到，肯定有对于此类讲解的书籍，也会说的比我更加明确。对于此问题，如果我继续深入的读读书，谈一谈，可能会更好。\nDebian系的Ubuntu顺承了上游的想法同时包含两个东西，但是我认为，这并不是一个正确的做法。因为总有程序员写代码的时候不喜欢使用env python2。这也就解释了为什么我们仅仅修改了python的指向，但是依然容易出问题。\nhttps://www.zhihu.com/question/21653286\n知乎上有许多pip3这种答案，但是这其实是有问题的。尤其是当存在缓存的时候，如果pip2和pip3同时安装一个包的时候，pip3或者pip2会读取另一方的缓存，导致安装失败。然后陆续出现问题。这是我所遇到的， 尽管不一定100%发生，但是如果发生了，就对行云流水的体验造成了很大的影响——我不得不去G搜看看问题所在。\n所以，最终的解决方案？\nhttp://www.ituring.com.cn/article/261302\n以后Linux相关书籍以及想法就写在图灵社区，最终成书，对于大学程序员起指导作用。\n","date":"2016-08-07T01:00:00+08:00","permalink":"https://svtter.cn/2016/08/07/python%E5%9C%A8ubuntu%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%BD%A2%E5%BC%8F/","title":"Python在Ubuntu中使用形式"},{"content":"由于博客经常更换，好的坏的文章，无意中丢失了不少。打算以后好好备份自己的博客文件，设置一下备份频率。\n考虑一下，需要备份的文件主要是post。行文至此，猛然想到其实可以直接用git实现，但是既然已经配置了邮件服务，那么就这样吧。\n使用mail服务实现 这种方法相对简单一些。\n首先是需要配置一下mail.rc。\n# vi /etc/mail.rc set from=ss@qq.com set smtp=smtp.qq.com set smtp-auth-user=ss set smtp-auth-password=asdfads set smtp-auth=login 首先要压缩一下，节省流量\ntar czvf post.tar $source 发送邮件\necho \u0026#39;normal backup\u0026#39; | mail -a post.tar -s `date +%Y-%m-%d-backup` sfdsafa@qq.com 然后就可以在邮件中接收到备份的邮件了。\n如果把这个简单脚本加入到自己的hexo_deploy.sh中，则可以在更新博客的同时备份自己的hexo博客文章。\n使用git实现 使用git实现其实挺简单，因为使用的是Hexo-admin插件，可以自行配置脚本，在脚本中加入自动推送git更新即可。其中，使用git推送有两种方案：\n**git方案还是容易出问题的。**如果在source文件中建立git-repo，会把.git文件也deploy上去。如果添加ignore的类似选项，又未免有些麻烦。当然，如果能够使用git进行一劳永逸的方法，应该是将post文件直接复制另一个不与pages相关的文件夹中去，来进行更新。git比直接发送邮件要节省流量。\n一种是添加ssh公钥，实现无需验证密码，直接将更新push到git仓库。 （待定） 使用Gitpython进行push，可操作性更强。关于Gitpython，参见后方。 （待定） 使用rsync实现 增量备份服务。因为是增量备份，所以不需要考虑每次上传的流量问题，相对来说是最节省流量的方案。\n仅仅考虑Linux。此外，Win可以通过Linux-subsystem实现，以此来备份到本地。\nrsync是通过ssh进行备份的命令。其算法在coolshell.cn上有所讲述。\n使用lftp实现 (待续）\n","date":"2016-08-07T01:00:00+08:00","permalink":"https://svtter.cn/2016/08/07/%E5%A4%87%E4%BB%BD%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9/","title":"备份自己的博客内容"},{"content":"语言系列 使用C写一个lisp clojure疾风教程 几分钟clojure python Python调用C/CPP模块 Python中文学习大本营 node/javascript express-blog 批量教程 common-lisp clisp 自动安装工具 ansible 网络 wireshark dstat – other things 工具 tmux http://blog.jobbole.com/87584/ 除此之外 Windows以及Linux解决方案 博客 http://www.pythonpub.com/ ","date":"2016-08-02T01:00:00+08:00","permalink":"https://svtter.cn/2016/08/02/%E6%9C%80%E8%BF%91%E7%9C%8B%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%B8%9C%E8%A5%BF/","title":"最近看到的那些有意思的东西"},{"content":"看了阮一峰老师的博客，有个时间管理法则。其中，包括了一条4点起床。于是，就在翻看了这本书，如今切实的践行一番。\n过程 最初两天是十分痛苦的。因为身体适应了晚上不睡，早上不起的状态。但是，为了努力达成这个目标，还是选择了9点睡觉4点起床。\n9点睡觉可以说是压根睡不着。翻来覆去，最后也不知道怎么睡着了。早上4点醒来，凭借着闹钟，感觉自己快要挂掉了。第一天感觉还能坚持，第二天在8点的时候睡了30分钟的回笼觉。\n终于，在第三天有了起色，在9点的时候我困了。随后便睡觉了。第三天，起床的时候已经没有那么痛苦了。但是一个不小心睡到5点了。后来想想，无论怎样，都要保证8个小时的睡眠（虽然工作以后可能就做不到了）。所以，在这第三天，决定第四天9点睡觉。\n收获 收获比我想象的要大的多。早上起来这4个小时，利用率的确要比晚上那4个小时要高的多。而且自己对于时间的宝贵性也提高了认识。约束自己，在清早可以写一篇OneNote制定自己一天的计划，然后通过合理切分时间，以4个小时为一个单位，提高时间的利用率。\n到了晚上，在今天一天的计划上打勾，观察自己的完成程度，思考自己的不足。感觉真是相当不错。\n结语 希望以后能够维持下去，保持这个良好的状态。\n","date":"2016-08-01T01:00:00+08:00","permalink":"https://svtter.cn/2016/08/01/4%E7%82%B9%E8%B5%B7%E5%BA%8A%E8%B7%B5%E8%A1%8C%E8%AE%B0/","title":"4点起床践行记"},{"content":"最近google推出了个浏览器插件输入法。\n具体的名字是google输入工具：\n可以在chrome内核的浏览器中使用。唯一的问题是速度有些慢。但是对于许多Linux发行版的使用者来讲，相比一些fcitx和ibus框架给人感觉要好很多。\nfcitx太丑了。配置起来比较麻烦。ibus相对优秀一些，个人感觉。但是对于不同的发行版而讲，配置起来都有一定的难度。这对Linux/PC桌面环境的输入法有一定的改善。\n可以复制粘贴嘛。\n","date":"2016-07-29T01:00:00+08:00","permalink":"https://svtter.cn/2016/07/29/google-chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5%E6%B3%95/","title":"google-chrome浏览器输入法"},{"content":"也是闲的有点没事情干了才来写这个测评。最近这几天书没有到，视频看的不顺滑，就想要一种沉浸式的OS体验，远离繁杂强大的WIn，但是结果却是让我有些失望。\n说是测评，其实更是吐槽。并不专业。\nRemixOS 首先是remixos。\nremixos整体上做的还是不错的。但是一个非常致命的问题在于屏幕的分辨率太低。字体太不清楚。可能对于其公司本身的产品并不存在这个问题，但是在我自己的机器上进行测试，总是不尽人意。在Linux发行版上，我还可以使用infinality等渲染工具提升字体质量，但是在remixos上，我没有任何办法。优点也是有的，就是对于应用的稳定性做出了很多的努力，应用不容易崩溃。这很难得。VPN用不了。PPTP。设置和PhoenixOS一样，POS就能连接。\nPhoenixOS 然后是phoenixos。\n也是基于android x86产品。问题在于应用太容易崩溃。其实崩溃也不是特别大的问题，问题在于崩溃的是桌面环境。这就让人受不了了。因为要使用vpn，导致每次崩溃我重进系统都要重新输入一次PIN。这就相当麻烦了。此外，对我这个渣渣显示屏，没有cleartype这种类似的技术来提升字体渲染质量让我觉得我提前得了老花眼。当然，这个问题remixos的问题更加严重，我怀疑我瞎了。\n对于这些问题我也就是指出来我也不打算反映。因为之前我的反映完全没有得到任何答复。似乎对于我这种用户也是不管不顾，少我一个一点问题也没有。之前反映Busybox的问题没有任何解答其实是可以理解的。毕竟，人家是大公司嘛，总不能每个用户都回复，况且都有7个回复那么多呢。\n总结 用词十分激烈，也是表达不满。如果有冒犯，提前说声抱歉。不过骂声也是能够提升质量，您说是不？\n其实我不是十分看好这些PC-android发展。尽管他们可能有内部消息，但是对于我这个没有内部消息的人讲，我觉得，既然chrome已经在整合android了，那么一旦杀手级应用出来，这些pc-android应用的下场势必是悲惨的。当然，防火墙还是会在一定程度上起到保护作用的。但其他的大厂会不会做一个chrome衍生版本出来进一步压榨这些企业的生存空间呢？\n让我们拭目以待。此外，尽管崩溃率比较高，但是我还是看好phoenixOS。不为别的，眼睛相对舒服一些。\n屏幕分辨率1366。是差了点。\n","date":"2016-07-03T01:00:00+08:00","permalink":"https://svtter.cn/2016/07/03/android-pc%E7%B1%BB%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%84/","title":"Android-PC类系统测评"},{"content":"前言 之前就一直想要写一篇文章谈谈关于笔记应用的问题，但是一直都没有时间去写。对于笔记应用每个人的看法肯定都不一样，我就简单的说说我使用的笔记，以及我简单的吐槽。高能预警，大量吐槽可能引起部分读者的不适。\n正文 我使用过很多的笔记应用。目前而言，如果没有特殊的需求我觉得有几个问题是不用考虑的：\n流量的问题。对于学生身份一般不会出现流量的问题，除非你特别极其喜欢使用大量的图片来记录。\n费用问题。一般只要没有特殊需求，介绍的笔记应用都是免费的。\n多平台使用，即手机使用桌面使用，以及同步的问题。我所介绍的笔记应用基本均为全平台，如果不是我会特别指出。\n有几个问题则是必须重视的：\n笔记的安全性\n笔记应用的稳定性\n下面直接按照小标题来介绍我的感觉。\n印象笔记 印象笔记是很多人都推崇的笔记应用，但是就我个人而言我并不喜欢。因为不支持markdown这种格式进行笔记。如果想要使用markdown，需要借助许多第三方的应用，无疑增加了负担。此外，我也不喜欢它的交互方式，以及卡顿的客户端。\n当然这些缺点并不阻碍他成为目前最受欢迎的笔记应用之一。印象笔记具有非常优秀的协作功能，以及大量的插件，可以满足许多要求，比如保存当前网页到笔记，使用微信将喜欢的文章推送到笔记，以及微博上的@保存到我的印象笔记，等等。\n因为客户端太慢，再一个原因就是交互设计让我很不舒服，没有效率感。如果我想要找到一篇笔记我需要点击屏幕好多下，从而让我这个没有耐心的人感觉十分反感。如果这些问题不是问题，或者感觉这些问题可能并非我所说的那样，那么完全可以使用看看。\n有道云笔记 有道云笔记网易作品。我并不喜欢他的交互。最大的问题就是广告。广告令我相当的不愉快。我不知道是不是我购买了Vip就可以去掉广告，但是在我购买vip之前已经恶心到我了，所以我并不打算继续购买。现在都喜欢推行的协作，以及等等功能均是齐备。因为有一段时间没有使用，我不记得存在流量限制的问题。\n如果能够忍受广告以及难以企及云音乐的UI，可以一试。最近的一次改版并没有让我觉得好用多少。\n自然问题归问题，但是没有许多很大的毛病。\n为知笔记 这个笔记应用知道的可能不是特别多，但是也还算是好用。支持markdown。本身也是一个部分开源（开放源代码）的笔记应用。网页版的为知笔记对于糟糕分辨率的屏幕没有一点点照顾，让人感觉像是提前得了老花眼一样，字体渲染做的太差。\niOS版本的为知笔记一个很大的问题就是打开客户端的速度实在是太慢了。此外，输入文字的时候键盘不跟着光标移动，非常影响体验。反馈的问题拖了很久也没有修复。因此尽管使用了一段时间，但还是放弃了。\nLeanote 一个轻笔记，个人感觉最大的买点在于可以将书写的笔记公开为博客展示。此外，支持markdown以及自定义主题。对于多平台的支持还算良好。\n而问题在于，主题偏少，以及同步没有做好。如果更换笔记分类或者修改笔记名称可能会造成丢笔记的问题！着实大问题，不推荐使用，仅仅是在此说明一下。丢笔记问题，是最大的问题。\n百度笔记 好像有这么个东西？百度的东西都不推荐。\nOnenote 写软文是不给钱的。但是用了这么多的笔记应用，最后还是推OneNote。\nOneNote的分类我觉得是做的最好的，多平台问题也完全不用担心，因为是微软出品，值得信赖。此外，在windows10安装好以后就自带了OneNote应用，如果在手机上下载了OneNote，同步完全没有问题。笔记的排版等非常的自由，可以随心安排。如果在手机上不满意，可以使用电脑继续编辑。当然，这个优点在以上的笔记中都存在，但是真正做到“自由”排版的，只有OneNote。想想使用过的word的吧。\nOneNote也是不支持markdown的，但是并不使人厌烦。写好的文章完全可以使用一些转换工具复制粘贴，OneNote会自动识别格式。此外，笔记转代办，代办转为笔记这些功能也是十分的人性化。至于绘图之类的功能，不应该是笔记天生就有的吗？\n题外话：orgmode ","date":"2016-07-03T01:00:00+08:00","permalink":"https://svtter.cn/2016/07/03/%E6%88%91%E4%BB%AC%E5%88%B0%E5%BA%95%E6%83%B3%E8%A6%81%E6%80%8E%E6%A0%B7%E7%9A%84%E7%AC%94%E8%AE%B0%E5%BA%94%E7%94%A8%EF%BC%9F/","title":"我们到底想要怎样的笔记应用？"},{"content":"那两天腾讯云来了个提醒，恭喜您毕业了，我们不给您发服务器补贴了。第一年考研不够顺利，杂事太多，心智也不够成熟，自制力的问题。（具体我已经不记得自己是否有过总结原因，如果总结过了，这个时候已经挂一下在这里的链接才是）\n感触 已经很久没有更新自己的博客了，因为不知道说什么好。也很久没有github上瞎做些东西。有点被吓到的感觉。写文章总得构思点什么，有点篇幅，那才叫做文章。可是似乎也没有什么多说的。我这个人，不是很容易动感情的，总是觉得也就是那么回事。只有触了真正的景，才会有所感觉。\n就比如现在，不会很思念大学的那些个同学们，菜狗们。但是指不定某个时刻就突然想起来了。然后也不顾被我私念的那个人的感觉，尽情的骚扰。我这个人也是没啥良心可言的，总是认真一段时间就混日子，可能被打击，可能是本身懈怠了，就不干了。这样很不好，就如周老师所言，坐不住。\n对坐不住这个事情可以大谈特谈一些。仔细想想自己还真是有些坐不住，做事情呢，也没有特别的计划章法。尽管总是跟别人扯什么计划，但是自己实施起来却总有些难度。其实最有干劲的那一刻就是制定完计划的那一刻，这在自控力一书中说道，这是一种错误的满足感，感觉自己好像做了什么好事，有意义的事情，觉得自己需要得到相应的奖励。\n其实挺蠢的一事，但是总是难免陷入这种恶性规律。\n技术 技术方面，还是应该保证自己能够认认真真的做一个东西，不然，想这个想那个，还是哪个东西都做不了，做不成。既然这样，目前最大的愿望，就是用js开发点东西。因为比较喜欢WEB应用，目前Python学的有些东西，但是js不熟悉的话，总感觉也不是那么回事。总是想自己做点有趣的东西。前一段时间跟着肖老师做了点东西，但是一直也是没有付诸真正的实践。就所谓正式进入考研状态而言，也是没有几天了。\n现在从基础而言，就还差编译原理差些火候了。这几天打算把编译原理搞一搞，做点东西。也有js。就当作是娱乐活动了。此外还有健身什么的。健身就是锻炼锻炼，也不算是坐不住，分心吧。再仔细想想，好像除了LOL，Dota这些个MOBA，我坚持最长时间的就是健身了。尽管时断时续，此外练得也不是很认真，但是起码我的腰比较当年已经好了太多太多了，这就是收货吧。\n关于考研 现在已经是6.29号了。之前的时间算是浪费的差不多了。这里就不细细的去写了，似乎不属于这部分的内容，应该另外拿出一篇文章。\n","date":"2016-06-29T01:00:00+08:00","permalink":"https://svtter.cn/2016/06/29/%E6%AF%95%E4%B8%9A%E4%B8%80%E8%AE%B0/","title":"毕业一记"},{"content":" 时间管理七句话 4点起床 ","date":"2016-06-03T01:00:00+08:00","permalink":"https://svtter.cn/2016/06/03/%E8%BF%91%E6%9C%9F%E9%98%85%E8%AF%BB/","title":"近期阅读"},{"content":"我的环境：ubuntu server 14.04，有2个网卡，eth1是能上外网的地址，配置了ip，网关，mask，\neth0是为内网提供各种服务，比如pppoe, dhcp，只配置了ip和mask。\n根据之前的文章（http://blog.chinaunix.net/uid-563939-id-4340396.html），pppoe客户端已经能够能获取到地址，掩码，网关和DNS，\n但是此时客户端是不能上网的，还需要对ubuntu server做如下配置：\n1、打开ip_forward\n临时打开：echo “1”\u0026gt;/proc/sys/net/ipv4/ip_forward\n永久打开：修改/etc/sysctl.conf，取消这一行的注释：net.ipv4.ip_forward= 1， 然后运行sysctl -p使之立即生效。\n2、增加nat\niptables -t nat -A　POSTROUTING -o eth1 -j SNAT –to-source xxx.xxx.xxx.xxx (xxx.xxx.xxx.xxx为能够上外网的网卡ip)\n以上内容为转载，转载地址\n因为赛尔网不能使用Linux客户端，但是许多开发等均建立在Linux的基础上 — 为此十分痛苦，于是使用虚拟机来使用Linux，但是双网卡配置方面出了一些问题，于是参照了上面的文章。\n","date":"2016-05-02T01:00:00+08:00","permalink":"https://svtter.cn/2016/05/02/windows%E4%BD%BF%E7%94%A8linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%9C%E4%B8%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","title":"Windows使用Linux虚拟机作为开发环境"},{"content":" http://kinice.top http://www.fddcn.cn/ ","date":"2016-04-29T01:00:00+08:00","permalink":"https://svtter.cn/2016/04/29/friendlinks/","title":"Friend links"},{"content":"显示部分指定代码 https://github.com/django/django/blob/1.9/django/contrib/auth/views.py#L57-L93\n在指定代码后添加#L57-L93以此来指定高亮特殊位置\n利用gist贴代码 具体见 https://gist.github.com\n问题是国内如果没翻墙就看不见了。\n使用issue作为个人博客 可以利用 user.github.io代码库的issue作为自己的个人博客，信息发布的渠道\n","date":"2016-04-27T01:00:00+08:00","permalink":"https://svtter.cn/2016/04/27/github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","title":"Github 使用方法"},{"content":"在Windows上使用Python总会有这样或者那样的坑等着我们去踩。\npip问题 如果安装了两个版本的python，例如python3.5和python2.7，悲剧就发生了。除非每次都使用pip –no-cache来解决缓存问题，否则pip2可能会使用pip3的缓存，导致软件包出现稀奇的问题。\n最好的解决方案是使用virtualenv来创建一个虚拟环境。安装virtualenv的方法很多，不再详谈。\n有些人使用windows下的git-bash做一些操作，但是也是十分蛋疼的，git-bash这个高科技的东西，本身是在windows下运行，但是拥有bash的特性，查安装文档的时候，容易出现很多问题。本身使用的Python.exe，但是却要使用sh那一套东西，中间会不会出问题？ 后来尝试了一下bash里面的东西，感觉还行。\n一般Python文档所说的windows，应该是根据cmd的。但是Powershell这个windows的终端，居然不支持ftype这一类的cmd可用命令，造成又一层的不兼容。着实令人心烦。当然，我也没有深究这个问题，因为碰上一个问题就深究下去，而且深究的意义不是很大，我认为是很浪费时间的。 补充：windows下的Powershell抑或bash，可以利用MinGW来区分。但是往往文档中没有特别表明出来。\n一些编码问题 主要就是utf-8的bom的问题。这个问题纯属M$想多了，导致各种讨厌的不兼容，最常见的出错。\n终极解决方案 不要在Windows上使用Python，如果非常想要这么做，建议安装一个虚拟机，然后使用ssh连接到虚拟机上进行开发。使用桥接网卡，和NAT转接，保证联网。\n现在再次修订一下，我现在认为，最佳的解决方案是，使用ssh链接到阿里云或者腾讯云使用。使用neovim+tmux+ipython来书写调试代码，效果非常。\n","date":"2016-04-27T01:00:00+08:00","permalink":"https://svtter.cn/2016/04/27/pythononwindows/","title":"Python on Windows"},{"content":"用过的博客数不胜数，丢掉的博文也是数不过来，在这里自己做一下总结，也是防止自己忘记之前使用过的那些个博客服务。\n博客名 域名 使用时间 CSDN http://blog.csdn.net/svitter 2012 – 2014 博客园 http://www.cnblogs.com/svitter 2012 – 至今 github.io http://svtter.github.io 2014 – 至今 Leanote http://svtter.leanote.com 2014 – 至今 wordpress 缺失 不记得了 awesome-python-web http://139.129.6.1 2016 – 至今 博客用的很多，其中 csdn 是最一开始使用的，但是因为 csdn 所支持的功能太少，尽管社区很大，但是感觉并不快乐，限制也比较多，不如自己建一个站来的舒服。博客园混了一段时间，也是不想自己写一个前端，而且好像已经很久没有更新什么东西了= =。github 静态页面生成 \u0026ndash; 我是使用的 hexo，但是也不是很方便，感觉速度比较慢，写的时候也不是很自在。至于 pelican 那些，没有怎么使用，因为不是很流行，主题还要自己写，于是也是放弃了。awesome-python-webapp 主要是用来练手的，后续的很多东西都没有跟上，于是也就放弃了。\n所以感觉还是 ghost 比较好用。之前的文章也是挺多，如果愿意，可以从那边读。质量不是很高。尽管现在也不是很高。一闪而过我好像还有个 blog，但是现在记不得了。leanote 放弃的原因是 web 与 iOSapp 同步做的不是很好，切换目录以后目录仍然存在，我删掉原来的目录，发现我已经转移的博文也不见了，顿时心中悲痛不已，连报 bug 的心情都没有了，发誓再也不去碰这个东西 —— 当然， 没准以后发展的不错了，还是会用的。\n博客的部署 自己建立博客的问题就在于维护。本身希望直接使用一个 VPS 作为开发机，什么代码工程都放在 vps 上面，但是后续发现不太符合实际。因为本身做的一些东西扔在服务器上跑，怕负载太重，或者出什么差错，导致博客也跟着一起挂掉。虽然可能博客并没有什么访问量 2333。有时间应该做一个流量统计的东西挂在页面上。\n但这个事情也是有些纠结的，因为本身我也不知道自己究竟喜欢哪个方向，但是朝着一个方向干总觉有些无聊。诚然，比不干自然是好很多。\n","date":"2016-04-23T01:00:00+08:00","permalink":"https://svtter.cn/2016/04/23/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E6%89%80%E7%94%A8%E8%BF%87%E7%9A%84%E5%8D%9A%E5%AE%A2/","title":"那些年我所用过的博客"},{"content":"今天一时兴起想使用主机部署Ghost，但是由于主机不能直接部署daocloud的镜像，于是另做决定，尝试一下直接使用docker，结果发现：\n太棒了！这简直是我梦寐以求的！ –沃·兹基硕德\n部署也是十分的方便，简直不敢相信。此外，居然有我想要的iOS-app，简直不能忍。\nGhost是什么 一个博客平台，号称干死WordPress\n如何部署 也算是给daocloud写一个广告文了。docker真是好啊。\n登陆 https://www.daocloud.io/ 注册一个daocloud账号，然后绑定微信 — 这样你就有了三个容器，其中两个我们用于部署ghost，一个用来作为volume（一个分布式存储，用来保存生成的文件，例如主题等）。\n首先我们先配置一下volume，命名为ghost-disk —— 当然，名称并不重要，我想10G的空间应该也不会完全用于ghost的静态文件。\n部署新的代码。首先打开应用列表-\u0026gt;创建应用-\u0026gt;daocloud镜像-\u0026gt;ghost。\n然后看这里就可以了2333 https://dashboard.daocloud.io/packages/3a8d7db6-86c6-4ce3-8f44-c880d3b56128\n添加disqus，多说 添加TOC目录大纲 分享到微信微博 ","date":"2016-04-19T01:00:00+08:00","permalink":"https://svtter.cn/2016/04/19/ghost-wonderfulthings/","title":"Ghost – wonderful things"},{"content":" ;; This gives an introduction to Emacs Lisp in 15 minutes (v0.2d) ;; ;; 英文原作者: Bastien / @bzg2 / http://bzg.fr ;; 中文翻译: iamxuxiao ;; ;; ;; 如何安装 Emacs ;; ;; Debian: apt-get install emacs (or see your distro instructions) ;; MacOSX: http://emacsformacosx.com/emacs-builds/Emacs-24.3-universal-10.6.8.dmg ;; Windows: http://ftp.gnu.org/gnu/windows/emacs/emacs-24.3-bin-i386.zip ;; ;; More general information can be found at: ;; http://www.gnu.org/software/emacs/#Obtaining ;; 免责声明： ;; ;; Going through this tutorial won\u0026#39;t damage your computer unless ;; you get so angry that you throw it on the floor. In that case, ;; I hereby decline any responsability. Have fun! == 启动Emacs, 缓冲区和工作模式== ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; ;; 第一步首先启动Emacs: (在windows中可以双击emacs图标，在Linux中可以输入% emacs \u0026 )， ;; 然后在键盘上键入q 跳过系统欢迎的信息， ;; 先观察在Emacs屏幕的底部，会给出一堆关于当前的工作情况的信息，其中灰色的一行叫做状态行， ;; 在其中你会发现 *scratch* 的字样，这表示你当前的缓冲区(buffer)的名字。 ;; 缓冲区也叫做工作区，在Emacs中打开一个文件，实际只是在Emacs中构造该文件的一个副本，放到缓冲区中， ;; 在Emacs中对该文件的编辑也是针对该副本的编辑，唯有保存改动时，Emacs才会把缓冲区中的内容在复制到原文件中去。 ;; 状态行下面的那行，叫做辅助输入区(minibuffer),该minibuffer用于显示计算结果，以及和用户做交互。 ;; ;; ;; 如何切换Emacs的工作模式 ;; Emacs有各种各样功能各异的模式，工作模式的含义其实就是Emacs对当前的文本编辑工作 ;; 更加的敏感，比如高亮和缩进，并且支持一些特殊的命令。 ;; 为了实验本教程中的lisp命令，我们要让Emacs工作在lisp-interaction-mode工作模式下， ;; 这个模式可以让我们在缓冲区中和Emacs进行互动，并且直接执行Lisp命令,得到结果。 ;; 进入lisp-interaction-mode的方法： 把光标移动到辅助输入区，键入M-x lisp-interaction-mode ;; 然后回车。 == 表达式，变量和函数 == ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; ;; 冒号在Lisp中表示注释 ;; 在Elisp中做运算，调用函数的最简单的方式是 ;; (function arg1 arg2) ;; 这相当于通常的function(arg1,arg2)，下面的表达式，对两个数字进行加法运算 (+ 2 2) ;; Elisp中表达式可以通过括号来嵌套 (+ 2 (+ 1 1)) ;; 在lisp-interaction-mode模式中，我们可以直接计算一个表达式,计算的方法是 (+ 3 (+ 1 2)) ;; ^ 把光标放在这里，并且键入Ctrl-j (之后将简写成C-j) ;; C-j是一个快捷命令，在后台，该快捷键将调用求值命令，并且把计算的结果 ;; 插入到当前的缓冲区中 ;; 如果不希望Emacs在缓冲区中插入计算结果，我们还可以在表达式的末尾使用C-x C-e组合键 ;; C-x C-e的意思是: 先按下Ctrl-x 再按下Ctrl-e ;; 这个命令会让Emacs在辅助缓冲区，也就是Emacs窗口的最底部那行显示计算结果 ;; ELisp中的赋值函数是是setq，下面的表达式给变量my-name赋值\"Bastien\" (setq my-name \"Bastien\") ;; ^ 把光标停在这里，再键入C-x C-e ;; 下面insert函数的作用是在光标所在出插入字符Hello (insert \"Hello!\") ;; ^ 把光标停在这里，再键入C-x C-e ;; insert函数还可以两个常量字符，比如 (insert \"Hello\" \" world!\") ;; insert函数还可以接受变量作为参数，我们之前已经给my-name变量赋过值了 ;; 所以下面命令的输出结果是 \"Hello, I am Bastien\" (insert \"Hello, I am \" my-name) ;; defun命令用来定义一个函数,语法是 ;; (defun 函数名 (参数列表) (函数体)) (defun hello () (insert \"Hello, I am \" my-name)) ;; ^ 把光标停在这里，再键入C-x C-e 执行defun命令来定义函数 ;; 通过defun命令，你已经在Emacs中安装了这个hello函数，这个函数就成为了Emacs的一部分，知道你退出Emacs或者改变hello的定义 ;; 从下面开始，我们将不再提醒读者使用C-x C-e来定义函数和执行ELisp指令 ;; 在Elisp中直接输入函数的名称就是调用该函数。 ;; 下面的命令的输入结果是: Hello, I am Bastien (hello) ;; 前面定义的hello函数不接受任何参数,过于简单， ;; 现在我们重新定义hello函数，让它接受一个参数name。 (defun hello (name) (insert \"Hello \" name)) ;; 然后调用新的hello函数，并且提供一个参数。 ;; 下面命令的输出结果是\"Hello you\" (hello \"you\") == progn,let和交互式函数== ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; ;; 执行switch-to-buffer-other-window命令，将在在一个新的窗口中打开一个buffer ;; 该buffer命名叫做 test, 并且把光标移到新的buffer的窗口中。 (switch-to-buffer-other-window \"*test*\") ;; 要回到原来的buffer中，可以使用鼠标点击原来的buffer ;; 或者使用组合键 C-x o ;; C-x o的意思是: 先按下Ctrl-x 再按下o ;; 如果要执行一系列的指令，可以使用流程函数progn，把函数命令连接起来. ;; 下面的命令,先打开一个新的buffer,再执行hello函数，该hello函数的参数是\"you\" (progn (switch-to-buffer-other-window \"*test*\") (hello \"you\")) ;; 如果要清空一个buffer,可以调用erase-buffer函数。下面的命令先清空test buffer,再调用hello函数做打印 (progn (switch-to-buffer-other-window \"*test*\") (erase-buffer) (hello \"there\")) ;; 在这一系列的质量后面再添加调用一个other-window函数，这样在hello函数被调用完毕之后 ;; 光标自动回到之前的buffer窗口中 (progn (switch-to-buffer-other-window \"*test*\") (erase-buffer) (hello \"you\") (other-window 1)) ;; let函数用来做局部变量的定义 下面的一系列命令中 ;; let函数首先定义local-name变量的值为“you” ;; 然后接着执行括号中其它的语句块部分，这个功能和progn类似 (let ((local-name \"you\")) (switch-to-buffer-other-window \"*test*\") (erase-buffer) (hello local-name) (other-window 1)) ;; format函数可以用做格式化的输出 其中%s表示该s的地方将被之后提供的一个字符串,即visitor替换 ;; \\n表示换行 (format \"Hello %s!\\n\" \"visitor\") ;; 现在我们利用format函数来改进之前定义的hello函数 (defun hello (name) (insert (format \"Hello %s!\\n\" name))) ;; 执行这个函数结果是\"Hello you\"，并且光标换到下一行 (hello \"you\") ;; 下面我们再设计一个greeting函数，该函数接受一个参数name, ;; 在函数体的内部又使用了let函数，给一个局部变量your-name赋值 ;; 最后把参数和局部变量格式化的打印出来 (defun greeting (name) (let ((your-name \"Bastien\")) (insert (format \"Hello %s!\\n\\nI am %s.\" name your-name ; 局部变量 )))) ;; 执行greeting函数，并提供\"you\"字符串作为参数 (greeting \"you\") ;; read-from-minibuffer函数提供和用户交互的功能，这个函数可以帮助Elisp程序从用户处得到输入 (read-from-minibuffer \"Enter your name: \") ;; 比如如果我们希望greeting函数能够从用户处得到姓名，并且做打印格式化的欢迎信息。 ;; 可以先调用read-from-minibuffer在minibuffer中提示用户输入姓名， ;; 然后把得到的结果赋给局部变量your-name， ;; 最后insert函数在当前buffer中插入格式化的输出 (defun greeting (from-name) (let ((your-name (read-from-minibuffer \"Enter your name: \"))) (insert (format \"Hello!\\n\\nI am %s and you are %s.\" from-name ; 格式化输出参数1 your-name ; 格式化输出参数2 )))) ;; 执行这个函数 (greeting \"Bastien\") ;; 再稍加改进greeting 把结果打印在新的buffer中 (defun greeting (from-name) (let ((your-name (read-from-minibuffer \"Enter your name: \"))) (switch-to-buffer-other-window \"*test*\") (erase-buffer) (insert (format \"Hello %s!\\n\\nI am %s.\" your-name from-name)) (other-window 1))) ;; 执行这个函数 (greeting \"Bastien\") == 列表和综合实例 == ;; Lisp中使用括号构造列表，使用setq给变量赋值。 ;; 下面的命令先构造一个列表，再把这个列表赋给list-of-names变量 (setq list-of-names \u0026#39;(\"Sarah\" \"Chloe\" \"Mathilde\")) ;; ^这里的单引号表示这是一个列表 ;; 如果想要得到列表中的第一个元素，可以使用car函数 (car list-of-names) ;; 如果想要得到列表中的除第一个元素以外的其它元素，可以使用cdr函数 (cdr list-of-names) ;; 以后push函数可以在列表的头部插入新的元素，所以下面的命令将改变list-of-name中元素的个数 (push \"Stephanie\" list-of-names) ;; mapcar函数对列表中的把列表中的每一个元素分别取出来，赋给hello函数 (mapcar \u0026#39;hello list-of-names) ;; 重新定义greeting函数，在一个新的，清空的buffer中，对list-of-names列表中的每一个元素，调用hello函数 ;; 调用完毕之后，再让光标回到原的buffer中 (defun greeting () (switch-to-buffer-other-window \"*test*\") (erase-buffer) (mapcar \u0026#39;hello list-of-names) (other-window 1)) ;;执行这个函数，我们将得到一个名叫test的buffer，其中的内容是 ;; Hello Stephanie! ;; Hello Sarah! ;; Hello Chloe! ;; Hello Mathilde! ;; 暂时先不要关闭这个buffer!后面还有用！ (greeting) ;; 下面我们对buffer做一些更有意思的事情！ ;; 定义一个replace-hello-by-bonjour函数，顾名思义，就是把hello替换成bonjour ;; 该函数首先把光标移到一个叫做test的buffer中 ;; 再把光标移到该buffer的开头 ;; 从头开始搜索字符串Hello,并且替换成Bonjour ;; 结束之后在把光标移会到一开始的buffer中。 (defun replace-hello-by-bonjour () (switch-to-buffer-other-window \"*test*\") (goto-char (point-min)) ;该函数把光标移到buffer的开头 (while (search-forward \"Hello\") (replace-match \"Bonjour\")) (other-window 1)) ;; 其中 (search-forward \"Hello\") 在当前的buffer中做前向搜索 ;; (while x y) 当x 的条件满足时执行y指令 ，当x返回nil时，while循环结束 ;; 执行这个函数 替换test buffer中的hello (replace-hello-by-bonjour) ;; test buffer中的结果如下 ;; Bonjour Stephanie! ;; Bonjour Sarah! ;; Bonjour Chloe! ;; Bonjour Mathilde! ;; 在minibuff中，还会有一条错误信息 \"Search failed: Hello\". ;; 把(search-forward \"Hello\")一句换成如下就不会有错误信息了 ;; (search-forward \"Hello\" nil t) ;; 其中 nil参数表示 搜索的区域不加限制，直到buffer结束 ;; 其中t参数指示search-foward函数 跳过错误信息 直接退出 ;; 新hello-to-bonjour如下： (defun hello-to-bonjour () (switch-to-buffer-other-window \"*test*\") (erase-buffer) ;; 对list-of-names列表中的每个元素 使用hello函数 (mapcar \u0026#39;hello list-of-names) (goto-char (point-min)) ;; 搜索Hello替换成Bonjour (while (search-forward \"Hello\" nil t) (replace-match \"Bonjour\")) (other-window 1)) ;; 执行这个函数 (hello-to-bonjour) ;; 下面的boldify-names 函数 ， ;; 首先把光标挪到名叫test的buffer的开头， ;; 然后使用regular expression 搜索 “Bonjour + 其它任何内容” 的pattern， ;; 然后对找到的字符加粗。 (defun boldify-names () (switch-to-buffer-other-window \"*test*\") (goto-char (point-min)) (while (re-search-forward \"Bonjour \\\\(.+\\\\)!\" nil t) (add-text-properties (match-beginning 1) ;返回匹配模式中，最先匹配的位置 (match-end 1) ;返回最后匹配的位置 (list \u0026#39;face \u0026#39;bold))) (other-window 1)) ;; 执行这个函数 (boldify-names) == 帮助和参考== ;; 在Emacs中我们可以通过如下的方式得到变量和函数的帮助信息 ;; C-h v a-variable RET ;; C-h f a-function RET ;; ;; 下面的命令将打开整个Emacs Manual ;; ;; C-h i m elisp RET ;; ;; Emacs Lisp 教程 ;; https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html ;; Thanks to these people for their feedback and suggestions: ;; - Wes Hardaker ;; - notbob ;; - Kevin Montuori ;; - Arne Babenhauserheide ;; - Alan Schmitt ;; - LinXitoW ;; - Aaron Meurer ","date":"2016-04-06T01:00:00+08:00","permalink":"https://svtter.cn/2016/04/06/emacs%E6%B4%97%E8%84%91/","title":"Emacs洗脑"},{"content":"这篇文章是转载的，讲的如何进行函数式编程。\n傻瓜函数式编程 2006年6月19日，星期一\n开篇 我们这些码农做事都是很拖拉的。每天例行报到后，先来点咖啡，看看邮件还有RSS订阅的文章。然后翻翻新闻还有那些技术网站上的更新，再过一遍编程论坛口水区里那些无聊的论战。最后从头把这些再看一次以免错过什么精彩的内容。然后就可以吃午饭了。饭饱过后，回来盯着IDE发一会呆，再看看邮箱，再去搞杯咖啡。光阴似箭，可以回家了……\n（在被众人鄙视之前）我唯一想说的是，在这些拖拉的日子里总会时不时读到一些不明觉厉的文章。如果没有打开不应该打开的网站，每隔几天你都可以看到至少一篇这样的东西。它们的共性：难懂，耗时，于是这些文章就慢慢的堆积成山了。很快你就会发现自己已经累积了一堆的收藏链接还有数不清的PDF文件，此时你只希望隐入一个杳无人烟的深山老林里什么也不做，用一年半载好好的消化这些私藏宝贝。当然，我是说最好每天还是能有人来给送吃的顺带帮忙打扫卫生倒垃圾，哇哈哈。\n我不知道你都收藏了些什么，我的阅读清单里面相当大部分都是函数式编程相关的东东：基本上是最难啃的。这些文章充斥着无比枯燥的教科书语言，我想就连那些在华尔街浸淫10年以上的大牛都无法搞懂这些函数式编程（简称FP）文章到底在说什么。你可以去花旗集团或者德意志银行找个项目经理来问问1：你们为什么要选JMS而不用Erlang？答案基本上是：我认为这个学术用的语言还无法胜任实际应用。可是，现有的一些系统不仅非常复杂还需要满足十分严苛的需求，它们就都是用函数式编程的方法来实现的。这，就说不过去了。\n关于FP的文章确实比较难懂，但我不认为一定要搞得那么晦涩。有一些历史原因造成了这种知识断层，可是FP概念本身并不难理解。我希望这篇文章可以成为一个“FP入门指南”，帮助你从指令式编程走向函数式编程。先来点咖啡，然后继续读下去。很快你对FP的理解就会让同事们刮目相看了。\n什么是函数式编程（Functional Programming，FP）？它从何而来？可以吃吗？倘若它真的像那些鼓吹FP的人说的那么好，为什么实际应用中那么少见？为什么只有那些在读博士的家伙想要用它？而最重要的是，它母亲的怎么就那么难学？那些所谓的closure、continuation，currying，lazy evaluation还有no side effects都是什么东东（译者：本着保留专用术语的原则，此处及下文类似情形均不译）？如果没有那些大学教授的帮忙怎样把它应用到实际工程里去？为什么它和我们熟悉的万能而神圣的指令式编程那么的不一样？\n我们很快就会解开这些谜团。刚才我说过实际工程和学术界之间的知识断层是有其历史原因的，那么就先让我来解释一下这个问题。答案，就在接下来的一次公园漫步中：\n公园漫步 时间机器启动……我们来到公元前380年，也就是2000多年前的雅典城外。这是一个阳光明媚的久违的春天，柏拉图和一个帅气的小男仆走在一片橄榄树荫下。他们正准备前往一个学院。天气很好，吃得很饱，渐渐的，两人的谈话转向了哲学。\n“你看那两个学生，哪一个更高一些？”，柏拉图小心的选择用字，以便让这个问题更好的引导眼前的这个小男孩。\n小男仆望向水池旁边的两个男生，“他们差不多一样高。”。\n“‘差不多一样高’是什么意思？”柏拉图问。\n“嗯……从这里看来他们是一样高的，但是如果走近一点我肯定能看出差别来。”\n柏拉图笑了。他知道这个小孩已经朝他引导的方向走了。“这么说来你的意思是世界上没有什么东西是完全相同的咯？”\n思考了一会，小男孩回答：“是的。万物之间都至少有一丁点差别，哪怕我们无法分辨出来。”\n说到点子上了！“那你说，如果世界上没有什么东西是完全相等的，你怎么理解‘完全相等’这个概念？”\n小男仆看起来很困惑。“这我就不知道了。”\n这是人类第一次试图了解数学的本质。柏拉图认为我们所在的世界中，万事万物都是完美模型的一个近似。他同时意识到虽然我们不能感受到完美的模型，但这丝毫不会阻止我们了解完美模型的概念。柏拉图进而得出结论：完美的数学模型只存在于另外一个世界，而因为某种原因我们却可以通过联系着这两个世界的一个纽带来认识这些模型。一个简单的例子就是完美的圆形。没有人见过这样的一个圆，但是我们知道怎样的圆是完美的圆，而且可以用公式把它描述出来。\n如此说来，什么是数学呢？为什么可以用数学法则来描述我们的这个宇宙？我们所处的这个世界中万事万物都可以用数学来描述吗？2\n数理哲学是一门很复杂的学科。它和其他多数哲学一样，更着重于提出问题而不是给出答案。数学就像拼图一样，很多结论都是这样推导出来的：先是确立一些互不冲突的基础原理，以及一些操作这些原理的规则，然后就可以把这些原理以及规则拼凑起来形成新的更加复杂的规则或是定理了。数学家把这种方法称为“形式系统”或是“演算”。如果你想做的话，可以用形式系统描述俄罗斯方块这个游戏。而事实上，俄罗斯方块这个游戏的实现，只要它正确运行，就是一个形式系统。只不过它以一种不常见的形式表现出来罢了。\n如果半人马阿尔法上有文明存在的话，那里的生物可能无法解读我们的俄罗斯方块形式系统甚至是简单的圆形的形式系统，因为它们感知世界的唯一器官可能只有鼻子（译者：偶的妈你咋知道？）也许它们是无法得知俄罗斯方块的形式系统了，但是它们很有可能知道圆形。它们的圆形我们可能没法解读，因为我们的鼻子没有它们那么灵敏（译者：那狗可以么？）可是只要越过形式系统的表示方式（比如通过使用“超级鼻子”之类的工具来感知这些用味道表示的形式系统，然后使用标准的解码技术把它们翻译成人类能理解的语言），那么任何有足够智力的文明都可以理解这些形式系统的本质。\n有意思的是，哪怕宇宙中完全不存在任何文明，类似俄罗斯方块还有圆形这样的形式系统依旧是成立的：只不过没有智慧生物去发现它们而已。这个时候如果忽然一个文明诞生了，那么这些具有智慧的生物就很有可能发现各种各样的形式系统，并且用它们发现的系统去描述各种宇宙法则。不过它们可能不会发现俄罗斯方块这样的形式系统，因为在它们的世界里没有俄罗斯方块这种东西嘛。有很多像俄罗斯方块这样的形式系统是与客观世界无关的，比如说自然数，很难说所有的自然数都与客观世界有关，随便举一个超级大的数，这个数可能就和世界上任何事物无关，因为这个世界可能不是无穷大的。\n历史回眸3 再次启动时间机……这次到达的是20世纪30年代，离今天近了很多。无论新旧大陆，经济大萧条都造成了巨大的破坏。社会各阶层几乎每一个家庭都深受其害。只有极其少数的几个地方能让人们免于遭受穷困之苦。几乎没有人能够幸运的在这些避难所里度过危机，注意，我说的是几乎没有，还真的有这么些幸运儿，比如说当时普林斯顿大学的数学家们。\n新建成的哥特式办公楼给普林斯顿大学带来一种天堂般的安全感。来自世界各地的逻辑学者应邀来到普林斯顿，他们将组建一个新的学部。正当大部分美国人还在为找不到一片面包做晚餐而发愁的时候，在普林斯顿却是这样一番景象：高高的天花板和木雕包覆的墙，每天品茶论道，漫步丛林。\n一个名叫阿隆佐·邱奇(Alonzo Church)的年轻数学家就过着这样优越的生活。阿隆佐本科毕业于普林斯顿后被留在研究院。他觉得这样的生活完全没有必要，于是他鲜少出现在那些数学茶会中也不喜欢到树林里散心。阿隆佐更喜欢独处：自己一个人的时候他的工作效率更高。尽管如此他还是和普林斯顿学者保持着联系，这些人当中有艾伦·图灵、约翰·冯·诺伊曼、库尔特·哥德尔。\n这四个人都对形式系统感兴趣。相对于现实世界，他们更关心如何解决抽象的数学问题。而他们的问题都有这么一个共同点：都在尝试解答关于计算的问题。诸如：如果有一台拥有无穷计算能力的超级机器，可以用来解决什么问题？它可以自动的解决这些问题吗？是不是还是有些问题解决不了，如果有的话，是为什么？如果这样的机器采用不同的设计，它们的计算能力相同吗？\n在与这些人的合作下，阿隆佐设计了一个名为lambda演算的形式系统。这个系统实质上是为其中一个超级机器设计的编程语言。在这种语言里面，函数的参数是函数，返回值也是函数。这种函数用希腊字母lambda（λ），这种系统因此得名4。有了这种形式系统，阿隆佐终于可以分析前面的那些问题并且能够给出答案了。\n除了阿隆佐·邱奇，艾伦·图灵也在进行类似的研究。他设计了一种完全不同的系统（后来被称为图灵机），并用这种系统得出了和阿隆佐相似的答案。到了后来人们证明了图灵机和lambda演算的能力是一样的。\n如果二战没有发生，这个故事到这里就应该结束了，我的这篇小文没什么好说的了，你们也可以去看看有什么其他好看的文章。可是二战还是爆发了，整个世界陷于火海之中。那时的美军空前的大量使用炮兵。为了提高轰炸的精度，军方聘请了大批数学家夜以继日的求解各种差分方程用于计算各种火炮发射数据表。后来他们发现单纯手工计算这些方程太耗时了，为了解决这个问题，各种各样的计算设备应运而生。IBM制造的Mark一号就是用来计算这些发射数据表的第一台机器。Mark一号重5吨，由75万个零部件构成，每一秒可以完成3次运算。\n战后，人们为提高计算能力而做出的努力并没有停止。1949年第一台电子离散变量自动计算机诞生并取得了巨大的成功。它是冯·诺伊曼设计架构的第一个实例，也是一台现实世界中实现的图灵机。相比他的这些同事，那个时候阿隆佐的运气就没那么好了。\n到了50年代末，一个叫John McCarthy的MIT教授（他也是普林斯顿的硕士）对阿隆佐的成果产生了兴趣。1958年他发明了一种列表处理语言（Lisp），这种语言是一种阿隆佐lambda演算在现实世界的实现，而且它能在冯·诺伊曼计算机上运行！很多计算机科学家都认识到了Lisp强大的能力。1973年在MIT人工智能实验室的一些程序员研发出一种机器，并把它叫做Lisp机。于是阿隆佐的lambda演算也有自己的硬件实现了！\n函数式编程 函数式编程是阿隆佐思想的在现实世界中的实现。不过不是全部的lambda演算思想都可以运用到实际中，因lambda演算在设计的时候就不是为了在各种现实世界中的限制下工作的。所以，就像面向对象的编程思想一样，函数式编程只是一系列想法，而不是一套严苛的规定。有很多支持函数式编程的程序语言，它们之间的具体设计都不完全一样。在这里我将用Java写的例子介绍那些被广泛应用的函数式编程思想（没错，如果你是受虐狂你可以用Java写出函数式程序）。在下面的章节中我会在Java语言的基础上，做一些修改让它变成实际可用的函数式编程语言。那么现在就开始吧。\nLambda演算在最初设计的时候就是为了研究计算相关的问题。所以函数式编程主要解决的也是计算问题，而出乎意料的是，是用函数来解决的！（译者：请理解原作者的苦心，我想他是希望加入一点调皮的风格以免读者在中途睡着或是转台……）。函数就是函数式编程中的基础元素，可以完成几乎所有的操作，哪怕最简单的计算，也是用函数完成的。我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式（这样我们就不用把所有的代码都写在同一行里了）。所以我们这里所说的‘变量’是不能被修改的。所有的变量只能被赋一次初值。在Java中就意味着每一个变量都将被声明为final（如果你用C++，就是const）。在FP中，没有非final的变量。\nfinal int i = 5; final int j = i + 3; 既然FP中所有的变量都是final的，可以引出两个规定：一是变量前面就没有必要再加上final这个关键字了，二是变量就不能再叫做‘变量’了……于是现在开始对Java做两个改动：所有Java中声明的变量默认为final，而且我们把所谓的‘变量’称为‘符号’。\n到现在可能会有人有疑问：这个新创造出来的语言可以用来写什么有用的复杂一些的程序吗？毕竟，如果每个符号的值都是不能修改的，那么我们就什么东西都不能改变了！别紧张，这样的说法不完全正确。阿隆佐在设计lambda演算的时候他并不想要保留状态的值以便稍后修改这些值。他更关心的是基于数据之上的操作（也就是更容易理解的“计算”）。而且，lambda演算和图灵机已经被证明了是具有同样能力的系统，因此指令式编程能做到的函数式编程也同样可以做到。那么，怎样才能做到呢？\n事实上函数式程序是可以保存状态的，只不过它们用的不是变量，而是函数。状态保存在函数的参数中，也就是说在栈上。如果你需要保存一个状态一段时间并且时不时的修改它，那么你可以编写一个递归函数。举个例子，试着写一个函数，用来反转一个Java的字符串。记住咯，这个程序里的变量都是默认为final的5。\nString reverse(String arg) { if(arg.length == ) { return arg; } else { return reverse(arg.substring(1, arg.length)) + arg.substring(, 1); } } 这个方程运行起来会相对慢一些，因为它重复调用自己6。同时它也会大量的消耗内存，因为它会不断的分配创建内存对象。无论如何，它是用函数式编程思想写出来的。这时候可能有人要问了，为什么要用这种奇怪的方式编写程序呢？嘿，我正准备告诉你。\nFP之优点 你大概已经在想：上面这种怪胎函数怎么也不合理嘛。在我刚开始学习FP的时候我也这样想的。不过后来我知道我是错的。使用这种方式编程有很多好处。其中一些是主观的。比如说有人认为函数式程序更容易理解。这个我就不说了，哪怕街上随便找个小孩都知道‘容易理解’是多么主观的事情。幸运的是，客观方面的好处还有很多。\n单元测试 因为FP中的每个符号都是final的，于是没有什么函数会有副作用。谁也不能在运行时修改任何东西，也没有函数可以修改在它的作用域之外修改什么值给其他函数继续使用（在指令式编程中可以用类成员或是全局变量做到）。这意味着决定函数执行结果的唯一因素就是它的返回值，而影响其返回值的唯一因素就是它的参数。\n这正是单元测试工程师梦寐以求的啊。现在测试程序中的函数时只需要关注它的参数就可以了。完全不需要担心函数调用的顺序，也不用费心设置外部某些状态值。唯一需要做的就是传递一些可以代表边界条件的参数给这些函数。相对于指令式编程，如果FP程序中的每一个函数都能通过单元测试，那么我们对这个软件的质量必将信心百倍。反观Java或者C++，仅仅检查函数的返回值是不够的：代码可能修改外部状态值，因此我们还需要验证这些外部的状态值的正确性。在FP语言中呢，就完全不需要。\n调试查错 如果一段FP程序没有按照预期设计那样运行，调试的工作几乎不费吹灰之力。这些错误是百分之一百可以重现的，因为FP程序中的错误不依赖于之前运行过的不相关的代码。而在一个指令式程序中，一个bug可能有时能重现而有些时候又不能。因为这些函数的运行依赖于某些外部状态， 而这些外部状态又需要由某些与这个bug完全不相关的代码通过某个特别的执行流程才能修改。在FP中这种情况完全不存在：如果一个函数的返回值出错了，它一直都会出错，无论你之前运行了什么代码。\n一旦问题可以重现，解决它就变得非常简单，几乎就是一段愉悦的旅程。中断程序的运行，检查一下栈，就可以看到每一个函数调用时使用的每一个参数，这一点和指令式代码一样。不同的是指令式程序中这些数据还不足够，因为函数的运行还可能依赖于成员变量，全局变量，还有其他类的状态（而这些状态又依赖于类似的变量）。FP中的函数只依赖于传给它的参数，而这些参数就在眼前！还有，对指令式程序中函数返回值的检查并不能保证这个函数是正确运行的。还要逐一检查若干作用域以外的对象以确保这个函数没有对这些牵连的对象做出什么越轨的行为（译者：好吧，翻译到这里我自己已经有点激动了）。对于一个FP程序，你要做的仅仅是看一下函数的返回值。\n把栈上的数据过一遍就可以得知有哪些参数传给了什么函数，这些函数又返回了什么值。当一个返回值看起来不对头的那一刻，跳进这个函数看看里面发生了什么。一直重复跟进下去就可以找到bug的源头！\n并发执行 不需要任何改动，所有FP程序都是可以并发执行的。由于根本不需要采用锁机制，因此完全不需要担心死锁或是并发竞争的发生。在FP程序中没有哪个线程可以修改任何数据，更不用说多线程之间了。这使得我们可以轻松的添加线程，至于那些祸害并发程序的老问题，想都不用想！\n既然是这样，为什么没有人在那些高度并行的那些应用程序中采用FP编程呢？事实上，这样的例子并不少见。爱立信开发了一种FP语言，名叫Erlang，并应用在他们的电信交换机上，而这些交换机不仅容错度高而且拓展性强。许多人看到了Erlang的这些优势也纷纷开始使用这一语言。在这里提到的电信交换控制系统远远要比华尔街上使用的系统具有更好的扩展性也更可靠。事实上，用Erlang搭建的系统并不具备可扩展性和可靠性，而Java可以提供这些特性。Erlang只是像岩石一样结实不容易出错而已。\nFP关于并行的优势不仅于此。就算某个FP程序本身只是单线程的，编译器也可以将其优化成可以在多CPU上运行的并发程序。以下面的程序为例：\nString s1 = somewhatLongOperation1(); String s2 = somewhatLongOperation2(); String s3 = concatenate(s1, s2); 如果是函数式程序，编译器就可以对代码进行分析，然后可能分析出生成字符串s1和s2的两个函数可能会比较耗时，进而安排它们并行运行。这在指令式编程中是无法做到的，因为每一个函数都有可能修改其外部状态，然后接下来的函数又可能依赖于这些状态的值。在函数式编程中，自动分析代码并找到适合并行执行的函数十分简单，和分析C的内联函数没什么两样。从这个角度来说用FP风格编写的程序是“永不过时”的（虽然我一般不喜欢说大话空话，不过这次就算个例外吧）。硬件厂商已经没办法让CPU运行得再快了。他们只能靠增加CPU核的数量然后用并行来提高运算的速度。这些厂商故意忽略一个事实：只有可以并行的软件才能让你花大价钱买来的这些硬件物有所值。指令式的软件中只有很小一部分能做到跨核运行，而所有的函数式软件都能实现这一目标，因为FP的程序从一开始就是可以并行运行的。\n热部署 在Windows早期，如果要更新系统那可是要重启电脑的，而且还要重启很多次。哪怕只是安装一个新版本的播放器。到了XP的时代这种情况得到比较大的改善，尽管还是不理想（我工作的时候用的就是Windows，就在现在，我的系统托盘上就有个讨厌的图标，我不重启机子就不消失）。这一方面Unix好一些，曾经。只需要暂停一些相关的部件而不是整个操作系统，就可以安装更新了。虽然是要好一些了，对很多服务器应用来说这也还是不能接受的。电信系统要求的是100%的在线率，如果一个救急电话因为系统升级而无法拨通，成千上万的人就会因此丧命。同样的，华尔街的那些公司怎么也不能说要安装软件而在整个周末停止他们系统的服务。\n最理想的情况是更新相关的代码而不用暂停系统的其他部件。对指令性程序来说是不可能的。想想看，试着在系统运行时卸载掉一个Java的类然后再载入这个类的新的实现，这样做的话系统中所有该类的实例都会立刻不能运行，因为该类的相关状态已经丢失了。这种情况下可能需绞尽脑汁设计复杂的版本控制代码，需要将所有这种类正在运行的实例序列化，逐一销毁它们，然后创建新类的实例，将现有数据也序列化后装载到这些新的实例中，最后希望负责装载的程序可以正确的把这些数据移植到新实例中并正常的工作。这种事很麻烦，每次有新的改动都需要手工编写装载程序来完成更新，而且这些装载程序还要很小心，以免破坏了现有对象之间的联系。理论上是没问题，可是实际上完全行不通。\nFP的程序中所有状态就是传给函数的参数，而参数都是储存在栈上的。这一特性让软件的热部署变得十分简单。只要比较一下正在运行的代码以及新的代码获得一个diff，然后用这个diff更新现有的代码，新代码的热部署就完成了。其它的事情有FP的语言工具自动完成！如果还有人认为这只存在于科幻小说中，他需要再想想：多年来Erlang工程师已经使用这种技术对它们的系统进行升级而完全不用暂停运行了。\n机器辅助优化及证明 FP语言有一个特性很有意思，那就是它们是可以用数学方法来分析的。FP语言本身就是形式系统的实现，只要是能在纸上写出来的数学运算就可以用这种语言表述出来。于是只要能够用数学方法证明两段代码是一致的，编译器就可以把某段代码解析成在数学上等同的但效率又更高的另外一段代码7。 关系数据库已经用这种方法进行优化很多年了。没有理由在常规的软件行业就不能应用这种技术。\n另外，还可以用这种方法来证明代码的正确性，甚至可以设计出能够自动分析代码并为单元测试自动生成边缘测试用例的工具出来！对于那些对缺陷零容忍的系统来说，这一功能简直就是无价之宝。例如心脏起搏器，例如飞行管控系统，这几乎就是必须满足的需求。哪怕你正在开发的程序不是为了完成什么重要核心任务，这些工具也可以帮助你写出更健壮的程序，直接甩竞争对手n条大街。\n高阶函数 我还记得在了解到FP以上的各种好处后想到：“这些优势都很吸引人，可是，如果必须非要用这种所有变量都是final的蹩脚语言，估计还是不怎么实用吧”。其实这样的想法是不对的。对于Java这样的指令式语言来说，如果所有的变量都是必须是final的，那么确实很束手束脚。然而对函数式语言来说，情况就不一样了。函数式语言提供了一种特别的抽象工具，这种工具将帮助使用者编写FP代码，让他们甚至都没想到要修改变量的值。高阶函数就是这种工具之一。\nFP语言中的函数有别于Java或是C。可以说这种函数是一个全集：Java函数可以做到的它都能做，同时它还有更多的能力。首先，像在C里写程序那样创建一个函数：\nint add(int i, int j) { return i + j; } 看起来和C程序没什么区别，但是很快你就可以看出区别来。接下来我们扩展Java的编译器以便支持这种代码，也就是说，当我们写下以上的程序编译器会把它转化成下面的Java程序（别忘了，所有的变量都是final的）：\nclass add_function_t { int add(int i, int j) { return i + j; } } add_function_t add = new add_function_t(); 在这里，符号add并不是一个函数，它是只有一个函数作为其成员的简单的类。这样做有很多好处，可以在程序中把add当成参数传给其他的函数，也可以把add赋给另外一个符号，还可以在运行时创建add_function_t的实例然后在不再需要这些实例的时候由系统回收机制处理掉。这样做使得函数成为和integer或是string这样的第一类对象。对其他函数进行操作（比如说把这些函数当成参数）的函数，就是所谓的高阶函数。别让这个看似高深的名字吓倒你（译者：好死不死起个这个名字，初一看还准备搬出已经尘封的高数教材……），它和Java中操作其他类（也就是把一个类实例传给另外的类）的类没有什么区别。可以称这样的类为“高阶类”，但是没人会在意，因为Java圈里就没有什么很强的学术社团。（译者：这是高级黑吗？）\n那么什么时候该用高阶函数，又怎样用呢？我很高兴有人问这个问题。设想一下，你写了一大堆程序而不考虑什么类结构设计，然后发现有一部分代码重复了几次，于是你就会把这部分代码独立出来作为一个函数以便多次调用（所幸学校里至少会教这个）。如果你发现这个函数里有一部分逻辑需要在不同的情况下实现不同的行为，那么你可以把这部分逻辑独立出来作为一个高阶函数。搞晕了？下面来看看我工作中的一个真实的例子。\n假设有一段Java的客户端程序用来接收消息，用各种方式对消息做转换，然后发给一个服务器。\nclass MessageHandler { void handleMessage(Message msg) { // ... msg.setClientCode(\"ABCD_123\"); // ... sendMessage(msg); } // ... } 再进一步假设，整个系统改变了，现在需要发给两个服务器而不再是一个了。系统其他部分都不变，唯独客户端的代码需要改变：额外的那个服务器需要用另外一种格式发送消息。应该如何处理这种情况呢？我们可以先检查一下消息要发送到哪里，然后选择相应的格式把这个消息发出去：\nclass MessageHandler { void handleMessage(Message msg) { // ... if(msg.getDestination().equals(\"server1\") { msg.setClientCode(\"ABCD_123\"); } else { msg.setClientCode(\"123_ABC\"); } // ... sendMessage(msg); } // ... } 可是这样的实现是不具备扩展性的。如果将来需要增加更多的服务器，上面函数的大小将呈线性增长，使得维护这个函数最终变成一场噩梦。面向对象的编程方法告诉我们，可以把MessageHandler变成一个基类，然后将针对不同格式的消息编写相应的子类。\nabstract class MessageHandler { void handleMessage(Message msg) { // ... msg.setClientCode(getClientCode()); // ... sendMessage(msg); } abstract String getClientCode(); // ... } class MessageHandlerOne extends MessageHandler { String getClientCode() { return \"ABCD_123\"; } } class MessageHandlerTwo extends MessageHandler { String getClientCode() { return \"123_ABCD\"; } } 这样一来就可以为每一个接收消息的服务器生成一个相应的类对象，添加服务器就变得更加容易维护了。可是，这一个简单的改动引出了很多的代码。仅仅是为了支持不同的客户端行为代码，就要定义两种新的类型！现在来试试用我们刚才改造的语言来做同样的事情，注意，这种语言支持高阶函数：\nclass MessageHandler { void handleMessage(Message msg, Function getClientCode) { // ... Message msg1 = msg.setClientCode(getClientCode()); // ... sendMessage(msg1); } // ... } String getClientCodeOne() { return \"ABCD_123\"; } String getClientCodeTwo() { return \"123_ABCD\"; } MessageHandler handler = new MessageHandler(); handler.handleMessage(someMsg, getClientCodeOne); 在上面的程序里，我们没有创建任何新的类型或是多层类的结构。仅仅是把相应的函数作为参数进行传递，就做到了和用面向对象编程一样的事情，而且还有额外的好处：一是不再受限于多层类的结构。这样做可以做运行时传递新的函数，可以在任何时候改变这些函数，而且这些改变不仅更加精准而且触碰的代码更少。这种情况下编译器其实就是在替我们编写面向对象的“粘合”代码（译者：又称胶水代码，粘接代码）！除此之外我们还可以享用FP编程的其他所有优势。函数式编程能提供的抽象服务还远不止于此。高阶函数只不过是个开始。\nCurrying 我遇见的大多数码农都读过“四人帮”的那本《设计模式》。任何稍有自尊心的码农都会说这本书和语言无关，因此无论你用什么编程语言，当中提到的那些模式大体上适用于所有软件工程。听起来很厉害，然而事实却不是这样。\n函数式语言的表达能力很强。用这种语言编程的时候基本不需要设计模式，因为这种语言层次已经足够高，使得使用者可以以概念编程，从而完全不需要设计模式了。以适配器模式为例（有人知道这个模式和外观模式有什么区别吗？怎么觉得有人为了出版合同的要求而硬生生凑页数？）（译者：您不愧是高级黑啊）。对于一个支持currying技术的语言来说，这个模式就是多余的。\n在Java中最有名的适配器模式就是在其“默认”抽象单元中的应用：类。在函数式语言中这种模式其实就是函数。在这个模式中，一个接口被转换成另外一个接口，让不同的用户代码调用。接下来就有一个适配器模式的例子：\nint pow(int i, int j); int square(int i) { return pow(i, 2); } 上面的代码中square函数计算一个整数的平方，这个函数的接口被转换成计算一个整数的任意整数次幂。在学术圈里这种简单的技术就被叫做currying（因为逻辑学家哈斯凯尔·加里用其数学技巧将这种技术描述出来，于是就以他的名字来命名了）。在一个FP语言中函数（而不是类）被作为参数进行传递，currying常常用于转化一个函数的接口以便于其他代码调用。函数的接口就是它的参数，于是currying通常用于减少函数参数的数量（见前例）。\n函数式语言生来就支持这一技术，于是没有必要为某个函数手工创建另外一个函数去包装并转换它的接口，这些函数式语言已经为你做好了。我们继续拓展Java来支持这一功能。\nsquare = int pow(int i, 2); 上面的语句实现了一个平方计算函数，它只需要一个参数。它会继而调用pow函数并且把第二个参数置为2。编译过后将生成以下Java代码：\nclass square_function_t { int square(int i) { return pow(i, 2); } } square_function_t square = new square_function_t(); 从上面的例子可以看到，很简单的，函数pow的封装函数就创建出来了。在FP语言中currying就这么简单：一种可以快速且简单的实现函数封装的捷径。我们可以更专注于自己的设计，编译器则会为你编写正确的代码！什么时候使用currying呢？很简单，当你想要用适配器模式（或是封装函数）的时候，就是用currying的时候。\n惰性求值 惰性求值（或是延迟求值）是一种有趣的技术，而当我们投入函数式编程的怀抱后这种技术就有了得以实现的可能。前面介绍并发执行的时候已经提到过如下代码：\nString s1 = somewhatLongOperation1(); String s2 = somewhatLongOperation2(); String s3 = concatenate(s1, s2); 在指令式语言中以上代码执行的顺序是显而易见的。由于每个函数都有可能改动或者依赖于其外部的状态，因此必须顺序执行。先是计算somewhatLongOperation1，然后到somewhatLongOperation2，最后执行concatenate。函数式语言就不一样了。\n在前面讨论过，somewhatLongOperation1和somewhatLongOperation2是可以并发执行的，因为函数式语言保证了一点：没有函数会影响或者依赖于全局状态。可是万一我们不想要这两个函数并发执行呢？这种情况下是不是也还是要顺序执行这些函数？答案是否定的。只有到了执行需要s1、s2作为参数的函数的时候，才真正需要执行这两个函数。于是在concatenate这个函数没有执行之前，都没有需要去执行这两个函数：这些函数的执行可以一直推迟到concatenate()中需要用到s1和s2的时候。假如把concatenate换成另外一个函数，这个函数中有条件判断语句而且实际上只会需要两个参数中的其中一个，那么就完全没有必要执行计算另外一个参数的函数了！Haskell语言就是一个支持惰性求值的例子。Haskell不能保证任何语句会顺序执行（甚至完全不会执行到），因为Haskell的代码只有在需要的时候才会被执行到。\n除了这些优点，惰性求值也有缺点。这里介绍了它的优点，我们将在下一章节介绍这些缺点以及如何克服它们。\n代码优化 惰性求值使得代码具备了巨大的优化潜能。支持惰性求值的编译器会像数学家看待代数表达式那样看待函数式程序：抵消相同项从而避免执行无谓的代码，安排代码执行顺序从而实现更高的执行效率甚至是减少错误。在此基础上优化是不会破坏代码正常运行的。严格使用形式系统的基本元素进行编程带来的最大的好处，是可以用数学方法分析处理代码，因为这样的程序是完全符合数学法则的。\n抽象化控制结构 惰性求值技术提供了更高阶的抽象能力，这提供了实现程序设计独特的方法。比如说下面的控制结构：\nunless(stock.isEuropean()) { sendToSEC(stock); } 程序中只有在stock为European的时候才执行sendToSEC。如何实现例子中的unless？如果没有惰性求值就需要求助于某种形式的宏（译者：用if不行么？），不过在像Haskell这样的语言中就不需要那么麻烦了。直接实现一个unless函数就可以！\nvoid unless(boolean condition, List code) { if(!condition) code; } 请注意，如果condition值为真，那就不会计算code。在其他严格语言（见严格求值）中这种行为是做不到的，因为在进入unless这个函数之前，作为参数的code已经被计算过了。\n无穷数据结构 惰性求值技术允许定义无穷数据结构，这要在严格语言中实现将非常复杂。例如一个储存Fibonacci数列数字的列表。很明显这样一个列表是无法在有限的时间内计算出这个无穷的数列并存储在内存中的。在像Java这样的严格语言中，可以定义一个Fibonacci函数，返回这个序列中的某个数。而在Haskell或是类似的语言中，可以把这个函数进一步抽象化并定义一个Fibonacci数列的无穷列表结构。由于语言本身支持惰性求值，这个列表中只有真正会被用到的数才会被计算出来。这让我们可以把很多问题抽象化，然后在更高的层面上解决它们（比如可以在一个列表处理函数中处理无穷多数据的列表）。\n不足之处 俗话说天下没有免费的午餐™。惰性求值当然也有其缺点。其中最大的一个就是，嗯，惰性。现实世界中很多问题还是需要严格求值的。比如说下面的例子：\nSystem.out.println(\"Please enter your name: \"); System.in.readLine(); 在惰性语言中没人能保证第一行会中第二行之前执行！这也就意味着我们不能处理IO，不能调用系统函数做任何有用的事情（这些函数需要按照顺序执行，因为它们依赖于外部状态），也就是说不能和外界交互了！如果在代码中引入支持顺序执行的代码原语，那么我们就失去了用数学方式分析处理代码的优势（而这也意味着失去了函数式编程的所有优势）。幸运的是我们还不算一无所有。数学家们研究了不同的方法用以保证代码按一定的顺序执行（in a functional setting?）。这一来我们就可以同时利用到函数式和指令式编程的优点了！这些方法有continuations，monads以及uniqueness typing。这篇文章仅仅介绍了continuations，以后再讨论monads和uniqueness typing。有意思的是呢，coutinuations处理强制代码以特定顺序执行之外还有其他很多出处，这些我们在后面也会提及。\nContinuation continuation对于编程，就像是达芬奇密码对于人类历史一样：它揭开了人类有史以来最大的谜团。好吧，也许没有那么夸张，不过它们的影响至少和当年发现负数有平方根不相上下。\n我们对函数的理解只有一半是正确的，因为这样的理解基于一个错误的假设：函数一定要把其返回值返回给调用者。按照这样的理解，continuation就是更加广义的函数。这里的函数不一定要把返回值传回给调用者，相反，它可以把返回值传给程序中的任意代码。continuation就是一种特别的参数，把这种参数传到函数中，函数就能够根据continuation将返回值传递到程序中的某段代码中。说得很高深，实际上没那么复杂。直接来看看下面的例子好了：\nint i = add(5, 10); int j = square(i); add这个函数将返回15然后这个值会赋给i，这也是add被调用的地方。接下来i的值又会被用于调用square。请注意支持惰性求值的编译器是不能打乱这段代码执行顺序的，因为第二个函数的执行依赖于第一个函数成功执行并返回结果。这段代码可以用Continuation Pass Style（CPS）技术重写，这样一来add的返回值就不是传给其调用者，而是直接传到square里去了。\nint j = add(5, 10, square); 在上例中，add多了一个参数：一个函数，add必须在完成自己的计算后，调用这个函数并把结果传给它。这时square就是add的一个continuation。上面两段程序中j的值都是225。\n这样，我们学习到了强制惰性语言顺序执行两个表达式的第一个技巧。再来看看下面IO程序（是不是有点眼熟？）：\nSystem.out.println(\"Please enter your name: \"); System.in.readLine(); 这两行代码彼此之间没有依赖关系，因此编译器可以随意的重新安排它们的执行顺序。可是只要用CPS重写它，编译器就必须顺序执行了，因为重写后的代码存在依赖关系了。\nSystem.out.println(\"Please enter your name: \", System.in.readLine); 这段新的代码中println需要结合其计算结果调用readLine，然后再返回readLine的返回值。这使得两个函数得以保证按顺序执行而且readLine总被执行（这是由于整个运算需要它的返回值作为最终结果）。Java的println是没有返回值的，但是如果它可以返回一个能被readnLine接受的抽象值，问题就解决了！（译者：别忘了，这里作者一开始就在Java的基础上修改搭建自己的语言）当然，如果一直把函数按照这种方法串下去，代码很快就变得不可读了，可是没有人要求你一定要这样做。可以通过在语言中添加语法糖的方式来解决这个问题，这样程序员只要按照顺序写代码，编译器负责自动把它们串起来就好了。于是就可以任意安排代码的执行顺序而不用担心会失去FP带来的好处了（包括可以用数学方法来分析我们的程序）！如果到这里还有人感到困惑，可以这样理解，函数只是有唯一成员的类的实例而已。试着重写上面两行程序，让println和readLine编程这种类的实例，所有问题就都搞清楚了。\n到这里本章基本可以结束了，而我们仅仅了解到continuation的一点皮毛，对它的用途也知之甚少。我们可以用CPS完成整个程序，程序里所有的函数都有一个额外的continuation作为参数接受其他函数的返回值。还可以把任何程序转换为CPS的，需要做的只是把当中的函数看作是特殊的continuation（总是将返回值传给调用者的continuation）就可以了，简单到完全可以由工具自动完成（史上很多编译器就是这样做的）。\n一旦将程序转为CPS的风格，有些事情就变得显而易见了：每一条指令都会有一些continuation，都会将它的计算结果传给某一个函数并调用它，在一个普通的程序中这个函数就是该指令被调用并且返回的地方。随便找个之前提到过的代码，比如说add(5,10)好了。如果add属于一个用CPS风格写出的程序，add的continuation很明显就是当它执行结束后要调用的那个函数。可是在一个非CPS的程序中，add的continuation又是什么呢？当然我们还是可以把这段程序转成CPS的，可是有必要这样做吗？\n事实上没有必要。注意观察整个CPS转换过程，如果有人尝试要为CPS程序写编译器并且认真思考过就会发现：CPS的程序是不需要栈的！在这里完全没有函数需要做传统意义上的“返回”操作，函数执行完后仅需要接着调用另外一个函数就可以了。于是就不需要在每次调用函数的时候把参数压栈再将它们从中取出，只要把这些参数存放在一片内存中然后使用跳转指令就解决问题了。也完全不需要保留原来的参数：因为这种程序里的函数都不返回，所以它们不会被用第二次！\n简单点说呢，用CPS风格写出来的程序不需要栈，但是每次调用函数的时候都会要多加一个参数。非CPS风格的程序不需要额外的参数但又需要栈才能运行。栈里面存的是什么？仅仅是参数还有一个供函数运行结束后返回的程序指针而已。这个时候你是不是已经恍然大悟了？对啊，栈里面的数据实际上就是continuation的信息！栈上的程序返回指针实质上就是CPS程序中需要调用的下一个函数！想要知道add(5, 10)的continuation是什么？只要看它运行时栈的内容就可以了。\n接下来就简单多了。continuation和栈上指示函数返回地址的指针其实是同一样东西，只是continuation是显式的传递该地址并且因此代码就不局限于只能返回到函数被调用的地方了。前面说过，continuation就是函数，而在我们特制的语言中函数就是类的实例，那么可以得知栈上指向函数返回地址的指针和continuation的参数是一样的，因为我们所谓的函数（就像类的一个实例）其实就是指针。这也意味着在程序运行的任何时候，你都可以得到当前的continuation（就是栈上的信息）。\n好了，我们已经搞清楚当前的continuation是什么了。接下来要弄明白它的存在有什么意义。只要得到了当前的continuation并将它保存起来，就相当于保存了程序的当前状态：在时间轴上把它冻结起来了。这有点像操作系统进入休眠状态。continuation对象保存了足够的信息随时可以从指定的某个状态继续运行程序。在切换线程的时候操作系统也是这样做的。唯一的区别在于它保留了所有的控制权利。当请求某个continuation对象时（在Scheme语言中是通过调用call-with-current-continuation函数实现的）得到的是一个存有当前continuation的对象，也就是栈对象（在CPS中也就是下一个要执行的函数）。可以把这个对象保存做一个变量中（或者是存在磁盘上）。当以该continuation对象“重启”该程序时，程序的状态就会立即“转换”为该对象中保存的状态。这一点和切换回一个被暂停的线程或是从系统休眠中唤醒很相像，唯一不同的是continuatoin对象可以反复的这样使用。当系统唤醒后，休眠前保存的信息就会销毁，否则你也可以反复的从该点唤醒系统，就像乘时光机回到过去一样。有了continuation你就可以做到这一点！\n那么continuation在什么情况下有用呢？有一些应用程序天生就没有状态，如果要在这样的系统中模拟出状态以简化工作的时候，就可以用到continuation。最合适的应用场合之一就是网页应用程序。微软的ASP.NET为了让程序员更轻松的编写应用程序，花了大量的精力去模拟各种状态。假如C#支持continuation的话，那么ASP.NET的复杂度将减半：因为只要把某一时刻的continuation保存起来，下次用户再次发起同样请求的时候，重新载入这个continuation即可。对于网络应用的程序员来说就再也没有中断了：轻轻松松程序就从下一行开始继续运行了！对于一些实际问题来说，continuation是一种非常有用的抽象工具。如今大量的传统胖客户端（见瘦客户端）正纷纷走进网络，continuation在未来将扮演越来越重要的角色。\n模式匹配 模式匹配并不是什么新功能。而事实上它和函数式编程也没有什么太大的关系。它之所以常常被认为是FP的一个特性，是因为在函数式语言已经支持模式匹配很长一段时间后的今天，指令式语言是还没有这个功能。\n还是直接用例子来看看什么是模式匹配吧，这是一个用Java写的Fibonacci函数：\nint fib(int n) { if(n == ) return 1; if(n == 1) return 1; return fib(n - 2) + fib(n - 1); } 再看看用我们基于Java修改过的新语言写出来的Fibonacci函数，这种新语言就支持模式匹配：\nint fib() { return 1; } int fib(1) { return 1; } int fib(int n) { return fib(n - 2) + fib(n - 1); } 区别在哪里呢？在于后者的编译器替我们实现了程序的分支。\n这有什么了不起的？确实也没什么。只是有人注意到很多函数中有非常复杂的switch结构（对于函数式程序而言更是如此），于是想到如果能把这层结构也抽象化就更好了。然后就把这个复杂的函数拆分成若干新的函数，并在这些函数的某些参数中应用模式（这和重载有点类似）。这样依赖当这个函数被调用的时候，编译器会在运行时将调用者传入的参数与各个新函数的参数定义进行比较，找出合适的那个函数来执行。合适的函数往往是参数定义上最具体最接近传入参数的那个函数。在这个例子中，当n为1时，可以用函数int fib(int n)，不过真正调用的是int fib(1)因为这个函数更具体更接近调用者的要求。\n模式匹配一般来说要比这里举的例子更加复杂。比如说，高级模式匹配系统可以支持下面的操作：\nint f(int n \u0026lt; 10) { ... } int f(int n) { ... } 那么什么情况下模式匹配会有用呢？在需要处理一大堆程序分支的时候！每当需要实现复杂的嵌套if语句的时候，模式匹配可以帮助你用更少的代码更好的完成任务。我所知道的一个这样的函数是标准的WndProc函数，该函数是所有Win32应用程序必须具备的（尽管它经常会被抽象化）。模式匹配系统一般都可以像匹配简单数值一样匹配数据集合。举个例子，对于一个接受数组作为参数的函数，可以通过模式匹配数组中第一个数字为1并且第三个数字大于3的输入。\n模式匹配的另外一个好处是每当需要添加或者修改程序分支时，再也不用面对那个庞大臃肿的函数了。只要添加（或者修改）相关的函数定义即可。有了模式匹配就不再需要四人帮的很多设计模式了。程序分支越多越复杂，模式匹配就越有用。而在习惯使用这一技术之后，你可能会怀疑没有它你一天都过不下去了。\nClosure 目前为止关于函数式编程各种功能的讨论都只局限在“纯”函数式语言范围内：这些语言都是lambda演算的实现并且都没有那些和阿隆佐形式系统相冲突的特性。然而，很多函数式语言的特性哪怕是在lambda演算框架之外都是很有用的。确实，如果一个公理系统的实现可以用数学思维来看待程序，那么这个实现还是很有用的，但这样的实现却不一定可以付诸实践。很多现实中的语言都选择吸收函数式编程的一些元素，却又不完全受限于函数式教条的束缚。很多这样的语言（比如Common Lisp）都不要求所有的变量必须为final，可以修改他们的值。也不要求函数只能依赖于它们的参数，而是可以读写函数外部的状态。同时这些语言又包含了FP的特性，如高阶函数。与在lambda演算限制下将函数作为参数传递不同，在指令式语言中要做到同样的事情需要支持一个有趣的特性，人们常把它称为lexical closure。还是来看看例子。要注意的是，这个例子中变量不是final，而且函数也可以读写其外部的变量：\nFunction makePowerFn(int power) { int powerFn(int base) { return pow(base, power); } return powerFn; } Function square = makePowerFn(2); square(3); // returns 9 makePowerFn函数返回另一个函数，这个新的函数需要一个整数参数然后返回它的平方值。执行square(3)的时候具体发生了什么事呢？变量power并不在powerFn的域内，因为makePowerFn早就运行结束返回了，所以它的栈也已经不存在了。那么square又是怎么正常工作的呢？这个时候需要语言通过某种方式支持继续存储power的值，以便square后面继续使用。那么如果再定义一个函数，cube，用来计算立方，又应该怎么做呢？那么运行中的程序就必须存储两份power的值，提供给makePowerFn生成的两个函数分别使用。这种保存变量值的方法就叫做closure。closure不仅仅保存宿主函数的参数值，还可以用在下例的用法中：\nFunction makeIncrementer() { int n = ; int increment() { return ++n; } } Function inc1 = makeIncrementer(); Function inc2 = makeIncrementer(); inc1(); // returns 1; inc1(); // returns 2; inc1(); // returns 3; inc2(); // returns 1; inc2(); // returns 2; inc2(); // returns 3; 运行中的程序负责存储n的值，以便incrementer稍后可以访问它。与此同时，程序还会保存多份n的拷贝，虽然这些值应该在makeIncrementer返回后就消失，但在这个情况下却继续保留下来给每一个incrementer对象使用。这样的代码编译之后会是什么样子？closure幕后的真正工作机理又是什么？这次运气不错，我们有一个后台通行证，可以一窥究竟。\n一点小常识往往可以帮大忙。乍一看这些本地变量已经不再受限于基本的域限制并拥有无限的生命周期了。于是可以得出一个很明显的结论：它们已经不是存在栈上，而是堆上了8。这么说来closure的实现和前面讨论过的函数差不多，只不过closure多了一个额外的引用指向其外部的变量而已：\nclass some_function_t { SymbolTable parentScope; // ... } 当closure需要访问不在它本地域的变量时，就可以通过这个引用到更外一层的父域中寻找该变量。谜底揭开了！closure将函数编程与面向对象的方法结合了起来。下一次为了保存并传递某些状态而创建类的时候，想想closure。它能在运行时从相应的域中获得变量，从而可以把该变量当初“成员变量”来访问，也因为这样，就不再需要去创建一个成员变量了。\n路在何方？ 这篇文章仅仅涉及到函数式编程的一些皮毛。考虑到有时候星星之火可以燎原，所以如果它能给你一些帮助那就再好不过了。接下来我计划就范畴论、monads、函数式编程数据结构、函数式语言中的类型系统、并行函数式编程、数据库的函数式编程以及更多的话题写些类似的文章。如果我可以写出（在我学习的同时）以上清单的一半，我的人生就完整了。于此同时，Google将是我们的良师益友。\n欢迎联系 如果您有任何问题，评价或者建议，请发邮件到coffeemug@gmail.com（译者：如果翻译方面的问题／建议请发到yang.huang@ymail.com:)）。期待您的回复。\n注：\n1当我在2005年求职时的的确确经常问别人这个问题。看着那些茫然的面孔实在是很好玩的事情。你们这些年薪30万美金的家伙，至少应该对自己可以利用的工具有个起码的理解嘛。\n2这是个有争议的问题。物理学家和数学家不得不承认目前还无法确定宇宙万物是不是都遵从可以用数学方法描述的各种法则。\n3我一直一来都很讨厌在历史课上罗列一堆枯燥无味的时间、人名、事件。对我来说历史就是关于那些改变世界的人们活生生的故事，是他们行为背后的个人动机，是那些他们用以影响芸芸众生的方法和工具。从这个角度来说，接下来的这堂历史课是不完整的，很遗憾。只有那些非常相关的人和事会被提及。\n4在我学习函数式编程的时候，“lambda”这个术语搞得我很烦，因为我不知道它到底是什么意思。在这里lambda就是一个函数，在数学符号中用这个希腊字母只是因为它更容易写。所以以后在谈及函数式编程的时候只要你听到lambda，把它在脑中翻译为“函数”就可以了。\n5有意思的是不论如何Java中的字符串总是不可修改的。讨论这种背叛Java的设计背后的原因会很有意思，可惜这样会让我们跑题的。\n6大部分函数式语言的编译器都会尽量将迭代函数转换为对等的循环语句。这种做法叫做尾调用优化。\n7反之则不一定成立。尽管有时候可以证明两段代码是等价的，但不是在所有的情况下都可以得出这样的结论。\n8实际上这样做并不比栈上存储要慢，因为在引入垃圾回收机制后，内存分配操作的时间代价仅为O(1)。\n","date":"2016-03-30T01:00:00+08:00","permalink":"https://svtter.cn/2016/03/30/%E5%82%BB%E7%93%9C%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/","title":"傻瓜函数式编程"},{"content":"在Linux下是没有一个合适的安腾客户端的（烟大）\n因此利用虚拟机来实现这个问题\n需要的环境 win7 iso virtualbox wproxy 安装 安装好win7以后（设置什么，自己百度吧），设置网络为桥接。然后查询一下自己网卡的Mac地址（Linux下），点高级设置，将高级设置的Mac地址更改为Linux的Mac地址。\n进入以后，安装安腾客户端。\n方法 打开wproxy，代理设置中，选择ip为本机的ip（Windows下），打开代理。 然后在Linux中，将代理服务器设置为Windows的ip即可 原理 桥接（Bridge）模式可以这样理解，主机和虚拟机都作为一个独立的机器在互联网中。因此，仅仅是虚拟机上网，主机也是无法连接到网络的，因此需要在Win上安装代理服务器，提供网络服务。这里其实还可以用ss等著名的代理软件，wproxy并不是必须的。本人也不保证wproxy的安全性。\n","date":"2016-03-24T01:00:00+08:00","permalink":"https://svtter.cn/2016/03/24/%E5%AE%89%E8%85%BElinux%E4%B8%8B%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0-md/","title":"安腾Linux下使用笔记.md"},{"content":"我本身不是应该前端的Hacker（当然我自己也不知自己属于什么Hacker)，于是决定在themeAPI上参见一下hexo的做法。\n但是再此之前，想要首先将leanote的markdown渲染API加入到themeAPI里面去，所以首先研究一下官方的主题是如何运作的。\n","date":"2016-03-10T01:00:00+08:00","permalink":"https://svtter.cn/2016/03/10/leanote-theme_api%E4%BC%98%E5%8C%96/","title":"Leanote – theme_API优化"},{"content":"写一下如何阅读Leanote的源代码。\n上面的go的框架我是没有仔细看，感觉似乎用到了很多开源项目？整体来说，leanote应该是一个伟大的项目。\n熟悉gulpfile 这里有一篇日志 https://segmentfault.com/a/1190000000372547\n基本读完以后就懂了。cnpm install -g gulp安装一下。\n大体上读一读可以发现，gulpfile用于构造leanote的前端内容。\n后记2017.12.11 这篇博文后来我没有写下去，因为后面不再使用leanote——读代码这件事情，其实不需要耗费太多时间，就可以做的不错。\n","date":"2016-03-10T01:00:00+08:00","permalink":"https://svtter.cn/2016/03/10/leanote-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/","title":"Leanote – 源码阅读"},{"content":"保存在这里\n","date":"2016-03-10T01:00:00+08:00","permalink":"https://svtter.cn/2016/03/10/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0/","title":"编程相关的文章"},{"content":"要用酷狗音乐听一下听力，顺带着lrc文件，但是酷狗只认krc。料想也没什么区别，单个修改下，考入以后发现并不好用，于是决定改回。但是一个个改实在太笨拙。\n#!/usr/bin/env python # authour: svtter # coding: utf-8 import os files = os.listdir(\u0026#39;.\u0026#39;) for filename in files: portion = os.path.splitext(filename) if portion[1] == \u0026#39;.krc\u0026#39;: newname = portion[] + \".lrc\" os.rename(filename, newname) ","date":"2016-03-09T01:00:00+08:00","permalink":"https://svtter.cn/2016/03/09/python-%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/","title":"Python – 批量重命名"},{"content":" 说真的，我真是有些受够了这该死的赛尔网了。\n—— 沃·兹基硕德\n要知道windows的cmd何其难用，就算是安装了cmder也是难逃大量环境配置问题，脚本执行问题。该死的赛尔网没有Linux版的客户端，何其尴尬。以我个人认为，开发一个Linux的客户端，并不是难事 —— 有人说有啊的确有Linux版的客户端啊。但是请问能用吗。压根不能用。\n这就不得不讨论到今年提速降费的问题上了。终于不绑定ip了，所谓提速就是从2M提高到了3M，降费就是从40降到30。但是很明显这依然满足不了需求不是吗？\n","date":"2016-03-09T01:00:00+08:00","permalink":"https://svtter.cn/2016/03/09/%E5%A1%9E%E5%B0%94%E7%BD%91%E5%90%90%E6%A7%BD/","title":"塞尔网吐槽"},{"content":"最近终于研究清楚了Powerline的使用方法。也是之前没有好好的阅读文档的缘故。\n无论Windows还是Linux最简单的方法都是下载\nhttps://github.com/powerline/fonts\n下载以后，Linux运行install.sh，Windows运行install.ps1，即可安装。\n","date":"2016-03-06T01:00:00+08:00","permalink":"https://svtter.cn/2016/03/06/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%BD%BF%E7%94%A8powerline/","title":"如何正确的使用Powerline"},{"content":"这几天考研复试准备的不咋地。。没有听听力。。\n关于leanote leanote兄最近是不更新了吗。。项目一点进展也没有啊。。120多个issues了，看的我心里那个急啊。Go并不是很难，但是我这里本身调试环境不是很好，加上就算是我提交了pull request，是否能够马上反应到leanote.com呢? 真是令人相当的苦闷啊…\n生活 今天算是过的不错的一天，看了黑客与画家，看的我真是相当的感动。真是有种知音的感觉。于是乎也并不在意那么多，只要代码在手里，任自由也好。开心就好。反正目前也是不需要特别定下自己究竟要去往哪个方向。既然都喜欢，那么我就按照都喜欢的学好了。\n囚徒健身也已经开始，大体上已经按照计划行事。论文看的很快，今天大约看了3篇，目测不出两天就看完了，可喜可贺，看完以后讨论相关的内容，与老师说话也是有了一番底气。\n明天一定要开始英语听力了不然真是来不及了。。\n下一步 至于怎么样也不想去想了。其实也没什么好想的，努力做好自己，顺其自然就好，非要强求什么也不是个办法。考研那些慢慢来吧，如果今年不幸没有通过国家线，那也是这个学年没有好好学习的后果，自己要慢慢的补偿。我觉得即便是能过，书单，计划也要像从前一样。在新的地方，继续努力磨练自己。\n","date":"2016-03-05T01:00:00+08:00","permalink":"https://svtter.cn/p/%E6%9C%80%E8%BF%91%E7%9A%84%E5%90%90%E6%A7%BD/","title":"最近的吐槽"},{"content":"在windows上，无论我怎么git init，他永远初始化一个这么神奇的目录。我就看不懂了。\nReinitialized existing Git repository in C:/Program Files/Git/cmd/ 后来仔细找了一下，发现变量里面有个很神奇的GIT_DIR，改了以后发现\nInitialized empty Git repository in D:/Program Files/Git/cmd/ 尼玛，真是到位了。\n删除试试。\n感动。\n","date":"2016-03-04T01:00:00+08:00","permalink":"https://svtter.cn/2016/03/04/git%E4%B8%80%E8%AE%B0/","title":"Git一记"},{"content":"似乎是个辛苦的差事。\n首先，hexo使用的ejs模板引擎，也就是说，整个代码的构建是要利用ejs的。然而hexo使用的则是golang模板引擎，这两个引擎我都不了解，ejs我是略微有所接触，并不深入，因此整个任务可以说是困难重重。但是面对这个令人万分讨厌的默认主题以及字体，我必须要做点什么了。\n思路 clone了两个代码看了看，分析了几条思路。\n思路一：直接在ejs的基础上修改 既然ejs是一个模板引擎，那么从中寻找相同点，手写一个可以读取ejs的工具，重新构建成golang模板，即自动化生成工具。可以应对多种主题，一劳永逸，在自动生成的基础上对新生成的代码再加工。\n实现方法：了解ejs模板，golang模板，需要利用编译器知识，对原本的ejs文件进行重新编译，编译成golang的模板。（是否已经有类似的成品？） 优点：一劳永逸 缺点：实现难度较高，需要分析 思路二：使用hexo生成html文件后，手动修改 这种方法相对第一种来讲，实现较为简单。即：利用hexo生成的静态文件，在public生成的文件进行分析修改。利用此方法，如果生成的html文件不复杂且结构清晰可用。\n实现方法：直接生成出接近成品的html文件，手动修改。 优点：简单粗暴 缺点：只能针对单一主题，且人工活动量较大。 思路三：登录leanote论坛多叫几声。 结语 综上所述，个人决定首先手动修改一次，凑合着使用。然后再利用编译原理知识进行进一步修改，实现思路一。好的程序员是给自己出问题的= =。\n成品稍后奉上。\n半成品:\n","date":"2016-02-24T01:00:00+08:00","permalink":"https://svtter.cn/2016/02/24/%E5%85%B3%E4%BA%8Ehexo%E4%B8%BB%E9%A2%98%E5%88%B0leanote%E4%B8%BB%E9%A2%98%E7%9A%84%E7%A7%BB%E6%A4%8D/","title":"关于hexo主题到leanote主题的移植"},{"content":"简单介绍一下Rime 摘自项目简介\nhttps://github.com/rime/home/wiki/Introduction\n= =直接复制粘贴总感觉不是很好。读完整个简介感觉作者逼格很高。个人对ibus的印象非常之好，远胜于fcitx。可能是因为某狗的印象所致。某狗做的还是很好的。\n如何在ubuntu下开始 题外话：反复来回，仗着网速10M搞了好多发行版，这几天换了启动模式UEFI，感觉已经不是自己的那台老家伙了，加上AHCI，感觉流畅不少。换成了Gnome以后整体使用感觉相当舒畅。KDE总感觉分外杂乱，个人更喜欢被限制在一个区域来拘束我放荡不羁的灵魂。\n似乎ubuntu在12.04已经在其软件仓库内置了Rime。\n安装时只需要sudo apt-get install ibus-rime即可。\n如果从input method里无法添加，从终端输入ibus-setup添加一次。\n然后如果还不行，建议reboot来试试。重启完成以后应该就可以添加了。\nctrl+`用于呼出各种配置。其他的参加官网吧。\n后记 私以为作者是个湾湾，结果不是。= =。\nhttps://github.com/lotem\n嗷，大神。\n","date":"2016-02-24T01:00:00+08:00","permalink":"https://svtter.cn/2016/02/24/%E5%85%A5%E4%BA%86%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E6%96%B0%E5%9D%91rime/","title":"入了输入法的新坑Rime.."},{"content":"= =亲爱的Python再次拿起来。。\n检测Python进入参数的类型 def my_abs(x): if not isinstance(x, (int, float)): raise TypeError(\u0026#39;bad operand type\u0026#39;) if x \u0026gt;= : return x else: return -x 默认参数陷阱 L=[]会一直都是原来的值，因此初始值需要为None\ndef add_end(L=None): if L is None: L = [] L.append(\u0026#39;END\u0026#39;) return L 利用可变参数 利用可变参数，可以一次传递多个值给函数。此外，还可以利用*把原来的list变成多个参数传入\ndef calc(*numbers): sum = for n in numbers: sum = sum + n * n return sum 结果：\n\u0026gt;\u0026gt;\u0026gt; calc(1, 2) 5 \u0026gt;\u0026gt;\u0026gt; calc() 此外:\n\u0026gt;\u0026gt;\u0026gt; nums = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; calc(nums[], nums[1], nums[2]) 14 # 这种写法当然是可行的，问题是太繁琐，所以Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去： \u0026gt;\u0026gt;\u0026gt; nums = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; calc(*nums) 14 关键字参数 可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：\ndef person(name, age, **kw): print(\u0026#39;name:\u0026#39;, name, \u0026#39;age:\u0026#39;, age, \u0026#39;other:\u0026#39;, kw) # \u0026gt;\u0026gt;\u0026gt; person(\u0026#39;Michael\u0026#39;, 30) # name: Michael age: 30 other: {} 也可以传入任意个数的关键字参数：\n\u0026gt;\u0026gt;\u0026gt; person(\u0026#39;Bob\u0026#39;, 35, city=\u0026#39;Beijing\u0026#39;) name: Bob age: 35 other: {\u0026#39;city\u0026#39;: \u0026#39;Beijing\u0026#39;} \u0026gt;\u0026gt;\u0026gt; person(\u0026#39;Adam\u0026#39;, 45, gender=\u0026#39;M\u0026#39;, job=\u0026#39;Engineer\u0026#39;) name: Adam age: 45 other: {\u0026#39;gender\u0026#39;: \u0026#39;M\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;Engineer\u0026#39;} 关键字参数有什么用？它可以扩展函数的功能。\n和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：\n\u0026gt;\u0026gt;\u0026gt; extra = {\u0026#39;city\u0026#39;: \u0026#39;Beijing\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;Engineer\u0026#39;} \u0026gt;\u0026gt;\u0026gt; person(\u0026#39;Jack\u0026#39;, 24, city=extra[\u0026#39;city\u0026#39;], job=extra[\u0026#39;job\u0026#39;]) name: Jack age: 24 other: {\u0026#39;city\u0026#39;: \u0026#39;Beijing\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;Engineer\u0026#39;} 简化的写法：\n\u0026gt;\u0026gt;\u0026gt; extra = {\u0026#39;city\u0026#39;: \u0026#39;Beijing\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;Engineer\u0026#39;} \u0026gt;\u0026gt;\u0026gt; person(\u0026#39;Jack\u0026#39;, 24, **extra) name: Jack age: 24 other: {\u0026#39;city\u0026#39;: \u0026#39;Beijing\u0026#39;, \u0026#39;job\u0026#39;: \u0026#39;Engineer\u0026#39;} **extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。\n切片坑 前10个数，每两个取一个：\n\u0026gt;\u0026gt;\u0026gt; L[:10:2] [, 2, 4, 6, 8] 所有数，每5个取一个：\n\u0026gt;\u0026gt;\u0026gt; L[::5] [, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95] 列表生成式 # -*- coding: utf-8 -*- L1 = [\u0026#39;Hello\u0026#39;, \u0026#39;World\u0026#39;, 18, \u0026#39;Apple\u0026#39;, None] L2 = [ s.lower() for s in L1 if isinstance(s, str) ] # 期待输出: [\u0026#39;hello\u0026#39;, \u0026#39;world\u0026#39;, \u0026#39;apple\u0026#39;] print(L2) 参考： 廖雪峰的Python教程 ","date":"2016-02-23T01:00:00+08:00","permalink":"https://svtter.cn/2016/02/23/python-%E5%A4%8D%E5%85%A5%E5%9D%91/","title":"Python – 复入坑"},{"content":"随手记录快速整理代码的快捷键\nwebstorm ctrl+alt+l\neclipse ctrl+shift+f\n","date":"2016-02-21T01:00:00+08:00","permalink":"https://svtter.cn/2016/02/21/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/","title":"格式化代码的快捷键"},{"content":"perl: warning: Falling back to the standard locale (“C”) 此类问题？\n","date":"2016-02-20T01:00:00+08:00","permalink":"https://svtter.cn/2016/02/20/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86perl/","title":"如何处理perl"},{"content":" don’t starve together 饥荒正版，专用服务器搭建收集。\n如果没有学过CS以及相关专业就没有看的必要了。。\nLinux\n搭建教程。对于mod的配置没有细说。\ndocker\ndocker一键配置应该是最简单的方法，但是我目前对于docker的了解实在是垃圾。。明天买个阿里云测试一下docker。\nsteamCommunity上的教程\n比较靠谱，但是针对Windows，一般人也不会通宵达旦的开着自己的电脑吧。。大概。\nLinux Screen命令\n用于保持持续运行。。不过似乎可以用别的方法，例如作为系统服务运行。\n顺便发现了一个BUG就是使用sh启动的时候，lua似乎会按照../的方式向上层目录寻找导致mod读取失败。所以还是老老实实进入游戏文件start吧。\n饥荒Linux服务器自动更新脚本 国外有人制作了docker，不过仔细看看，似乎难度也不是很高。打算自己羞羞的写个自动更新脚本，不过感觉过于简单，没有写出来的必要。给个思路即可，利用crontab在合适的时间干掉dont…，然后走steamcmd更新下，再重新启动即可。奈何自己从未认真研究过一本小书 ，说来惭愧。不过感觉对于Linux还是有一定的了解，也算是充分利用了知识。\nPS：steam官方提供了更新脚本，但是有时候不是很好用，有时候会提示缺少token起不来。不过总体没有问题。\nDocker 可以在daocloud上找到写好dockfile的DST，但是此类配置需要另外再书写教程，如果我单纯的推广不知道是否对daocloud的口。\n后来看了看daocloud容器数量上，社区版大概x3，但是想要一个2048需要x16，花费有些大。。所以只能放弃了。\n总结 如果没有财力，不打算赚钱，做DST真是有些费力。DST优点可能在于没有图形界面，资源方面不会有问题。但是现在的本本，最少也要4G内存，一般是不会出现资源问题，然而DST服务器，如果想要不花很多钱搞一个，还是比较困难的。\n","date":"2016-01-26T01:00:00+08:00","permalink":"https://svtter.cn/2016/01/26/%E9%A5%A5%E8%8D%92%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%E6%94%B6%E9%9B%86/","title":"饥荒搭建教程收集"},{"content":"探索了一下，Shadowsocks仅仅是作为一个代理，并不提供VLAN服务，其他的例如openvpn（Windows上配置有些麻烦，卸载程序做的不彻底，换了安装路径出现问题），Gamer’s Internet Tunnel（好东西，但是并不易于小白操作）。\n最后发现了一款日本人写的开源软件。（其实也是不易于小白操作。。）\n【softether-vpnserver】 具体的搭建教程：\nhttp://bluereader.org/article/6875396\n非常简单粗暴地是，不少简单的互联系统采取拆包挖洞的方法，因此需要分析各种协议，例如IPX等，但是此软件直接粗暴地在vpn基础上加上个dhcp服务器，也就是加入这个vpnserver，就加入了一个远程局域网。\n因此，我们可以利用此特点，不做坏坏的事情，只是单纯的和朋友们建立私人通道，玩玩游戏。。\n下载\nhttps://www.softether.org/\n【pptp】 http://ju.outofmemory.cn/entry/195240 https://bbs.aliyun.com/read/162297.html 对于对战平台不知道是怎么做的， 应该是从协议方面入手吧\n后记 现在看来，网络编程方面做得十分欠缺，写出这种博客也只能反应出自己的知识匮乏不足。继续修行。\n","date":"2016-01-23T01:00:00+08:00","permalink":"https://svtter.cn/2016/01/23/%E5%88%9B%E5%BB%BAvlan%EF%BC%8C%E5%92%8C%E4%BD%A0%E7%9A%84%E6%9C%8B%E5%8F%8B%E7%8E%A9%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%B8%E6%88%8F%E5%90%A7%EF%BC%81/","title":"创建VLAN，和你的朋友玩局域网游戏吧！"},{"content":"终于考研结束了 这段时间考研也是发现了很多问题，比如自己不得不承认的面对压力的无措等等。学习一段时间就会走小差等等。但是这些问题我都能认识到并且自己寻找方法改正，一旦被别人揪着说就很不爽。学习上一段时间就不由自主的浮躁，内容多而枯燥。但是现在反过来想，这次考研考试的打脸是不是也说明了一个问题，不应该公式化的学习考研数学，发现真是自己证明贯通研究的东西，才是真正的掌握并且能够临危不乱的。在专业课等方面亦是如此。\n这次考研有后悔吗？有，很多。但是有收获吗？考之前我不认为自己有什么收获，但是现在回头想想，是必然有的。认识了自己的不足，以及学习的东西的不扎实，没有深度。其实在大学学习的过程中每次都对我有所提示，只是我一直忽略了这些提示，导致自己直到这次考研才吃了个苦头。也不知这次结果究竟如何，已经没有心思，没有勇气去比对答案，自己对自己的斤两也是清楚的很。无论怎么临场发挥，最终决定你能否考上的还是你平时的努力程度，我认为自己的努力程度不够自己上研究生。\n目前为止，我是想为此再奋斗一年的。\n看了看github上空的一大段：\n这就是考研的一段时间。其实考研我并没有抽出太多在学习上，中间放松的时间也完全可以学点技术啊自己的喜欢的东西，但是我也没那么做。感觉好像耽搁时间。事实上，也并没有耽搁很多时间。\n猛然想起与学弟约好讲讲经验。不过目前为止，应该都是失败的经验了吧。细细想来，都有点不大敢去实验室，怕面对恩师，也是觉得丢了ACM实验室这个优秀团体的脸。相当愧疚。想起当时学弟庆功宴上老师说的一句话，也着实打脸：快手未必就好，快手可能不够扎实。也是直击了我的命脉。\n考完之后马上浮现的想法是，在数学上面再多读些书。专业课纯粹是按照应试的方法学习，感觉没什么意思，的确应该是课本为主，在课本的基础上拓展才是正确。我考的不是408，不过做了很多408的题目，感觉还是那样，课本通了，很多自然就通了，否则花费大量的时间，收获还不会很多。专业课这个东西，就得靠平时积累。\n此外，想要整几本国外的教材看看，从另一个角度看看问题，也是提高自己的英文水平，可能要比这直接来的更加优秀一些。参考书目可以从考研参考中选。\n考研之后 考研的时候，可能被迫于每天重复做同样的事情，整的想着考完之后要做什么，看这个看那个，现在考完了，反而看看，基本上没有什么是真的能够好好做的。也可能是受了“应该要二战”的思想制约，目前感觉做啥也不那么回事儿。想图个新鲜打个游戏主播玩，但是仔细一想客观上没有条件，主观上又有点受不务正业的思想制约，于是作罢。微信公共账号，现在来看，做出来似乎价值也不是很大，也不知做点什么，一头雾水。只剩下一个网站可以做做。网站近来考虑使用什么技术来做。感觉自己虽然学习的不算少，但是特别精通的着实不多。Python做总感觉距离有些遥远，开发起来也比较麻烦（也是学的不到家），PHP是一个很好的选择，Javascript总感觉有些不伦不类，函数式编程自己掌握的不好，是学习下去还是拿来使用，感觉不太好。反正不是很喜欢这个语言，也纯粹是个人喜好。\n","date":"2016-01-02T01:00:00+08:00","permalink":"https://svtter.cn/2016/01/02/2016-01-02%E8%BF%91%E6%97%A5%E4%BA%8B/","title":"2016-01-02 近日事"},{"content":"１，先把aecium的下载地址贴出来\n２，下载后首先解压，把它复制到bin文件夹下作为指令来使用。具体命令为：\n$sudo cp aecium /usr/bin/program_name\n３，然后打开你的网卡设置，把赛尔分配给你的ip等信息填上再执行\n$program_name -h IP -u username -p password -d eth0 -f\n(program_name为上一步你给程序起的名字，IP为学校计费服务器的IP地址，鲁东大学计　费服务器为10.0.2.5 ,username和password分别为上网验证用的用户名和密码，eth0为　你　接网线的网卡，一般默认都是eth0）\n运行后，如图所示\n４，鲁大校园网赛尔验证成功通过\n５，如果你想下线的话，可以使用如下命令\n$program_name -l\n（我感觉此功能一般没用）\n其它的使用方法见下：\nUsage 1:\n\\[-h Host] -u Username -p Password [-d Device\\]\\[-f\\] -h Host attestation host IP address.\n-u Username your user name.\n-p Password your user password.\n-d Device your network card interface.\n-f find server type.\nUsage 2:\n./aecium -l\n-l Leave leave Internet.\nUsage 3:\n./aecium -v\n-v Version show program version.\n如无说明即为原创文章，转载请注明： 转载自DoMyself（DM）\n","date":"2015-10-09T01:00:00+08:00","permalink":"https://svtter.cn/2015/10/09/aeciumubuntu%E4%BD%BF%E7%94%A8%E8%B5%9B%E5%B0%94%E7%BD%91/","title":"aecium Ubuntu 使用赛尔网"},{"content":"GNU is an operating system that is free software.\n下载\nhttps://github.com/bmatzelle/gow/releases/download/v0.8.0/Gow-0.8.0.exe\n正如项目介绍所说：\nGow – The lightweight alternative to Cygwin\nWin32 Utilities Overview Below are just a few of the 100+ applications found in Gow.\nShell scripting: bash, zsh\nCompression: gzip, zip, bzip2, compress\nSSH: putty, psftp, pscp, pageant, plink\nDownload/upload: cURL, wget\nFTP: NcFTP\nEditing: vim, nano\nText search/view: grep, agrep, less, cat, tail, head\nFile system: mv, cp, du, ls, pwd, rmdir, whereis\nDevelopment: make, diff, diff3, sleep, cvs, dos2unix, unix2dos\n带来了许多非常有用的工具，打包的非常完全。\n","date":"2015-09-10T01:00:00+08:00","permalink":"https://svtter.cn/2015/09/10/%E5%B0%86gnu%E4%BB%A3%E5%85%A5windows%EF%BC%81/","title":"将GNU代入Windows！"},{"content":"图灵机器人： http://www.tuling123.com/\n","date":"2015-09-09T01:00:00+08:00","permalink":"https://svtter.cn/2015/09/09/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%9C%89%E8%B6%A3%E7%9A%84api/","title":"那些年有趣的API"},{"content":"Webstorm 使用webstorm进行前端开发\n最近使用webstorm进行了简单小游戏的开发，感觉十分强大。\n插件安装 ideavim 使用Ctrl+Alt+s召唤Settings，输入Plugin，Browse，找到ideavim，安装。此时提示重启webstorm，先不必重启，打开C:\\User\\\u0026quot;当前用户\u0026quot;，建立_ideavim，加上source _vimrc读入自己的vim配置文件即可。根本停不下来。\n早知道有如此工具在下也不至于在web上如此痛苦。个人认为，比起配置原生态Vim，这样开发更加好用，节省博主本来就不多的脑细胞。\n","date":"2015-09-07T01:00:00+08:00","permalink":"https://svtter.cn/2015/09/07/webstorm%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6+vim%E9%85%8D%E7%BD%AE/","title":"Webstorm安装Vim插件+Vim配置"},{"content":"找到网关在浏览器中输入即可。\n","date":"2015-08-27T01:00:00+08:00","permalink":"https://svtter.cn/2015/08/27/chinaunicom%E7%9A%84%E9%AB%98%E9%80%9F%E8%BF%9E%E6%8E%A5%E6%96%B9%E6%B3%95/","title":"ChinaUnicom的高速连接方法"},{"content":"最近因为考研准备一直都没有更新blog。考研复习进度已经非常糟糕了，但愿别出什么差错。。\n宿舍直播视频网络搭建 宿舍的网络实在是太坑爹，赛尔垄断也就不多说了，联通这个传说中4M的网络平均速度200K/s也真是让人醉了。于是弄了个信号接收器直接收校园WLAN，效果不错。没错就是小盘子。型号是3070，买的时候也没有多做考虑，来了以后才发现能适配win10，也是吓尿了，等了5天没有网络着实太痛苦了。来了以后通过猎豹wifi共享多次不成，不是无法建立热点，就是建立好了，密码死活不对。后来尽管建立成功加入成功了，视频共享功能又不能愉快地使用。\n尽管远程操作十分诱人，但是明显不足以弥补这缺陷，于是换成了wifi链接精灵。\n其实win10本身也是自带软AP的，但是windows命令行操作，我并不是很熟悉，所以暂时没有用，毕竟我们要考研学习啊！\n–\n视频播放软件一直都没有明确。最一开始的使用Samba（网上邻居）+ 一些samba播放器。小视频用起来还可以，大视频就不行了（你懂得）。研究了一下应该不是路由器的限制（当时还是通过宿舍路由进行共享的），感觉应该是windows本身smb的限制，加上ios上面除了威动播放器以外，其他的播放器使用samba都需要收费，就没有继续使用下去。后来身为开源软件脑残粉的我在使用VLC的过程中发现有plex media这个选项，于是开心的google+百度云盘下载了一个plex server，使用起来感觉比网上邻居要流畅。配置方面非常简单，直接安装即可，然后添加媒体文件夹，更新下数据库即可。仔细观察下后端还是我大Python = =。lol。ios上官方的客户端只能看1min的电影，不是，考研视频。所以还是建议使用开源的vlc。android就无所谓了，简单搜索下发现有破解版，也就没有仔细看了。此外，Plex还有Linux版本，性能应该差不多 — 因为后面都是Python。总而言之是能看了。\n后来又倒弄了一下，因为宿舍的宽带不能使用了，路由器就成了玩具 — 仔细观察发现路由器的系统就是嵌入式的Linux啊。。当初还以为是特别开发的什么什么系统，按照赵老师所说，思科的大型路由器路由表都固化成硬件了等等。然而，小小的tp-link是没有那么大的本事的。就是个简单的嵌入型linux。其实一开始脑洞开的时候，想通过刷个开源的openwrt到路由器中，来共享WLAN作为全宿舍上网的桥梁，但是研究后发现愚蠢的WR875不能刷openwrt。悲伤。其他的什么扩展系统就更别提了。因为本身不是学习嵌入式的，自己制作感觉不现实。驱动什么的就弄不好。（问题应该就在驱动上，拆了tplink的官方包？反正我是没有去做过。。看硬件配置应该是可以的）。再后来动心思到我的小小树莓派上，但是我没有无线网卡。。我的小米随身WIFI还因为下海挂掉了。所以只得作罢。如果有时间倒是真的可以考虑下搞个无线网卡，给树莓派刷个openwrt或者更加粗暴的Debian来提供网络。说了这么多我想大家也是明白了小米路由的大体原理了。我觉得八九不离十就是个小的设备，搞了个高大上的路由系统。当然也只是我个人认为，没有什么依据，毕竟我没钱玩小米路由（微笑）。\n后来在自己的电脑上搭建了一个非常简单的DHCP服务器，准备利用win10自带的桥接功能，给路由器的WAN口插上，直接把路由器当成外置WIFI使用，发现的确可以。有兴趣的同学可以试试。bing搜索 dhcp for windows.即可。路由设置我就不说了。路由器又愉快地利用起来了。。\n毕竟我们要考研学习啊！\n不过把电脑当做视频服务器似乎会减少硬盘寿命。。= =。我的天。\n最近的吐槽 昨天简单的看了看坚果手机发布会后的新闻报道。看见一个支持开源项目等等等。不知道小米等公司支持了没说还是怎的，锤子拿出来我就感觉很有逼格，瞬间路转粉。当然粉也没什么用处。坚果手机应该分期12个月是买的起的，但是手里有着粑粑买的肾6，再买个坚果纯粹是作。所以暂时作罢。估计坚果很讲究情怀的话，也没什么可以玩的地方吧。要是能刷ubuntu那也是屌屌哒。SSD存储的话就不担心坏道了= =。\n","date":"2015-08-27T01:00:00+08:00","permalink":"https://svtter.cn/2015/08/27/%E8%BF%91%E6%97%A5%E4%BA%8B%E9%A1%B9/","title":"近日事项"},{"content":"","date":"2015-07-14T01:00:00+08:00","permalink":"https://svtter.cn/2015/07/14/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/","title":"软件设计模式 — 简单工厂模式"},{"content":" http://blog.jobbole.com/65218/ http://blog.csdn.net/column/details/wklken4ds-alg-py.html ","date":"2015-07-09T01:00:00+08:00","permalink":"https://svtter.cn/2015/07/09/python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"Python – 数据结构"},{"content":"用例图 扩展和包含：\n扩展(extend)： extend关系是对基用例的扩展，基用例是一个完整的用例，即使没有子用例的参与，也可以完成一个完整的功能。extend的基用例中将存在一个扩展点，只有当扩展点被激活时，子用例才会被执行。 extend关系在用例图中使用带箭头的虚线表示(在线上标注\u0026laquo;extend\u0026raquo;)，箭头从子用例指向基用例。\n包含(include)： include为包含关系，当两个或多个用例中共用一组相同的动作，这时可以将这组相同的动作抽出来作为一个独立的子用例，供多个基用例所共享。因为子用例被抽出，基用例并非一个完整的用例，所以include关系中的基用例必须和子用例一起使用才够完整，子用例也必然被执行。include关系在用例图中使用带箭头的虚线表示(在线上标注\u0026laquo;include\u0026raquo;)，箭头从基用例指向子用例。\n设计模式 参考的学习资料：\nhttp://peterwei.iteye.com/blog/958803 图说设计模式 ","date":"2015-06-30T01:00:00+08:00","permalink":"https://svtter.cn/2015/06/30/uml-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"UML – 学习笔记"},{"content":"Obviously, it’s a beautiful operating system but basing on Ubuntu make it so weak that cannot afford simple change, like add other ppa.\nOtherwise, all ubuntu based OS just like that. It’s unaffordrable, itn’t?\n","date":"2015-06-15T01:00:00+08:00","permalink":"https://svtter.cn/2015/06/15/aboutelementaryos/","title":"About ElementaryOS"},{"content":"UML StarUML 15.04 lost package: System Speed up readahead (systemd) System beauty powerline\narc-theme search from github\ninfinality字体配置: http://askubuntu.com/questions/527349/font-rendering-problem-in-ubuntu\n除非能够解决添加源ppa，否则尽量不要添加。\nVPN http://www.youhuima.cc/bandwagonhost%E5%92%8Cbandwagonhost%E4%BC%98%E6%83%A0%E7%A0%81.html\nhttp://www.tennfy.com/2020.html 一键安装s http://www.tennfy.com/2136.html 字体渲染-LCD屏幕 http://leaeasy.blog.163.com/blog/static/1164291542010118052686/\n","date":"2015-06-14T01:00:00+08:00","permalink":"https://svtter.cn/2015/06/14/ubuntu-%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/","title":"Ubuntu – 常用问题整理"},{"content":"好久没有更新blog了。其实就是没干什么事情，这段时间。\n昨天的占座撕逼真心让人心力憔悴，为了个占座考研真是太拼了，这个学期真是感觉没有做好什么事情，省赛三等。。其实现在回过头来想想，自己训练的时候计划有问题，本来差不多就那么忙吧= =\n剩下的时间我再也不跟你们撕逼了-.-，座位我给你们，请你们随意，我真心承受不了这一波了。我在宿舍看书还不行。\n昨天四六级考试之后那个气势我真是怕了。但是问题就在眼前，偏偏就是没人处理。说句难听的，出了事儿问责，还是会找到管理层的。早晚的事儿。\n","date":"2015-06-14T01:00:00+08:00","permalink":"https://svtter.cn/2015/06/14/%E6%9D%A5%E8%87%AA2015-06-14%E7%9A%84%E5%90%90%E6%A7%BD/","title":"来自2015-06-14的吐槽"},{"content":"关于浮点数: http://www.cnblogs.com/herbert/p/3402245.html\n大整数python计算是没有问题的。\nmath math.cos() math.sin() ","date":"2015-05-31T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/31/python%E7%9A%84%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/","title":"Python的高精度计算"},{"content":"https://github.com/Svtter/numerical_analysis\n","date":"2015-05-31T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/31/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E8%AE%A1%E7%AE%97%EF%BC%8Cc++%E5%AE%9E%E7%8E%B0/","title":"数值分析计算，C++实现"},{"content":" python -m SimpleHTTPServer 8080 可以通过Python快速测试代码= = ","date":"2015-05-29T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/29/python%E5%BB%BA%E7%AB%8B%E7%AE%80%E5%8D%95%E7%9A%84http%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"Python建立简单的http服务器"},{"content":" 来自于老师的课堂，觉得受益特此记录\n1. 四则运算的稳定性 加法 防止大数吃掉小数\n减法 避免相近数相减\n乘法除法 避免小数作除数和大数作乘数\n2. 提高算法的效率（数值算法） (1) 尽量减少运算次数，多项式可使用秦九韶算法\n(2) 使用耗时少的运算。\n排在前面的耗时少\n|运算1|运算2|\n|:—–:|:—–:|\n|x+x|2x|\n|x_x|$x^2$|\n|x_0.25|x/4|\n计算机中的除法也是利用迭代法求解的。\n(3) 充分利用存储空间。\n","date":"2015-05-29T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/29/%E5%85%B3%E4%BA%8E%E8%AF%AF%E5%B7%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/","title":"关于误差的一些总结"},{"content":"因为一些神奇的缘故不得不停留在windows，但是为低效垃圾的cmd与一直让人心烦，于是下载了cmder。\n这是官方：http://gooseberrycreative.com/cmder/\n给没有梯子的同学= = 带有msysgit\nhttp://pan.baidu.com/s/1mgDt32g\n但是安装以后提示缺少某个神奇的dll，需要安装2015库。\n详细见这个issue：https://github.com/bliker/cmder/issues/501\n坑爹的是cmder在github上的源代码clone下来也是不能用的，这算啥啊- –\n反正安装就到这里了= =怎么用请自己继续探索吧。。\n","date":"2015-05-28T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/28/windows%E4%B8%AD%E7%9A%84%E7%BB%88%E7%AB%AFcmder/","title":"Windows中的终端cmder"},{"content":" alien http://www.iteye.com/news/28656 http://www.csdn.net/article/2013-02-25/2814245-20-best-front-end-framework http://www.open-lib.com/Type/166-1.jsp http://maroslaw.github.io/rainyday.js/ https://github.com/maroslaw/rainyday.js ","date":"2015-05-28T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/28/%E5%89%8D%E7%AB%AF%E6%95%88%E6%9E%9Cmark/","title":"前端效果mark"},{"content":"最近被数值分析算法整的我是焦头烂额= =然后发现原来ACM中的一些算法也是来自数值分析 — 分段插值。\n然后打算以后每天星期六晚上依然做下bc = = 也算是作死。最近因为占的座位和新找的座位全部都是各种吵，基本上都停滞了，最近才是重新开始背单词，但是长难句没有什么进展，已然欠下又是一个月TAT。\n近期因为要做一些礼物，打算晚上回来利用这段时间每天简单的学一点前端效果然后做个礼物= =，过了这段时间依然是算法的节奏吧。这届大一看了看真是已经在正轨上了，以后烟大的ACM出名了自己也可以说我也曾经是元老级别的人物之一啊哈哈哈哈。\n","date":"2015-05-28T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/28/%E6%9C%80%E8%BF%91/","title":"最近"},{"content":"原来发了一篇博文说遇到问题先查Ubuntu的docs。但是docs没有怎么办呢？还是查鸟哥私房菜或者archwiki吧。。。\n比如说samba配置，ubuntu给的文档就比较差劲。\nhttp://wiki.ubuntu.com.cn/Samba\n卸载以后systemctl直接启动不起来了。\nsamba服务可以提供打印，视频流，文件共享等服务。\n解决方法是dpkg-reconfigure samba-common，或者cp /usr/share/samba/smb.conf来解决没有conf的问题。\n今天因为要传考研视频觉得有些麻烦顺便搞搞这个。哎，什么时候才能有个考研座位啊！！我想复习啊！！！\n对了，ubuntu的问题还可以到这里http://askubuntu.com/\n但是很讨厌的是，国内的访问速度并不怎么样。\n/ 当个运维也是很不错啊= =。hacker是不是很多都会个运维啊。/\n配置文件搞的不太行，直接贴一个askubuntu上比较好用的：\n[global] workgroup = WORKGROUP server string = %h server (Samba, Ubuntu) dns proxy = no log file = /var/log/samba/log.%m max log size = 1000 syslog = 0 panic action = /usr/share/samba/panic-action %d encrypt passwords = true passdb backend = tdbsam obey pam restrictions = yes unix password sync = yes passwd program = /usr/bin/passwd %u passwd chat = *Enter\\snew\\s*\\spassword:* %n\\n *Retype\\snew\\s*\\spassword:* %n\\n *password\\supdated\\ssuccessfully* . pam password change = yes map to guest = bad user usershare allow guests = yes username map = /etc/samba/smbusers security = user guest ok = yes guest account = nobody usershare max shares = 100 usershare owner only = False ","date":"2015-05-23T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/23/ubuntu-samba_server/","title":"Ubuntu – samba_server"},{"content":"从最初的csdn到博客园到wordpress到hexo，一直到现在的leanote。\n中间的一些小众博客平台就不谈了。\n现在用leanote的主要原因是csdn页面太丑。\n中间国产的几个博客配置系统也使用过，对markdown的支持惨不忍睹。当然其中也不缺乏不错的产品，只是一个好的前端太重要。。\nwordpress在我半年前配置的时候也总是不顺畅。之前使用sae搭建的实在不怎么样，但是自己上传慢慢安装之后心中对空间的使用始终存在芥蒂。\nleanote除了限制流量以外没有什么，不过我就是一小弱渣，肯定不会有什么问题。\n","date":"2015-05-21T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/21/%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B0%88/","title":"博客一谈"},{"content":"存在问题，比如进行UML学习的时候，发现简单的设计我也做不出，对UML图掌握程度比较差。\n此外，设计模式并没有好好地敲代码，理解的也不够透彻。\n","date":"2015-05-21T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/21/%E5%85%B3%E4%BA%8E%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%A6%E4%B9%A0/","title":"关于软件设计与体系结构的学习"},{"content":"代码全部贴在github。因为UML图挂在processon上了，不过没有加连接。等写完全文就把链接加上。\n首先是对象的行为模式：\n1. 策略模式 针对一组算法，将每个算法封装到具有共同接口的独立类中，从而使得他们可以相互替换。\n2. 状态模式 改变类中的状态。\n策略模式和状态模式很像，不同在：状态模式解决内在状态的改变，策略模式解决内部算法的改变。感觉上没什么特别大的区别。- -。\n3. 命令模式 类的行为模式：\n1. 模板方法模式 ","date":"2015-05-21T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/21/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/","title":"软件设计模式 — 行为型模式"},{"content":" 拖了好久才写这份总结，中间考试，聚会，等等都推迟了这事儿。写的过程中一度想要不写了，可能是觉得结果有些不尽人意吧。\n赛程 早上6点多起床，然后吃了个早饭，大概7点钟出发，路上前面的两位都在听歌，我因为耳机找不到，也没有下电影，思想神游了4个小时，也是挺佩服自己的 — 或者是刷微博？\n到了以后大体上逛了下山科的校园，挺大，环境也不错，但是明显能够感觉出年轻，没有岁月的味道，心情一直是比较平静的。下午热身赛，没有特别出彩，已经不记得当时在个什么名次上 — 反正也不是很重要= =\n然后就是正式比赛，拿了铜牌。\n不想空洞的描述这场比赛，还是随意一点，然后再简单整理一下吧。\n比赛之前的晚上发现自己博弈部分没有掌握好，图论部分也是没有完全看完重点，但是因为第五届的比赛的原因，觉得无妨，图论题目应该出了也做不出来（的确，没做出来，笑），博弈因为去年有一个（后来想到可能是记错了），所以也是没有很在意，觉得应该不至于不幸的一次就搞到我不擅长的地方吧！\n结果正式比赛正好考到博弈和图论，博弈费了好些力才推理出来，图论一开始搞错了题目的意思，最后分析题目计算时间复杂度的时候就已经发现可能超时间，但是没有找出合理的办法 — 其实在当时看看，也的确应该是去试试，因为感觉可能比较简单，AC的人并不少。\n当然赛后发现如果有那个知识，那么这道题目还是比较简单的，哈哈。\nGH题目就是比较简单的质因子分解+哈希，但是糟糕的是当时虽然想到质因子分解，但是没有具体的细想，去探究，深度不够。 — 也是因为受了之前比赛的影响，很多时候因为我自己想得太深方向还不对结果浪费了时间。\n总结 ","date":"2015-05-16T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/16/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81acm%E6%80%BB%E7%BB%93/","title":"第六届山东省ACM总结"},{"content":" 算法书籍\n莫队算法\n最大团\n最短路\nA _搜索算法——图形搜索算法，从给定起点到给定终点计算出路径。其中使用了一种启发式的估算，为每个节点估算通过该节点的最佳路径，并以之为各个地点排定次序。算法以得到的次序访问这些节点。因此，A_搜索算法是最佳优先搜索的范例。\n集束搜索（又名定向搜索，Beam Search）——最佳优先搜索算法的优化。使用启发式函数评估它检查的每个节点的能力。不过，集束搜索只能在每个深度中发现最前面的m个最符合条件的节点，m是固定数字——集束的宽度。\n二分查找（Binary Search）——在线性数组中找特定值的算法，每个步骤去掉一半不符合要求的数据。\n分支界定算法（Branch and Bound）——在多种最优化问题中寻找特定最优化解决方案的算法，特别是针对离散、组合的最优化。\nBuchberger算法——一种数学算法，可将其视为针对单变量最大公约数求解的欧几里得算法和线性系统中高斯消元法的泛化。\n数据压缩——采取特定编码方案，使用更少的字节数（或是其他信息承载单元）对信息编码的过程，又叫来源编码。\nDiffie-Hellman密钥交换算法——一种加密协议，允许双方在事先不了解对方的情况下，在不安全的通信信道中，共同建立共享密钥。该密钥以后可与一个对称密码一起，加密后续通讯。\nDijkstra算法——针对没有负值权重边的有向图，计算其中的单一起点最短算法。\n离散微分算法（Discrete differentiation）\n动态规划算法（Dynamic Programming）——展示互相覆盖的子问题和最优子架构算法\n欧几里得算法（Euclidean algorithm）——计算两个整数的最大公约数。最古老的算法之一，出现在公元前300前欧几里得的《几何原本》。\n期望-最大算法（Expectation-maximization algorithm，又名EM-Training）——在统计计算中，期望-最大算法在概率模型中寻找可能性最大的参数估算值，其中模型依赖于未发现的潜在变量。EM在两个步骤中交替计算，第一步是计算期望，利用对隐藏变量的现有估计值，计算其最大可能估计值；第二步是最大化，最大化在第一步上求得的最大可能值来计算参数的值。\n快速傅里叶变换（Fast Fourier transform，FFT）——计算离散的傅里叶变换（DFT）及其反转。该算法应用范围很广，从数字信号处理到解决偏微分方程，到快速计算大整数乘积。\n梯度下降（Gradient descent）——一种数学上的最优化算法。\n哈希算法（Hashing）\n堆排序（Heaps）\nKaratsuba乘法——需要完成上千位整数的乘法的系统中使用，比如计算机代数系统和大数程序库，如果使用长乘法，速度太慢。该算法发现于1962年。\nLLL算法（Lenstra-Lenstra-Lovasz lattice reduction）——以格规约（lattice）基数为输入，输出短正交向量基数。LLL算法在以下公共密钥加密方法中有大量使用：背包加密系统（knapsack）、有特定设置的RSA加密等等。\n最大流量算法（Maximum flow）——该算法试图从一个流量网络中找到最大的流。它优势被定义为找到这样一个流的值。最大流问题可以看作更复杂的网络流问题的特定情况。最大流与网络中的界面有关，这就是最大流-最小截定理（Max-flow min-cut theorem）。Ford-Fulkerson 能找到一个流网络中的最大流。\n合并排序（Merge Sort）\n牛顿法（Newton’s method）——求非线性方程（组）零点的一种重要的迭代法。\nQ-learning学习算法——这是一种通过学习动作值函数（action-value function）完成的强化学习算法，函数采取在给定状态的给定动作，并计算出期望的效用价值，在此后遵循固定的策略。Q-leanring的优势是，在不需要环境模型的情况下，可以对比可采纳行动的期望效用。\n两次筛法（Quadratic Sieve）——现代整数因子分解算法，在实践中，是目前已知第二快的此类算法（仅次于数域筛法Number Field Sieve）。对于110位以下的十位整数，它仍是最快的，而且都认为它比数域筛法更简单。\nRANSAC——是“RANdom SAmple Consensus”的缩写。该算法根据一系列观察得到的数据，数据中包含异常值，估算一个数学模型的参数值。其基本假设是：数据包含非异化值，也就是能够通过某些模型参数解释的值，异化值就是那些不符合模型的数据点。\nRSA——公钥加密算法。首个适用于以签名作为加密的算法。RSA在电商行业中仍大规模使用，大家也相信它有足够安全长度的公钥。\nSchönhage-Strassen算法——在数学中，Schönhage-Strassen算法是用来完成大整数的乘法的快速渐近算法。其算法复杂度为：O(N log(N) log(log(N)))，该算法使用了傅里叶变换。\n单纯型算法（Simplex Algorithm）——在数学的优化理论中，单纯型算法是常用的技术，用来找到线性规划问题的数值解。线性规划问题包括在一组实变量上的一系列线性不等式组，以及一个等待最大化（或最小化）的固定线性函数。\n奇异值分解（Singular value decomposition，简称SVD）——在线性代数中，SVD是重要的实数或复数矩阵的分解方法，在信号处理和统计中有多种应用，比如计算矩阵的伪逆矩阵（以求解最小二乘法问题）、解决超定线性系统（overdetermined linear systems）、矩阵逼近、数值天气预报等等。\n求解线性方程组（Solving a system of linear equations）——线性方程组是数学中最古老的问题，它们有很多应用，比如在数字信号处理、线性规划中的估算和预测、数值分析中的非线性问题逼近等等。求解线性方程组，可以使用高斯—约当消去法（Gauss-Jordan elimination），或是柯列斯基分解（ Cholesky decomposition）。\nStrukturtensor算法——应用于模式识别领域，为所有像素找出一种计算方法，看看该像素是否处于同质区域（ homogenous region），看看它是否属于边缘，还是是一个顶点。\n合并查找算法（Union-find）——给定一组元素，该算法常常用来把这些元素分为多个分离的、彼此不重合的组。不相交集（disjoint-set）的数据结构可以跟踪这样的切分方法。合并查找算法可以在此种数据结构上完成两个有用的操作：\n查找：判断某特定元素属于哪个组。\n合并：联合或合并两个组为一个组。\n维特比算法（Viterbi algorithm）——寻找隐藏状态最有可能序列的动态规划算法，这种序列被称为维特比路径，其结果是一系列可以观察到的事件，特别是在隐藏的Markov模型中。\n","date":"2015-05-08T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/08/%E8%BF%91%E6%9C%9F%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/","title":"近期算法笔记"},{"content":" 浙江省赛题目，分析后直接暴力即可，奈何场上脑子里全是floyd，WA无数次。\n做题一定要先分析时间复杂问题，采取暴力方法，然后再考虑复杂问题解决方法。\n此外今天开始使用赛用vimrc才发现出现不少问题，还好提前使用了。\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; using namespace std; int n, m, k; const int maxn = 100 +10; int g[maxn][maxn]; void debug() { for(int i = ; i \u0026lt; n; i++) { for(int j = ;j \u0026lt; n;j ++) { cout \u0026lt;\u0026lt; g[i][j]; } cout \u0026lt;\u0026lt; endl; } } int main() { //freopen(\"input\", \"r\", stdin); int t; cin \u0026gt;\u0026gt; t; int u, v; while(t--) { memset(g, , sizeof(g)); scanf(\"%d%d%d\", \u0026n, \u0026m, \u0026k); for(int i = ; i \u0026lt; m; i++) { scanf(\"%d%d\", \u0026u, \u0026v); g[u][v] = g[v][u] = 1; } int ans, pre; ans = ; pre = 1; while(pre != ans) { pre = ans; for(int i = ; i \u0026lt; n; i++) { for(int j = ;j \u0026lt; n; j++) { // itself if(i == j || g[i][j]) continue; int count = ; for(int s = ; s \u0026lt; n; s++) if(s != i \u0026\u0026 s != j \u0026\u0026 g[i][s] \u0026\u0026 g[s][j]) count++; if(count \u0026gt;= k) { ans++; g[i][j] = 1; g[j][i] = 1; } } } } printf(\"%d\\n\", ans); } return ; } ","date":"2015-05-07T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/07/acm-%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9Bf-%E5%9B%BE%E8%AE%BA/","title":"ACM – 浙江省赛F – 图论"},{"content":"隐式图搜索，多个状态然后减枝。。没看懂李大大所说可以承受是个啥意思。。\n做起来实在太累了。。减枝的部分看了别人的代码，发现着实麻烦，不如用优先队列来的痛快=- =还有用优先队列做的= =\n\\[x\\]\\[y\\]\\[p\\]\\[c\\]$这组状态比较难搞，但是给了优先级（时间短的先出队），事情就好办了。\n#include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) #define CR printf(\"\\n\") const double PI = acos(-1.0); const int maxn = 30; char g[maxn][maxn]; // c, 0, 1, 2, 3, 4 // blue,w,g,black,r; struct Node { int x, y, c, p, t; Node(int x, int y, int c, int p, int t):x(x), y(y), c(c), p(p), t(t){} Node(){} bool operator \u0026lt; (const Node b) const { return t \u0026gt; b.t; } }; Node s, e; int n, m; inline int judge(int x, int y) { return x \u0026gt;= \u0026\u0026 x \u0026lt; m \u0026\u0026 y \u0026gt;= \u0026\u0026 y \u0026lt; n; } bool vis[maxn][maxn][4][5]; void test() { for(int i = ; i\u0026lt;m ;i++) { for(int j = ; j \u0026lt;n; j++ ) { printf(\"%2c\", g[i][j]); } cout \u0026lt;\u0026lt; endl; } } int dx[] = {-1, , 1, }; int dy[] = {, 1, , -1}; int bfs() { priority_queue \u0026lt;Node\u0026gt; q; Node t, next; int ans = INF; q.push(s); while(!q.empty()) { t = q.top(), q.pop(); vis[t.x][t.y][t.p][t.c] = 1; if(t.x == e.x \u0026\u0026 t.y == e.y \u0026\u0026 t.c == e.c) return t.t; for(int i = ; i \u0026lt; 4; i++) { next.x = t.x + dx[i]; next.y = t.y + dy[i]; next.c = (t.c+1)%5; next.p = i; if(next.p == t.p) next.t = t.t+1; else if(abs(next.p-t.p) == 2) next.t = t.t+3; else next.t = t.t+2; if(g[next.x][next.y] != \u0026#39;#\u0026#39; \u0026\u0026 !vis[next.x][next.y][next.p][next.c] \u0026\u0026 judge(next.x, next.y)) q.push(next); } } return ans; } int main() { #ifdef DEBUG freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int kase = 1; while(scanf(\"%d%d\", \u0026m, \u0026n) != EOF) { MEM(vis); if(n == \u0026\u0026 m == ) break; for(int i = ; i \u0026lt; m; i++) scanf(\"%s\", g[i]); // read for(int i = ; i \u0026lt; m ;i ++) { for(int j = ;j \u0026lt; n; j++) { if(g[i][j] == \u0026#39;S\u0026#39;) s = Node(i, j, 2, , ); else if(g[i][j] == \u0026#39;T\u0026#39;) e = Node(i, j, 2, , ); } } int ans = bfs(); if(kase != 1) CR; printf(\"Case #%d\\n\", kase++); if(ans == INF) puts(\"destination not reachable\"); else printf(\"minimum time = %d sec\\n\", ans); } return ; } ","date":"2015-05-05T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/05/acm-uva10047-%E5%9B%BE%E8%AE%BA/","title":"ACM – Uva10047 – 图论"},{"content":"问能不能拼接一条项链，条件是首尾相同构成环。\n这个题的坑在：\n虽然保证连通，但是不一定每个颜色都有，所以单纯的暴力euler(1)是很愚蠢的。\n题目本身是要求顺序输出的，也就是dfs不能回溯，如果回溯，为了保证准确性，需要交换uv的位置来保证。\n通过统计出度入度判断是否满足欧拉回路。\n#include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) #define CR printf(\"\\n\") const double PI = acos(-1.0); int n; const int maxn = 1000+10; int g[60][60]; void euler(int u) { for(int v = 1; v \u0026lt;= 50; v++) if(g[u][v]) { g[u][v]--, g[v][u]--; euler(v); printf(\"%d %d\\n\", v, u); } } int degree[60]; bool check() { for(int i = 1; i\u0026lt;= 50; i++) if(degree[i] % 2) return false; return true; } int main() { #ifdef DEBUG freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int t; cin \u0026gt;\u0026gt; t; for(int kase = 1; kase \u0026lt;= t; kase++) { scanf(\"%d\", \u0026n); memset(g, , sizeof(g)); memset(degree, , sizeof(degree)); int f, e; for(int i = ; i \u0026lt; n;i++) { scanf(\"%d%d\", \u0026f, \u0026e); g[f][e] ++; g[e][f] ++; degree[f]++, degree[e]++; } printf(\"Case #%d\\n\", kase); if(check()) for(int i = 1; i\u0026lt;=50; i++) euler(i); else puts(\"some beads may be lost\"); if(kase != t) CR; } return ; } ","date":"2015-05-05T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/05/acm-uva10054-%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/","title":"ACM – Uva10054 – 欧拉回路"},{"content":"插件管理方面 对于Vundle，可以给每个插件添加一个简单的配置文件，针对不同的插件进行不同的载入，有时间可以实现一下。 或者可以重新造轮子，自己写一个插件管理器，实现功能。 莫非已经实现了功能而我没有发现？= = Map.vim /tmp/tmp.cpp ACM.vim 添加gdb调试脚本功能。 添加一键比对功能。 另外 可以将一部分相关的func转移。\n","date":"2015-05-05T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/05/%E4%B8%80%E4%BA%9Bvim%E7%9A%84%E6%83%B3%E6%B3%95/","title":"一些vim的想法"},{"content":"火会蔓延，人被火追着跑，能否跑出边界的问题。\nbfs火之后bfs人，或火和人放在一个队列里面bfs\n坑是没有火的情况，如果从0更新火势图而不是inf开始，那么可能造成没火不能跑的情况。\n/*============================================================================= # # Author: svtter - svtter@qq.com # # QQ : 57180160 # # Last modified: 2015-05-04 09:50 # # Filename: 11634.cpp # # Description: # =============================================================================*/ #include \u0026lt;iostream\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;queue\u0026gt; using namespace std; #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) #define CR printf(\"\\n\") const double PI = acos(-1.0); const int maxn = 1010; char g[maxn][maxn]; int gex[maxn][maxn]; bool vis[maxn][maxn]; int r, c; int dx[] = {, 1, -1, }; int dy[] = {1, , , -1}; struct Node { int i, j, t; Node() {} Node(int i, int j, int t):i(i), j(j), t(t){} }; inline int judge(int x, int y) { return x \u0026gt;= \u0026\u0026 x \u0026lt; r \u0026\u0026 y \u0026gt;= \u0026\u0026 y \u0026lt; c; } void init(queue \u0026lt;Node\u0026gt; \u0026q) { Node temp, next; int nx, ny; while(!q.empty()) { temp = q.front(), q.pop(); temp.t++; for(int i = ; i \u0026lt; 4; i++) { nx = temp.i + dx[i]; ny = temp.j + dy[i]; if(g[nx][ny] != \u0026#39;#\u0026#39; \u0026\u0026 judge(nx, ny) \u0026\u0026 gex[nx][ny] \u0026gt; temp.t) { next.i = nx; next.j = ny; next.t = temp.t; gex[nx][ny] = temp.t; q.push(next); } } } } int bfs(queue \u0026lt;Node\u0026gt; \u0026q) { Node t, n; int nx, ny; while(!q.empty()) { t = q.front(), q.pop(); if(t.i == r-1 || t.j == c-1 || t.i == || t.j == ) return t.t; t.t ++; for(int i = ; i \u0026lt; 4; i++) { nx = t.i + dx[i]; ny = t.j + dy[i]; if(!vis[nx][ny] \u0026\u0026 gex[nx][ny] \u0026gt; t.t \u0026\u0026 judge(nx, ny)) { n.i = nx, n.j = ny, n.t = t.t; vis[nx][ny] = 1; q.push(n); } } } return ; } int main() { #ifdef DEBUG freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int t; scanf(\"%d\", \u0026t); queue \u0026lt;Node\u0026gt; q; while(t--) { while(!q.empty()) q.pop(); scanf(\"%d%d\", \u0026r, \u0026c); MEM(vis); Node joe; memset(gex, INF, sizeof(gex)); for(int i = ; i \u0026lt; r; i++) scanf(\"%s\", g[i]); for(int i = ; i \u0026lt; r; i++) { for(int j = ;j \u0026lt; c;j ++) { if(g[i][j] == \u0026#39;F\u0026#39;) { vis[i][j] = 1; gex[i][j] = 1; q.push(Node(i, j, 1)); } else if(g[i][j] == \u0026#39;J\u0026#39;) { vis[i][j] = 1; joe = Node(i, j, 1); } else if(g[i][j] == \u0026#39;#\u0026#39;) vis[i][j] = 1; } } init(q); q.push(joe); int ans = bfs(q); if(ans == ) puts(\"IMPOSSIBLE\"); else printf(\"%d\\n\", ans); } return ; } ","date":"2015-05-04T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/04/%E7%81%AD%E7%81%AB/","title":"灭火"},{"content":"项链和手镯。\n项链的问题在于不可以翻转，因此少了一种置换，而手镯则可以反转。然后我们计算旋转的置换。\n旋转的步长可以是0,i,2i…然后我们可以得出循环一共有n/gcd(i,n)个元素，因此，我们可以计算出一共有gcd(i,n)个循环。则不定点的个数为\n$a = \\Sigma t^{gcd(i,n)}$。\n翻转。翻转奇数情况和偶数情况是不一样的，因为奇数情况会多一个不定点，这个不定点就是在轴上的点。剩余的不定点的个数就是$n/2$，总共不定点的个数就是$nt^{(n+1)/2}$。偶数的情况下，如果正好切在两个珠子上，那么循环长度为2的点有$n/2-1$个，长度为1的循环有2个，所以总共$n/2+1$个。如果没有切在珠子上，不定点的个数为$n/2$，和为$b = n/2*(t^{n/2+1} + t^{n/2})$。\n然后我们可以计算出项链的个数$a/n$，手镯的个数$(a+b)/2n$\n列出式子以后代码就方便了。记得求pow的时候可以顺手打表\n/*============================================================================= # # Author: svtter - svtter@qq.com # # QQ : 57180160 # # Last modified: 2015-05-03 18:48 # # Filename: 10294.cpp # # Description: # =============================================================================*/ #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) #define CR printf(\"\\n\") const double PI = acos(-1.0); int gcd(int a, int b) { return b == ? a : gcd(b, a%b); } const int maxn = 60; ll po[maxn]; int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int n, t; ll ans, ans2; while(scanf(\"%d%d\", \u0026n, \u0026t) != EOF \u0026\u0026 n) { po[] = 1; ans = ; for(int i = 1; i \u0026lt;= n; i++) po[i] = po[i-1] * t; for(int i = ; i \u0026lt; n;i++) ans += po[gcd(i, n)]; ans2 = ans; if(n \u0026 1) ans2 += n*po[(n+1)/2]; else ans2 += n/2*(po[n/2+1] + po[n/2]); printf(\"%lld %lld\\n\", ans/n, ans2/(2*n)); } return ; } ","date":"2015-05-03T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/03/acm-uva10294-%E7%BD%AE%E6%8D%A2/","title":"ACM – Uva10294 – 置换"},{"content":"终于搞明白置换了，可喜可贺。建议不要看屈的离散数学，看白书即可，通俗易懂。\n我在这里简单阐述一下，当然也是依据李大大的书。\n置换 置换就是把n个元素全排列，置换可以定义乘法。\n循环就是置换的移位。例如：\n1 2 3 4 5 3 5 1 4 2 即为(1 3)(2 5)(4)\n其中，(1 3)通过这个置换发现形成一个循环，(2 5)通过这个置换形成一个循环，(4)本身构成一个循环。\n不动点 对于一个置换f，若一个着色方案s经过置换后不变，则称s为f的不动点，将f的不动点记录为C(f)，则可证明等价类数目为所有C(f)的平均值，成为Burnside引理。\nPolya定理 一般的，如果f分解成m(f)个循环的乘积，那么每个循环的所有格子的颜色必须相同。（因为这样才是一个不动点）。\n假设涂k种颜色，则有\n$$C(f) = k^{m(f)}$$（乘法原理。循环内相同，循环间可以不同）。\n代入Burnside引理之后得到Polya定理：等价类的个数等于所有置换f的$k^{m(f)}$的平均数。\n","date":"2015-05-03T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/03/acm-%E7%BD%AE%E6%8D%A2/","title":"ACM – 置换"},{"content":"本题目计算开根号数字，给出Y求X。X = sqrt(Y)，主要问题在Y的超大数据。\n时间限制是3s。我使用的大数模板中没有一个大数除大数的算法，因此直接借用Java来搞一搞。\n$$(5/x+x)/2 = x$$递归逼近求解。这个公式比较好推，移项即可。\nimport java.util.*; import java.math.*; import java.util.HashSet; public class Main { static Set set; public static BigInteger cal(BigInteger a, BigInteger b) { BigInteger ans = (a.divide(b) .add(b)).divide(new BigInteger(\"2\")); if(set.contains(ans)) return ans; else { set.add(ans); return cal(a, ans); } } public static void main(String [] args) { Scanner cin = new Scanner(System.in); BigInteger a; String s; int T = cin.nextInt(); while(T-- != ) { set = new HashSet(); s = cin.next(); a = new BigInteger(s); System.out.println(cal(a, a)); if(T != ) System.out.println(); } } } 参考他人代码，不需要用set，直接判断是否和前一个相等即可= =。\n再一个就是模拟手算。手算法有些麻烦。。注意第二个除数开始余数*20即可。\n","date":"2015-05-02T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/02/acm-uva10023-%E5%BC%80%E5%B9%B3%E6%96%B9/","title":"ACM – UVa10023 – 开平方"},{"content":"基本上是组合数裸题。。\n给出$(x_1+x_2+x_3….x_k)^n$，要求计算$x_1^{n_1}x_2^{n_2}…x_k^{n_k}$的系数。\n思想就是从一个算式中取出$n_k$，即$C_n^{n_k}$，然后减去$n_k$，如果直接相乘则会重复。\n#include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } const int maxn = 15; int a[maxn]; int C[maxn][maxn]; void init() { for(int i = ; i \u0026lt; maxn; i++) { C[i][] = C[i][i] = 1; for(int j = 1; j \u0026lt; i; j++) C[i][j] = C[i-1][j] + C[i-1][j-1]; } } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int n, k; init(); while(~scanf(\"%d%d\", \u0026n, \u0026k)) { for(int i = ; i \u0026lt; k;i ++) scanf(\"%d\", \u0026a[i]); int ans = 1; for(int i = ; i \u0026lt; k; i++) { ans *= C[n][a[i]]; n -= a[i]; } printf(\"%d\\n\", ans); } return ; } ","date":"2015-05-02T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/02/acm-uva10105-%E7%BB%84%E5%90%88%E6%95%B0/","title":"ACM – Uva10105 – 组合数"},{"content":"比较莫名奇妙的题目，明明是搜索题目居然放在了数学分类，完全找不到数学的影子。。\n利用vector，遍历树，找出最大的子树路径，然后与次大的子树路径相加即为答案。\n因为图表示这方面太渣，基本上抄袭了别人的代码= =\n#include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } const int maxn = 1e5 + 10; vector \u0026lt; pair \u0026lt;int, int\u0026gt; \u0026gt; node[maxn]; int ans; int ds(int to, int from) { int lmax = , lans = , lto; for(int i = ; i \u0026lt; node[to].size(); i++) { lto = node[to].at(i).first; if(lto != from) { lans = ds(lto, to) + node[to].at(i).second; ans = max(ans, lans + lmax); lmax = max(lmax, lans); } } return lmax; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif char s[20]; bool c = true; int u, v, l; while(c) { for(int i = ; i \u0026lt; maxn; i++) node[i].clear(); while(1) { if(gets(s) == ) { c = false; break; } if(s[]) { sscanf(s, \"%d%d%d\", \u0026u, \u0026v, \u0026l); node[u].push_back(make_pair(v, l)); node[v].push_back(make_pair(u, l)); } else break; } ans = ; ds(1, ); printf(\"%d\\n\", ans); } return ; } ","date":"2015-05-02T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/02/acm-uva10308-%E6%97%A0%E6%A0%B9%E6%A0%91%E8%BD%AC%E6%9C%89%E6%A0%B9%E6%A0%91/","title":"ACM – UVA10308 – 无根树转有根树"},{"content":"有些匪夷所思的题目。。注释部分加上就WA，不加就AC。。\n$$C(n,k) = C(n,k-1) * (n-k+1)/k$$$$ans = \\frac{C(n, k)}{C(r, s)}\\qquad$$改成递推即可。\n#include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { #ifdef DEBUG freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int p, q, r, s; double ans = 1.0; while(scanf(\"%d%d%d%d\", \u0026p, \u0026q, \u0026r, \u0026s) != EOF) { ans = 1.0; // if(p - q \u0026gt; q) q = p - q; // if(r - s \u0026gt; s) s = r - s; for(int i = 1; i \u0026lt;= q || i \u0026lt;= s; i++) { if(i \u0026lt;= q) ans = ans * (p-i+1) / i; if(i \u0026lt;= s) ans = ans * i / (r-i+1); } printf(\"%.5lf\\n\", ans); } return ; } ","date":"2015-05-02T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/02/acm-uva10375-%E7%BB%84%E5%90%88%E6%95%B0%E5%85%AC%E5%BC%8F/","title":"ACM – Uva10375 – 组合数公式"},{"content":"后面的三位快速幂即可，但是前面三位不好求。经过分析，每一位都有可能牵扯到前三位的值，因此无法具体的作出判断。\n如果使用模方法省去后面的部分，必定会造成误差，随着省略的部分增多，误差积累势必会越来越大。（错了一组数据）\n最佳的方法还是数学分析（参考了题解）：\n分析n，$a = log_{10}^n$，则$n = a ^ {10}$。分解a = i + d，i为正数部分，d为小数部分。那么i影响的仅仅是位数，d影响的则是具体的数字。\n这样得到的值是准确的。另外对浮点数取余\nfmod(double, mod) #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll unsigned long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int pow_mod(int x, int k, int p) { int ans = 1; x %= p; while(k) { if(k\u00261) ans = ans * x % p; x = x * x % p; k \u0026gt;\u0026gt;= 1; } return ans; } int solve(int n, int k) { double d = log10(n*1.0); int ans = (int)pow(10, 2 + fmod(k*d, 1)); return ans; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int T; int n, k; cin \u0026gt;\u0026gt; T; while(T--) { scanf(\"%d%d\", \u0026n, \u0026k); int ans2 = pow_mod(n, k, 1000); int ans1 = solve(n, k); printf(\"%d...%03d\\n\", ans1, ans2); } return ; } ","date":"2015-05-02T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/02/acm-uva11029-%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%89%8D%E5%B9%82/","title":"ACM – UVA11029 – 快速幂，快速前幂"},{"content":"给出一个Answer(x,y)函数，x,y属于[1,N]，$Answer(k_x, k_y)$可以由Answer(x,y)得出，目的是求需要计算多少Answer(x,y)。\n就是求1,N范围的欧拉函数的加和。欧拉函数的定义是与N互质的数的个数，所以需要如此计算。一开始没有发现就是求欧拉惭愧惭愧。\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } const int maxn = 1e5 + 10; int phi[maxn]; void phi_table(int n) { memset(phi, , sizeof(phi)); phi[1] = 1; for(int i = 2; i \u0026lt;= n; i++) if(!phi[i]) for(int j = i; j \u0026lt;= n;j += i) { if(!phi[j]) phi[j] = j; phi[j] = phi[j] / i * (i-1); } } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int N; phi_table(maxn-1); ll ans; while(scanf(\"%d\", \u0026N), N) { ans =; for(int i = 1; i \u0026lt;= N;i ++) ans += phi[i]; ans = ans *2 - 1; printf(\"%lld\\n\", ans); } return ; } ","date":"2015-05-01T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/01/acm-uva10820-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/","title":"ACM – UVA10820 – 欧拉函数"},{"content":"一开始在扩展gcd上想了许久没有办法将得出的数字直接转换成为相应的输出，后来发现就是模方程。\n因为不求最佳解，所以直接使用ca*x = n (mod cb)即可。这个方程的解可以覆盖全部的n，因为该方程如果有解，则n是gcd(ca, cb)的倍数。因为ca, cb互质 gcd (ca, cb) = 1，所以明显通过单纯的加满B，向A中倒，然后清空A就可以遍历所有n的解（尽管可能不是最佳解）。\n不能是cb*x = n (mod ca)，因为n可能大于ca.\n如果求最佳解，显然是bfs。当然这到题目也可以dfs来做，不过明显要复杂很多。\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int ca, cb, n; while(scanf(\"%d%d%d\", \u0026ca, \u0026cb, \u0026n) != EOF) { //解模方程 ax = n(mod b) int a = , b = ; while(b != n) { if(a == ) { puts(\"fill A\"); a = ca; } if(b == cb) { puts(\"empty B\"); b = ; } if(a \u0026gt; cb - b) { a = a - (cb-b); b = cb; } else { b += a; a = ; } puts(\"pour A B\"); } puts(\"success\"); } return ; } ","date":"2015-05-01T01:00:00+08:00","permalink":"https://svtter.cn/2015/05/01/acm-uva571-%E6%A8%A1%E6%96%B9%E7%A8%8B/","title":"ACM – UVA571 – 模方程"},{"content":"今天不适合刷题。。。\n题意：一个桌子4条腿，每条腿由一种硬币构成，四条腿必须一样长，请问如何最接近给出的标准桌子高度，输出两个最接近的值。\n更新两个值的时候错误的判断如果lcm大于h就不再更新了，却没有想到高于h的部分依然可以更新，只是不能更新小于h的部分了。\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(a, -1, sizeof(a)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int gcd(int a, int b) { return b == ? a: gcd(b, a % b); } const int maxn = 50 + 10; int a[maxn]; int n, t; int table[15]; int ans1[15]; int ans2[15]; void output() { for(int i = ; i \u0026lt; t; i++) printf(\"%d %d\\n\", ans1[i], ans2[i]); } // 寻找边界 bool findmax(int lcm, int num, int \u0026mint, int \u0026maxt) { // if(lcm \u0026gt; num) // return false; int t = num / lcm * lcm; if(t == num) { mint = num; maxt = num; } else { mint = t; maxt = t + lcm; } // return 1; } // 检查 void check(int lcm) { int mint, maxt; for(int i = ; i \u0026lt; t; i++) { findmax(lcm, table[i], mint, maxt); if(ans1[i] == -1 || mint \u0026gt; ans1[i]) ans1[i] = mint; if(ans2[i] == -1 || maxt \u0026lt; ans2[i]) ans2[i] = maxt; } } // 枚举四个腿 void fs(int c, int num, int lcm) { if(num == 4) { check(lcm); return; } for(int i = c; i \u0026lt; n; i++) { int temp = lcm; lcm = lcm / gcd(lcm, a[i]) * a[i]; // 可能溢出 fs(i+1, num+1, lcm); lcm = temp; } } int main() { #ifdef DEBUG freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif while(~scanf(\"%d%d\", \u0026n, \u0026t) \u0026\u0026 n != ) { for(int i = ; i\u0026lt; n; i++) scanf(\"%d\", \u0026a[i]); for(int i = ; i \u0026lt; t; i++) { scanf(\"%d\", \u0026table[i]); ans1[i] = -1; ans2[i] = -1; } fs(, , 1); output(); } return ; } ","date":"2015-04-29T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/29/acm-uva10717-lcm+dfs/","title":"ACM – Uva10717 – lcm+dfs"},{"content":"谢天谢地终于过了。\n就是求分解质因数后的和，如果是质数那么返回1+n本身。\n一开始直接暴力求两个质因数的情况，铁定不对啊。。 第二次发现策略有问题，转为使用枚举质因数，然后发现仅仅是质因数LCM有问题啊。。 第三次没有考虑质数 第四次没有考虑Case 第五次不记得了。 第七次AC，哭了真是。。一定要先分析好题目啊。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define inf 0x3f3f3f3f #define ll long long int #define mem(a) memset(a, 0, sizeof(a)) #define memm(a) memset(b, -1, sizeof(b)) #define deb(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define cr printf(\"\\n\") // 调试用 template \u0026lt;class type\u0026gt; void debug(type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } ll solve(int n) { if(n == 1) return 2; ll ans = ; ll sq = sqrt(n); int cnt, pf = ; for(ll i = 2; i \u0026lt;= sq;i++) { if(n % i == ) { cnt = 1; while(n % i == ) { cnt *= i; n /= i; } pf ++; ans += cnt; } } if(1 != n) { ans += n; pf++; } // n为质数 if(pf \u0026lt;= 1) ans ++; return ans; } int main() { #ifdef debug // freopen(\"input\", \"r\", stdin); #endif int n; int c = 1; // const int maxn = pow(2, 31) -1; // printf(\"%d\\n\", maxn); ll ans; while(scanf(\"%d\", \u0026n) \u0026\u0026 n) { ans = solve(n); printf(\"Case %d: \", c++); printf(\"%lld\\n\", ans); } return ; } ","date":"2015-04-29T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/29/acm-uva10791-divideprime/","title":"ACM – UVa10791 – divide prime"},{"content":"今天刷题数论题目的时候有所感想。\n首先建立一支比较强悍的ACM队伍第一点就是保证刷题量，看再多的书，不做练习肯定是不行的。 选一本正确的指导教材，比如说李汝佳的白皮书，简单易懂，快捷粗暴，按照给出的分类进行训练，效果更佳。 正确的分类。ACM/ICPC的题目各个方向等等都有，各个都很精通对于大学才刚开始培养的acmer恐怕不是很现实，不如巩固共同部分，着重培养较为偏门的部分。最简单的方法也是通过分类，给学生一个兴趣方向，数论的可以顺带研究密码学等学科，对于以后的长远发展也是有很大的好处 — 反而，样样精通可能造成的结果就是样样不精通。当然，如果敏而好学，那么不局限于这一点。 想想去年这个时间在刷一份简单的模板，感觉用处实在是不大，问题都没有好好的理解。\n","date":"2015-04-29T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/29/acm%E4%B8%80%E4%B8%AA%E9%98%9F%E4%BC%8D%E7%9A%84%E5%BB%BA%E6%88%90%E4%B9%8B%E6%88%91%E8%A7%81/","title":"ACM一个队伍的建成之我见"},{"content":"從維基百科的勾股數條目參考來的通解：\n給一個任意數對(X,Y)，用以下公式代替\n$A = X^2 – Y^2$\n$B = 2XY$\n$C = X^2 + Y^2$\n得出的A,B,C就是一組勾股數。\n若 (X,Y) 恰好互質而且一奇一偶，那麼會得到一組(A,B,C)互質的勾股數。\n知道通解後，雙層迴圈跑 (X,Y) 就能找出所有互質勾股數。\n按照台湾同胞的题解。 — 勾股数公式也是很神奇的啊。。。\n此外还学习了bitset，因为是按位存储，所以比一般的bool来的更加迅速，也更加节省时间。\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int gcd(int a, int b) { return a % b == ? b : gcd(b, a%b); } int odd(int a, int b) { return (a%2 \u0026\u0026 !(b%2)) || (b%2 \u0026\u0026!(a%2)); } int judge(int a, int b) { return (gcd(a, b) == 1 \u0026\u0026 odd(a, b)); } int n; const double eps = 1e-15; const int N = 1e6+10; bitset \u0026lt;N\u0026gt; p; int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif while(~scanf(\"%d\", \u0026n)) { p.set(); int cnt = ; for(int x = 1; x \u0026lt; 1000; x ++) for(int y = x+1; ; y += 2) { int a, b, c; if(judge(x, y)) { a = y*y - x*x; b = 2*x*y; c = y*y + x*x; if(c \u0026gt; n) break; cnt ++; int ta = a, tb = b, tc = c; while(tc \u0026lt;= n) { p[ta] = p[tb] = p[tc] = ; ta += a, tb += b, tc += c; } } } int c2 = ; for(int i = 1;i \u0026lt;= n; i++) if(p[i]) c2++; printf(\"%d %d\\n\", cnt, c2); } return ; } ","date":"2015-04-28T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/28/acm-uva106-%E5%8B%BE%E8%82%A1%E5%AE%9A%E7%90%86/","title":"ACM – Uva106 – 勾股定理"},{"content":"水题一发。。直接使用floor和ceil函数，然后暴力即可。。。\n如果使用快速的方法，就是扩展gcd。其中d的初始值没有关系，最后返回的是gcd(a,b).\n暴力算法 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } // ax + by = d // 扩展gcd void gcd(ll a, ll b, ll \u0026d, ll \u0026x, ll \u0026y) { if(!b) { d = a; x = 1; y = ; } else { gcd(b, a%b, d, y, x); y-= x*(a/b); } } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int T; cin \u0026gt;\u0026gt; T; ll x, k; while(T--) { scanf(\"%lld%lld\", \u0026x, \u0026k); double c = x/(double)k; ll fl = floor(c); ll ce = ceil(c); // printf(\"%lld %lld\\n\", a, b); bool find = ; for(ll i = ; !find; i++) for(ll j = ; i * fl + j *ce \u0026lt;= x; j++) { if(i*fl + j *ce == x) { printf(\"%lld %lld\\n\", i, j); find =1; break; } } } return ; } 扩展gcd算法 速度更快，0.012\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define FOR(i, s, e) for(int (i) = (s); (i) \u0026lt; (e); (i)++) const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } // ax + by = d // 扩展gcd void gcd(ll a, ll b, ll \u0026d, ll \u0026x, ll \u0026y) { if(!b) { d = a; x = 1; y = ; } else { gcd(b, a%b, d, y, x); y-= x*(a/b); } } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int T; cin \u0026gt;\u0026gt; T; ll x, k; while(T--) { scanf(\"%lld%lld\", \u0026x, \u0026k); double c = x/(double)k; ll fl = floor(c); ll ce = ceil(c); ll a1, a2, g; gcd(fl, ce, g, a1, a2); a1 *= x/g; a2 *= x/g; printf(\"%lld %lld\\n\", a1, a2); } return ; } ","date":"2015-04-28T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/28/acm-uva10673-%E6%89%A9%E5%B1%95gcd/","title":"ACM – Uva10673 – 扩展gcd"},{"content":"题意是由10进制转换成-2进制，但是明显我分析错了，所以写了调了接近一下午的bug。。。\n有时间再写正常的题解。\n题解：\n如果当前数位和输入n符号相同，那么不做处理，如果不同且为1，那么下一位（即左边一位）做+1处理 — 因为下一位是上一位的2倍，就相当于做一个变号处理。\n","date":"2015-04-28T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/28/acm-uva11121-%E8%BF%9B%E5%88%B6/","title":"ACM – UVA11121 – 进制"},{"content":"昨天卡了这道题目，今天特意来看看莫比乌斯反演。\n其中，$∑_{d|n}$含义为整除.\nACdreamer大大的讲解\n看了这篇文章即可= =\nwikipedia的公式: 以上就是具体的公式，此外，还有线性筛法:\nvoid Init() { memset(vis,,sizeof(vis)); mu[1] = 1; cnt = ; for(int i=2; i\u0026lt;N; i++) { if(!vis[i]) { prime[cnt++] = i; mu[i] = -1; } for(int j=; j\u0026lt;cnt\u0026\u0026i*prime[j]\u0026lt;N; j++) { vis[i*prime[j]] = 1; if(i%prime[j]) mu[i*prime[j]] = -mu[i]; else { mu[i*prime[j]] = ; break; } } } } 这段代码也是摘自AC大大。我们得到这个东西有什么用？\n简单来说，就是简化计算数论函数和的计算的过程，进行加速。\n在HDU5212中，给出的题解是：\n这道题需要一些莫比乌斯反演、线性筛的知识\n定义$f(x)=x∗(x−1)$\n题目所求即为$\\Sigma(f(gcd(ai,aj)|i!=j,1≤i,j≤n)$\n先用线性筛求出miu在[1,10000]的函数值\n利用莫比乌斯反演公式我们可以$O(vlogv)$暴力求解出函数g（就是$f(n)/miu$）在[1,10000]的函数值，其中g满足：\n$\\Sigma(g(d)|x)$\n这样所求答案即为：\n$\\Sigma(g(d)∗cnt(d)∗cnt(d)|1≤d≤10000)$，其中cnt函数满足：\ncnt(x)=在a1,a2,..,an中是x的倍数的个数\n而cnt的取值也可以$O(vlogv)$暴力计算出\n所以总的时间复杂度就是$O(vlogv)$的\n就是这样。\n","date":"2015-04-27T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/27/acm-%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/","title":"ACM – 莫比乌斯反演"},{"content":" #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int n; int record[10010]; int a[10010]; while(scanf(\"%d\", \u0026n) != EOF) { memset(record, , sizeof(record)); for(int i = 1; i \u0026lt;= n; i++) scanf(\"%d\", \u0026a[i]); for(int i = 1; i \u0026lt;= n;i ++) for(int j = i+1; j \u0026lt;= n; j++) { if(a[j] % a[i] == ) { record[i] = j; break; } } // debug(record, n+1); ll res = ; for(int i = 1; i \u0026lt;= n; i++) res += record[i]; printf(\"%lld\\n\", res); } return ; } ","date":"2015-04-27T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/27/bestcoder2%E9%A2%98%E7%9B%AE/","title":"Bestcoder 2 题目"},{"content":"水题一发。无奈自己没有好好审清题意，另外快速幂居然写错了- =\n快速幂在过程中修改a的值，但是我却计算成了在偶数时相乘，调试半天。看来还是咩有好好理解啊。\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } ll p; ll pow_mod(ll a, ll n) { ll ans = 1; a %= p; while(n) { if(n \u0026 1) ans = ans * a % p; a = a * a % p; n \u0026gt;\u0026gt;= 1; } return ans; } // 3. const int maxn = 10000000 + 10; const int maxp = 700000; int vis[maxn]; int prime[maxp]; // 筛素数 void sieve(int n) { int m = (int) sqrt(n+0.5); memset(vis, , sizeof(vis)); for(int i = 2; i \u0026lt;= m;i ++) if(!vis[i]) for(int j = i*i; j \u0026lt;= n; j+=i) vis[j] = 1; } // 生成素数表 int gen_primes(int n) { sieve(n); int c = ; for(int i = 2; i \u0026lt;= n; i++) if(!vis[i]) prime[c++] = i; return c; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif ll n; const int bound = 65000+10; gen_primes(bound); while(scanf(\"%lld\", \u0026n) \u0026\u0026 n!= ) { // p is mod p = n; if(!vis[n]) printf(\"%lld is normal.\\n\", n); else { bool find = 1; for(ll i = 2; i \u0026lt; n;i ++) if(pow_mod(i, n) != i) { find = ; break; } if(find) printf(\"The number %lld is a Carmichael number.\\n\", n); else printf(\"%lld is normal.\\n\", n); } } return ; } ","date":"2015-04-25T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/25/acm-uva10006-%E5%BF%AB%E9%80%9F%E5%B9%82/","title":"ACM – UVa10006 – 快速幂"},{"content":"这道题目其实就是推个公式，主要还是考验编程技巧。。\n首先double的精度范围是15-16位，浮点数运算还是最快的，依据最后一个答案（总共10组），平方为16位刚好够用。\n如果想要最精确的结果，当然还是使用long double或者long long来来保证精度问题。不过计算速度就会有所损失，采取二分的方法加速比较好。\n利用double的代码：\nconst double eps = 1e-10; for(double i = 8; i \u0026lt; maxn;i ++) { double res = i*(i+1)/2; ll ans = sqrt(res); if(res - ans*ans \u0026lt; eps) printf(\"%10lld %10lf\\n\", ans, i); } printf(\"done\"); 利用long long的代码:\nfor(ull i = 8; i \u0026lt; maxn;i ++) { ull res = i*(i+1)/2; ull l = i/2, r = i; ull mid, ans; bool find = ; // bsearch while(l \u0026lt;= r) { mid = (l+r)/2; ans = mid * mid; if(ans == res) { find = 1; break; } else if(ans \u0026gt; res) r = mid - 1; else l = mid + 1; } if(find) printf(\"%10lld %10lld\\n\", mid, i); } printf(\"done\"); 不过有一点就是无论怎么个快法，不使用打表肯定是会超时的，所以算出来直接上交即可。= =。这在大赛中应该也是允许的吧。\n","date":"2015-04-24T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/24/acm-uva138-%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/","title":"ACM – UVa138 – 数学基础"},{"content":"单例模式确保某个类只有一个实例，而且自行实例化，并向整个系统提供者个实例，提供一个访问它的全局访问点。\n核心是：创造私有的构造函数\n例如：只有一个实例的东西。\nSingleton.java package singleton; public class Singleton { private static final Singleton singleton = new Singleton(); private Singleton() { // 限制产生多个对象 System.out.println(\"已产生对象实例\"); } public static Singleton getInstance() { // 通过该方法获得实例对象 return singleton; } public static void operation() { // 类中其他方法，尽量是static } } Client package singleton; public class Client { public static void main(String[] args) { System.out.println(\"Start.\"); Singleton obj1 = Singleton.getInstance(); Singleton obj2 = Singleton.getInstance(); if (obj1 == obj2) { System.out.println(\"obj1和obj2是同一对象实例\"); } else { System.out.println(\"obj1和obj2并非同一对象实例\"); } System.out.println(\"End.\"); } } ","date":"2015-04-23T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/23/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","title":"软件设计模式 — 单例模式"},{"content":"4该模式的目标是，通过一个代理(Adapter)，在原来的类(Adaptee)和客户(Client)之间进行协调，从而达到兼容的目的。\n例如：我的项目中Davinci中使用的模式，将整体的游戏类作为Adapter，把用于通讯的Server类作为成员变量（也就是ObjectAdapter）。\n示意代码 package adapter; interface Target { public void request(); public void specRequest(); } class Adaptee { //适配者 public void specRequest() { System.out.println(\"this is specRequest.\"); } } class ClassAdapter extends Adaptee implements Target { public void request() { System.out.println(\"This is request in ClassAdapter.\"); } } class ObjectAdapter implements Target { private Adaptee adaptee = new Adaptee(); public void request() { System.out.println(\"this. is request in ObjectAdapter.\"); } public void specRequest() { adaptee.specRequest(); } } public class Client { private static Target ctarget = new ClassAdapter(); private static Target otarget = new ObjectAdapter(); public static void main(String args[]) { ctarget.request(); ctarget.specRequest(); otarget.request(); otarget.specRequest(); } } ","date":"2015-04-23T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/23/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/","title":"软件设计模式 — 适配器模式"},{"content":"首先一点什么是高斯消元？\n高斯消元其实就是一种求行列式的值的方法。\n例如\n\\[0\\]\\[0\\]\\[0\\]\\[1\\]\\[0\\]\\[n-1\\]\\[0\\]\\[n\\]|\n\\[1\\]\\[0\\]\\[1\\]\\[1\\]\\[1\\]\\[n-1\\]\\[1\\]\\[n\\]|\n\\[2\\]\\[0\\]\\[2\\]\\[1\\]\\[2\\]\\[n-1\\]\\[2\\]\\[n\\]|\n\\[3\\]\\[0\\]\\[3\\]\\[1\\]\\[3\\]\\[n-1\\]\\[3\\]\\[n\\]|\n…\n\\[n-1\\]\\[0\\]\\[n-1\\]\\[1\\]\\[n-1\\]\\[n-1\\]\\[n-1\\]\\[n\\]|\n\\[x\\]\\[y\\]，求x1, x2 .. xn的值。这个时候就可以使用高斯消元。\n本题目就是高斯消元求解的一道题目。\n依据题意，可以列出方程：\n$$E[x] = 0.5_(E[x-1]+1) + 0.5_(E[x+1]+1)$$其中E代表期望，利用高斯消元我们可以得到x1-xn的值，输出我们需要的E[x]即可。\n高斯消元其实就是我们所说的消元，但是针对于大型的矩阵。\n倒是很简单的题目。\n","date":"2015-04-21T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/21/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%94%E5%B1%8A%E7%9C%81%E8%B5%9Bcircle/","title":"山东省第五届省赛  Circle"},{"content":"斯特林数stirling 第一类 stirling数 s(n, k) n个人分成k组，组内再按特定顺序围圈\n也就是分成了k组，组内就像是项链颜色一样，\n( {A, B}, {C, D} ) ( {B, A}, {C, D} ) 属于一组\n({A}, {B, C, D}) ({A}, {B, D, C}) 不属于一组\n给定 $s(n,0)=0,s(1,1)=1$，有递归关系$s(n,k)=s(n-1,k-1) + (n-1) s(n-1,k)$\n第二类 stirling数 S(n, k) 是把p元素集合划分到k个不可区分的盒子里且没有空盒的划分个数。\n公式:\n$$ S(n, n) = 1 (n \u003e= 0) $$$$ S(n, 0) = 0 (n \u003e= 1) $$$$ S(n,k)=k*S(n-1,k)+S(n-1,k-1),\\text (1\u003c=k\u003c=n-1) $$这样题目就好解决了。第五届省赛题目神经病。\n因为每个桌子是不同的，所以还要利用乘法原理，$ans*m!$\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define lln long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl const double PI = acos(-1.0); #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } #define mod 1000000007 const int maxn = 100 + 10; lln s[maxn][maxn]; void init() { for(int i = ; i \u0026lt; 101; i++) { s[i][] = ; s[i][i] = 1; } for(int n = 2; n \u0026lt; 101; n++) for(int k = 1; k \u0026lt;= n-1 ; k++) s[n][k] = ((k*s[n-1][k])%mod + s[n-1][k-1]%mod) %mod; } int readinput() { int m, n; if(scanf(\"%d%d\", \u0026n, \u0026m) == EOF) return ; else { lln ans = s[n][m]; for(int i = 2; i \u0026lt;= m; i++) { ans *= i; ans %= mod; } printf(\"%lld\\n\", ans); } return 1; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif init(); while(readinput()); return ; } ","date":"2015-04-21T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/21/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%94%E5%B1%8A%E7%9C%81%E8%B5%9Bhearthstoneii/","title":"山东省第五届省赛 Hearthstone II"},{"content":" #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define inf 0x3f3f3f3f #define lln long long int #define mem(a) memset(a, 0, sizeof(a)) #define memm(a) memset(b, -1, sizeof(b)) #define deb(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define cr printf(\"\\n\") // 调试用 template \u0026lt;class type\u0026gt; void debug(type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } const int maxn = 10000000+10; lln sum[maxn]; struct ele { lln x, w; }; int cmp(ele a, ele b) { return a.x \u0026lt; b.x; } ele e[maxn]; int main() { #ifdef debug // freopen(\"input\", \"r\", stdin); #endif int n; while(scanf(\"%d\", \u0026n) != eof) { for(int i = ; i \u0026lt; n; i++) scanf(\"%lld\", \u0026e[i].x); for(int i = ; i \u0026lt; n; i++) scanf(\"%lld\", \u0026e[i].w); sort(e, e+n, cmp); sum[] = e[].w; for(int i = 1; i \u0026lt; n;i ++) sum[i] = e[i].w + sum[i-1]; double sm = sum[n-1]/2.0; bool flag; int i; for(i = ; i \u0026lt; n; i++) { int ti, tj; ti = tj = i; if(i != ) while(e[ti].x == e[ti-1].x) ti--; else ti = -1; if(i != n-1) while(e[tj].x == e[tj+1].x) tj++; else tj = n; flag = 1; // wi \u0026lt;= s/2 if(ti == -1) {} else if(sum[ti-1] \u0026lt;= sm) {} else flag = ; // wi \u0026lt; s/2 if(tj == n) {} else if (sum[n-1] - sum[tj] \u0026lt; sm){} else flag = ; if(flag) break; i = tj; } printf(\"%lld\\n\", e[i].x); } return ; } ","date":"2015-04-19T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/19/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%94%E5%B1%8Aacm%E7%9C%81%E8%B5%9Bweightedmedian/","title":"山东省第五届ACM省赛 Weighted Median"},{"content":"一开始直接使用结构体搞结果wrong了，随后查看了某牛的代码发现应该直接在区间上累加 — 得出结论不要直接使用复杂的结构体，转变成简单的数据形式未尝不是一个好方法\n原题:\nhttp://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=526\u0026pid=1001\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define lln long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } const int maxn = 10000 + 10; int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); #endif int T, n; // 24 * 60 + 60 = 1500 int a[2000], s1, s2, e1, e2; int num; scanf(\"%d\", \u0026T); while(T--) { scanf(\"%d\", \u0026n); int maxx = ; memset(a, , sizeof(a)); for(int i = ; i \u0026lt; n;i++) { scanf(\"%d%d:%d%d:%d\", \u0026num, \u0026s1, \u0026s2, \u0026e1, \u0026e2); int sum1 = s1*60 + s2; int sum2 = e1*60 + e2; for(int j = sum1; j \u0026lt; sum2; j++) { a[j] += num; maxx = max(maxx, a[j]); } } printf(\"%d\\n\", maxx); } return ; } ","date":"2015-04-18T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/18/bestcoder%232-1/","title":"bestcoder#2-1"},{"content":"数列排序 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define lln long long #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int n; const int maxn = 200 + 10; int a[maxn]; while(cin \u0026gt;\u0026gt; n) { for(int i = ; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i]; sort(a, a+n); for(int i = ; i \u0026lt; n; i++) printf(\"%d%c\", a[i], i == n-1? \u0026#39;\\n\u0026#39;: \u0026#39; \u0026#39;); } return ; } 十六进制转八进制 转换的时候，先转换成二进制，再转换成十六进制。\n这道题目还是比较有意思的，使用string只需要78ms，使用char*则超时。可能strcat每次都需要从头遍历数组，但是string则不需要。\n当然，如果是数字没有这么大，完全可以这样处理\nlln a; scanf(\"%x\", \u0026a); printf(\"%o\", a); 是不是很精髓= =\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define lln long long #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } const char t2[16][9] = { \"0000\", \"0001\", \"0010\", \"0011\", \"0100\", \"0101\", \"0110\", \"0111\", \"1000\", \"1001\", \"1010\", \"1011\", \"1100\", \"1101\", \"1110\", \"1111\" }; const char t8[8][8] = { \"000\", \"001\", \"010\", \"011\", \"100\", \"101\", \"110\", \"111\" }; const int maxn = 400000+10; void trans(char *num) { string temp; // char temp[maxn] = {\u0026#39;\\0\u0026#39;}; int len = strlen(num); int len2 = ; for(int i = ; i \u0026lt; len;i ++) { int t; if(num[i] \u0026gt;= \u0026#39;0\u0026#39; \u0026\u0026 num[i] \u0026lt;= \u0026#39;9\u0026#39;) t = num[i] - \u0026#39;0\u0026#39;; else t = num[i] - \u0026#39;A\u0026#39; + 10; // strcat(temp, t2[t]); temp += t2[t]; } int cnt = ; len = temp.length(); // len = strlen(temp); int i; for(i = len-3; i \u0026gt;= ; i-=3) for(int j = ; j \u0026lt; 8; j++) { bool test = 1; for(int k = ; k \u0026lt; 3; k++) if(t8[j][k] != temp[i+k]) { test = ; break; } if(test) { num[cnt++] = j+\u0026#39;0\u0026#39;; break; } } if(i == -1) for(int j = ; j \u0026lt; 7;j ++) { bool test = 1; for(int i = 1; i \u0026lt; 3; i++) { if(t8[j][i] != temp[i-1]) { test = ; break; } } if(test) { num[cnt++] = j+\u0026#39;0\u0026#39;; break; } } else if(i == -2) for(int j = ; j \u0026lt; 7;j ++) { if(t8[j][2] == temp[]) { num[cnt++] = j+\u0026#39;0\u0026#39;; break; } } num[cnt] = \u0026#39;\\0\u0026#39;; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int n; cin \u0026gt;\u0026gt; n; char num[maxn]; for(int i = ; i \u0026lt; n;i ++) { scanf(\"%s\", num); trans(num); int len = strlen(num); int j; for(j = len-1; j \u0026gt;= ; j--) if(num[j] != \u0026#39;0\u0026#39;) break; for(;j \u0026gt;= ; j--) cout \u0026lt;\u0026lt; num[j]; cout \u0026lt;\u0026lt; endl; } return ; } 十六进制转十进制 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define lln long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif lln a; while(scanf(\"%I64X\", \u0026a) != EOF) { printf(\"%I64d\\n\", a); } return ; } 十进制转十六进制 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define lln long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif lln a; while(scanf(\"%I64d\", \u0026a) != EOF) { printf(\"%I64X\\n\", a); } return ; } 由此也可以想到，如果是二进制的相关转换（数值范围允许的情况），我们可以写一个简单二进制转十六进制，然后利用sscanf来做进一步转换。\n当然，正规的做法还是除二取余，逆序排列。\n特殊回文数 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;queue\u0026gt; using namespace std; int main() { int n; while(cin \u0026gt;\u0026gt; n) { for(int i = 1; i \u0026lt; 10;i ++) for(int j = ; j \u0026lt; 10; j++) for(int k = ; k \u0026lt; 10; k++) { if(((i+j)*2+k) == n) printf(\"%d%d%d%d%d\\n\", i, j, k, j, i); } for(int i = 1; i \u0026lt; 10;i ++) for(int j = ; j \u0026lt; 10; j++) for(int k = ; k \u0026lt; 10; k++) { if((i+j+k) *2== n) { printf(\"%d%d%d\", i, j, k); printf(\"%d%d%d\", k, j, i); printf(\"\\n\"); } } } return ; } 回文数 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; int main() { for(int i = 1; i \u0026lt; 10;i ++) for(int j = ; j \u0026lt; 10; j++) printf(\"%d%d%d%d\\n\", i, j, j, i); return ; } 特殊的数字\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; int main() { for(int i = 1; i \u0026lt; 10;i ++) for(int j = ; j \u0026lt; 10; j++) for(int k = ; k \u0026lt; 10; k++) { int ans = i *i*i + k *k*k + j *j*j; if(i*100+j*10+k == ans) printf(\"%d\\n\", ans); } return ; } 只要读题不出问题就没有问题了。。。不刷了\n","date":"2015-04-10T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/","title":"蓝桥杯基础练习"},{"content":"蓝桥的系统需要I64d这种输入格式。无力吐槽。\nFibonacci数列 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define lln long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int n; while(scanf(\"%d\", \u0026n) != EOF) { int pre = 1, mid = 1; int temp; if(n == 2 || n == 1) { puts(\"1\"); continue; } for(int i = 2; i \u0026lt; n;i ++) { temp = pre + mid; temp %= 10007; pre = mid; mid = temp; } printf(\"%d\\n\", temp); } return ; } 圆的面积 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define lln long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif double PI = acos(-1.0); int r; while(scanf(\"%d\", \u0026r) != EOF) { double res = PI * r *r; printf(\"%.7lf\\n\", res); } return ; } 序列求和 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define lln long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif lln n; while(scanf(\"%I64d\", \u0026n) != EOF) { printf(\"%I64d\\n\", (1+n)*n/2); } return ; } A+B #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define lln long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl #define CR printf(\"\\n\") // 调试用 template \u0026lt;class Type\u0026gt; void debug(Type a[], int len) { for(int i = ; i \u0026lt; len ; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { #ifdef DEBUG // freopen(\"input\", \"r\", stdin); //从input文件中读入 // freopen(\"output\", \"w\", stdout); //输出到output文件 #endif int a, b; while(scanf(\"%d%d\", \u0026a, \u0026b) != EOF) { printf(\"%d\\n\", a+b); } return ; } ","date":"2015-04-10T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%85%A5%E9%97%A8%E8%AE%AD%E7%BB%83%E9%A2%98%E7%9B%AE/","title":"蓝桥杯入门训练题目"},{"content":"依据里氏代换原则，子类型必须能够替换掉它们的父类型，子类继承了父类，那么子类可以以父类的身份出现 — 在软件中，把父类都替换成它的子类，程序的行为没有变化。\n所以从这个角度而言，正方形并非是长方形的子类。\n举个例子，如果长方形中存在一个方法，目的是改变长宽的值，但是正方形只有一个边长，那么就可能出现问题。例如如下代码。\ninterface Conic { public long getMajor_axis(); public long getShort_axis(); } class Ellipse implements Conic { private long major_axis; private long short_axis; public void setMajor_axis(long major_axis) { this.major_axis = major_axis; } public long getMajor_axis() { return this.major_axis; } public void setShort_axis(long short_axis) { this.short_axis = short_axis; } public long getShort_axis() { return this.short_axis; } } class Circle implements Conic { private long radius; public void setRadius(long radius) { this.radius = radius; } public long getRadius() { return radius; } public long getMajor_axis() { return getRadius(); } public long getShort_axis() { return getRadius(); } } 上面是椭圆形的代码。可以改写成矩形来解释这个问题，不过太麻烦我还是先做后面的题目了。\n","date":"2015-04-09T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/09/%E6%AD%A3%E6%96%B9%E5%BD%A2%E6%98%AF%E5%90%A6%E6%98%AF%E9%95%BF%E6%96%B9%E5%BD%A2%E7%9A%84%E5%AD%90%E7%B1%BB%EF%BC%9F/","title":"正方形是否是长方形的子类？"},{"content":"比赛的时候出现了100 * 100组数据的情况，但是当时使用freopen忘记了具体的步骤，特意重新写一下，也是属于基础的内容。\n生成一百行数据，每行100个数据，每个数据为100。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;iostream\u0026gt;`enter code here` using namespace std; int main() { freopen(\"input\", \"r\", stdin); freopen(\"output\", \"w\", stdout); for(int i = ; i \u0026lt; 100; i++) for(int j = ; j \u0026lt; 100; j++) printf(\"%d%c\", 100, j == 99? \u0026#39;\\n\u0026#39; : \u0026#39; \u0026#39;); fclose(stdin); fclose(stdout); return ; } 运行过后生成的数据（本来应该输出在屏幕上，此时不会输出到屏幕，而是输出到文件）会保存到output文件中。如果需要使用直接更改output的文件名，再使用一次freopen('r')即可。\n","date":"2015-04-08T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/08/acm-%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/","title":"ACM – 快速生成测试数据"},{"content":"基本上就是按照大白学习的，基本上都是计数方法的运用。\n这是的大体的对组合数学的学习导图。\n指导 ","date":"2015-04-08T01:00:00+08:00","permalink":"https://svtter.cn/2015/04/08/acm-%E4%B8%89%E9%81%93%E7%BB%9F%E8%AE%A1%E9%A2%98%E7%9B%AE/","title":"ACM – 三道统计题目"},{"content":"UVa 11729 #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; struct Ant { int id; int p; int d; bool operator \u0026lt; (const Ant\u0026 a) const { return p \u0026lt; a.p; } }; const int MAXN = 10010; const char dirName[][10] = {\"L\", \"Turning\", \"R\"}; Ant before[MAXN], after[MAXN]; int order[MAXN]; int main(int argc, const char *argv[]) { freopen(\"input\", \"r\", stdin); int t; int L, T, n; int p, d; char c; scanf(\"%d\", \u0026t); for(int kase = 1; kase \u0026lt;= t; kase++) { printf(\"Case #%d:\\n\", kase); scanf(\"%d%d%d\", \u0026L, \u0026T, \u0026n); for(int i = ; i \u0026lt; n; i++) { scanf(\"%d %c\", \u0026p, \u0026c); d = c == \u0026#39;L\u0026#39; ? -1 : 1; before[i] = (Ant) {i, p, d}; after[i] = (Ant) {, p+T*d, d}; } sort(before, before+n); for(int i = ;i \u0026lt; n;i ++) order[before[i].id] = i; sort(after, after+n); for(int i = ; i \u0026lt; n; i++) if(after[i].p == after[i+1].p) after[i].d = after[i+1].d = ; for(int i = ; i \u0026lt;n; i++) { int a = order[i]; if(after[a].p \u0026lt; || after[a].p \u0026gt; L) puts(\"Fell off\"); else printf(\"%d %s\\n\", after[a].p, dirName[after[a].d+1]); } printf(\"\\n\"); } return ; } #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; struct Ant { int id; int p; int d; bool operator \u0026lt; (const Ant\u0026 a) const { return p \u0026lt; a.p; } }; const int MAXN = 10010; const char dirName[][10] = {\"L\", \"Turning\", \"R\"}; Ant before[MAXN], after[MAXN]; int order[MAXN]; int main(int argc, const char *argv[]) { freopen(\"input\", \"r\", stdin); int t; int L, T, n; int p, d; char c; scanf(\"%d\", \u0026t); for(int kase = 1; kase \u0026lt;= t; kase++) { printf(\"Case #%d:\\n\", kase); scanf(\"%d%d%d\", \u0026L, \u0026T, \u0026n); for(int i = ; i \u0026lt; n; i++) { scanf(\"%d %c\", \u0026p, \u0026c); d = c == \u0026#39;L\u0026#39; ? -1 : 1; before[i] = (Ant) {i, p, d}; after[i] = (Ant) {, p+T*d, d}; } sort(before, before+n); for(int i = ;i \u0026lt; n;i ++) order[before[i].id] = i; sort(after, after+n); for(int i = ; i \u0026lt; n; i++) if(after[i].p == after[i+1].p) after[i].d = after[i+1].d = ; for(int i = ; i \u0026lt;n; i++) { int a = order[i]; if(after[a].p \u0026lt; || after[a].p \u0026gt; L) puts(\"Fell off\"); else printf(\"%d %s\\n\", after[a].p, dirName[after[a].d+1]); } printf(\"\\n\"); } return ; } UVa 11292 勇士斗恶龙 排序，贪心\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main() { // freopen(\"input\", \"r\", stdin); const int MAXN = 20010; int dra[MAXN]; int sol[MAXN]; int m, n; while(scanf(\"%d%d\", \u0026n, \u0026m)) { if(n == m \u0026\u0026 n == ) break; for(int i = ; i \u0026lt; n; i++) scanf(\"%d\", \u0026dra[i]); for(int i = ; i \u0026lt; m; i++) scanf(\"%d\", \u0026sol[i]); sort(dra, dra+n); sort(sol, sol+m); int i, j, cost; i = j = cost = ; for(;;) { if(i == n || j == m) break; if(dra[i] \u0026gt; sol[j]) j++; else { cost += sol[j]; i++; j++; } } if(i == n) printf(\"%d\\n\", cost); else puts(\"Loowater is doomed!\"); } return ; } UVa 11300 这个题目很有价值。\n一方面通过数学推导得出结论。\n编号为i的人初始有$A_i$枚金币。对于1号，给了4号$x_1$枚金币，自己还有$A_1-x_1$枚。然后从2号拿走$x_2$枚金币，现在有$A_1-x_1+x_2$枚金币，另外，设平均金币值为$A_1-x_1+x_2=M$。\n由此可类推得到\n$A_n-x_n+x_1 \\Rightarrow x_n=M-A_n+x_1=x_n-C_n$\n我们可以得到类推公式\n$$C\\_i = C\\_{i-1} + A_i \u0026#8211; M $$证明:\n$$x\\_2 = x\\_1 \u0026#8211; C_1$$$$x\\_3 = M-A\\_2+x\\_2 =2M-A\\_1-A\\_2+x\\_1=x\\_1-C\\_2$$\\\n以此类推。\n可以求得，需要求的结果为:\n$$|x\\_1|+|x\\_1-C\\_1|+|x\\_1-C\\_2|\u0026#8230;.|x\\_1-C_n-1|$$即求这个式子值最小，即求$C_1, C_2, …C_n$的中位数。\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;math.h\u0026gt; #define lln long long using namespace std; const int MAXN = 1000000 + 10; lln gold[MAXN], C[MAXN]; int main() { // freopen(\"input\", \"r\", stdin); lln n, sum, per, cnt; while(~scanf(\"%lld\", \u0026n)) { sum = ; for(int i = ; i \u0026lt; n; i++) { scanf(\"%lld\", \u0026gold[i]); sum += gold[i]; } per = sum / n; C[] = ; for(int i = ; i \u0026lt; n; i++) C[i] = C[i-1] + gold[i] - per; sort(C, C+n); cnt = ; lln x1 = C[n/2]; for(int i = ; i \u0026lt; n; i++) cnt += abs(x1 - C[i]); printf(\"%lld\\n\", cnt); } return ; } LA 3708 这个题目也是比较有水平\n使用了按比例缩小的技巧。其中，按逆时针编号，固定一个点作为原点，建立新坐标。原来的位置呈现在新坐标的位置为$pos = i/n*(n+m)$，如此，求移动距离则是$fabs(pos – floor(pos+0.5))/(n+m)$\n#include \u0026lt;cstdio\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main() { // freopen(\"input\", \"r\", stdin); int n, m; double pos, ans; while(scanf(\"%d%d\", \u0026n, \u0026m) != EOF) { ans = ; for(int i = 1; i \u0026lt; n; i++) { pos = (double)i / n * (n+m); ans += fabs(pos - floor(pos+0.5))/(n+m); } printf(\"%.4lf\\n\", ans*10000); } return ; } UVa 10881 蓝桥杯去年山东省的初赛题目，的确有点意思= =\n转换方向可以不必在意，因为最终看到的结果已经不知道最初的蚂蚁是哪一只了，所以不用纠结方向的问题。主要要考虑的是最终的位置，以及最初蚂蚁位置的存储，before，after的对应关系。\n#include \u0026lt;cstdio\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; struct Ant { int id; int p; int d; bool operator \u0026lt; (const Ant\u0026 a) const { return p \u0026lt; a.p; } }; const int MAXN = 10010; const char dirName[][10] = {\"L\", \"Turning\", \"R\"}; Ant before[MAXN], after[MAXN]; int order[MAXN]; int main(int argc, const char *argv[]) { freopen(\"input\", \"r\", stdin); int t; int L, T, n; int p, d; char c; scanf(\"%d\", \u0026t); for(int kase = 1; kase \u0026lt;= t; kase++) { printf(\"Case #%d:\\n\", kase); scanf(\"%d%d%d\", \u0026L, \u0026T, \u0026n); for(int i = ; i \u0026lt; n; i++) { scanf(\"%d %c\", \u0026p, \u0026c); d = c == \u0026#39;L\u0026#39; ? -1 : 1; before[i] = (Ant) {i, p, d}; after[i] = (Ant) {, p+T*d, d}; } sort(before, before+n); for(int i = ;i \u0026lt; n;i ++) order[before[i].id] = i; sort(after, after+n); for(int i = ; i \u0026lt; n; i++) if(after[i].p == after[i+1].p) after[i].d = after[i+1].d = ; for(int i = ; i \u0026lt;n; i++) { int a = order[i]; if(after[a].p \u0026lt; || after[a].p \u0026gt; L) puts(\"Fell off\"); else printf(\"%d %s\\n\", after[a].p, dirName[after[a].d+1]); } printf(\"\\n\"); } return ; } ","date":"2015-03-12T01:00:00+08:00","permalink":"https://svtter.cn/2015/03/12/%E5%A4%A7%E7%99%BD%E5%88%B7%E9%A2%98%E5%BD%95/","title":"大白刷题录"},{"content":" 本文出自 http://svtter.github.io\n本文可以随意转载，但是转载请保留本信息.\nleanote 这个项目很不错,然后看到了免费的套餐十分诱人,已经很久没有更新自己的站了,大部分的更新都在 segmentfault 上面,另外,很多配置等等leanote的blog做的的确都不错,感觉上要优于hexo,有兴趣的朋友可以看一下.\nupdate at 20230829 原来2015年就在看 leanote 了。leanote 似乎还活着，每个月10元续费，大概是为很多老用户服务的。 看了看github，已经有 2年没有更新了。大概是死掉了。\n","date":"2015-02-14T01:00:00+08:00","permalink":"https://svtter.cn/p/leanote-%E4%B8%80%E4%B8%AA%E6%9E%81%E7%AE%80%E9%A3%8E%E6%A0%BC%E7%9A%84%E7%AC%94%E8%AE%B0/","title":"Leanote - 一个极简风格的笔记"},{"content":"这次校赛很糟糕，第七名，二等奖。\n回宿舍以后心里就很不是滋味。本来结束的时候并不觉得非常糟糕，可是这个情绪在仔细思考之后就有些爆炸了。\n这次校赛为啥失利呢？原因如下：\n模板 开始准备工作做的不够充分，早上去了以后才急急忙忙的打印模板，以至于一些知识点都没有好好翻看。\n此外，这次使用模板才发现模板中有些内容是不好用的，使用的过程中会出现问题，比如init.cpp中的template \u0026lt;class Type\u0026gt;明显存在问题，但是在之前的审查中没有审查出来，以至于在比赛的过程中一开始我还使用初始模板，到了后面直接从最裸的开始写起了。这在一定程度上耽误了做题速度。当然不仅仅如此，居然连cstring头文件我都没有加入，实在是不应该。\n校赛之前的时间应该好好准备一下，把应该做的事情做完，给自己提出问题，然后自己解决好。\n粗心，以及考试中的心态 说是粗心，倒不如说是没有养成一个良好的模式。本次这次比赛我又重新犯了之前在bestcoder上的错误，就是使用鼠标中键打开之后，我直接阅读了相邻最近的题目，但是明显是最后一道题目，于是在比赛的初期造成了巨大的心里压力 — 我发现周围的人已经做出题目了，但是我却没有。回头一看榜单，wyp都已经刷出两道题目了，着实让我有些紧张。\n然后这个地方可以夸奖自己一下 — 这个时候我调整好了心态，首先发现了自己做的第一道题目是H题，找到思路以后我就暂时放下了这道题目，重新从A题开始做，迅速AC了前两道题目，然后重新看榜单，依据榜单来刷题目，发现后面的题目又很快的被A出，于是采取了跟随战术。等到我跟随了基本上所有题目的时候，把H题的思路重新敲上，提交AC，此时我是榜单第一的。\n这个时候我的心态又有所变化 — 从一开始的紧张，到中途的不迫，到最后的无惧，恰恰是这最后的无惧导致我这场比赛最终的失利。在我到达榜单第一名的时候，我就放松了下来，开始简简单单的冲击D题 — 这道题目最后我提交了17次，但是直到最后一次提交11:29:46我依然没有AC。在这之间我一直都在想，只要A出这道题目，冠军就稳了。\n不幸的是就是这道题目我没有做出来。因为狂妄，不假思索。做出题目的时候我狂妄的认为题目很简单对我而言不是问题，然后不加思索的使用了dfs，bfs方法，都超时了 — 然后通过更改STL为简单的数据结构进行时间优化完全没有效果 — 然后醒悟使用dp的方法，或者说递推 — 思路应该是没有问题的，但是在代码中我无数次的找到bug，却都不是导致我程序WA的原因。\nD题的代码我重构了6次。dfs，bfs，bfs简单数据结构，dp，（long long）dp，（bign）dp。\n没有好好思考，没有重视题目，结果导致如此惨烈。由此也是联想到了去年蓝桥杯决赛的时候，被初赛题目的程度迷了心窍，导致最后决赛的狂妄和不假思索。稍微有点成就就容易不思进取，这就是我这个人的尿性，也是一个致命的弱点。再回头看看，因为我是一个不善于隐藏自己内心想法的人，一件事往往我在开始的时候装逼，最后的结果一定是被极爽的打脸。\n你没有变强，是因为你一直很舒服\n赛后 赛后了解到有一道题目是东方学长出的，简单的贪心，题目难度适中，但是没有人去做。也是应证了那句，越是长难的题目可能越简单，只不过你被吓住了。\n后来仔细回想一番，自己也是因为觉得没有人做，也就没有再去仔细的看其他的题目。\n卡题 对于卡题以及各种bug这次我所犯的。\nscanf忘记了EOF for循环循环控制出现了错误 数组下标错误 如果一道题目重构仍然无法AC，那么就是算法的问题。 如果卡题超过30分钟，那么我便可以认为这道题目我就是做不出来。起码在比赛上是这样。 总结，写给自己的话 暂且就总结这么多，我需要记住的是：\n题目没有那么难，也没有那么简单。\n戒骄戒躁\n稳定心态，培养良好的做题模式\n在平时就要检验模板，不要等到考场上发现模板有问题。\n一件事情就算是有十分的把握也不能装逼，更别提三分强行打自己脸，这样不会减压，反而会增大自己的压力。\n不要稍微有点成就，进步就不思进取。\n后来发现自己死活水不过题目居然是霞姐数据给错了- -。\n","date":"2015-02-14T01:00:00+08:00","permalink":"https://svtter.cn/2015/02/14/%E5%85%B3%E4%BA%8E%E8%BF%99%E6%AC%A1%E6%A0%A1%E8%B5%9B/","title":"关于这次校赛"},{"content":"{% blockquote 本文出自 http://svtter.github.io svtter.github.io %} 本文可以随意转载，但是转载请保留本信息.\nUvaoj的判题效率不是很高。。所以直接开下一章节。题目慢慢刷，先过一遍书，不然书都看不完了TAT。。\n6.1 栈和队列 卡片游戏，回顾了下队列和STL\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; const int maxn = 100; int q[maxn]; void ace() { void ace2(int); int n; scanf(\"%d\", \u0026n); //init for(int i = ; i \u0026lt; n; i++) q[i] = i+1; int front , rear; front = , rear = n; // 队列不为空 while(front != rear) { printf(\"%d \", q[front++]); q[rear++] = q[front++]; } printf(\"\\n\"); ace2(n); } // STL void ace2(int n) { queue \u0026lt;int\u0026gt; q; for(int i = 1; i \u0026lt;= n; i++) q.push(i); while(!q.empty()) { printf(\"%d \", q.front()); q.pop(); q.push(q.front()); q.pop(); } printf(\"\\n\"); } int main(int argc, const char *argv[]) { ace(); return ; } 6.1.2栈的STL #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;stack\u0026gt; using namespace std; const int maxn = 200; int s[maxn]; void ace() { int n; int a[maxn]; int temp, top; int p, set; while(~scanf(\"%d\", \u0026n)) { top = -1, p = , set = 1; for(int i = ; i \u0026lt; n; i++) a[i] = i+1; for(int i = ; i \u0026lt; n; i++) { scanf(\"%d\", \u0026temp); // 如果无法完成序列，只吸收输入值 if(!set) continue; if(temp == a[p]) p++; else if(top != -1 \u0026\u0026 temp == s[top]) top--; else while(temp != a[p]) { s[++top] = a[p]; p++; if(p == n) { set = ; break; } } } if(set) printf(\"Yes\"); else printf(\"No\"); printf(\"\\n\"); } } void ace2() { int n; int a[maxn]; int temp, p, set; while(~scanf(\"%d\", \u0026n)) { stack \u0026lt;int\u0026gt; s; p = , set = 1; for(int i = ; i \u0026lt; n; i++) a[i] = i+1; for(int i = ; i \u0026lt; n; i++) { scanf(\"%d\", \u0026temp); // 如果无法完成序列，只吸收输入值 if(!set) continue; if(temp == a[p]) p++; else if(!s.empty() \u0026\u0026 temp == s.top()) s.pop(); else while(temp != a[p]) { s.push(a[p]); p++; if(p == n) { set = ; break; } } } if(set) printf(\"Yes\"); else printf(\"No\"); printf(\"\\n\"); } } int main() { ace2(); return ; } 6.2 链表和随机数发生器 链表的相关部分就不在赘述了。主要是随机数发生器。\n很多人喜欢用rand()%N得到一个随即整数，但是n大于RAND_MAX的时候，就不好用了。\n于是使用(double)rand()/RAND_MAX，然后在扩大n-1倍以后四舍五入，再+1\n例如这样\n// 获取1~m的随即整数 int random(int m) { double a = (double)rand() / RAND_MAX; return (int) (a * (m-1) + 0.5); } 6.3 二叉树 ","date":"2015-01-30T01:00:00+08:00","permalink":"https://svtter.cn/2015/01/30/acm-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"ACM-数据结构"},{"content":"{% blockquote 本文出自 http://svtter.github.io svtter.github.io %} 本文可以随意转载，但是转载请保留本信息.\n重新开始更新自己的blog了，之前一段时间的文章都在 http://segmentfault.com/blog/svtter\nsegmentfault感觉着实不错= =\n以后blog中各种发解题报告各种发思路各种发知识。\n坦白说之前的blog真心是懒得更新= =\n","date":"2015-01-27T01:00:00+08:00","permalink":"https://svtter.cn/2015/01/27/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%E6%9B%B4%E6%96%B0/","title":"博客重新开始更新"},{"content":"{% blockquote 本文出自 http://svtter.github.io svtter.github.io %} 本文可以随意转载，但是转载请保留本信息.\n手贱删除了windows的注册表，因为之前装arch的时候硬盘有些位置没有对齐，造成我重装win7的时候把\narchlinux也弄没了TAT最惨的莫过于一些文章都没有了。操作系统网络等资源倒是还能从github上找回，\n但是似乎不是最新的。虽然是考完了，但是看到大把大把的总结资料没了也着实心疼。\n不管啦，没了就没了吧。\n这次同步更新！在segmentfault和我自己的博客上同步更新，一般segmentfault会更快一点。哎，一定\n要及时备份数据，不然很容易就悲剧了。\n因为hexo的主题神马的我没有备份（也有一个，不过比较老了）。所以有时间的时候再弄把。\n","date":"2015-01-21T01:00:00+08:00","permalink":"https://svtter.cn/2015/01/21/%E6%82%B2%E5%89%A7%E4%BA%86/","title":"悲剧了"},{"content":"{% blockquote 本文出自 http://svtter.github.io svtter.github.io %} 本文可以随意转载，但是转载请保留本信息.\n在网上搜索一番，大部分此类文章都是在说配置，而且配置讲的一看就是没有深入的撸vim。这个时候就\n需要我来深刻的讲讲这个问题了 — 国外也有一些开发者写过类似的文章，不过国外的开发者没有深层\n的讲讲具体如何配置，仅仅是比较简单的说了一下应该用什么。\n闲话少说，我们开始吧。\n本文的作者认为，本文的读者已经学会使用vim的初步，至于安装，启动之类的东西作者不再赘述，\n望读者海涵。\nVimrc的配置 如果想要用Vim撸Java，首先一个问题就是许多IDE自带的查错功能，这个笔者希望使用Syntastic来实现。\n具体的方法是，安装Vundle（vim的插件配置工具，用于安装组合各类插件）。其实这个地方也可以不用\nVundle，但是笔者认为，vimer配置大量插件的最佳方法就是使用vunlde，或者patheon等等。总之，一\n定需要一个插件管理。\n安装Vundle还是比较轻松的，在github上搜索一下，经过一系列步骤即可。然后同样是位于github，搜\n索Syntastic安装即可。\nSyntastic是一个检查语法的vim插件，不仅仅支持Java，各种都支持，具体可以看看Syntastic的wiki\n学习Ant Ant是什么东西？简单来说，就是java的makefile。Syntastic的wiki对ant和maven均有支持，但是我个人\n学习了Ant，另外eclipse里面的ant等等 — 如果想要探究一下，可以查看一下这篇文章\n这里面说了一点笔者在ant上面的一点东西，还有ant学习的链接。\n配置Syntastic PS: 期末周这么悠闲的写博客真的好吗！！\n说是配置Syntastic，更不如说是配置Syntastic的Java配置文件。\n首先你需要在你的.vimrc中，添加 let g:syntastic_java_javac_config_file_enabled = 1 用于使Syntastic读取配置文件生效。 选择build.xml，使用命令:SyntasticJavacEditConfig，输入: `let g:syntastic_java_javac_custom_classpath_command =\u0026lt;br /\u0026gt; \\ \u0026quot;ant -q build | grep echo | cut -f2- -d] | tr -d ' ' | tr ':' '\\n'\u0026quot;` 重启Vim，语法检查就完成了。 其他的插件 Bundle ‘vim-scripts/javacomplete’ Bundle ‘vim-scripts/javaDoc.vim’ ” Bundle ‘vim-scripts/Java-Syntax-und-Folding’ ” Bundle ‘vim-javacompleteex’ “更好的 Java 补全插件 以上插件均可以考虑使用，安装方法可能有所不同 — 但是个人认为最大的语法检查问题已经搞定了，\n其他的问题应该都不是问题了吧 = =\n","date":"2015-01-01T01:00:00+08:00","permalink":"https://svtter.cn/2015/01/01/java-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vim%E5%BC%80%E5%8F%91java/","title":"Java-如何使用vim开发Java"},{"content":"{% blockquote 本文出自 http://svtter.github.io svtter.github.io %} 本文可以随意转载，但是转载请保留本信息.\n做CDMA简单的接收处理。\n文件 input:\n-1 -1 -1 1 1 -1 1 1 -1 -1 1 -1 1 1 1 -1 -1 1 -1 1 1 1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 new.c:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; #define M 8 const int b[] = {-1, 1, -3, 1, -1, -3, 1, 1}; void show(int a[]) { int i; for(i = ; i \u0026lt; M; i++) printf(\"%5d\", a[i]); puts(\"\"); } int main() { int a[M]; int i; freopen(\u0026#39;input\u0026#39;, \u0026#39;r\u0026#39;, stdin); while(1) { for(i = ; i \u0026lt; M; i++) { scanf(\"%d\", \u0026a[i]); } show(a); int sum = ; for(i = ; i \u0026lt; M; i++) sum += a[i] * b[i]; printf(\"%d\\n\", sum/M); } return ; } ","date":"2014-12-31T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/31/%E7%BD%91%E7%BB%9C-cdma%E6%8E%A5%E5%8F%97%E6%A3%80%E9%AA%8C/","title":"网络-CDMA接受检验"},{"content":"{% blockquote 本文出自 http://svtter.github.io svtter.github.io %} 本文可以随意转载，但是转载请保留本信息.\n本文已经更新，请看 — 如何使用vim开发Java.\n本来想把本文命名为使用Vim写Java-Project的，但是个人认为这样并没有很高的开发效率，所以只是提\n供一个部分的解决方案，剩下的就由大家努力探索吧。。\nJava有个自己构建工程的工具叫做Ant, 全名Apache Ant，好东西，最通俗的解释就是Java的\nmakefile，这里提供的方案，就是使用Ant或者maven来构建工程，然后通过Synastic的设置，来完成\nJava的代码检查。另外，java代码补全设置其实也是有的，但是具体的设置我没有好好研究过，主要是\n已经陪不起那个时间了。\n另外，Eclipse导出Java项目的时候，一个不错的方法就是Export Ant Buildfiles，这就是ant文件。\nAnt学习简单教程 Maven我没有好好学，但是看wiki似乎Synastic对maven的支持比ant的支持更加优秀，也可能是mvn的构\n建方法上存在优势？这个我不清楚。有时间写一篇文章来好好的研究下。\nAnt这个东西构建的包有时候检查会出现问题，（如果采用目录编译的方法，那么就无法检查）。\n另外，需要不停的在目录下建立.synastic_javac_config，着实烦人。但是如果使用了全局设置，改\n变了配置文件的根目录，也是极为不妥当的（不可能只有一个项目在编辑吧？另外改来改去，也是太麻\n烦了。）\n就是这样。。更多的是吐槽吧。\n对于上一篇文章提到的问题可以用设置classpath来解决。具体方法是将classpath添加到syntastic。\nuse :SyntasticJavacEditClasspath and add workpath.\n","date":"2014-12-29T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/29/java-ant%E6%96%87%E4%BB%B6%E5%92%8Csynastic-vim%E6%94%AF%E6%8C%81/","title":"Java-Ant文件和Synastic-Vim支持"},{"content":" 本文出自svtter.github.io 本文可以随意转载，但是转载请保留本信息.\n之前一直都是用eclipse开发Java，Vim修炼到今日，本来想要拉出来溜溜Java，奈何package和import的机制以及 synastic[自动检查代码的插件] 没有对于eclipse对java包类似的支持，所以只得滚回eclipse，然后使用vrapper了。\n闲话少说，听我细细道来package和import;\n这篇文章主要是说明类似这种情况，即不同包但是文件路径一部分相同，即:\n1 2 3 4 * /temp * temp.java * tests/ * joking.java 贴出源代码: test.java: 1 2 3 4 5 6 7 8 9 10 package temp; import temp.tests.joking; public class test { public static void main (String args[]) { joking a = new joking(); a.test(); } } joking.java 1 2 3 4 5 6 7 8 package temp.tests; public class joking { int a = 1; public void test() { System.out.println(a); } } 一种编译方法 这个时候打开test.java是没有办法通过拼写验证[synastic]，需要这样:\njavac -d . /tests/joking.java\n然后再打开test.java, 可以了。但是这个时候有个很别扭的问题，我们发现这个时候生成了一个文件\ntemp/temp/tests/joking.class，也就是说我们的目录现在变成了这个样子:\n1 2 3 4 5 6 7 * /temp * temp.java * tests/ * joking.java * temp/ * test/ * joking.class 请不要告诉我你很爽，因为这个目录给我的感觉很不爽- -试想，如果我们在别的目录下引用这个包，我\n们就需要做很多这样的操作，造成的后果就是各个包里面出现无数个temp/test/joking.class…\n对我而言这是难以忍受的，我也想不太清楚为什么当初java这么设计 — 可能是为了避免耦合等问题？\n软件工程这个地方学得不够好，先mark一下，或者有读者可以给我解释一下这个设计。或者说，下面这\n个才是正确的。\n另一种编译方法 退出到temp的上级目录，然后进行编译\njavac -d . temp/tests/joking.class javac -d . temp/test.java 然后这样运行:\njava temp.test 可是这个时候我们打开temp.java, 利用synastic检查，报错。\n总结 最后还是自己对synastic依赖性太强了。但是自己不会写= =，也是无奈了。开个issue求支持吧= =\n后记 找到方法了 — 使用ant来构建项目。不过synastic的官方文档并没有说的很清楚，issue看起来又比较\n费劲，饿死了，吃饭去。。\n","date":"2014-12-28T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/28/java-import%E5%92%8Cpackage%E7%9A%84%E7%94%A8%E6%B3%95/","title":"Java-import和package的用法"},{"content":" 本文出自svtter.github.io\n本文可以随意转载，但是转载请保留本信息.\nmakefile写法有复杂的有简单的，我这里提到的主要为了做一些简单的开发，所以还是说些简单的事情。\n使用makefile之前，要学会使用bash的一些东西。鸟哥的私房菜虽然说是介绍Linux，但是总感觉很多都是介绍bash，以及和\nbash配合使用的一些命令。。。\n变量的写法 定义的时候直接使用VAR = main.o即可这种格式即可 使用的时候使用${VAR}这种形式来使用，类似于php中的变量。 另外， 位于makefile外面的变量也是可以使用的，使用的时候使用如下格式VAR = main.o make即可，这样就相当于在makefile\n定义了一个VAR变量。在外定义的变量是优先于makefile里面的变量的，就像是一个预订义的函数一般。\n此外，$@表示当前的目标。如果在clean那里面，$@指的是clean\nmake + 命令写法 比如make clean的写法，就是在makefile文件中添加\nclean:\nrm .. (类似bash的使用方法，这个地方也可以使用变量）\n相对的，install等等的方法就类似于这个上面的写法了。\n写到这里也是明白了为什么vim里面有个make命令，却没有各种编译命令了= =\n然后附加一个自己写的第一个makefile:（为了读者更加容易理解，我没有使用变量）\nrun: t2.o test.o cc -o run test.o t2.o ./run test.o: test.c cc -c test.c t2.o: t2.c cc -c t2.c clean: rm *.o rm run test.c:\n#include \u0026lt;stdio.h\u0026gt; /* #include \"t2.h\" */ typedef struct test { int a, b; }test; test b; int main(int argc, const char *argv[]) { output(); b.a = 1; b.b = 2; printf(\"%d %d\\n\", b.a, b.b); return ; } t2.c:\n#include \u0026lt;stdio.h\u0026gt; void output() { printf(\"This function is in t2.c\\n\"); } 文件目录是：\n– file\n– makefile\n– test.c\n– t2.c\n使用make可以创建链接文件并且运行。 使用make clean可以删除生成的文件。 ","date":"2014-12-24T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/24/linux-makefile%E5%86%99%E6%B3%95/","title":"Linux-makefile写法"},{"content":" 本文出自svtter.github.io\n本文可以随意转载，但是转载请保留本信息.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;wait.h\u0026gt; void waiting(), stop(), alarming(); int wait_mark; int main() { int p1, p2; if(p1 = fork()) { if(p2 = fork()) { wait_mark = 1; signal(SIGINT, stop); signal(SIGALRM, alarming); waiting(); kill(p1, 16); kill(p2, 17); wait(); wait(); printf(\"parent process is killed!\\n\"); exit(); } else { wait_mark = 1; signal(17, stop); signal(SIGINT, SIG_IGN); while(wait_mark!=); lockf(1,1,); printf(\"child process2 is killed by parent!\\n\"); lockf(1,,); exit(); } } else { wait_mark = 1; signal(16, stop); signal(SIGINT, SIG_IGN); while(wait_mark!=); lockf(1, 1, ); printf(\"child process1 is killed by parent!\\n\"); lockf(1, , ); exit(); } return ; } void waiting() { sleep(5); if(wait_mark != ) kill(getpid(), SIGALRM); } void alarming() { wait_mark = ; } void stop() { wait_mark = ; } 执行结果 e3.png\n","date":"2014-12-23T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/23/linux-%E8%BD%AF%E4%B8%AD%E6%96%AD%E9%80%9A%E4%BF%A1/","title":"Linux-软中断通信"},{"content":" 本文出自svtter.github.io\n本文可以随意转载，但是转载请保留本信息.\n今天晚上终于感觉软件工程say goodbye了，这段时间撸了不少js和php，学习的深度以及对面向对象的理解可以说是更深一步。\n前端的东西丰富多彩，真是拦不住。从最初的Framework7到bootstrap，从jsp到php（仅仅只是我的学习曲线）。\n想起那天有个吐槽node的朋友，说node各种缺点等等。作者不也明确说了，适合大吞吐小计算么。\n然后在看hexo的主题，改了改颜色就成了一个新的主题了，还被放在hexo的theme里面了。。真是醉了。\n敢情主题就这么匮乏？\n大三了才发现有个Student pack，是否一切都已太晚 = =\n","date":"2014-12-22T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/22/%E7%94%9F%E6%B4%BB-%E5%90%90%E6%A7%BD/","title":"生活-吐槽"},{"content":" 本文出自svtter.github.io\n本文可以随意转载，但是转载请保留本信息.\n本身自己看这些东西没有很简单，但是李老师讲的的确深入浅出，使得同学们更加容易明白。\nCSG树 画CSG树很简单，左边为原始元素，右边为变换。原始元素 + 变换 = T 变换, 叶子节点，都是画在图上，T节点也要画在图上。\nT变换下的节点不需要重画。U为求并。\n四叉树 如果满则为F[ull], 不满则为B[oundary], 空则为E[mpty].\n四叉树主要是就是划分，按照象限划分即可，把多重颜色递归的进行划分即可。\n中点bresenham算法 $ 0 \u0026lt;= k \u0026lt;= 1$ bresenham算法用于绘制直线，可以计算出直线的斜率。\n从起点开始，代入x的值，然后求$(2*y_1+1)/2$值。\n这个算法就是求两个点的中点，然后取距离中点近的那一个点来绘制直线\n下一个点的求法是$(x_1+1,y_1+1), (x_1+1,y_1)$然后求中点，重复过程\n以上是原理，下面是求解方法：\n输入直线两个端点$P_0(X_0, Y_0), P_1(X_1,Y_1)$ 首先计算$d = {\\Delta}x – 2{\\Delta}y$ 绘制点(x,y) 如果$d\u0026lt;0$, 则(x,y)更新为(x+1,y+1)，d更新为$d+2{\\Delta}x-2{\\Delta}y$; 否则(x,y)更新为(x+1,y)，d更新为$d-2{\\Delta}y$ 直线没有画完，重复3。\n$ k \u0026gt; 1 $\n对y的操作搞到x上即可\n改进的有效边表算法 ?\n最小的x \u0026lt;th align=\u0026quot;center\u0026quot;\u0026gt; 最大的y \u0026lt;/th\u0026gt; \u0026lt;th align=\u0026quot;center\u0026quot;\u0026gt; $1/k$ \u0026lt;/th\u0026gt; \u0026lt;th align=\u0026quot;center\u0026quot;\u0026gt; next \u0026lt;/th\u0026gt; \u0026lt;td\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;/td\u0026gt; 首先构造边表，然后再构造有效边表\n按照边数依次扫描\n二维变换及二维观察，三维变换以及三维观察 无论是二维还是三维，补充一个1构成[x,y,z,1]矩阵，再对应乘变换矩阵即可。注意的要点是将变换点移动到坐标原点，然后进行\n比例变换等。\n","date":"2014-12-21T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/","title":"计算机图形学-相关内容"},{"content":" 本文出自svtter.github.io\n本文可以随意转载，但是转载请保留本信息.\n虽然说很简单的项目还是各种头疼，使用git但是还是问题不断。。\n编码的问题 文件的编码，传递数据的编码，数据库的编码都要格外注意才行。UTF-8才是王道啊。\n弹出框式 bootstrap的弹出框还是不错的= =，另外amazeUI登录界面等做的不错哈哈= =，作业总算是交上了，差一分满分也是没有办法的事情\n啊。ajax方面的不足有时间或者这个假期再来填补吧～\n","date":"2014-12-17T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/17/web%E5%BC%80%E5%8F%91%E6%94%B6%E8%8E%B7/","title":"WEB开发收获"},{"content":" 本文出自svtter.github.io\n这么快就期末了，然而奖学金依然没有到帐，迟迟的健身费用无法归还亲爱的老爹。感受到一丝默默的蛋疼。\n然后这两个星期太悲剧了。。自从用了这个域名，居然一个评论都没有。。心塞。评论这个东西就是多了闲多，少了闲少。\n在那之后热伤风+感冒，多灾多难。\n英语的问题 然后就到了今天的六级考试。虽然六级过了，但是刷分估计是别想了，学了些啥呀。今天在考场上着实有些郁闷，想了想这个学期\n英语方面的学习 — 着实有些屌了，听力什么的听得是一塌糊涂啊。和上一次裸考不同（说是裸考，但是上次ACM等等的各种方面都\n是用到英语的，另外我本身也是偶尔写个作文什么的，算是没有落下很多，也可能是因为上次的运气比较好，题目比较简单）。\n这次真心是不怎么样啊，也不奢望能够往上刷分了，就当是自己在英语上花钱（虽说不是很多，也是爹妈给的钱啊）买了个教训吧。\n对于日后的英语学习值得深思一番了，单词，阅读什么的都应该好好投入才是。这次吃亏就吃在之前一些单词因为不用不见，都忘记\n的差不多了。此外，在github上寻思做一下翻译，但是那些翻译专业性太强，对于六级以及考研的帮助上还是不大够的。奈何，暂且\n重新好好看看那些个扇贝新闻什么的吧。\n说到底，效率还是差强人意啊。\nblog现在在github上了 现在的blog重新托管到github上了，很多问题都不是问题。。非常感谢天朝没有墙github，否则个人认为在计算机这个学科上发展\n怎么也得再落后上几年甚至更多。当然国内gitcafe等等做的也是很不错的。。但是国外的大神有人用gitcafe吗？交流方面会存在\n一些问题吧。当然，这只是我自己的看法了。\n那段时间看了看大牛们的blog，也是增长了不少的见识等等。自己也是写不大出很有深度的文章，文采上也是不太够= =。\n所做的只能是耐下心来好好的学习了。今天溜去英明的blog看了看，这个小牛写了个编译器前端 — 挺不错的。我在学编译原理的\n怎么就没写呢？一方面觉得怪麻烦，另一方面也是那个时候在比赛等，时间实在是有些抽不出来了。如果有时间，真应该自己再写\n一次。\nOTD的编写 之前自己写了一个很劣质的OTD，主要是利用了md和一些gitlab类型的网站来查看。但是后来觉得实用性太差了，之后就不怎么使用\n了 — 维护性等等方面自己做的还是不错的。。从bash到python的改写等等。只是太粗糙，实在不忍心拿出来献丑溜溜。也更象是\n父母对孩子的心态？怕别人说不好吧。\n自从学了软件工程又对这个项目进行了重新的规划，但是面向对象以及一些东西，自认为自己还是学习的不够深刻。简单的规划下，\n把课程的知识给了一份称不上文档的文档，但是迟迟不敢动手写 — python学得不到家，总是想用最简单，最好的代码来实现；C++\n这个核武器，怕是中间需要的东西太多；Java虽然写了很多，但是怕是半途而废（之前写了一个简单的游戏，写完之后勉强运行，\n还有之前一个购物管理系统，写完之后真心再也不想看代码了，恶心。真心恶心，自己写的都觉得恶心），这也是半途而废，以及完\n美主义的弊端。\n所以下一次写之前，一定要找一个好的软件工程的规划方法。\n最后 最后还是忍不住吐槽：真心不相信有些工具网站也会轻而易举的崩，而且每次都让我碰上。如果不是，那么框架的网站也墙，未免也\n太过分了，这还学习毛线啊？！\n","date":"2014-12-14T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/14/%E7%94%9F%E6%B4%BB-%E5%AD%A6%E4%B9%A0%E5%BD%92%E5%AD%A6%E4%B9%A0%EF%BC%8C%E6%92%B8%E4%BB%A3%E7%A0%81%E9%9C%80%E8%B0%A8%E6%85%8E/","title":"生活-学习归学习，撸代码需谨慎"},{"content":" 本文出自svtter.github.io\ngitbook是在利用nodejs搭建的一个写书的平台，也可以用来做别的事情，比如说作为项目的文档。\ngitbook样式，编辑方式【markdown】都是比较不错的，有一个官方网站 http://www.gitbook.com，但是国内的访问速度不是很理想，所以直接挂上去可能体验不是很好，建议自己download下来然后重新部署。\n","date":"2014-12-11T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/11/gitbook%E5%88%9D%E6%8E%A2/","title":"gitbook初探"},{"content":" 本文出自svtter.github.io\n有三个服务模块可以使用:\nBaseHTTPServer 最基础web服务. SimpleHTTPServer 可以处理GET和HEAD. CGIHTTPServer 可以处理POST请求和执行CGI. 只需要一行代码即可:\npython -m SimpleHTTPServer 8080 如果8080端口被占用，可以选择别的端口来使用.\n此处的 SimpleHTTPServer 可以使用以上三个服务模块替代\n","date":"2014-12-11T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/11/python-%E5%BB%BA%E7%AB%8B%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"Python-建立最简单的web服务器"},{"content":" 本文出自svtter.github.io\nSQL sql注入攻击 http://zh.wikipedia.org/wiki/SQL資料隱碼攻擊 ","date":"2014-12-11T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/11/web%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/","title":"WEB攻击方式"},{"content":" 本文出自svtter.github.io\n整数进制输出 printf(\"%d %o %x\\n\", a); 把整数按照十进制，八进制和十六进制输出.\n$2^32-n$补码表示法.\n字符处理 使用Ctrl+D时, getchar()读到的是-1\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(int argc, const char *argv[]) { char c = getchar(); printf(\"%d%c\\n\", c, c); return ; } 假设一个年份为1993/12/12, 那么如何简单获取年月日？\n使用sscanf函数.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(int argc, const char *argv[]) { int year, month, day; char s[] = \"1993/12/12\"; sscanf(s, \"%d/%d/%d\", \u0026year, \u0026month, \u0026day); printf(\"%d/%d/%d\\n\", year, month, day); return ; } 可以使用fgets(s, MAXN, stdin)来获取简单的输入. 一次读入一行，包括空格，遇到\\n结束读入\n简单习题 分数统计 ","date":"2014-12-10T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/10/acm-%E7%99%BD%E7%9A%AE%E4%B9%A63/","title":"ACM-白皮书3"},{"content":" 本文出自svtter.github.io\n1 Installing Arch Linux * 1.1 Pre-Installation 是i686 架构吗（Pentium II or AMD K6-2以上）？安装方式CD? FTP？ * 1.2 Acquiring Arch Linux 从这里寻找速度最快的镜像： http://wiki.archlinux.org/index.php/Mirror * 1.3 Preparing Installation Media MD5 校验，烧录。 * 1.4 Using the CD-ROM 设置好光驱启动。 * 1.5 Common Installation Procedure o 1.5.1 Loading a non-US Keymap 用km 工具选择非英语键盘 o 1.5.2 Running Setup # /archlinux/setup o 1.5.3 Configure Network (FTP Install only) 仅适用于FTP 安装方式，CD 安装没有必要配置好网络。 o 1.5.4 Prepare Hard Drive 给磁盘分好区，root分区(/)放在主分区比较好（放到逻辑分区也可以）， 如果有 Windows 系统，那它也要占据一个主分区。个人的250G硬盘是这样分区的： # cfdisk sda1 /boot 150M xfs sda2 Windows 18G ntfs sda3 FreeBSD 32G ufs sda5 / 600M xfs sda6 SWAP 2xRam xfs (SWAP分区的大小推荐为内存大小的2倍) sda7 /var 20G xfs sda8 /tmp 5G xfs sda9 /opt 10G xfs sda10 /usr 20G xfs sda11 /home 105G xfs sda12 Files 不大于32G fat32 如果需要加密磁盘，并启用开机验证，推荐使用luks ： 通常加密 root 分区和 /home 分区 # modprobe dm-crypt # modprobe aes-i586 # cryptsetup –y luksFormat /dev/sda3 输入密码，确认。 # cryptsetup –y luksFormat /dev/sda10 输入密码，确认。 # cryptsetup luksOpen /dev/sda3 root 解开root 分区，并建立一个映射：/dev/mapping/root # cryptsetup luksOpen /dev/sda10 home 解开 /home 分区，并建立一个映射：/dev/mapping/home 参看：http://wiki.archlinux.org/index.php/LUKS_Encrypted_Root o 1.5.5 Partition Hard Drives 可以跳过了。 o 1.5.6 Set Filesystem Mountpoints 如果用luks 加密了分区，那么 / 分区需要挂载到：/dev/mapping/root； /home 需要挂载到：/dev/mapping/home. 同时选择一个合适的文件系统（JFS，XFS，Reiserfs...）。 o 1.5.7 Select Packages 至少选择 Base 安装。如果需要一个可编译环境，要选上devel和lib；如果需要ADSL拨号 或WiFi支持，要选上support。 确定后会看到所有将要安装的包，可以在这里去掉一些暂时不想安装的包。要是不清楚就 不管了，几个M的大小而已。 o 1.5.8 Install Packages 只要烧录的光碟不是太差，基本上都能正常安装的。 o 1.5.9 Configure System 配置系统是必须和关键的，应当允许hwdetect script自动检测硬件，并生成相应配置。 根据启动时的实际情况选择是否需要对RAID，LVM2，和encrypted volumes的支持，以及 其它必要的支持。 选择熟悉的编辑器后，对 /etc 下的生成的配置文件作适当的修正： rc.conf：设置时区为Asia/Hong_Kong，检查eth0的配置是合适 mkinitcpio.conf：在最后一行的HOOKS 中去除不必要的支持 hosts ：设置主机名和域名 locale.gen：设置本机要支持的locale （zh_CN.utf8,zh_CN.gbk，or zh_TW.utf8） root PassWord：为root 设置管理密码 pacman Mirrors：设置安装源。找一个高速镜像站点，比如： http://mirrors.lcuc.org.cn/archlinux/ ；http://ftp.archlinux.org/ ； http://ftp.belnet.be/packages/archlinux/ ；http://ftp.gigabit.nu/； http://archlinux.puzzle.ch ；http://mirror.cs.vt.edu/pub/ArchLinux/ ； http://ftp.heanet.ie/mirrors/ftp.archlinux.org/； http://distro.ibiblio.org/pub/linux/distributions/archlinux/ o 1.5.10 Install Kernel 略 o 1.5.11 Install Bootloader 推荐GRUB。配置好menu.lst。 如果root 分区用luks 加密过了，那么要把menu.lst 修正为： # () Arch Linux title Arch Linux root (hd0,) kernel /vmlinuz26 root=/dev/sda3 ro initrd /kernel26.img 注意：Bootloader 需要安装到MBR（即 sda 下），而不是 /boot 所在的分区（sda1）。 o 1.5.12 Exit Install 退出安装程式后，取出安装光盘。 # head -n 300 /dev/urandom | tail -n 256 \u0026gt;/mnt/etc/home.key # cryptsetup luksAddKey /dev/sda10 /mnt/etc/home.key 输入密码，确认。 # echo home /dev/sda10 /etc/home.key \u0026gt;\u0026gt;/mnt/etc/crypttab 开机时，用home.key 解开 /dev/sda10 # sed -i /swap/d /mnt/etc/fstab （删除fstab 文件中含有swap 的一栏） #echo swap /dev/sda2 /dev/urandom \"-c aes-cbc-essiv:sha256 -h sha256 -s 256\" \u0026gt;\u0026gt;/mnt/etc/crypttab # echo \"mkswap /dev/mapper/swap\" \u0026gt;\u0026gt;/mnt/etc/rc.local 以上两个命令是设置swap 加密分区。 另外直接在/etc/crypttab 中加入如下内容也起相同作用： swap /dev/sda2 SWAP -c aes-cbc-essiv:sha256 -h sha256 -s 256 # reboot 2 基础配置 * 2.1 Internet Access 如果是局域网，视讯宽等无需拨号的网络环境，只需要在/etc/rc.conf中设置好： eth0=\"dhcp\" 重启电脑后，即可正常上网了。 如果是用PPPOE协议拨号上网（如ADSL），需安装rp-pppoe安装包，然后： # pppoe-setup # /etc/rc.d/adsl start # /etc/rc.d/adsl stop 或者，使用更好的ppp 安装包（参照WiKi ） * 2.2 更新安装包列表 # pacman –Syu 更新安装包列表，并升级已安装的包和内核，比自己make world要快多了 # reboot # pacman-optimize 这是优化pacman系统，如果安装时仅选择了base安装，那么优化可能不会成功，因为缺少 diffutils安装包(它在devel里面)，安装它就可以了： # pacman -S diffutils 安装AUR 工具（建议安装，好软件多多）： # vi /etc/pacman.conf, 加入: [archlinuxfr] Server = http://repo.archlinux.fr/i686/ # pacman -Sy yaourt (安装一个Pacman前端，如果碰到服务器调整，那就装不了啦） # yaourt -S tupac (速度更快的Pacman前端，依赖于yaourt) # tupac -S aurvote 可以通过aurvote对喜欢的AUR软件投票，如果票数够多了，该软件就会被加入Community。 用“aurvote -h”来查看使用帮助。 如果要对yaourt和tupac这两个软件投票，可以这样做： (1) 到 http://aur.archlinux.org/account.php 注册一个帐号 (2) vi ~/.aruvote，加入 user=YourName pass=YourPassWord (3) aurvote -v yaourt tupac * 2.3 安装多线程多协议的下载工具aria2 # pacman -S aria2 # echo \"XferCommand = /usr/bin/aria2c –s 3 %u\" \u0026gt;\u0026gt;/etc/pacman.conf 用aria2替换默认的wget来安装软件，如果带宽足够大，就不需要用aria2了。 * 2.4 根据个人习惯安装其它Shell（如zsh，ksh），当然使用默认的Bash也很好 $ sudo pacman -S zsh 关于ZSH的介绍，可以参照Wiki: http://wiki.archlinux.org/index.php/Zsh 可从中获取配置好的 .zshrc 文件，放入$HOME中。 $ chsh -s /bin/zsh $ source ~/.zshrc * 2.5 安装sudo，用普通用户进入系统 创建一个账户： # useradd –mG users,audio,optical,storage,wheel -s /bin/zsh yourname 创建一个限制用户，有声音支持，有HAL 支持，能切换到root 权限 # passwd yourname (如果还没有为root创建密码，要先 #passwd root) # cd /home/YOUNAME/ \u0026\u0026 cp ~/.zshrc ./ \u0026\u0026 chown YOUENAME ./.zshrc # pacman -S sudo # vi /etc/sudoers 加入：yourname ALL=(ALL) NOPASSWD: SETENV: ALL 或直接对用户组作出相应设置。 如果主机上会有多个终端同时在用，还要加入\"visudo\"到/etc/sudoers sudo 命令补全（注意，仅适用于Bash）： # pacman -S bash-completion # echo source /etc/bash_completion \u0026gt;\u0026gt;/etc/profile # source /etc/profile （或exit, 用普通用户重登录） * 2.6 开启控制台鼠标 (gpm 支持) ，方便控制台下浏览网页 在控制台下浏览网页的工具有：elinks(英文网页), w3m（在CCE下可浏览中文网页）： $ sudo pacman elinks w3m cce 用elinks等工具，在控制台下浏览网页，如果没有鼠标支持，实在是很郁闷的事情： $ sudo pacman -S gpm $ sudo vi /etc/conf.d/gpm, 加入: GPM_ARGS=\"-m /dev/misc/psaux -t ps2\" (PS/2) or GPM_ARGS=\"-m /dev/input/mice -t imps2\" (USB) $ sudo gpm -m /dev/input/psaux -t ps2 (PS/2) or $ sudo gpm -m /dev/input/mice -t imps2\" (USB) 如果已经正常工作，把gpm 加到rc.conf中的DAEMONS 数组中，让它开机自动运行。 * 2.7 Post Installation Tips (1) Colorize your PS1 and Console 编辑SHELL的配置文件（如 ~/.bashrc），加入： export LS_COLORS=\u0026#39;no=00:fi=00:di=01;37;44:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mng=01;35:*.xcf=01;35:*.pcx=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.avi=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.mov=01;35:*.qt=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.pdf=00;32:*.ps=00;32:*.txt=00;32:*.patch=00;32:*.diff=00;32:*.log=00;32:*.tex=00;32:*.doc=00;32:*.mp3=01;32:*.wav=01;32:*.mid=01;32:*.midi=01;32:*.au=01;32:*.ogg=01;32:*.flac=01;32:*.aac=01;32:\u0026#39;; 关于提示符的修改，参看一下：http://bbs.linuxsir.org/showthread.php?t=223.44 (2) 实现彩色版的 Manpages $ sudo pacman -S most $ vi /etc/man.conf file， change the PAGER and BROWSER variable to: PAGER /usr/bin/most -s BROWSER /usr/bin/most –s $ vi ~/.mostrc，add: color normal brightwhite black color status yellow blue color underline white lightblue color overstrike brightcyan black 不过用most是有一些不便之处的，这时可以试试下面的方法，真的挺不错： 1. 在你的主目录创建 .terminfo 目录，并转到该目录： mkdir ~/.terminfo/ \u0026\u0026 cd ~/.terminfo 2. 从作者网站获取 terminfo 描述文件： wget http://nion.modprobe.de/mostlike.txt 3. 使用 tic 命令编译 mostlike.txt 文件（编译后可删除）： tic mostlike.txt 4. 在SHELL的配置文件中定义别名： alias man=\"TERMINFO=~/.terminfo/ LESS=C TERM=mostlike PAGER=less man\" 现在使用 man 指令就可以读到彩色版的 Manpages 了。如果你需要修改 terminfo 文件，则可以使用 infocmp mostlike。 (3) Timesaving Command-aliases 编辑SHELL的配置文件（如 ~/.bashrc），加入： alias ls=\u0026#39;ls --color=auto\u0026#39; alias la=\u0026#39;ls -a --color=auto\u0026#39; alias ll=\u0026#39;ls -aoth --color=auto\u0026#39; alias p=\u0026#39;sudo pacman\u0026#39; alias t=\u0026#39;sudo tupac\u0026#39; alias x=\u0026#39;startx\u0026#39; alias pq=\u0026#39;pacman -Q |grep\u0026#39; alias pa=\u0026#39;sudo pacman -S\u0026#39; alias pas=\u0026#39;sudo pacman -Ss\u0026#39; alias pau=\u0026#39;sudo pacman -Syu\u0026#39; alias pay=\u0026#39;sudo pacman -Sy\u0026#39; alias pao=”sudo pacman-optimize” alias pasch=\u0026#39;pacman -Sl | cut -d\u0026#39; \u0026#39; -f2 | grep \u0026#39; alias tp=\u0026#39;sudo tupac -S\u0026#39; alias tps=\u0026#39;sudo tupac -Ss\u0026#39; alias tpu=\u0026#39;sudo tupac -Syu\u0026#39; alias tpy=\u0026#39;sudo tupac -Sy\u0026#39; alias vi=\u0026#39;vim\u0026#39; alias v=\u0026#39;sudo vim\u0026#39; alias ps=\u0026#39;ps ax\u0026#39; alias m=\u0026#39;less –s\u0026#39; 3 安装一个桌面 * 3.1 xorg $ sudo pacman -S xorg $ sudo X –configure $ sudo vi xorg.conf.new (作出适当的修正) $ X -config xorg.conf.new (测试一下配置文件是否能正常工作，用Ctrl+Alt+Backspace退出X) $ cp xorg.conf.new /etc/X11/xorg.conf 如果发现“X -configure”不能正确配置某些硬件（比如鼠标），可以试试hwd命令： $ sudo pacman -S hwd \u0026\u0026 sudo hwd -xa 它会在/etc/X11/自动生成一个xorg.conf，并备份原有的文件。 * 3.2 安装显卡驱动 装完Xorg后，就已经有了一个通用的VESA驱动了。不过对图形加速支持得不太好。 一般显卡的开源驱动可以用：pacman -Ss xf86-video 来搜索到。不过要想较好的支持3D 性能，还需要使用厂商提供的驱动： ATI显示芯片：tupac -S catalyst ，参考http://wiki.archlinux.org/index.php/ATI Nvidia显示芯片可用：tupac -Ss nvidia 来搜索，并参考：http://wiki.archlinux.org/index.php/NVIDIA 不过个人认为，对于Nvidia的显卡，最好是直接使用其官方网站上的驱动，下载地址是： http://www.nvidia.cn/Download/index.aspx?lang=cn 下载最新的Linux驱动(当前是NVIDIA-Linux-x86-169.09-pkg1.run)，然后： $ sudo sh NVIDIA-Linux-x86-169.09-pkg1.run *3.3 安装字体 $ sudo pacman –Sy ttf ｜less （从安装包列表中查找可用的字体包） $ sudo pacman –S sdl_ttf font-bh-ttf ttf-dejavu ttf-fireflysung ttf-ms-fonts 当前的开源字体已经相当不错了，尤其是文泉驿字体。 安装文泉驿点阵宋体和正黑体。当前已经进入Community 了。 $ tupac -S wqy-bitmapfont wqy-zenhei $ sudo vi /etc/X11/xorg.conf ，增加字体路径 如果没有安装 fontconfig ，就用 pacman 安装一下，然后， 下载本文附件：fonts.conf.tar.gz ，并解压到 $HOME下： $ tar zxf fonts.conf.tar.gz -C ~/ 这会在 $HOME下产生一个 .fonts.conf 文件，可以优化中文显示。 如果磁盘上有Windows系统，也可以： $ sudo mkdir /usr/share/fonts/msfonts 复制一些Windows 字体到此目录下，如：msyh, simhei, simyou 并自行编辑.fonts.conf 文件。当然了，最好不要使用Windows字体，因为是有版权的。 *3.4 安装一个顺手的整合桌面环境或窗口管理器 o 3.4.1 gnome $ sudo pacman -S gnome （gnome-extra是附加软件，自行选择安装） o 3.4.2 kde $ sudo pacman -S kde o 3.4.3 xfce + idesk $ sudo pacman -S xfce4 idesk (xfce4-goodies是附加软件，自行选择安装) o 3.4.4 e17 + idesk $ sudo pacman -S e17 idesk o 3.4.5 fvwm + idesk $ sudo pacman -S fvwm idesk (如果要安装最新版本，需自行下载编译安装) o 3.4.6 openbox + rox-filer + lxpanel + idesk $ sudo pacman -S openbox rox lxpanel idesk o 3.4.7 windowmaker + rox-filer + *dockapp + idesk $ sudo pacman -S windowmaker rox lxpanel idesk $ pacman -Ss dock , 然后安装中意的dockapp 安装上面任一桌面后，可能还要安装和启用一个顺手的登录管理器，主要有： XDM，GDM，KDM，Entrance, SLIM. 如果要启用gdm，需注释掉/etc/inittab 中“x:5:respawn:/usr/bin/xdm –nodaemon” 这一行，另在/etc/rc.conf 中的 DAEMONS行中加入 gdm，可使开机时自动运行。 ~/.profile 文件中的命令是gdm 登录时会默认调用的。其它与之相似。 如果不用登录管理器，就配置好~/.xinitrc,用\"startx\"命令，直接从Console下进入。 参考： http://wiki.archlinux.org/index.php/{Gnome,Kde,Xfce,E17,Openbox,GDM,KDM,SLIM} http://www.fvwm.org http://slim.berlios.de http://icculus.org/openbox/index.php/Main_Page http://www.windowmaker.info http://roscidus.com http://idesk.sourceforge.net * 3.5 安装中文输入法（fcitx,or scim） o 3.5.1 fcitx $ sudo pacman -S fcitx $ cat \u0026gt;\u0026gt;~/.profile \u0026lt;\u0026lt;EOF \u0026gt; LC_CTYPE=\"zh_CN.utf8\" \u0026gt; export XMODIFIERS=@im=fcitx \u0026gt; export GTK_IM_MODULE=xim \u0026gt; export QT_IM_MODULE=xim \u0026gt; fcitx \u0026 \u0026gt; EOF o 3.5.2 scim $ sudo pacman -S scim-tables (或安装scim-fcitx。要用拼音，安装scim-pinying) $ cat \u0026gt;\u0026gt;~/.profile \u0026lt;\u0026lt;EOF \u0026gt; LC_CTYPE=\"zh_CN.utf8\" \u0026gt; export XMODIFIERS=@im=SCIM \u0026gt; export GTK_IM_MODULE=\"scim\" \u0026gt; export QT_IM_MODULE=\"scim\" \u0026gt; scim -f socket -c socket -d \u0026gt; EOF # cp ~/.profile ~/.xinitrc # echo exec gnome-session \u0026gt;\u0026gt;~/.xinitrc 这是startx 调用的配置文件。用“\u0026gt;\u0026gt;”,确保了gnome-session是最后被执行的命令。 # startx 4 安装常用软件 * 4.1 X下的虚拟终端 roxterm,tilda和yakuake都是相当棒的虚拟终端。 toxterm同gnome-terminal相似，却要小巧得多。 Tilda 可用于 GNOME、Xfce 桌面，而 Yakuake 主要用于 KDE 桌面。它们都具有热键控制， 桌面嵌入，背景透明，动画效果，标签页功能和可定制性。 个人偏好tilda，直接用Pacman命令安装： # pacman -S tilda （不过最近Gnome的MetaCity似乎对Tilda不太友好，老是找不到焦点） * 4.2 网络浏览 使用经过优化的更小巧快速的 swiftfox 来代替Firefox。 如果安装了elinks，可以先： $ elinks http://getswift.com/installer.htm 看看有哪些版本可以下载，结合电脑处理器的类型下载，如Pentium 4的CPU： $ aria2c –s 4 http://getswiftfox.com/builds/installer/pentium4/install-swiftfox.sh -d /tmp $ vi /tmp/ install-swiftfox.sh （作出适当的修正，不作修正也可） $ sudo sh /tmp/install-swiftfox.sh 也可以选择其他的网络浏览器，比如 Opera： # pacman -S opera * 4.3 图像编辑 (1) Linux下的Photoshop: GIMP，要安装它可以执行命令： # pacman -S gimp 你可以通过”应用程序 → 图像 → GIMP“来运行 GIMP。 (2)矢量图形编辑软件可以使用 Inkscape： # pacman -S inkscape (3)命令行的可以装上 ImageMagick： # pacman -S imagemagick (4)用来捕获图像的 Scrot： # pacman -S scrot (5)轻量级的图像查看软件 GQview： pacman -S gqview 或者 GNOME 默认的 Eog： pacman -S eog * 4.4 Linux下的Office软件 (1) OpenOffice.org ： # pacman -S openoffice-base openoffice-zh_cn 为了让 OpenOffice.org 运行于 GTK 2 模式，向SHELL的配置文件（如 ~/.bashrc） 添加： export OOO_FORCE_DESKTOP=gnome (2) 永中Office: 国产软件，听说对MS Office文档格式的支持要比OpenOffice好，如果Word，Exel的文件较多， 可以考虑这个，就是安装略显麻烦。 $ cd ~ $ aria2c -s 4 http://218.90.147.70/EverMore/EIOffice2007/EIO2007_Trial_ZH_Lin.tar.gz （电信）or: $ aria2c -s 4 http://218.104.51.66/EverMore/EIOffice2007/EIO2007_Trial_ZH_Lin.tar.gz (网通) $ tar zxf EIO2007_Trial_ZH_Lin.tar.gz 用su命令登录root，再进入解压后文件夹（好像是4开头的）； # ./setup.sh （进入永中Office的图形界面安装，指定一下安装目录） 安装完成后，要以root身份运行一下永中： # eio; exit $ cd ~ ; seteio (为普通用户配置下永中) $ eio (从终端运行永中Office，或者从菜单中运行也可以) * 4.5 即时通讯 要与朋友即时聊天，我们可以选用 Pidgin，它支持 Gtalk、MSN、QQ 等多种协议： pacman -S pidgin 当然，Skype 也不可错过： pacman -S skype-staticqt * 4.6 音影播放 (1)音乐播放软件我选择 Quod Libet，你可以凭自己的喜好来安装： # pacman -S quodlibet 其他的音乐播放器有 MPD、Audacious、Exaile、Amarok 等。 (2)看电影的话，可用mplayer，同时也加上浏览器插件和常用解码器： # pacman -S mplayer mplayer-plugin codecs gstreamer0.10-bad gstreamer0.10-ugly gstreamer0.10-ffmpeg gstreamer0.10-mad gstreamer0.10-mpeg2dec 如果需要 MPlayer 的前端，那么可以安装 SMPlayer： # pacman -S smplayer 当然，另一个选择 VLC 也挺好： # pacman -S vlc * 4.7 下载工具 命令行下载工具，有 wget。此外，aria2 也不错，它支持断点续传和多线程下载： pacman -S aria2 BitTorrent 下载工具，我们选用 Deluge： pacman -S deluge 其他的包括 Azureus、rTorrent 等。 另外，我们把 aMule 也安装上： pacman -S amule 为了能够让 aMule 直接从 Firefox 浏览器中处理 ed2k 链接，我们在 Firefox 的 about:config 中新建字符串 network.protocol-handler.app.ed2k，并将其设为 /usr/bin/ed2k。 * 4.8 文本编辑与排版 (1)如果要求简单的话，可以选用 Gedit： pacman -S gedit (2)安装 Vim，要图形界面的话，可以加上 Gvim： pacman -S vim gvim (3)Emacs 迷们可以执行： pacman -S emacs Emacs CVS 版本可在 community 中找到。 (4)世界第一流的排版工具集 TexLive 参看http://wiki.archlinux.org/index.php/Texlive 也可额外安装 TeX 的集成编辑环境：Kile, or Lyx * 4.9 安装VirtualBox虚拟机 $ sudo tupac -S virtualbox_bin (从AUR安装VirtualBox 的PUEL版本) $ sudo vbox_build_module (创建VirtualBox的内核) $ sudo gpasswd -a YourName vboxusers (将你的名字加入vboxusers用户组) $ sudo modprobe vboxdrv （如果要立刻开始用，需要加载vboxdrv模块） $ sudo vim /etc/rc.conf： MODULES中加入vboxdrv，使开机时加载vboxdrv模块. $ VirtalBox (从终端运行virtualbox，或从桌面的菜单中运行它) 有时，会因为没有libstdc++5 这个库文件，而使virtualbox不能运行。安装它就是了： $ sudo pacman -S libstdc++5 * 4.10 wine──在Unix/Linux系统上实现Windows API Wine用Unix的方式实现（或代替了）Windows API ，所以通过Wine可以在Unix-Like系统上运行 Windows 程序及游戏。 Wine-Doors是一款基于Gnome桌面的Windows软件安装管理包，是Wine 的辅助工具， 使用非常方便，只需在软件列表中选择要安装的软件，Wine-Doors就会帮你搞定一切， 不再需要自己动手来配置Wine。什么Office 2003，Photoshop都不在话下了。 $ sudo tupac -S wine wine-doors $ winecfg (配置好Wine) $ sudo wine iexplore http://www.winehq.org （安装Wine Gecko IE engine） $ cp /usr/share/fonts/wenquanyi/wqy-zenhei/wqy-zenhei.ttf ~/.wine/drive_c/windows/fonts 给Wine提供一个中文字体：WenQuanYi Zen Hei $ vi ~/zh.reg, add: （编辑Wine中文字体支持的注册表文件，否则中文网页会乱码） REGEDIT4 [HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes] \"Arial\"=\"WenQuanYi Zen Hei\" \"Arial CE,238\"=\"WenQuanYi Zen Hei\" \"Arial CYR,204\"=\"WenQuanYi Zen Hei\" \"Arial Greek,161\"=\"WenQuanYi Zen Hei\" \"Arial TUR,162\"=\"WenQuanYi Zen Hei\" \"Courier New\"=\"WenQuanYi Zen Hei\" \"Courier New CE,238\"=\"WenQuanYi Zen Hei\" \"Courier New CYR,204\"=\"WenQuanYi Zen Hei\" \"Courier New Greek,161\"=\"WenQuanYi Zen Hei\" \"Courier New TUR,162\"=\"WenQuanYi Zen Hei\" \"FixedSys\"=\"WenQuanYi Zen Hei\" \"Helv\"=\"WenQuanYi Zen Hei\" \"Helvetica\"=\"WenQuanYi Zen Hei\" \"MS Sans Serif\"=\"WenQuanYi Zen Hei\" \"MS Shell Dlg\"=\"WenQuanYi Zen Hei\" \"MS Shell Dlg 2\"=\"WenQuanYi Zen Hei\" \"System\"=\"WenQuanYi Zen Hei\" \"Tahoma\"=\"WenQuanYi Zen Hei\" \"Times\"=\"WenQuanYi Zen Hei\" \"Times New Roman CE,238\"=\"WenQuanYi Zen Hei\" \"Times New Roman CYR,204\"=\"WenQuanYi Zen Hei\" \"Times New Roman Greek,161\"=\"WenQuanYi Zen Hei\" \"Times New Roman TUR,162\"=\"WenQuanYi Zen Hei\" \"Tms Rmn\"=\"WenQuanYi Zen Hei\" $ regedit zh.reg (将中文字体配置写入Wine的注册表) $ wine iexplore http://www.126.com (试验一下中文效果) 需要注意的是，如果从abs系统编译了并升级安装到了最新的Wine，一定要运行“wineprefixcreate” 来更新Wine的注册表。 * 4.11 其他工具 (1)光盘刻录 KDE下建议选择 K3b，可以通过以下指令安装： pacman -S k3b dvd+rw-tools 为了让当前用户能够使用光盘刻录设备，需要将其添加到 optical 用户组中： gpasswd -a YOURNAME optical 如果是Gnome用户，建议安装gnomebaker，不亚于k3b: pacman -S gnomebaker (2) FTP上传 可选择命令行的 Lftp： pacman -S lftp 图形化的有 gFTP、FileZilla 等。 FTP下载其实不必特意安装什么，因为wget，aria2都是支持FTP协议的。 (3)文档查看 查看 PDF 文档，可以安装 Evince：pacman -S evince 也可以用Adobe公司的acroread：pacman -S acroread 或轻量级的xpdf：pacman -S xpdf xpdf-chinese-simplified xpdf-chinese-traditional CHM 文档，可以选用kchmviewer (4)新闻阅读 RSS 离线阅读软件，用 Liferea： pacman -S liferea (5)邮件收发 电子邮件客户端，可以选择 Thunderbird： pacman -S thunderbird thunderbird-i18n 或者采用：mutt + msmtp + getmail (6)图形界面的进程查看器 (gps) $ sudo pacman –S gps $ gps 如果是文字界面的话，可用下面的命令： $ ps ax (7)计算器： pacman -S gcalctool (8)压缩/解压 rar、zip 等格式： pacman -S p7zip q7z (安装7zip，q7z是其GUI程序) pacman -S unrar unzip 另外，图形化的可以用 File-roller： pacman -S file-roller (9)词典翻译 安装 StarDict： pacman -S stardict 同时，词典文件需从 StarDict 官方网站下载，并释放到 /usr/share/stardict/dic/ 目录。 (10)Java 支持： pacman -S jre (11)Flash 插件： pacman -S flashplugin * 4.11 安装主题 GDM 可以安装 Arch Boomerang Underlight 这套清爽的主题。下载后，执行： $ tar zxvf arch-boomerang-underlight-gdm.tar.gz $ mv arch-underlight-* /usr/share/gdm/themes/ $ sudo gdmsetup (需要在X下执行，需要事先安装gdm) 或者，如果在使用Gnome，就在”系统 → 系统管理 → 登录窗口“中将样式更改为主题模式， 并选择已安装的主题即可。 参看：http://www.gnome-look.org/ 还可以打造一个 Mac OS X 风格的界面，参看：http://sourceforge.net/projects/mac4lin 5 常见问题 * 5.1 声音问题 安装ALSA。实际上，ALSA 已被包含到 2.6 版的内核中。因此，只需安装 ALSA 的相关工具即可： pacman -S alsa-utils 接着，将当前用户添加到 audio 用户组，以便使用声卡设备： gpasswd -a YOURNAME audio 同时，将 alsa 添加到 /etc/rc.conf 配置文件的 DAEMONS 中： DAEMONS=(syslog-ng network netfs crond gdm alsa) 值得注意的是，ALSA 默认是静音状态，需要先打开音量。另外，也可点击”系统 → 首选 项 → 音效“进行测试。 $ sudo pacman -S alsa-lib alsa-oss alsa-utils (oss 包解决声卡独占问题) $ sudo alsaconf (设置声卡) $ sudo alsamixer $ sudo alsactl store (设置和保存音量，并在 /etc/rc.conf中的 DAEMONS行加入alsa) $ amixer set Master 75 unmute $ amixer set PCM 75 unmute (75 好像是原声，再高的话，声音会失真) * 5.2 笔记本电脑可能遇到的问题 (1) 触摸板问题 参看http://wiki.archlinux.org/index.php/Touchpad_Synaptics (2) 摄像头问题 参看http://wiki.archlinux.org/index.php/Webcam_Setup (3) 无线上网问题 参看http://wiki.archlinux.org/index.php/Wireless (4) 快捷键问题 参看http://wiki.archlinux.org/index.php/Extra_Keyboard_Keys * 5.3 打印机设置 (1) 当前最流行的底层基础打印系统：CUPS (适用于所有打印机) Unix-Like系统下的打印系统中，最具易用性的当数CUPS (The Common UNIX Printing System )，即 Unix通用打印系统。在过去，Unix-Like系统下的打印问题是老大难。CUPS的出现使这个问题得到了 极大的缓解。 安装： # pacman -S cups ghostscript gsfonts CUPS系统运行记录： 编辑/etc/cups/cupsd.conf，设置LogLevel的等级： LogLevel debug2 如果出现错误，就可以察看调试信息了： $ tail -n 100 -f /var/log/cups/error_log 看看系统已经加载了哪些模组（Modules）： # lsmode |less 再来看看系统中有哪些可以使用的模组： # modprobe -l |less 为内核加载打印机模组后，连接好打印机机，并打开电源： i) USB 接口打印机 # modprobe usblp （2.6.x 内核） # modprobe printer （2.4.x 内核） # tail /var/log/messages.log （看看安装成功了没有） ii) 并口打印机 # modprobe lp parport parport_pc （2.6.x 内核） # modprobe parport parport_pc （2.4.x 内核） # tail /var/log/messages.log （看看安装成功了没有） 将这些模组加入/etc/rc.conf中的MODULES中去，以便开机时自动加载。 启动 CUPS ： # /etc/rc.d/cups start （可将cups加入/etc/rc.conf中的DAEMONS中去，以便开机时自动加载） 这个时候，就可以用CUPS在控制台下做一些简单的打印了，如： $ cat ~/.xinitrc \u0026gt; /dev/usb/lp0 (USB接口打印机) 当然仅仅依靠CUPS打印，如果在X下，肯定是不方便的。主要是因为缺少驱动，Linux下的打印驱动是PPD文件。 (2) 打印驱动： Foomatic Foomatic是一个数据库驱动的打印系统，它将Unix下的通用后台打印系统与开源的打印机驱动整合在一起。 只要有任一在开源驱动下能够正常工作的打印机，它就能支持了。它支持CUPS, LPRng, LPD, GNUlpr, Solaris LP, PPR, PDQ, CPS 这些底层的打印系统，也能直接打印（既是驱动也是打印工具）。 Foomatic打印速度快，打印质量也挺不错。不过缺点是，有个别的打印机可能没有PPD文件驱动。 # pacman -S foomatic-*** Foomatic包含五个安装包： foomatic-filters (帮助后台打印系统将PostScript转成打印机语言)， foomatic-db (foomatic-db-engine生成PPD文件时要用到的一切资料)， foomatic-db-PPD (已经获支持的打印驱动) foomatic-db-engine (将 Foomatic XMLo数据库中的数据生成PPD文件)， foomatic-db-hpijs (专为HP打印驱动生成Foomatic XML 数据)。 一般来说，安装前四个包就可以了。如果没有惠普打印机，就不必安装foomatic-db-hpijs了。 (4) 打印驱动：hplip 惠普DeskJet, OfficeJet, Photosmart, Business Inkjet 和一些 LaserJet 打印机型号，需要安装hplip。只用于惠普打印机。 也可同时安装上面的Foomatic，对比一下两者的打印速度。 # pacman -S hplip (5) 打印驱动：Gutenprint 也许以上的打印驱动仍然不行（不过安装foomatic一定是必要的，能提高打印速度）。在配置CUPS时（即将讲到） 没有找到自己的打印机型号。那么可能还需要接着安装Gutenprint。 Gutenprint 是GIMP的打印扩充功能模块，过去叫\"gimp-print\"，它能够为GIMP提供流行的打印驱动，能 让佳能、爱普生、惠普、利盟、索尼、奥林巴斯，以及其他基于PCL技术的打印机，打印出更出色的品质。用于高品质的图像打印是在好不过了。 它支持的打印机型号列表可见于：http://gutenprint.sourceforge.net/p_Supported_Printers.php3 不过Gutenprint的打印品质是没得说，但速度就不敢恭维了。但有foomatic的支持就会快很多。 # pacman -S gutenprint (6) 在X下配置CUPS 打印基础系统CUPS和打印驱动安装好的，就要开始配置打印机了。 可以通过配置CUPS来配置打印机。配置CUPS的方法适用于一切打印机及其驱动。因此推荐使用。 进入X，打开一个网络浏览器，访问： http://localhost:631 （也可以用在/etc/hosts中设置好的hostname来代替localhost） 按照提示，一步一步的配置好打印机： Manage Printers ---\u0026gt; Add Printer ---\u0026gt; root密码验证 ---\u0026gt; 输入打印机名称 ---\u0026gt; 选择设备类型 （打印机型号及其接口：USB接口 or 并口打印机） ---\u0026gt; 选择你的打印机 ---\u0026gt; 通过打印机型号来选择适当的打印机驱动，并Add （如果打印驱动的名称中出现了foomatic字样，一定要优先选择） ---\u0026gt; 打印选项的设置 ---\u0026gt; 完成 也可以使用另外的配置界面，不过可能要另外安装： tupac -S gnome-cups-manager (Gnome下) tupac -S gtklp (KDE下) (5) 打印机共享 i) Linux to Linux 服务器端：编辑 /etc/cups/cupsd.conf 中“Location”一段，以允许客户端的访问，重启cups服务。 客户端：编辑 /etc/cups/cupsd.conf 中“ServerName”一段，以允许访问服务器端。执行命令：lpq ii) Linux to Windows 两端都应当安装Samba。参看Wiki。 iii) Windows to Linux 两端都应当安装Samba。参看Wiki ******* 所有关于打印的问题，请一定要参看： http://wiki.archlinux.org/index.php/CUPS http://www.cups.org/ http://gimp-print.sourceforge.net/ http://www.linuxprinting.org/printer_list.cgi http://www.linux-foundation.org/en/OpenPrinting/Database/Foomatic http://savannah.nongnu.org/projects/foomatic-gui/ http://wiki.gentoo.tw/mediawiki/index.php/Printing-howto 另可参看http://www.redhat.net.cn/online/linuxbook/1/16.htm * 5.4 服务的访问控制 /etc/hosts.allow 和/etc/hosts.deny 这两个文件是tcpd 服务器的配置文件，tcpd 服务器可以控制外部IP 对本机服务的访问。 这两个配置文件的格式如下： #服务进程名:主机列表:当规则匹配时可选的命令操作 server_name:hosts-list[:command] /etc/hosts.allow 控制可以访问本机的IP 地址，/etc/hosts.deny 控制禁止访问本机的IP。 如果两个文件的配置有冲突，以/etc/hosts.deny 为准。下面是一个/etc/hosts.allow 的示例： ALL: 127.0.0.1: ALLOW #允许本机访问本机所有服务进程 smbd: 192.168.0.0/255.255.255.0 #允许192.168.0.网段的IP 访问smbd 服务 ALL 关键字匹配所有情况，EXCEPT 匹配除了某些项之外的情况，PARANOID 匹配你想控 制的IP 地址和它的域名不匹配时(域名伪装)的情况。 * 5.5 启动加速 编辑 /etc/rc.conf ，在 “ DAEMONS ”行的一些不急着需要用的后台程序前加上@，使后台运行。 * 5.6 中文Java 支持 $JAVA_HOME/jre/lib/fonts/ 下建一个fallback 的目录，然后建一个中文字体的软链接过去。 * 5.7 可移动设备的自动挂载（HAL + dbus or ivman） 及中文名支持 $ sudo pacman -S hal dbus acpid（hal 依赖 dbus，acpid 可管理设备的电源。） $ sudo vi /etc/rc.conf ，在 DAEMONS行 加入hal，如: DAEMONS=(syslog-ng acpid hal network !netfs @crond @alsa gdm) 注意：如果daemons 列表中有dbus，要移除它，以免出错。hal 会自动加载dbus。 $ sudo gpasswd –a username optical $ sudo gpasswd –a username storage 把你的用户加入到 optical，storage 这几个组里面。前文中已经加入过了，可跳过。 如果用ivman来替代dbus，则需要将用户名加入到plugdev组中。 $ sudo vi /etc/fstab，注释掉下面两行： /dev/cdrom /mnt/cdrom iso9660 ro,user,noauto,unhide 0 0 /dev/dvd /mnt/dvd udf ro,user,noauto,unhide 0 0 $ sudo vi /etc/hal/fdi/policy/preferences.fdi，可加入一些很有用的规则， 如自动挂载NTFS文件系统，自动挂载可移动设备，性能优化，U盘的中文名支持等： \u0026lt;?xml version=\"1.\" encoding=\"UTF-8\"?\u0026gt; \u0026lt;deviceinfo version=\".2\"\u0026gt; \u0026lt;device\u0026gt; \u0026lt;match key=\"volume.fstype\" string=\"ntfs\"\u0026gt; \u0026lt;append key=\"volume.mount.valid_options\" type=\"strlist\"\u0026gt;dmask=000\u0026lt;/append\u0026gt; \u0026lt;append key=\"volume.mount.valid_options\" type=\"strlist\"\u0026gt;fmask=111\u0026lt;/append\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;/device\u0026gt; \u0026lt;device\u0026gt; \u0026lt;!-- Use UTF-8 charset for vfat --\u0026gt; \u0026lt;match key=\"volume.fstype\" string=\"vfat\"\u0026gt; \u0026lt;merge key=\"volume.policy.mount_option.iocharset=utf8\" type=\"bool\"\u0026gt;true\u0026lt;/merge\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;/device\u0026gt; \u0026lt;device\u0026gt; \u0026lt;match key=\"storage.hotpluggable\" bool=\"false\"\u0026gt; \u0026lt;match key=\"storage.removable\" bool=\"false\"\u0026gt; \u0026lt;merge key=\"storage.automount_enabled_hint\" type=\"bool\"\u0026gt;false\u0026lt;/merge\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;/device\u0026gt; \u0026lt;device\u0026gt; \u0026lt;match key=\"block.is_volume\" bool=\"true\"\u0026gt; \u0026lt;match key=\"volume.size\" compare_lt=\"8000000000\"\u0026gt; \u0026lt;match key=\"@block.storage_device:storage.hotpluggable\" bool=\"true\"\u0026gt; \u0026lt;merge key=\"volume.policy.mount_option.sync\" type=\"bool\"\u0026gt;true\u0026lt;/merge\u0026gt; \u0026lt;merge key=\"volume.policy.mount_option.noatime\" type=\"bool\"\u0026gt;true\u0026lt;/merge\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;match key=\"@block.storage_device:storage.removable\" bool=\"true\"\u0026gt; \u0026lt;merge key=\"volume.policy.mount_option.sync\" type=\"bool\"\u0026gt;true\u0026lt;/merge\u0026gt; \u0026lt;merge key=\"volume.policy.mount_option.noatime\" type=\"bool\"\u0026gt;true\u0026lt;/merge\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;match key=\"volume.size\" compare_ge=\"8000000000\"\u0026gt; \u0026lt;match key=\"@block.storage_device:storage.hotpluggable\" bool=\"true\"\u0026gt; \u0026lt;merge key=\"volume.policy.mount_option.sync\" type=\"bool\"\u0026gt;false\u0026lt;/merge\u0026gt; \u0026lt;merge key=\"volume.policy.mount_option.noatime\" type=\"bool\"\u0026gt;false\u0026lt;/merge\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;match key=\"@block.storage_device:storage.removable\" bool=\"true\"\u0026gt; \u0026lt;merge key=\"volume.policy.mount_option.sync\" type=\"bool\"\u0026gt;false\u0026lt;/merge\u0026gt; \u0026lt;merge key=\"volume.policy.mount_option.noatime\" type=\"bool\"\u0026gt;false\u0026lt;/merge\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;/device\u0026gt; \u0026lt;/deviceinfo\u0026gt; 参看：http://wiki.archlinux.org/index.php/HAL 注意，必须事先安装好ntfs-3g安装包，才能成功挂载NTFS分区。最后： $ sudo /etc/rc.d/hal restart 即可正常使用HAL支持了，同时移动设备上的中文名（其实其它语言也可以）也可以得到支持。 如果以上不能工作，还可以安装pmount: $ sudo pacman -Sy pmount * 5.8 更改GNOME 菜单下的图标 可以编辑/usr/share/applications 中的相应文件 * 5.9 ArchLinux的包管理系统：Pacman 常用命令有： pacman -Sy abc #和源同步后安装名为abc的包 pacman -S abc #从本地数据库中得到abc的信息，下载安装abc包 pacman -Sf abc #强制安装包abc pacman -Ss abc #搜索有关abc信息的包 pacman -Si abc #从数据库中搜索包abc的信息 pacman -Qi abc #列出已安装的包abc的详细信息 pacman -Syu #同步源，并更新系统 pacman -Sy #仅同步源 pacman -R abc #删除abc包 pacman -Rc abc #删除abc包和依赖abc的包 pacman -Rsc abc #删除abc包和abc依赖的包 pacman -Sc #清理/var/cache/pacman/pkg目录下的旧包 pacman -Scc #清除所有下载的包和数据库 pacman -U abc #安装下载的abs包，或新编译的abc包 pacman -Sd abc #忽略依赖性问题，安装包abc pacman pacman -Su --ignore foo #升级时不升级包foo pacman -Sg abc #查询abc这个包组包含的软件包 * 5.10 Arch Build System (ABS) 利用abs 可以从源码自定义编译安装包。其过程如下： (1) Synchronize your ABS tree with the server. # pacman -S cvsup # abs (2) Create a new directory in /var/abs/local/ named after the package you are going to create. $ mkdir -p ~/abs/local/ (这里，推荐在个人的主目录下创建一个ABS的工作目录) (3）Copy the PKGBUILD.proto prototype from /var/abs/ into your newly created directory, remove the .proto suffix, and edit it to fit the new package. $ cp -r /var/abs/... ~/abs/local/ (将你要编译的软件的PKGBUILD目录复制到个人目录下) (4) Run makepkg in the working directory with the PKGBUILD file. $ makepkg (开始编译这前，可以编辑一下PKGBUILD文件，更改其默认安装目录到个人 主目录下，用“--prefix＝...”来指定安装目录) (5) Install the newly built package with pacman. $ pacman -U ..pkg.gz (安装新编译好的包文件) (6) Send the package to your friends for bragging rights (or give it to an Archer so s/he can stick it in the master ABS tree). * 5.11 创建一个光盘镜像 Linux 下创建一个光盘镜像真的很简单，基本上有两类方法： (1) 镜像的源文件在光盘上 将光盘放入光驱，但不用 mount 指令加载它，然后： dd if=/dev/dvd of=dvd.iso # for dvd dd if=/dev/cdrom of=cd.iso # for cdrom dd if=/dev/scd0 of=cd.iso # if cdrom is scsi (2) 镜像的源文件在硬盘上或被 mount 到了硬盘上，比如在 /tmp/directory/： mkisofs -o cd.iso /tmp/directory/ 如果这个源文件是一个DVD视频文件，那么要这样用： mkisofs -dvd-video -o dvd.iso /tmp/directory/ 关于mkisofs 的更多用法，还请参看手册：man mkisofs 关于DVD视频光盘的编辑和创建，请参看： http://gecius.de/linux/dvd.html http://gentoo-wiki.com/HOWTO_Create_a_DVD:Filesystem 6 服务器环境 * 6.1 FTP服务 (1) vsftpd FTP服务器的安装比较简单。直接用Pacman安装即可。当然，还必须配置好，才可正常安全的使用。 vsftpd的使用和配置，可参考： http://vsftpd.beasts.org/ http://gentoo-wiki.com/HOWTO_vsftpd http://www.uplinux.com/www/net/02/117.shtml (2) pureftpd 参考http://www.pureftpd.org/project/pure-ftpd http://www.chinaunix.net/jh/15/2424.html * 6.2 HTTP服务 (1) 提供Web服务的程序 能提供WEB服务的开源程序主要有：Apache httpd, Lighttpd, 和Nginx。 Apache稳定，安全，使用者最多，但是运行时对内存、CPU的开销也是最高的。 在静态网页支持上，lighttpd/nginx 比 apache 优胜很多。 如果不考虑虚拟主机的安全设置问题，Nginx无疑是最好的选择，其次是Lighttpd。 i) Apache httpd: 参见http://httpd.apache.org/ ii) Lighttpd: 参见http://wiki.archlinux.org/index.php/Lighttpd_For_Both_SSL_And_Non-SSL iii) Nginx: 参见http://wiki.codemongers.com/Main (2) 动态网页的程序接口(CGI)：FastCGI： 是HTTP服务器与机器上其他程序进行通信的一个接口。这个“其他程序”可以使用任何计算机语言 来编写，它通过CGI这个接口从HTTP服务器取得输入，然后把运行的结果又通过CGI这个接口交给HTTP 服务器，而HTTP服务器把这个结果送给浏览器。提供Web服务的程序都有CGI模块。 不过CGI技术的通用性与效率不高，所以有了性能大幅提升的FastCGI。FastCGI要求提供Web服务的 程序整合fcgi模块。 参见http://wiki.archlinux.org/index.php/Apache_fastcgi http://wiki.archlinux.org/index.php/Fastcgi_and_lighttpd (3) 动态网页的脚本语言 PHP：参见http://wiki.archlinux.org/index.php/PHP Python: 在动态网页上的应用与PHP相似。 JSP：Java语言支持，需安装JDK (4) 数据库 MySQL: 当前国内用的较多的数据库。适合小访问量或个人使用。 PostgreSQL: 世界上最先进，最稳定的数据库。能充分发挥出机器的潜能。更加适合大企业环境。 参看http://wiki.archlinux.org/index.php/PostgreSQL (5) HTTP服务器的架构 i) 不带数据库支持的轻量级WEB：Nginx/lighttpd + PHP/Python + FastCGI ii) 有数据库支持：Apache/lighttpd + PHP/Python + MySQL/PostgreSQL，也可再追加JSP的支持。 参看http://wiki.archlinux.org/index.php/LAMP 参见http://wiki.archlinux.org/index.php/Apache_fastcgi http://wiki.archlinux.org/index.php/Fastcgi_and_lighttpd http://www.knowsky.com/3232.html iii) 更加高效、可靠、稳定的WEB服务器。下面的架构图比较不错： -------- ------------ ------------- ---------------- -------------- |客户端| ===\u0026gt; |负载均衡器| ===\u0026gt; |反向**/缓存| ===\u0026gt; |WEB服务器| ===\u0026gt; |数据库服务器| -------- ------------ ------------- ---------------- -------------- Nginx Squid Apache/lighttpd MySQL/PostgreSQL +(PHP+eAccelerator) + memcache 参看http://huangjt.jobui.com/blog/80186.html (6) 用WebDav替代传统的FTP服务 WebDav是一个使用XML技术的基于HTTP协议的扩展协议，具备HTTP的所有优点，力图提供 一个网页编辑的统一接口。用它替代传统的FTP服务，可以避免FTP存在的一些中文问题。 参看：http://wiki.archlinux.org/index.php/Simple_WebDav_Setup http://wiki.archlinux.org/index.php/WebDAV_authentication * 6.3 邮件服务 PostFix：参看http://wiki.archlinux.org/index.php/PostFix_Howto * 6.4 文件共享 文件共享的方法较多，机器上只要安装了任一网络文件系统就可以共享了。网络文件系统有： ftpfs, sshfs, shfs, smbfs, nfs, etc. 当然，使用http服务来共享文件也未尝不可。 (1) Shfs sshfs可以开机自动挂载，关机和重启时也可以自动卸载sshfs文件系统，但是它不能用mount来 直接指定-t参数来挂载，因此也不能直接加到/etc/fstab中，而且用df也不能列出那样的分区。 但是shfs解决了这个问题，它能像挂载普通分区那样挂载sshfs文件系统。它是通过内核的shfs 模块来实现的， 参看http://wiki.archlinux.org/index.php/Shfs (2) Samba 可帮助实现跨平台（Linux \u0026lt;---\u0026gt;Windows) 的文件共享和打印共享。 参看http://wiki.archlinux.org/index.php/Setting_up_Samba http://www.samba.org/ (3) NFS 参看http://wiki.archlinux.org/index.php/Nfs (2) rsync Rsync用于两台机器上文件的同步备份，它本身不算是共享程序，但它能起到共享的作用。通常与ssh合用。 参看http://samba.anu.edu.au/rsync/ http://dz.adj.idv.tw/thread-48-1-4.html * 6.5 远程登录 (1) OpenSSH/OpenSSH-chroot 用 OpenSSH-chroot 基于Openssh，但添加了新特性，即可以创建一个chrootjail。chrootjail是单独划分 出的一个空间，以限制远程登录者活动不超出此范围，更不会影响到主系统。所以比用 Openssh 更安全。 # pacman -S openssh-chroot # mkdir /var/openssh_chroot # chroot_create /var/openssh_chroot (将chrootjail放到/var/openssh_chroot，或其它地方) # chroot_adduser USERNAME /var/openssh_chroot (创建远程登录者帐户，并为其指定chrootjail) # /etc/rc.d/sshd restart (手动重启sshd服务，也可将sshd添加到/etc/rc.conf中的DAEMON中去) 如果远程机器是Unix-Like系统，可用：ssh \u0026lt;username\u0026gt;@localhost 来登入；如果是Windows, 可使用 Putty, or pietty。 参看http://wiki.archlinux.org/index.php/Openssh-chroot (2) OpenVPN * 6.6 安全问题 (1) 防火墙 (Iptables) 这个实在不是几句话能讲明白的。不过想提醒几句：要使Iptables发挥出最大作用，最好是在一台 旧电脑装上NAT+Iptables，充当网关，然后自己的电脑跟此网关相连接。 参看：http://wiki.archlinux.org/index.php/Firewalls http://wiki.archlinux.org/index.php/Simple_stateful_firewall_HOWTO http://gentoo-wiki.com/HOWTO_Iptables_for_newbies http://iptables-tutorial.frozentux.net/iptables-tutorial.html http://wiki.archlinux.org/index.php/High_Performance_Firewall/Nat_with_iptables_and_VLANs_and_iproute2 (2) 入侵监测 (Snort) 这个太复杂了。 有兴趣可以看一看Toby Kohlenberg等编写的专著\"Snort: Intrusion Detection and Prevention Toolkit\"。 电子书下载：http://rapidshare.com/files/27449819/Snort_Intrusion_Detection_and_Prevention_Toolkit_ertu.rar 参看http://www.snort.org/ ","date":"2014-12-09T01:00:00+08:00","permalink":"https://svtter.cn/p/archlinux-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B02-%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E8%BD%AC%E8%BD%BD/","title":"archlinux-安装笔记2-常用软件转载"},{"content":" 本文出自svtter.github.io\nJavaScript首先应该看w3cschool来涨涨见识, 但是因为之前沉溺游戏荒废了。。\nmark一个还不错的gitbook learn javascript\n自备梯子。。(没钱奈何现在还是free\\w\\w\\w\\w..)\njs一切皆为对象。\nJS-再理解 javascript是一脚本语言 — 脚本语言的特性就是一句一句解释执行，所以很多情况和处理机制和bash类似（但是语法明显不同）\n在定义变量等思想，作用域也比较接近.\nJs-使用getElement以及$定位 使用if(% == null)来判断一下是否真的获取到了对象\n另外，添加新元素append()的时候记得补充\u0026lt;/div\u0026gt;\nJs-使用正则表达式 如果使用RegExp(\u0026quot;\u0026quot;)+exec()这种形式，””中的的元字符需要双来使用。\n此外，如果需要查询正则表，可以通过这个链接正则表\njs文件无法运行原因 使用Opera或者Chrome调试，大部分问题都可以找出 — 基本上不是func写错了，就是使用了int这种定义文件方式..\n之前编写html和js都不知道有console这等神器。如果以后再写html做一些研究。。\nJS-jQuery-创建 If the HTML is more complex than a single tag without attributes,\nas it is in the above example,\nthe actual creation of the elements is handled by the browser’s innerHTML mechanism. In most cases,\njQuery creates a new\nelement and sets the innerHTML property of the element to\nthe HTML snippet that was passed in. When the parameter has a single tag,\nsuch as $(\u0026#8216;\u0026#8216;) or $(\u0026#8216;\u0026#8216;),\njQuery creates the element using the native JavaScript createElement() function.\n使用js批量上传图片 file是一种特殊的input，不能被赋值，也不能被javascript取值，只能随表单提交，\n而且随表单提交的也是file路径所指向的文件本身。 这是浏览器安全原因所限制的，如果可以取值和赋值的话，那么javascript就可以随意获取你电脑上的文件了，这是非常危险的 所以想要实现批量上传图片一种方法是添加新的文件之后，在添加一个Input，但是美观方面就差强人意了。 jQuery jQuery选择器 可以选择带有某属性的元素，例如$(\"[href$='.jpg']\"), 所有带有以 \u0026#8220;.jpg\u0026#8221; 结尾的属性值的 href 属性 ","date":"2014-12-08T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/08/js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","title":"JS-常见问题"},{"content":" 本文出自svtter.github.io 基础第二弹 虽然是很水的题目，但是还是收获了不少。\n动态小数位数 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { int a, b, c; while(~scanf(\"%d %d %d\", \u0026a, \u0026b, \u0026c)) { printf(\"%.*lf\", c, a/(double)b); } return ; } 整数位数 // 整数位数 int cal(int a) { if(a == 0) return 0; return (int) log10( (double) a)+1; } 电灯 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define bool int //C语言没有bool bool light[1010]; //C也没有引用 void trans(bool *a) { if(*a) *a = ; else *a = 1; } int main() { int i, j; int n, k; while(~scanf(\"%d %d\", \u0026n, \u0026k)) { memset(light, , sizeof(light)); for(i = 1; i \u0026lt;= k; i++) { j = i; while(j \u0026lt;= n) { trans(\u0026light[j]); j += i; } } for(i = 1; i \u0026lt;= n; i++) { if(light[i]) printf(\"%d \", i); } printf(\"\\n\"); } return ; } 蛇型填数 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define bool int //C语言没有bool bool light[1010]; //C也没有引用 void trans(bool *a) { if(*a) *a = ; else *a = 1; } int main() { int i, j; int n, k; while(~scanf(\"%d %d\", \u0026n, \u0026k)) { memset(light, , sizeof(light)); for(i = 1; i \u0026lt;= k; i++) { j = i; while(j \u0026lt;= n) { trans(\u0026light[j]); j += i; } } for(i = 1; i \u0026lt;= n; i++) { if(light[i]) printf(\"%d \", i); } printf(\"\\n\"); } return ; } 调和级数 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; double calharmony(int a) { double sum = ; int i; for(i = 1; i \u0026lt;= a; i++) { sum += 1/(double)i; } return sum; } int main() { int a; while(~scanf(\"%d\", \u0026a)) { printf(\"%.3lf\\n\", calharmony(a)); } return ; } 题目都很水（不能再水了），但是也算是有所收获。学习了一部分C。\n","date":"2014-12-04T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/04/acm-%E7%99%BD%E7%9A%AE%E4%B9%A6-%E7%BB%83%E4%B9%A0/","title":"ACM-白皮书-练习"},{"content":" 本文出自svtter.github.io 如果只是单纯的使用function, 在终端中是可以使用的，但是当作一个可执行文件是不行的（例如：使用python调用)\n如果使用.sh的方式来处理， 那么问题就在于管理上了 — 可能大量有大量的sh文件，所以说需要权衡利弊，自己使用了。\nbash学得并不好，也没有认真的研究，暂且记录一下，日后再做补充\n","date":"2014-12-04T01:00:00+08:00","permalink":"https://svtter.cn/p/bash-%E4%BD%BF%E7%94%A8func%E5%92%8C%E4%B8%80%E8%88%AC%E7%9A%84sh%E7%9A%84%E4%B8%8D%E5%90%8C/","title":"bash-使用func和一般的sh的不同"},{"content":" 本文出自svtter.github.io 度娘永远都不会告诉你真正的答案是什么。\n因为没有了CMCC-EDU，用上了坑爹联通，所以现在习惯于手机USB上网了。。（博主套餐流量看个技术是可以的。。)\n然后问题就来了。。CentOS7上可以安稳的使用3G但是arch似乎不支持，百度了好久也没有找到。\n后来bing 了一下iphone arch linux神奇的wiki就出来了，随后就申请了个帐号，准备在学习Linux的过程中学习英语。给wiki\n做点翻译还是可以的吧= =。\n方法很简单, 因为我用的是NetworkManager, 所以最简单而行之有效的方法是:\npacman -S libimobiledevice pacman -S usbmuxd ifuse 重启机器或者NetworkManager搞定。\n虽然无关技术以及学术痛痒，但是总感觉在Linux普及上尽了一份力= =\n","date":"2014-12-02T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/02/archlinux-%E6%94%AF%E6%8C%81iphone%E6%8F%92%E7%BA%BF3g/","title":"archlinux-支持iphone插线3G"},{"content":" 本文出自svtter.github.io 用于测试form, 上传的文件\n\u0026lt;?php // 乱码问题 // 页面设置为gb2312, 如果是utf-8, 则改为uft-8 header(\"Content-type: text/html; charset=gb2312\"); // 针对ajax, // iconv( \"UTF-8\", \"gb2312\" , $_POST[\"post\"]); //用于测试submit, 显示所有上传的变量 function test_submit() { while(list($key,$val) = each($_POST)) { echo \"$key =\u0026gt; $val\u0026lt;br /\u0026gt;\"; } } test_submit(); //保存到固定文件，重新转存 function one_file_upload($name) { // 测试单文件 if ($_FILES[$name][\"error\"] \u0026gt; ) { echo \"Error: \" . $_FILES[$name][\"error\"] . \"\u0026lt;br /\u0026gt;\"; } else { echo \"Upload: \" . $_FILES[$name][\"name\"] . \"\u0026lt;br /\u0026gt;\"; echo \"Type: \" . $_FILES[$name][\"type\"] . \"\u0026lt;br /\u0026gt;\"; echo \"Size: \" . ($_FILES[$name][\"size\"] / 1024) . \" Kb\u0026lt;br /\u0026gt;\"; echo \"Stored in: \" . $_FILES[$name][\"tmp_name\"]; } } // one_file(\"file\"); // save in a array function reArrayFiles(\u0026$file_post) { // 用于规格化输入的字符 $file_ary = array(); $file_count = count($file_post[\u0026#39;name\u0026#39;]); $file_keys = array_keys($file_post); for ($i=; $i\u0026lt;$file_count; $i++) { foreach ($file_keys as $key) { $file_ary[$i][$key] = $file_post[$key][$i]; } } return $file_ary; } // 显示上传的文件 function show($name) { if ($_FILES[$name][\u0026#39;size\u0026#39;]) { $file_ary = reArrayFiles($_FILES[$name]); foreach ($file_ary as $file) { print \u0026#39;File Name: \u0026#39; . $file[\u0026#39;name\u0026#39;] . \u0026#39;\u0026lt;br/\u0026gt;\u0026#39;; print \u0026#39;File Type: \u0026#39; . $file[\u0026#39;type\u0026#39;] . \u0026#39;\u0026lt;br/\u0026gt;\u0026#39;; print \u0026#39;File Size: \u0026#39; . $file[\u0026#39;size\u0026#39;] . \u0026#39;\u0026lt;br/\u0026gt;\u0026#39;; print \u0026#39;\u0026lt;br/\u0026gt;\u0026#39;; } } else { echo \"Files upload == 0\" . \"\u0026lt;br/\u0026gt;\"; } } show(\u0026#39;userpic\u0026#39;); show(\u0026#39;userfile\u0026#39;); // 测试服务器 function test_server() { while( list($key,$val) = each($_SERVER)) { echo \"$key=\u0026gt; $val\u0026lt;br /\u0026gt;\"; } } ?\u0026gt; ","date":"2014-12-02T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/02/php-%E6%B5%8B%E8%AF%95%E8%A1%A8%E5%8D%95%E7%9A%84php%E6%96%87%E4%BB%B6/","title":"php-测试表单的php文件"},{"content":" 本文出自svtter.github.io 想要另存一个文件名，但是vim另存的方法。。然后发现了sav这个东西。\nhelp文件中是这么描述的:\n_:sav_ _:saveas_ \\[eas\\]\\[!\\] [++opt] {file}\n用文件名 {file} 保存当前缓冲区，并设置当前缓冲区的文件\n名为 {file}。前一个名字用作轮换文件名。[!] 用以覆盖已\n存在的文件。\n如果 ‘filetype’ 为空，在写入文件前用新名字进行文件类型\n检测。\n如果写操作成功，复位 ‘readonly’。\n可见，可以利用sav来重命名当前文件，并且修改新命名的文件的功能。唯一的不足就是，我们无法通过这个操作将原来的\n文件删除(或者我们本来就不需要删除原来的文件). 这是vim的缓冲区机制决定的。\n个人认为无伤大雅，不是吗= =\n有时候wiki以及:help要比在网上百度一下好用的多 — 这个月饭都吃不起了，别跟我提VPN.\n","date":"2014-12-02T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/02/vim-%E5%8F%A6%E5%AD%98%E4%B8%BA/","title":"vim-另存为"},{"content":" 本文出自svtter.github.io 11月份就这么过去了，然后这个总结放在最先的事情里面——突然想到没有带汇编也没有带操作系统，网络书TAT.\n学习 总体学习状况算是一般吧，学习效率尚可，但是学习时间和充分利用程度，个人认为还是不够的。\n高数: 然后高数神马的复习——这个月也就4次，充其量$1/7$。。一股淡淡的忧伤。\n英语: 学习方面也是一般，背了10天的单词，完成度30%。但是也不能完全看这个——我做了一点点国外开源项目的翻译（虽然说并不\n优秀，或者收获特别大，但也是学习了是吧= =。 也算是自我安慰了，毕竟这样所谓的专业性质比较强的翻译，并不能使我的考研\n英语有很大的提高。扇贝新闻单词以后要考虑全部都看了= =。毕竟还有个出国梦呐。）\n算法: 虽说是有个蓝桥全国一等的梦想，但是眼前再次报这个比赛，主要目的还是在于督促自己学习算法。毕竟一个ACMer连\n算法都搞不好，还称什么ACMer呢= =于是乎在这个月，感觉自己在算法投入的时间还是比较充裕的，也重拾了不少东西。\n技术: 技术方面还是那个样子，痴迷Linux但是Python热度有所降低。似乎有过一次反思= =, （似乎之前提到不玩技术，好好学\n基础来着（= =具体也忘记是哪一篇了，找到再说了= =）。现在用上’archlinux’了。估计一般情况下，只要不挂我是不会再投奔\n别的发行版本了。arch明显没有插上手机启动就报upower的bug（当然CentOS也没有，这也是我为什么留下它），很多方面需要\n自己配置（也是自己从比较底层的东西学起，了解服务器），总之，收获还是比较大的。这次安装的时候总算弄明白了多重引导\ngrub的很多操作以及机制，希望在这个寒假（或者说不到寒假？），自己动手写的操作系统，有所帮助。\n从学科上讲，并没有很多更深的研究。如果非要说，就是操作系统了（笑）。并行计算的情感分析，打算如果有时间考虑做一下，\n毕竟是比较炫酷的东西（试想，倘若并行计算技术学得厉害，再给你个入侵技术，让。。后面就不说了，黑化的有些严重）。\n网络还是抽出了一天好好的看看，虽说感觉上协议搞得还是不错的，但是上课老师提问一个问题，还是没有很好的快速反映。操作\n系统就更别提了，一直想要通过自己实现一个二级文件系统来理解UNIX的磁盘管理方式，但是一直没有实现（虽说并不晚），但是\n老师一讲一说，就有些反映不过来了。～不行啊，必须努力才行。\n锻炼 抬头一看，今天花费在总结上的时间（还写了一个vim的另存方式，一个arch#3G的链接方式）真是不少。不过也算是总结了自己\n的11月份。总之，过得还是可以的。\n锻炼方面已经有些成效了= =，起码体重总算过了140，全身的肌肉质量也是”高标准”了。下一步就是继续不懈的锻炼，努力，然后\n迈向150 — 最终目的是160大关稳定。\n做一个健壮的男人吧～～哈哈。\n休息 休息的情况 — 有那么几天晚上睡得挺晚，但是发现实在是没有精力，所以现在都是11:30睡觉了，一般熄灯以后打着小灯coding一会，\n然后睡意袭来，刷刷牙就可以休息了。\n总结 就是高数学习的状态不行啊！算法虽然这个月做的比较努力，但是很明显的其他科目有所放松啊。但是这也是拦不住的，毕竟人的精力有限。\n还是要尽力完成！\n加油吧！ ","date":"2014-12-02T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/02/%E6%80%BB%E7%BB%93-2014%E5%B9%B411%E6%9C%88%E4%BB%BD%E6%80%BB%E7%BB%93/","title":"总结-2014年11月份总结"},{"content":" 本文出自svtter.github.io Pi的获取 觉得自己的一些ACMer的基本素养不够，重新翻看。\npi = 4.0 * atan(1.0)\nmath.h中的M_PI并不是ANSI C标准。验证可以使用gcc -ansi\nscanf输入格式实验 之前阅读了scanf函数的相关部分（百科），但是依然没有很好的掌握。\n现在依然没有= =。\n有时间需要重新学习一下。\n判断整数和浮点数大小 floor(m + 0.5) == m\n通过+0.5来判断m的整数值。\nfloor/ceil是数学库里提供的函数，默认gcc不会自动链接math库, 方法是(-l + 库)\ngcc -Wall myround.c -lm -o myround\n使用clock()计时 包含头文件time.h printf(\u0026quot;Time used = %.2lf\\n\u0026quot;, (double)clock() / CLOCKS_PER_SEC); 会从程序开始的时候计时（不管输入输出），所以最佳方法是echo 数据 | ./a.out\n多次使用clock()来计时的吧。。。\n重定向和fopen读取文件输入测试数据 int main() { #ifdef LOCAL freopen(\"data.in\", \"r\", stdin); freopen(\"data.out\", \"w\", stdout); #endif } 添加编译选项：-DLOCAL， 使得中间部分生效.\nfopen在linux不支持，所以不写了。\n","date":"2014-12-01T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/01/acm-%E7%99%BD%E7%9A%AE%E4%B9%A6/","title":"ACM-白皮书"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt; 在javascript函数外部定义的变量均为全局变量。\n调用jQuery, 需要把jQuery放在\u0026lt;script\u0026gt;最前。\n调用本地jQuery的代码\njQuery 目录: ../js/jquery-1.11.1.min.js/\n其他的script文件放在jquery后即可\nHTML 依据w3cschool修改\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script type=\"text/javascript\" src=\"../js/jquery-1.11.1.min.js\"\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\"text/javascript\"\u0026gt; $(document).ready(function(){ alert(\"debug!\") $(\"button\").click(function(){ $(\"p\").hide(); }); }); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;This is a heading\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;This is another paragraph.\u0026lt;/p\u0026gt; \u0026lt;button\u0026gt;Click me\u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2014-12-01T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/01/js-%E5%8F%98%E9%87%8F%E7%9B%B8%E5%85%B3-jquery%E8%B0%83%E7%94%A8/","title":"JS-变量相关-jQuery调用"},{"content":" 本文出自svtter.github.io 上传文件type=file真心丑，所以采用方法解决一下。\n中心思想是隐藏input，然后利用css定位，使其仍然可以被点击（有点欺骗的性质）\ntext需要禁止点击（使用diabled='disabled') 源代码 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /\u0026gt; \u0026lt;title\u0026gt;定义input type=\"file\" 的样式\u0026lt;/title\u0026gt; \u0026lt;style type=\"text/css\"\u0026gt; body{ font-size:14px;} input{ vertical-align:middle; margin:; padding:} .file-box{ position:relative;width:340px} .txt{ height:22px; border:1px solid #cdcdcd; width:180px;} .btn{ background-color:#FFF; border:1px solid #CDCDCD;height:24px; width:70px;} .file{ position:absolute; top:; right:85px; height:24px; filter:alpha(opacity:);opacity: ;width:70px } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\"file-box\"\u0026gt; \u0026lt;form action=\"\" method=\"post\" enctype=\"multipart/form-data\"\u0026gt; \u0026lt;input type=\u0026#39;text\u0026#39; name=\u0026#39;textfield\u0026#39; id=\u0026#39;textfield\u0026#39; class=\u0026#39;txt\u0026#39; disabled=\u0026#39;disabled\u0026#39;/\u0026gt; \u0026lt;input type=\u0026#39;button\u0026#39; class=\u0026#39;btn\u0026#39; value=\u0026#39;浏览...\u0026#39; /\u0026gt; \u0026lt;input type=\"file\" name=\"fileField\" class=\"file\" id=\"fileField\" size=\"28\" onchange=\"document.getElementById(\u0026#39;textfield\u0026#39;).value=this.value\" /\u0026gt; \u0026lt;input type=\"submit\" name=\"submit\" class=\"btn\" value=\"上传\" /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2014-12-01T01:00:00+08:00","permalink":"https://svtter.cn/2014/12/01/js-%E4%BC%98%E5%8C%96%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%B7%E5%BC%8F/","title":"JS-优化上传文件的样式"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt; 花了一些时间安装arch，记录一下注意事项。\n多重引导 安装多重引导支持\npacman -S os-prober\n更新grub\ngrub-mkconfig -o /boot/grub/grub.cfg\n写入mbr\ngrub-install --target=i386-pc --recheck /dev/sda\n图形化的网络服务 systemctl enable NetWorkManager.service\nwifi配置 如果你想使用wifi（在图形界面下），首先你要停止dhcp服务systemctl stop dhcpcd.service 开机停止运行systemctl disable dhcpcd.service 我们之所以这样，是为了保证我们的NetWorkManager正常服务。 session控制器 我选择的是gdm，原因是slim我不太会配置。\npacman -S gdm\n另外patheon在我书写这篇blog的时候，还是存在不少bug.官方的wiki在这个时候也不是很好用了。期待patheon！\n添加了官方给的patheon库，会出现一个gnome-lib的冲突\n输入法的注意事项 使用fcitx需要注意.xprofile的配置问题。\nexport GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=\"@im=fcitx\" 其他的安装情况可以看看官方的wiki\nsudoer的配置 使用pacman安装sudoer\npacman -S sudo\n编辑/etc/sudoers，取消wheel用户组的注释.\nvim配置 在gvim中，直接使用synatic on而不用判断，否则会造成代码高亮失效。\nlocate配置 安装以后发现locate命令无法使用，安装pacman -S mlocate\n另外, mark一个项目:gitbook, 很好很强大 应该涵盖了所有的我安装时候遇到的问题，如果还有什么问题，我再后续添加。\n","date":"2014-11-30T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/30/archlinux-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/","title":"archlinux-安装笔记"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt; 实验内容 消息的创建，发送，和接收。\n\u0026lt;任务\u0026gt; 使用系统调用 msgget( ), megsnd( ), msgrev( )及 msgctl()编制一长度为 1K 的消息发送和接收的程序 。\n程序设计 为了便于操作和观察结, 用一个程序为引子 , 先后fork( )两个子进程 , SERVER 和 CLIENT,进行通信。 SERVER 端建立一个 Key 为 75 的消息队列,等待其他进程发来的消息。当遇到类型为 1 的消息, 则作为结束信号,取消该队列,并退出 SERVER 。SERVER 每接收到一个消息后显示一句 “(server)received”。 CLIENT 端使用 Key 为 75 的消息队列,先后发送类型从 10 到 1 的消息,然后退出。最后的一个 消息,既是 SERVER 端需要的结束信号。CLIENT 每发送一条消息后显示一句“(client)sent”。 父进程在 SERVER 和 CLIENT 均退出后结束。 使用的函数 并非每次创建消息队列都会成功，所以重新添加-1情况的判断。\n可以使用ipcs -q命令查看\n源代码 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/ipc.h\u0026gt; #include \u0026lt;sys/msg.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #define MSGKEY 75 struct msgform { long mtype; char mtexe[100]; }msg; int msgqid, i; void CLIENT() { int i; msgqid = msgget(MSGKEY, 0777|IPC_CREAT); if( msgqid == -1) { puts(\"client error in build\"); return; } else printf(\"client qid is: %d\\n\", msgqid); for (i = 10; i \u0026gt;= 1; i --) { msg.mtype = i; printf(\"(client)sent mtype %ld.\\n\", msg.mtype); msgsnd(msgqid, \u0026msg, strlen(msg.mtexe)+1, ); } puts(\"client exit...\"); exit(); } void SERVER() { msgqid = msgget(MSGKEY, 0777|IPC_CREAT); if( msgqid == -1) { printf(\"error in build.\\n\"); return; } else printf(\"server qid is: %d\\n\", msgqid); do { msgrcv(msgqid, \u0026msg, 1030, , ); printf(\"(server)received mtype %ld.\\n\", msg.mtype); } while (msg.mtype != 1); msgctl(msgqid, IPC_RMID, ); puts(\"server exit...\"); } int main () { if(fork()) { SERVER(); wait(); } else CLIENT(); return ; } 运行结果 ","date":"2014-11-28T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/28/linux-%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/","title":"Linux-进程间的通信"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt; 利用排列找规律。\n首先利用next_permutation函数进行求排列\n#include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; #define INF 0x3f3f3f3f int a[30]; int cal(int n) { int sum = ; int i; for (i = 1; i \u0026lt;= n; i++) { /* code */ sum = abs(sum - a[i]); } return sum; } void parray(int a[], int len) { int i; for (i = 1; i \u0026lt;= len; i++) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } void cp(int a[], int b[], int n) { int i; for (i = ; i \u0026lt;= n; i++) { a[i] = b[i]; } } int main(int argc, const char *argv[]) { int i; for (i = 1; i \u0026lt;= 30; i++) { a[i] = i; } int n; int maxa[30], mina[30]; while (~scanf(\"%d\", \u0026n)) { int max = -INF; int min = INF; if (n == 1) { cout \u0026lt;\u0026lt; \"1 1\" \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \"1\" \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \"1\" \u0026lt;\u0026lt; endl; continue; } while (next_permutation(a+1, a+n+1)) { /* code */ int temp = cal(n); if (temp \u0026gt;= max) { max = temp; cp(maxa, a, n); } if (temp \u0026lt;= min) { min = temp; cp(mina, a, n); } } cout \u0026lt;\u0026lt; min \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; max \u0026lt;\u0026lt; endl; for (i = 1; i \u0026lt;= n; i++) { cout \u0026lt;\u0026lt; mina[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; for (i = 1; i \u0026lt;= n; i++) { cout \u0026lt;\u0026lt; maxa[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } return ; } 代码如上。\n可以观察出规律，然后即可AC。\n详细代码下次再写= =\nAC代码 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;cmath\u0026gt; using namespace std; int main() { int i, n; int max, min; while(~scanf(\"%d\", \u0026n)) { max = min = ; for(i = n; i \u0026gt;= 1; i--) min = abs(min - i); for(i = n-1; i \u0026gt;= 1; i--) max = abs(max - i); max = abs(max - n); printf(\"%d %d\\n\", min, max); for(i = n; i \u0026gt;1 ; i--) printf(\"%d \", i); puts(\"1\"); for(i = n-1; i \u0026gt;= 1; i--) printf(\"%d \", i); printf(\"%d\\n\", n); } return ; } 规律在代码中，很明确。\n","date":"2014-11-27T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/27/acm-zoj3789-%E6%8E%92%E5%88%97%E5%88%A9%E7%94%A8/","title":"ACM-zoj3789-排列利用"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt;\n(cplusplus)[http://www.cplusplus.com]\n介绍三个头文件 在/usr/include/stdint.h中包含着各种关于C数据类型的定义，大小等。\nunistd.h unix standard library header 这个函数库中包含read, write, gitpid等函数 stdlib.h standard library header ","date":"2014-11-27T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/27/c++%E5%AD%A6%E4%B9%A0%E5%BF%85%E5%A4%87/","title":"C++学习必备"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt; vim的部分插件记录 snipmate vim中的textmate vimwiki Vimpress : Manage wordpress blog posts from Vim calendar vimmailr.zip : Send (MAPI) mail from vim VOom ","date":"2014-11-27T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/27/vim%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/","title":"vim的相关记录"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt;\nvimer的程序世界\nlulinux\nvimscript\n","date":"2014-11-27T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/27/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%8D%9A%E5%AE%A2/","title":"有趣的博客"},{"content":"今天下午去健身。\n牛奶事件 先去了新世界陪睡在我下铺的兄弟买杯子。也是见识了伟大的坑爹商场——放了一个大大的10元标签，下面写了一个小小的某品牌牛奶。然后放在下面两种牛奶。\n在下眼力尚可，拿了没有标签的15元一杯。结账的时候才发现，也是醉了。随后付钱的时候发现了这个机智的想法——我个人认为这样做生意不会长久，不知道诸位如何作想。\n健身问题 不知罗伯特何处去也，只得我两个孤独的健身。但是今天练的着实不够理想——一方面，没有练肱二头；另一方面，感觉背部的重量太小了，不太合适。于是，决定下一次加大重量，顺便为我的健友鼓劲。\n感谢王大哥的指导！\n","date":"2014-11-26T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/26/%E5%85%B3%E4%BA%8E%E4%BB%8A%E5%A4%A9%E7%9A%84%E5%81%A5%E8%BA%AB/","title":"关于今天的健身"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt; 写在之前 maker关于线性筛素数的论文。\n做到欧拉线性筛法再做补充。(当时还写了个这？)\n关于线性筛素数 之前一直没有正视线性筛素数的问题。今天特意来写一个伪证明。如果当前的i不是素数，那么必然被之前的某个素数筛掉了。i × prime[j]。\n一个合数必然可以写成几个素数的乘积，再或者就是p×i这种形式。如果能被i×p1筛掉之后则不需要i×p2继续筛了，i×p2可以写成p1×(i×p2)\n例如12可以被6×2筛掉，之前4×3这种筛除就可以去掉。\n这种方法会不会存在没有筛掉的合数？ 不可能：i会一直到n，也就是整个范围都会包含在内。\n代码： memset(Prime, , sizeof(Prime)); memset(IsPrime, 1, sizeof(IsPrime)); for(i = 2 ; i \u0026lt;= n; i++) { if(IsPrime[i]) Prime[num++] = i; for(j = ; j \u0026lt; num \u0026\u0026 i * Prime[j] \u0026lt;= n; j++) { IsPrime[i * Prime[j]] = ; if(i % Prime[j] == ) break; } } 之前的错误在于筛素数的时候没有筛去2的倍数，所以出现后面的值错误。\n","date":"2014-11-26T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/26/%E7%AD%9B%E7%B4%A0%E6%95%B0%E6%9B%B4%E6%AD%A3/","title":"筛素数更正"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt; 难得看见一篇好文= =\n操作方法 在此学习并且记录。\n标记一个书签: mark [书签] 进入一个书签: g [书签] 输出全部标签: gs 实现原理 sudo vim /etc/profile\n也可以使用:w !sudo tee %这种方式来保存\n# mark export MARKPATH=$HOME/.marks export MARKDEFAULT=sanguo#设置你的默认书签，可以直接输入g跳转 function g { local m=$1 if [ \"$m\" = \"\" ]; then m=$MARKDEFAULT; fi cd -P \"$MARKPATH/$m\" 2\u0026gt;/dev/null || echo \"No such mark: $m\" } function mark { mkdir -p \"$MARKPATH\" local m=$1 if [ \"$m\" = \"\" ]; then m=$MARKDEFAULT; fi rm -f \"$MARKPATH/$m\" ln -s \"$(pwd)\" \"$MARKPATH/$m\" } function unmark { local m=$1 if [ \"$m\" = \"\" ]; then m=$MARKDEFAULT; fi rm -i \"$MARKPATH/$m\" } function gs { ls -l \"$MARKPATH\" | grep ^l | cut -d \u0026#39; \u0026#39; -f 13- } _completemarks() { local curw=${COMP_WORDS[COMP_CWORD]} local wordlist=$(ls -l \"$MARKPATH\" | grep ^l | cut -d \u0026#39; \u0026#39; -f 13) COMPREPLY=($(compgen -W \u0026#39;${wordlist[@]}\u0026#39; -- \"$curw\")) return } complete -F _completemarks g unmark ","date":"2014-11-26T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/26/%E4%BD%BF%E7%94%A8cd%E5%BF%AB%E9%80%9F%E5%9C%A8%E7%9B%AE%E5%BD%95%E9%97%B4%E7%A7%BB%E5%8A%A8/","title":"使用cd快速在目录间移动"},{"content":" 谈谈算法 今天上午一个团体赛，晚上一个bestcoder，水了自己一脸呵。\n究其原因，可能有中午没有休息，晚上来的太晚，没有好好吃饭等等。\n探究原因 仔细想想，最近这段时间对于学习，生活，等等一系列的事情是否有够认真努力呢？\n怕是一般情况吧= =。晚上做题的时候猛然发现之前有错的线性筛素数模版有问题，也是没有及时修正。此外，欧拉函数等等也是忘记的差不多了，太水。\n没有做好，做完的事情: 操作系统的书写还是差着不少，另外，并行计算的文档还没有成型。。总之，感觉就像是什么事情都没有做好一样。心塞。\n那么这段时间我到底干什么了呢？这个问题也是值得深究的。\n用了很多的时间在Python的学习以及Linux的学习上了。 不能说是浪费时间，但是对于ACM，对于我现在要做的事情，的确是有所偏差。(应该算是另一种娱乐吧) 此外，还学习了线性代数。但是学习的效果如何呢？是不是太慢了，或者太过于悠哉游哉了呢？ 似乎就是有点吧，可能太过于悠哉游哉了。尽管没有完成任务，但是还是觉得自己做了点东西。星期四和星期五，也是没有好好的把时间铺在算法上面，看这个看那个——用封老师的话来说，就是没出息。\n哈哈= =\n生活中缺少一股紧张的气息，所以可能做的不够。这是目前给自己找的原因。我想我需要一个时间好好的思考一下，处理一下自己究竟应该怎么处理自己的学习问题。\n如果每次都是有些遗留，或者忘记了自己本来的目的，那么真是浪费时间了。\n","date":"2014-11-22T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/22/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91/","title":"关于最近"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt;\n头文件: #include\u0026lt;unistd.h\u0026gt;\n使用方法: int pipe(int chan[2]);\n说明: pipe会建立管道，并将文件描述词通过chan返回。一般chan[0]为管道的读取端，chan[1]是写入端。\n返回值: 成功返回0，失败返回-1，错误信息保存在errno中\n错误信息:\nEMFILE 进程已用完文件描述词最大量。 ENFILE 系统已无文件描述词可用。 EFAULT 参数filedes数组地址不合法 /*============================================================================= # # Author: svtter - svtter@qq.com # # QQ : 57180160 # # Last modified: 2014-11-21 16:20 # # Filename: 管道.c # # Description: # =============================================================================*/ #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; char parent[] = \"a message from parent\"; char child[] = \"a message from child\"; int main () { int p2c[2], c2p[2]; int pid; char buf[100]; pipe(p2c); pipe(c2p); pid = fork(); if(pid \u0026gt; ) { close(c2p[]); close(p2c[1]); write(c2p[1], parent, sizeof(parent)); close(c2p[1]); read(p2c[], buf, 100); printf(\"%s\\n\", buf); close(p2c[]); } else if(pid == ) { close(p2c[]); close(c2p[1]); read(c2p[], buf, 100); printf(\"%s\\n\", buf); write(p2c[1], child, sizeof(child)); close(c2p[]); close(p2c[]); } return ; } 运行结果： ","date":"2014-11-21T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/21/linux-%E7%AE%A1%E9%81%93/","title":"Linux-管道"},{"content":" 本文出自\u0026lt;svtter.github.io\u0026gt; 使用pthread实现经典问题：生产者消费者 关于semaphore的相关信息就不再贴出来了。\n编译的时候记得-pthread选项。\n/*============================================================================= # # Author: svtter - svtter@qq.com # # QQ : 57180160 # # Last modified: 2014-10-03 20:35 # # Filename: producer_consumer.cc # # Description: # =============================================================================*/ #include \u0026lt;cstdio\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;semaphore.h\u0026gt; #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; #define N 5 #define item int // P/V操作 void P(sem_t* sem) { if(sem_wait(sem)) perror(\"P error!\"); } void V(sem_t* sem) { if(sem_post(sem)) perror(\"V error!\"); } sem_t mutex; sem_t full; sem_t empty; item buffer[N]; int i = , j = -1; void init_sem() { sem_init(\u0026mutex, , 1); sem_init(\u0026full, , ); sem_init(\u0026empty, , N); } void* producer(void *arg) { int product; while(1) { //生成随机数字 product = rand()%100; // cout \u0026lt;\u0026lt; \"producer running...\" \u0026lt;\u0026lt; endl; P(\u0026empty); P(\u0026mutex); buffer[i] = product; printf(\"producer produced %d @ %d pos\\n\", product, i); i=(i+1)%N; V(\u0026mutex); V(\u0026full); sleep(1); } } void* consumer(void *arg) { int product, temp; while(1) { // cout \u0026lt;\u0026lt; \"consumer running...\" \u0026lt;\u0026lt; endl; P(\u0026full); P(\u0026mutex); j = (j+1)%N; product = buffer[j]; V(\u0026mutex); V(\u0026empty); printf(\"Consumer consumed %d @ %d pos\\n\", product, j); sleep(3); } } int main() { //random num srand(time(NULL)); init_sem(); int error; pthread_t producer_t, consumer_t; error = pthread_create(\u0026producer_t, NULL, producer, NULL); if(error != ) printf(\"error in create producer.\\n\"); else printf(\"create producer success!\\n\"); pthread_create(\u0026consumer_t, NULL, consumer, NULL); if(error != ) printf(\"error in create consumer.\\n\"); else printf(\"create consumer success!\\n\"); pthread_join(producer_t, NULL); pthread_join(consumer_t, NULL); return ; } 运行结果 操作系统经典问题：哲学家就餐问题 mutex是c++11的新功能。记得添加C++11支持。(在运行结果中包含编译选项。)\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;mutex\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;thread\u0026gt; #include \u0026lt;semaphore.h\u0026gt; using namespace std; #define THINK(i) printf(\"ph[%d] is thinking...\\n\", i) #define EAT(i) printf(\"ph[%d] eats.\\n\", i) void P(mutex \u0026mt) { mt.lock(); } void V(mutex \u0026mt) { mt.unlock(); } void P(sem_t* sem) { if(sem_wait(sem)) perror(\"P error!\"); } void V(sem_t* sem) { if(sem_post(sem)) perror(\"V error!\"); } // 加入unistd.h出现问题，似乎与thread的兼容性比较差，于是重写 void delay() { int sum=; for(int i = ; i \u0026lt; 10000000; i++) sum += i; } mutex fork[5]; sem_t room; void init() { sem_init(\u0026room, , 4); } void philosopher (int i) { for(int j = ; j \u0026lt; 5; j++) { THINK(i); P(\u0026room); P(fork[i]); P(fork[(i+1)%5]); EAT(i); V(\u0026room); V(fork[i]); V(fork[(i+1)%5]); } } int main() { init(); thread t[] = { thread(philosopher, ), thread(philosopher, 1), thread(philosopher, 2), thread(philosopher, 3), thread(philosopher, 4), }; for(int k = ; k \u0026lt; 5; k++) t[k].join(); return ; } 运行结果 操作系统经典问题：读者写者问题 读者优先 使用了c++11的新特性thread #include \u0026lt;iostream\u0026gt; #include \u0026lt;mutex\u0026gt; #include \u0026lt;thread\u0026gt; using namespace std; mutex mt, wsem; int readcount = ; #define READ(a) cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \" is reading...\" \u0026lt;\u0026lt; endl; #define FINISH(a) cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \" finished reading.\" \u0026lt;\u0026lt; endl; #define WRITE cout \u0026lt;\u0026lt; \"writing...\" \u0026lt;\u0026lt; endl; void P(mutex \u0026mt) { mt.lock(); } void V(mutex \u0026mt) { mt.unlock(); } // 加入unistd.h出现问题，似乎与thread的兼容性比较差，于是重写 void delay() { int sum=; for(int i = ; i \u0026lt; 10000000; i++) sum += i } void read(string a) { for(int i = ; i \u0026lt; 3; i++) { P(mt); readcount++; if(readcount == 1) P(wsem); V(mt); READ(a); delay(); P(mt); readcount--; FINISH(a); if(readcount == ) V(wsem); V(mt); } } void write() { for(int i = ; i \u0026lt; 5; i++) { P(wsem); WRITE; delay(); V(wsem); } } int main() { thread reader1(read, \"svtter\"); thread reader2(read, \"sr\"); thread reader3(read, \"yym\"); thread reader4(read, \"xiaoniu\"); thread writer(write); reader1.join(); reader2.join(); reader3.join(); reader4.join(); writer.join(); return ; } 运行结果 由于可以同时阅读，所以读者reading输出可能出现少许问题。\n写者优先 使rsem中只有一个读者在等待，保证了如果有写者，写者优先写 #include \u0026lt;iostream\u0026gt; #include \u0026lt;mutex\u0026gt; #include \u0026lt;thread\u0026gt; using namespace std; #define READ(a,i) cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; i\u0026lt;\u0026lt;\" is reading...\" \u0026lt;\u0026lt; endl; #define FINR(a,i) cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; i\u0026lt;\u0026lt;\" finished reading.\" \u0026lt;\u0026lt; endl; #define WRITE(a,i) cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt;i\u0026lt;\u0026lt;\" is writing...\" \u0026lt;\u0026lt; endl; #define FINW(a, i) cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt;i\u0026lt;\u0026lt;\" finished writing...\" \u0026lt;\u0026lt; endl; void P(mutex \u0026mt) { mt.lock(); } void V(mutex \u0026mt) { mt.unlock(); } // 加入unistd.h出现问题，似乎与thread的兼容性比较差，于是重写 void delay() { int sum=; for(int i = ; i \u0026lt; 10000000; i++) sum += i; } mutex mr, wsem, rsem, mrc, mwc; int readcount = ; int writecount = ; void read(string a) { for(int i = ; i \u0026lt; 5; i++) { P(mr); P(rsem); P(mrc); readcount++; if(readcount == 1) P(wsem); V(mrc); V(rsem); V(mr); READ(a, i); P(mrc); FINR(a, i); readcount--; if(readcount == ) V(wsem); V(mrc); } } void write(string a) { for(int i = ; i \u0026lt; 3; i++) { P(mwc); writecount++; if(writecount == 1) P(rsem); V(mwc); P(wsem); WRITE(a, i); FINW(a, i); V(wsem); P(mwc); writecount--; if(writecount == ) V(rsem); V(mwc); } } int main() { thread reader1(read, \"svtter\"); thread writer1(write, \"sr\"); thread writer2(write, \"zs\"); thread writer3(write, \"yym\"); reader1.join(); writer1.join(); writer2.join(); writer3.join(); return ; } 运行结果 基本上结果就是写者写完，才会有读者阅读 ","date":"2014-11-21T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/21/linux-%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5/","title":"Linux-同步互斥"},{"content":"本文出自\u0026lt;svtter.github.io\u0026gt;\n系统调用函数说明、参数值及定义\n本文摘自老师的资料= =\n使用这些函数的时候记得将头文件unistd.h包含到程序中\n1、fork() 创建一个新进程\nint fork()\n其中返回int取值意义如下:\n0:创建子进程,从子进程返回的id值大于0:从父进程返回的子进程id值 -1:创建失败\n2、lockf(files,function,size): 用作锁定文件的某些段或者整个文件,本函数适用的头文件为:\n#include\u0026lt;unistd.h\u0026gt;\n参数定义:\nint lockf(files,function,size)\nint files,function;\nlong size;\n其中:files是文件描述符:function是锁定和解锁;1表示锁定,0表示解锁。size是锁定和解锁的字节数,若用0,表示从文件的当前位置到文件尾。\n3、msgget(key,flag): 获得一个消息的描述符,该描述符指定一个消息队列以便用于其他系统调用。\n该函数使用偷文件如下:\n#include\u0026lt;sy/types.h\u0026gt;\n#include\u0026lt;sy/ipc.h\u0026gt;\n#include\u0026lt;sy/msg.h\u0026gt;\n参数定义\nint msgget(key,flag)\nkey_tkey;\nint flag;\n语法格式:msgqid=msgget(key,flag)\n其中:msgid是该系统调用返回的描述符,失败则返回-1;flag 本身由操作允许权和控制命令值相或得到。\n如:\nIP_CREAT|0400 是否该队列应被创建;\nIP_EXCL |0400 是否该队列的创建应是互斥的;等。\nmsgsnd(id,msgp,size,flag): 发送一消息。\n该函数是用头文件如下:\n#include\u0026lt;sy/types.h\u0026gt;\n#include\u0026lt;sy/ipc.h\u0026gt;\n#include\u0026lt;sy/msg.h\u0026gt;\n参数定义\nint msgnd(id,msgp,size,flag)\nint id,size,flag;\nstruct msgbuf * msgp;\n其中:id是返回消息队列的描述符;msgp是指向用户存储区的一个构造体指针,size指示由msgp\n指向的数据结构中字符数组的长度;即消息的长度。这个数组的最大值由MSG-MAX系统可调用参数来确\n定。flag规定当核心用尽内部缓冲空间时应执行的动作;若在标志flag中末设置IPC_NOWAIT位,则当\n41该消息队列中字节数超过一最大值时,或系统范围的消息数超过某一最大值时,调用msgsnd进程睡眠。\n若是设置IPC_NOWAIT,则在此情况下,msgsnd立即返回。\nmsgrcv(id,msgp,size,type,flag): 接受一消息。\n该函数调用使用头文件如下:\n#include\u0026lt;sy/types.h\u0026gt;\n#include\u0026lt;sy/ipc.h\u0026gt;\n#include\u0026lt;sy/msg.h\u0026gt;\n参数定义\nint msgrcv(id,msgp,size,type,flag)\nint id,size,type,flag;\nstruct msgbuf * msgq;\nstruct sgbuf{long mtpe;chat mtext[];};\n语法格式:\ncount=msgrcv(id,msgp,size,type,flag)\n其中:id是用来存放欲接收消息的拥护数据结构的地址;size是msgp中数据数组的大小; type是\n用户要读的消息类型:\ntype为0:接收该队列的第一个消息;\ntype为正:接收类型type的第一个消息;\ntype为负:接收小于或等于type绝对值的最低类型的第一个消息。\nflag规定倘若该队列无消息,核心应当做什么事,如果此时设置了IPC_NOWAIT标志,则立即返回,\n若在flag中设置了MSG_NOERROR,且所接收的消息大小大于size,核心截断所接受的消息。\ncount是返回消息正文的字节数。\nmsgctl(id,cmd,buf): 查询一个消息描述符的状态,设置它的状态及删除一个消息描述符。\n调用该函数使用头文件如下:\n#include\u0026lt;sy/types.h\u0026gt;\n#include\u0026lt;sy/ipc.h\u0026gt;\n#include\u0026lt;sy/msg.h\u0026gt;\n参数定义\nint msgctl(id,cmd,buf)\nint id,cmd;\nstruct msgbuf * msgq;\nstruct msqid_ds * buf;\n其中:函数调用成功时返回0,调用不成功时返回-1。id用来识别该消息的描述符;cmd规定命令的\n类型。\nIPC_START将与id相关联的消息队列首标读入buf。\nIPC_SET为这个消息序列设置有效的用户和小组标识及操作允许权和字节的数量。\nIPC_RMID删除id的消息队列。\nbuf是含有控制参数或查询结果的用户数据结构的地址。\n附:msgid_ds结构定义如下:\nstruct msgid_ds\n{struct ipc_perm msg_perm; /许可权结构/\nshot padl[7];\n/由系统使用/\nushort onsg_qnum;\n/队列上消息数/\nushort msg_qbytes;\n/队列上最大字节数/\n42ushort msg_lspid;\n/最后发送消息的PID/\nushort msg_lrpid;\n/最后接收消息的PID/\ntime_t msg__stime;\n/最后发送消息的时间/\ntime_t msg_rtime;\n/最后接收消息的时间/\nme_t msg_ctime;\n/最后更改时间/\n};\nstruct ipc_perm\n{ushort uid;\n/当前用户id/\nushort gid;\n/当前进程组id/\nushort cuid;\n/创建用户id/\nushort cgid\n/创建进程组id/\nushort mode;\n/存取许可权/\n{shot patl;long pad2} /由系统使用/\n};\nshmget(key,size,flag): 获得一个共享存储区。\n该函数使用头文件如下:\n#include\u0026lt;sy/types.h\u0026gt;\n#include\u0026lt;sy/ipc.h\u0026gt;\n#include\u0026lt;sy/shm.h\u0026gt;\n语法格式:\nshmid=shmaget(key,size,flag)\n参数定义:\nint shmaget(key,size,flag)\nkey_t key;\nint size,flag;\n其中:size是存储区的字节数,key和flag与系统调用msgget中的参数含义相同。\n附:\n操作允许权\n八进制数\n用户可读 00400\n用户可读 00200\n小组可读 00040\n小组可读 00020\n其他可读 00004\n其他可读 00002\n控制命令 值\nIPC_CREAT\n0001000\nIPC_EXCL\n0002000\n如:shmid=shmget(key,size,(IPC_CREAT|0400));\n创建一个关键字为key,长度为size的共享存储区。\nshmat(id,addr,flag): 从逻辑上将一个共享存储区附接到进程的虚拟地址空间上。\n该函数调用使用头文件如下:\n#include\u0026lt;sy/types.h\u0026gt;\n43#include\u0026lt;sy/ipc.h\u0026gt;\n#include\u0026lt;sy/msg.h\u0026gt;\n参数定义:\nchar * shmat(id,addr,flag)\nint id,flag;\nchar * addr;\n语法格式:virtaddr=shmat(id,addr,flag)\n其中:id是共享存储区的标识符,addr是用户要使用共享存储区附接的虚地址,若addr是0,系统\n是否对应用户规定的地址做舍入操作。如果flag中设置了shm_rnd即表示操作系统在必要时舍去这个地\n址。如果设置了shm_rdonly,即表示只允许读操作。viraddr是附接的虚地址。\nshmdt(addr): 把一个共享存储区从指定进程的虚地址空间分开。\n调用该函数使用头文件:\n#include\u0026lt;sy/types.h\u0026gt;\n#include\u0026lt;sy/ipc.h\u0026gt;\n#include\u0026lt;sy/mhm.h\u0026gt;\n参数定义:\nint shmdt(addr)\nchar * addr\n其中,当调用成功时,返回0值,调用不成功,返回-1,addr是系统调用shmat所返回的地址。\n10、shmctl(id,cmd,buf):\n对与共享存储区关联的各种参数进行操作,从而对共享存储区进行控制。\n调用该函数使用头文件:\n#include\u0026lt;sy/types.h\u0026gt;\n#include\u0026lt;sy/ipc.h\u0026gt;\n#include\u0026lt;sy/shm.h\u0026gt;\n参数定义:\nint shmctl(id,cmd,buf)\nint id,cmd;\nstruct shmid_ds * buf;\n其中:调用成功返回0,否则返回-1。id为被共享存储区的标识符。cmd规定操作的类型。规定如下:\nIPC_STAT:返回包含在指定的shmid相关数据结构中的状态信息,并且把它放置在用户存储区中的_but\n指针所指的数据结构中。执行此命令的进程必须有读取允许权。\nIPC_SET:对于指定的shmid,为它设置有效用户和小组标识和操作存取权。\nIPC_RMID:删除指定的shmid以及与它相关的共享存储区的数据结构。\nSHM_LOCK:在内存中锁定指定的共享存储区,必须是超级用户才可以进行此项操作。\nBuf是一个用户级数据结构地址。\n附:\nshmid_ds\n{struct ipc_perm shm_perm;\n/允许权结构/\nint shm_segsz;\n/段大小/\nint padl;\n/由系统使用;/\nushort shm_lpid;\n/最后操作的进程id;/\nushort shm_cpid;\n/创建者的进程id;/\nushort shm_nattch;\n/当前附界数;/\n44short pad2;\n/由系统使用;/\ntime_t shm_atime;\n/最后附接时间/\ntime_t shm_dtime;\n/最后段接时间/\ntime_t shm_ctime;\n/_最后修改时间*/\n}\nsignal(sig,function): 允许调用进程控制软中断信号的处理。\n头文件为:\n#include\u0026lt;signal.h\u0026gt;\n参数定义:\nsignal(sig,function);\nint sig;\nvoid(*func)();\n其中:sig的值是:\nSIGHVP 挂起\nSIGINT 键盘按^c键或break键\n键盘按quit键\nSIGQUIT\nSIGILL 非法指令\nSIGIOT IOT指令\nSIGEMT EMT指令\nSIGFPE 浮点运算溢出\nSIGKILL 要求终止进程\nSIGBUS 总线错\n段违例\nSIGSEGV\nSIGSYS 系统调用参数错\nSIGPIPE 向无读者管道上写\n闹钟\nSIGALRM\n软件终结\nSIGTERM\n用户定义信号\nSIGUSRI\n第二个用户定义信号\nSIGUSR2\nSIGCLD 子进程死\nSIGPWR电源故障\nfunction的解释如下:\nSIG_DEL:缺省操作。对除SIGPWR和SIGCLD外所有信号的缺省操作是进程终结对信号\nSIGQUIT,SIGILL,SIGTRA,SIGIOT,SIGEMT,SIGFPE,SIGBUS,SIGSEGV和SIGSYS它产生一内存映\n像文件。\nSIG_IGN:忽视该信号的出现。\nFunction:在该进程中的一个函数地址,在核心返回用户态时,它以软中断信号的序号作为参数调用\n该函数,对除了信号SIGILL,SIGTRAP和SIGTWR以外的信号,核心自动地重新设置软中断信号处理程序\n的值为SIG_DEL,一个进程不能捕获SIGKILL信\n","date":"2014-11-21T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/21/linux%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0%E7%AE%80%E4%BB%8B/","title":"Linux系统函数简介"},{"content":"新建python_start_up_file文件 # python startup file import readline import rlcompleter import atexit import os # tab completion readline.parse_and_bind(\u0026#39;tab: complete\u0026#39;) # history file histfile = os.path.join(os.environ[\u0026#39;home\u0026#39;], \u0026#39;.pythonhistory\u0026#39;) try: readline.read_history_file(histfile) except ioerror: atexit.register(readline.write_history_file, histfile) del os, histfile, readline, rlcompleter 在$HOME/.profile文件中写入\nexport PYTHONSTARTUP=$HOME/.python_start_up_file\n小注： 可以使用py3compile来编译文件，然后使用python3+文件名来运行\n","date":"2014-11-21T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/21/python%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/","title":"python的自动补全"},{"content":"为了简化blog的使用写的python脚本，用来简化自己的操作= =\n更新了一下。\n最新的代码在coding.net上\n#!/usr/bin/env python2 # coding: UTF-8 import sys import os # 博客目录 blog_dir = \u0026#39;/home/svitter/svtter.github.io/source/_posts\u0026#39; def help(): \u0026#39;\u0026#39;\u0026#39;output help information\u0026#39;\u0026#39;\u0026#39; print \u0026#39;-n: new blog\u0026#39; print \u0026#39;-g: Generate and push\u0026#39; print \u0026#39;-h: help\u0026#39; if len(sys.argv) \u0026lt; 2: print \u0026#39;no option\u0026#39; help() else: if sys.argv[1].startswith(\u0026#39;-\u0026#39;): # 改变工作目录 os.chdir(blog_dir) option = sys.argv[1][1:] if option == \u0026#39;n\u0026#39;: os.system(\"hexo n \" + sys.argv[2]) os.system(\"gvim \" + sys.argv[2] + \".md\") elif option == \u0026#39;g\u0026#39;: os.system(\u0026#39;hexo g\u0026#39;) os.system(\u0026#39;hexo d\u0026#39;) os.chdir(\u0026#39;/home/svitter/svtter.github.io\u0026#39;) os.system(\u0026#39;. update\u0026#39;) elif option == \u0026#39;h\u0026#39;: help() elif option == \u0026#39;dir\u0026#39;: print blog_dir elif option == \u0026#39;e\u0026#39;: os.system(\u0026#39;gvim \u0026#39; + blog_dir) else: print \u0026#39;no such command.\u0026#39; else: help() ","date":"2014-11-19T01:00:00+08:00","permalink":"https://svtter.cn/p/python-%E4%BD%BF%E7%94%A8hexo%E7%9A%84python%E8%84%9A%E6%9C%AC/","title":"Python-使用hexo的python脚本"},{"content":"这个题目的总结就是不作不会死- -好端端的暴力我非要用个bfs。\n看见自己wrong了还以为是哈希的问题- =\n题意 p1+p2+p3 = n，$p1 \u0026lt;= p2 \u0026lt;= p3$ 输出符合条件的组数 输入输出 给100组n，输出组数 分析 只有3个数，暴力解就可以，注意循环终止条件。 AC代码 #include \u0026lt;iostream\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long int #define MEM(a) memset(a, 0, sizeof(a)) #define MEMM(a) memset(b, -1, sizeof(b)) #define DEB(x, n) cout \u0026lt;\u0026lt; (x) \u0026lt;\u0026lt; \" \" \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl; // 字符串处理 #define SL(a) strlen(a) #define SCM(a, b) strcmp(a, b) #define SCP(a, b) strcpy(a, b) // 输入函数 #define RS(s) scanf(\"%s\", (s)) #define RI(a) scanf(\"%d\", \u0026(a)) #define PI(r) printf(\"%d\\n\", (r)) #define PS(s) printf(\"%s\\n\", (s)) #define RII(a, b) scanf(\"%d%d\", \u0026(a), \u0026(b)) #define RIII(a, b, c) scanf(\"%d%d%d\", \u0026(a), \u0026(b), \u0026(c)) // 应对ONLINE_JUDGE, 读入读出处理 // 利用bash脚本调试数据 #ifdef ONLINE_JUDGE #define FOI(file) 0 #define FOW(file) 0 #else #define FOI(file) freopen(file,\"r\",stdin); #define FOW(file) freopen(file,\"w\",stdout); #endif // 定义常用工作变量 // #define MAXN 20010 int Prime[10010]; bool IsPrime[MAXN]; int num; void init() { int i, j; num = ; IsPrime[] = IsPrime[1] = 1; for(i = 2 ; i \u0026lt; MAXN ; i ++) { if(!IsPrime[i]) Prime[num++]=i; for(j = ; j \u0026lt; num \u0026\u0026 i * Prime[j] \u0026lt; MAXN ; j ++) { IsPrime[i * Prime[j]] = 1; if(!(i % Prime[j])) break; } } } int counter; void bfs(int cur, int n, int id) { int i; int temp; for(i = cur; Prime[i] \u0026lt;= n; i++) { temp = n - Prime[i]; if(temp == \u0026\u0026 id == 3) { counter++; return; } else if(temp \u0026gt; \u0026\u0026 id \u0026lt; 3) bfs(i, temp, id+1); else if(temp \u0026lt; ) break; } } void debug(bool a[], int len) { for(int i = ; i \u0026lt;len ; i++) { if(!a[i]) cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \" \" ; // cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \" \"; } cout \u0026lt;\u0026lt; endl; } int main() { //FOI(\"input\"); //FOW(\"output\"); //write your programme here init(); // debug(IsPrime, 100); int i, j; int n; int temp; int temp2; while(~scanf(\"%d\", \u0026n)) { counter = ; // bfs(0, n, 1); for(i = ; Prime[i] \u0026lt;= n; i++) { temp = n - Prime[i]; for(j = i; Prime[j] \u0026lt;= temp; j++) { temp2 = temp - Prime[j]; if(temp2 \u0026lt; Prime[j]) break; if(!IsPrime[temp2]) counter++; else if(temp2 \u0026lt; ) break; } } printf(\"%d\\n\", counter); } return ; } ","date":"2014-11-16T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/16/acm-hdu5104-water/","title":"ACM – hdu5104-water"},{"content":"最近都是用gcc+vim写代码，昨天突然写个代码算法出个逻辑bug，因为用了大量递归调用，DEB半天出不来也是醉了，于是\n学习一下gdb——之前也是勉强使用过，但是明显感觉不爽阿。。所以这次好好学习，记录一下。\n目前我能用到的几个命令：\n选择调试文件 \u0026lt;shell\u0026gt;: gdb \u0026lt;file\u0026gt; 或者进入gdb以后，使用 断点 显示断点 (gdb): info break 添加静态断点 (gdb): b[reak] + 行数/函数名 (可以用tab补全) 添加条件断点 条件为真，则在断点处停止\n– (gdb): b addr if condition\n删除断点 删除编号为1的断点, 如果不加参数，会删除所有断点\n– (gdb): delete breakpoint 1\n启用/禁用断点 (gdb): disable breakpoint 1 (gdb): enable breakpoint 1 运行 开始运行 (gdb):r 继续 (gdb):c 单步调试 不进入单步执行\n– (gdb):n\n进入的单步\n– (gdb):s[tep\n显示变量 以变量为var为例\n输出var的值 (gdb):p var 输出上一个求得值 (gdb):p 输出历史记录中值 (gdb):p $[num] 输出变量的类型 (gdb):whatis p 调用函数 (gdb):p add(a, b) 数组 输出a后面的十个元素\n– (gdb):p a@10\n设置运行参数 (gdb):set args -b -x (gdb):show args 参见大牛的部分：(陈皓的gdb讲解)[http://blog.csdn.net/haoel/article/details/2880]\n二、设置观察点（WatchPoint）\n观察点一般来观察某个表达式（变量也是一种表达式）的值是否有变化了，如果有变化，马上停住程序。我们有下面的几种方法来设置观察点： watch \u0026lt;expr\u0026gt; 为表达式（变量）expr设置一个观察点。一量表达式值有变化时，马上停住程序。 rwatch \u0026lt;expr\u0026gt; 当表达式（变量）expr被读时，停住程序。 awatch \u0026lt;expr\u0026gt; 当表达式（变量）的值被读或被写时，停住程序。 info watchpoints 列出当前所设置了的所有观察点。 TAG 直接输入\u0026lt;CR\u0026gt;，执行上一条命令 ","date":"2014-11-16T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/16/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95/","title":"使用gdb调试"},{"content":"问题 之前在gvim中一直无法使用中文，格外痛苦，后来使用了vim-ibus插件之后，可以在vim中使用中文了，但是依然不能在gvim中使用，一直以为是两个软件冲突的\n问题，现在终于解决了。\ngvim version: vim-X11 ibus version: 1.6 解决方案 问题出在：使用的vim插件中有插件与ibus冲突，但是奈何找不到X11的log（应该可以找到，找到再说。。） 排查方式比较简单，使用:PluginInstall,:PluginClean即可(考虑到我使用vundle管理插件) 去除相应的插件即可(比如现在冲突的是auto-pairs)。如果不想去除冲突插件，可以考虑使用vim-ibus，这个在shell下是可以使得很多冲突减少的。 可能auto-pairs在不久的将来就会修复这个bug，请在具体环境下排查 ","date":"2014-11-15T01:00:00+08:00","permalink":"https://svtter.cn/p/%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E5%9C%A8centos%E4%B8%8B%E7%9A%84gvim%E4%B8%AD%E4%BD%BF%E7%94%A8ibus%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/","title":"解决无法在CentOS下的gvim中使用ibus输入中文"},{"content":"还未动笔\n","date":"2014-11-14T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/14/linux-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/","title":"Linux-存储管理"},{"content":"本文出自\u0026lt;svtter.github.io\u0026gt;\n进程的创建 用于进程的创建。fork()的作用是，从当前位置创建一个子进程，并执行。fork的返回值为子进程的pid\n#include \u0026lt;stdio.h\u0026gt; void main() { int p1, p2; if (p1 = fork()) //父进程返回1， 子进程返回0 putchar(\u0026#39;b\u0026#39;); else { if(p2 = fork()) putchar(\u0026#39;c\u0026#39;); else putchar(\u0026#39;a\u0026#39;); } } 运行结果 进程的控制 在这段代码中使用了lockf, 和wait函数。作用是什么呢？\nlockf顾名思义是锁定file. lockf(1, 1, 0)锁定资源，lockf(1, 0, 0)释放资源。\nwait作用为等待子进程的返回信息。wait中的signal用于接受进程的返回信号，即exit(0)中的0\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;wait.h\u0026gt; // 利用lockf(1, 1, 0)锁定输出设备 // lockf(1, 0, 0)解锁输出设备 int main() { int p1, p2, i; if(p1 = fork()) { lockf(1, 1, ); for(i = ; i \u0026lt; 500; i++) printf(\"parent%d\\n\", i); lockf(1, , ); wait(); //confirm the father killed after child exit(); } else { if(p2 = fork()) { lockf(1, 1, ); for(i = ; i \u0026lt; 500; i++) printf(\"son %d\\n\", i); lockf(1, , ); wait(); // exit(); } else { lockf(1, 1,); for(i = ; i \u0026lt; 500; i++) printf(\"grandchild%d\\n\", i); lockf(1, ,); exit(); } } } 运行结果 ","date":"2014-11-14T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/14/linux-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/","title":"Linux-进程管理"},{"content":"TAGS python的注释必须与代码相隔两个空格 #与注释语言间必须有一个空格 #!/usr/bin/python # FileName: backup.py import os import time # 1. The files and directories be backed up are specified in a list. source = [\u0026#39;/home/svitter/bin\u0026#39;, \u0026#39;/home/svitter/tmp\u0026#39;] # 2. The backup must be stored in a main backup directories. target_dir = \u0026#39;/home/svitter/backup/\u0026#39; # 3. The files are backed up into a zipfile # 4. The name of the zip archieve is the current date and time target = target_dir + time.strftime(\u0026#39;%Y_%m_%d_%H_%M_%S\u0026#39;) + \u0026#39;.zip\u0026#39; # 5. we use the zip command to put the files in a zip archive zip_command = \"zip -qr \u0026#39;%s\u0026#39; %s\" % (target, \u0026#39; \u0026#39;.join(source)) # Run the backup if os.system(zip_command) == : print \u0026#39;Successful backup to\u0026#39;, target else: print \u0026#39;Backup FAILED\u0026#39; ","date":"2014-11-14T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/14/python-%E4%B8%80%E4%B8%AApython%E7%9A%84%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/","title":"Python – 一个Python的备份脚本"},{"content":"Linux用户和用户组 简单解释： 文件权限 连接数 文件所有者 文件所属用户组 文件大小 文件最后被修改的时间 文件名 -rw-r–r– 1 root root 42304 Sep 4 18:26 install.log 第一列 第一个字符代表文件类型，如果是d代表目录，-代表文件，l代表链接文件，b代表可供存储的接口设备，c代表串行设备，如键盘鼠标等。 三组分别代表本用户的权限，同用户组的权限，和其他用户组的权限 root的权限无限大 权限对于目录，文件是不同的； 第二列 表示有多少文件名连接这个节点。i-node. 第三列 第四列 第五列 这个文件的容量大小，默认单位为B 第六列 表示这个文件的创建日期或者最近修改日期。 tag 使用ls -l --full-time可以显示完整。 改变文件属性和权限 使用如下命令：\n– chgrp\n– chmod\n– chown\n因为太过熟悉，这里就不记录了。 基本文件权限的数字 权限 二进制 r:4 100 w:2 010 x:1 001 tag cp是不会改变用户权限，因此要另外给予权限。 chown root:root install.log可以使用如此权限来更改用户名，用户的所属。 chown root.root install.log亦可 TAG: 如果想让系统语言变成英文，可以到/etc/sysconfig/i18n修改，使得LANG这个变量变成en_US即可 ","date":"2014-11-12T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/12/linux-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/","title":"Linux -基础学习笔记-2"},{"content":"关于PHP的类 http://php.net/manual/zh/language.oop5.php\n（本来想顺便学学nodejs的，但是谁有那么多精力啊。。还有js学的像狗屎一样= =）\n\u0026lt;?php class Test { private $name; // 可以定义类的访问权限 public function __construct($name) //构造函数 { $this-\u0026gt;name = $name; } public function echoname { echo $this-\u0026gt;name; } } $a = new Test(\"This is a.\"); $a-\u0026gt;echoname(); 构造函数重载我不会，有时间再更新吧。。 先记录这些。 ","date":"2014-11-12T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/12/php-php%E7%9A%84%E7%B1%BB/","title":"php-php的类"},{"content":"目录的问题 由于SELinux造成的httpd中的目录无法访问，可以使用\nchcon -R -t httpd_user_content_t \u0026lt;path to web files\u0026gt; chcon -R -t httpd_sys_content_t \u0026lt;path to web files\u0026gt; mark一个网站()[http://www.jb51.net/os/RedHat/1303.html]\n文件夹访问权限 以上方法解决了SELinux的问题，但是我的目录依然没有访问权限。\n然后看了一下文件的基本属性: -rw-r--r--. 1 root root 21 11月 11 12:27 index.html\n应该也是没有问题的。\n再查SElinux 随后使用cat /var/log/messages探索一番，依然没有找到问题所在——SELinux没有报错。\n防火墙的问题？不是阿。因为我本身是在内网访问，防火墙应该不会出问题。\n那应该是什么问题呢？\n配置文件 终于在配置文件中找到了问题。\napache在进入2.4.*以后，不再使用Allow from all这种形式了，取而代之，使用Require from granted这种格式。晕，就是在此处，\u0026lt;Directory\u0026gt;没有设置好，坑了好久阿。。\n相对的我这几天一直都在deepin下开发——因为apt-get得到的apache之前比较习惯，此外deepin没有se也是省了很多功夫。不过通过这一次，总算是把问题解决了！\n鼓励！\n","date":"2014-11-10T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/10/linux-selinux-httpd%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/","title":"Linux-SELinux-httpd无法访问"},{"content":"修复grub-rescue模式 今天删除了一个多余的分区，结果grub找不到原来的启动mod了，也是学习了。\ngrub-rescue模式中只能用ls, insmod, set root= , set prefix= ,这几个命令。\n使用ls显示所有的磁盘。 然后ls (hd0, X)/boot/grub2 查看启动的盘符。 set root=(hd0, X); set prefix=(hd0, X)/boot/grub2 insmod normal normal 发现没搞定，重启还是不幸。\n使用# grub2-install /dev/sda\n然后就搞定= =\n","date":"2014-11-10T01:00:00+08:00","permalink":"https://svtter.cn/p/%E4%BB%8Egrub-rescue%E4%BF%AE%E5%A4%8D/","title":"从grub rescue修复"},{"content":"有时候我们用yum update更新了系统，但是选项中【一般gnome-session】的’安装更\n依然固执的在那里我们应该怎么办？\n打开’软件更新’即可。\n","date":"2014-11-09T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/09/linux-centos-%E5%AE%89%E8%A3%85%E6%9B%B4%E6%96%B0%E5%B9%B6%E9%87%8D%E5%90%AF/","title":"Linux – CentOS-安装更新并重启"},{"content":"Linux基础学习笔记 以鸟哥的私房菜为基础进行学习。\n用Linux有接近两年的时间了，还是很水，于是决定从头开始，认真学习基础。\ndate的基础用法 date +%H:%M 显示19:54 date +%Y/%m/%d 显示2014/11/09 使用man进行查询 man + (command)\n一般，2代表系统内核可调用的函数与工具，3代表一些常用的函数，7代表惯例与协议，例如Linux文件系统，网络协议，ASCcode，8代表系统管理员可用命令，9\n代表与kernel有关的文件。\nman的操作方式和vi差不多，而info的操作方式则更接近于emacs（= =莫非又是两大党的斗争？！）\n数据同步写入磁盘：sync 在Linux中为了避免过多对磁盘的I/O，所以很多操作并未马上写入硬盘，所以使用sync进行写入。对于root而言，则是更新整个磁盘的数据了。\nshutdown命令关机 立即关机shutdown -h now\n定时关机shutdown -h 20:25 —会在20:25分关机，如果超过了这个时间使用这个命令，则会在第二天的这个时间关机。\n再过10分钟关机shutdown -h +10\n警告所有用户shutdown -k 'this system will reboot.'\n重启，并警告所有用户shutdown -r +30 'The system will reboot.'\n三种执行等级 因为CentOS7使用systemd启动，所以可能并不支持。\nrun level 0 关机 run level 3 纯命令行 run level 5 含有图形界面 run level 6 重启 因此，可以使用init 0来关闭系统。\n","date":"2014-11-09T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/09/linux-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%281%29/","title":"Linux – 基础学习笔记(1)"},{"content":"题意 找出子序列和，因为数字过大，mod 1 000 000 007\n输入输出 2 //test case 1 2 3 1 2 3 2 20 分析 本来很简单的题目，但是因为读错了题意做了好久，还没AC\n计算每个数字出现的次数，然后相加，记得不要溢出即可。\n规律$C_i = (i+1) * (N – i)$ _i从0开始\n按照如下方法分析:\n假设1 2 3 4, 则1生成的序列为：\n1 2 3 4 1 2 3 1 2 1 此时N为4， i为0, 1的次数为N, 2的次数为N-1, 3的次数为N-2， 4的次数为N-3.\n对应2则为:\n2 3 4 2 3 3 此时情况可以用表来表示\ni 1 2 3 1 N N-1 N-2 N-3 2 N-1 N-2 N-3 3 N-1 N-2 N-3 可以观察出规律\nAC_code #include \u0026lt;iostream\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026lt;bitset\u0026gt; using namespace std; // 大数，内存处理 #define INF 0x3f3f3f3f #define ll long long // 定义常用工作变量 // #define MAXN 447010 #define MAXN 1000000007 ll tmp; int main() { int T, n; cin \u0026gt;\u0026gt; T; ll sum, ci; while(T--) { scanf(\"%d\", \u0026n); sum = ; for(int i = ; i \u0026lt; n; i++) { scanf(\"%lld\", \u0026tmp); sum += tmp %MAXN * (i+1) %MAXN *(n-i) %MAXN ; sum = sum %MAXN; } printf(\"%lld\\n\", sum%MAXN); } return ; } ","date":"2014-11-08T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/08/acm-hdu5086-water/","title":"ACM – hdu5086-water"},{"content":"今天想用wget+正则写一个简单的dict，结果不幸失败了。。\n一方面是正则表达式学习不到家，另一方面是wget命令没有习得精华。\nwget 下载到指定的目录wget -P youwant/ (URL)\n利用-P就可以下载到指定目录了，奈何从man里面找找了半天，还是自己的英语不过关阿。\nbash 可以使用grep以及sed, awk进行格式的匹配。发现鸟哥的私房菜看的还是太粗，也有一段时间没有好好看了。\n有时间重新补充一下这篇博客，先处理一下算法题目。\n","date":"2014-11-08T01:00:00+08:00","permalink":"https://svtter.cn/p/bash%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/","title":"bash相关知识"},{"content":"这篇文章一直没有写，因为并行计算的报告写的比较潦草。此外，没有实现fork。\n文件的源代码贴在 https://github.com/Svtter/workspace/tree/master/parallel/enum_sort\n实现了Java, MPI, openmp, pthread, win32, MFC, .NET 的并行枚举排序，测试机是双核四线程的ThinkpadE430.\nMPI的环境是archlinux . openmpi\n贴一个MPI的源代码, 运行结果都在源代码对应的文件夹中保存，这里就不贴了。\n/*============================================================================= # # Author: svtter - svtter@qq.com # # QQ : 57180160 # # Last modified: 2014-11-02 17:08 # # Filename: enum_sort_MPI.cpp # # Description: # =============================================================================*/ #include \"mpi.h\" #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; #define MAXN 10000 #define PMAX 1000 void build(int a[], int b[]) { srand(time(NULL)); for(int i = 1; i \u0026lt;= MAXN; i++) a[i] = b[i] = random()%PMAX; } //serial enum sort double serial_enum_sort(int a[], int at[]) { double t1, t2; t1 = MPI_Wtime(); int k, i, j; for(i = 1; i \u0026lt;= MAXN; i++) { k = 1; for(j = 1; j \u0026lt;= MAXN; j++) if(a[i] \u0026gt; a[j] || (a[i] == a[j] \u0026\u0026 i \u0026gt; j)) k++; at[k] = a[i]; } t2 = MPI_Wtime(); return (t2 - t1); } // 用于调试数组 void debug(int a[], int len) { for(int i = 1; i \u0026lt;= len; i++) { fprintf(stderr, \"%5d\", a[i]); } fprintf(stderr, \"\\n\"); } int a[MAXN+10], b[MAXN+10], at[MAXN+10], bt[MAXN+10]; void ensort(int rank[], int \u0026myid, int \u0026numprocs) { int i, j, k; for(i = myid; i \u0026lt;= MAXN; i+=numprocs) { k = 1; for(j = 1; j \u0026lt;= MAXN; j++) { if(b[i] \u0026gt; b[j] || (b[i] == b[j] \u0026\u0026 (i \u0026gt; j))) k++; } rank[i] = k; } } int main(int argc, char *argv[]) { int myid, numprocs; int namelen; char processor_name[MPI_MAX_PROCESSOR_NAME]; double c1 = , c2; double start, end; int i; MPI_Init(\u0026argc, \u0026argv); MPI_Comm_rank(MPI_COMM_WORLD, \u0026myid); MPI_Comm_size(MPI_COMM_WORLD, \u0026numprocs); MPI_Get_processor_name(processor_name, \u0026namelen); // fprintf(stderr, \"Hello world! Processor %d of %d on %s\\n\", myid, numprocs, processor_name); //serial if(myid == ) { build(a, b); c1 = serial_enum_sort(a, at); cout \u0026lt;\u0026lt; \"original array is: \" \u0026lt;\u0026lt; endl; debug(a, 100); cout \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \"serial sorted array is: \" \u0026lt;\u0026lt; endl; debug(at, 100); cout \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \"serial cost time is: \" \u0026lt;\u0026lt; c1 \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; endl; } int con[numprocs][MAXN+10]; int pt[MAXN+10]; memset(con ,, sizeof(con)); memset(pt,, sizeof(pt)); // int **con = new int*[numprocs]; // for(int i = 0; i \u0026lt; numprocs; i++) // con[i] = new int[MAXN+10]; start = MPI_Wtime(); // P0 send b to ALL MPI_Bcast(b, MAXN+10, MPI_INT, , MPI_COMM_WORLD); ensort(pt, myid, numprocs); // Gather MPI_Gather(pt, MAXN+10, MPI_INT, con[myid], MAXN+10, MPI_INT, , MPI_COMM_WORLD); // if(myid == 0) // { // fprintf(stderr, \"myid: %d\\n\", myid); // fprintf(stderr, \"con: %d\\n\", myid); // debug(con[1], 100); // fprintf(stderr, \"pt: %d\\n\", myid); // debug(pt, 100); // fprintf(stderr, \"\\n\"); // } if(myid == ) { int j; // for(i = 0; i \u0026lt; numprocs; i++) // { // printf(\"i: %d\\n\", i); // for(j = 1; j \u0026lt;= MAXN; j++) // printf(\"%5d\", con[i][j]); // puts(\"\"); // } // rank[k] = i for(i = ; i \u0026lt; numprocs; i++) for(j = 1; j \u0026lt;= MAXN; j++) bt[con[i][j]] = b[j]; // fprintf(stderr, \"bt: \\n\"); cout \u0026lt;\u0026lt; \"parallel sorted array is: \" \u0026lt;\u0026lt; endl; debug(bt, 100); cout \u0026lt;\u0026lt; endl; end = MPI_Wtime(); c2 = end - start; fprintf(stderr, \"parallel cost time is: %lf\\n\", c2); fprintf(stderr, \"加速比为： %lf\\n\", c1 / c2); } // for(i = 0; i \u0026lt; numprocs; i++) // delete con[i]; // delete con; MPI_Finalize(); return ; } 并行计算非常有趣，有时间肯定会再在这条道路上探寻…\n","date":"2014-11-08T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/08/n%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%B9%B6%E8%A1%8C%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%BA%8F/","title":"n种方法实现并行枚举排序"},{"content":"拾遗 使用q:查看历史命令 @*执行寄存器命令 高亮特定文件 \" for ROS: augroup filetypedetect au BufRead,BufNewFile *.launch set filetype=xml augroup END ","date":"2014-11-08T01:00:00+08:00","permalink":"https://svtter.cn/p/vim-tips/","title":"vim-tips"},{"content":"定义 在给定线性序集中n个元素和一个整数k，要求找出n个元素中第k小的数。\n方法一 线性时间选择，可以使用堆排序，这样就可以在$O(n+klog_n)=O(n)_的时间内找到的k小的元素。\n方法二 使用快速排序中的分块算法，对所需要选择的数组分块，分完以后再在剩余的部分中，寻找(k – 减去分块的大小)\n代码如下:\ntemplate \u0026lt;class Type\u0026gt; int Partition(Type a[], int p, int r) { int i = p; j = r+1; Type x = a[p]; while(1) { while(a[++i] \u0026lt; x); while(a[--j] \u0026gt; x); if(i \u0026gt;= j) break; swap(a[i], a[j]); } a[p] = a[j]; a[j] = x; return j; } template \u0026lt;class Type\u0026gt; int RandomPartition(Type a[], int p, int r) { int i = Random(p, r); swap(a[i], a[p]); return Partition(a, p, r); } template \u0026lt;class Type\u0026gt; Type RandomizedSelect(Type a[], int p, int r, int k) { if(p == r) return a[p]; int i = RandomPartition(a, p, r); j = i - p + 1; // 分块的大小 if(k \u0026lt;= j) return RandomizedSelect(a, p, i, k); else return RandomizedSelect(a, i+1, r, k-j); } 但是此方法在最差的情况下需要$n^2$的时间，比如在寻找最小元素时，总是在最大的元素划分。\n尽管如此，平均效率还是不错的。\n方法三 我还是比较喜欢直接看代码= =\ntemplate \u0026lt;class Type\u0026gt; Type Select(Type a[], int p, int r, int k) { if (r - p \u0026lt; 75) { sort(\u0026a[p], \u0026a[r]); return a[p+k-1]; } for(int i = 0; i \u0026lt;= (r-p-4)/5; i++) Type x = Select(a, p, p+(r-p-4)/5, (r-p-4)/10); int i = Partition(a, p, r, x); j = i - p + 1; if(k \u0026lt;= j) return Select(a, p, i, k); else return Select(a, i+1, r, k-j) } ","date":"2014-11-08T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/08/%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9/","title":"线性时间选择"},{"content":"本来今天想要学习一下操作系统的相关内容，奈何书都没带，猛然想起自己还有一个自己动手写操作系统的梦想，于是拿出这本书重新研究以下。\n对于第一章节的写一个简单的boot写出来以后也是着实兴奋一把，不过也是要记下相关的信息。\n安装NASM 首先我的操作系统是Ubuntu\n使用sudo aptitude install nasm来安装nasm\n然后就是简单的asm代码 org 07c00h ;汇编程序加载到7c00处 mov ax, cs ;cs 无法直接加载到ds，通过ax(x86基础) mov ds, ax mov es, ax call DispStr ;调用显示字符串例程 jmp $ ;无限循环 DispStr: mov ax, BootMessage mov bp, ax mov cx, 16 mov ax, 01301h mov bx, 000ch mov dl, int 10h ret BootMessage: db \"Hello, OS world!\" times 510-($-$$) db ;使用0填充剩下的空间 dw 0xaa55 ;结束标志 编译 nasm boot.asm -o boot.bin\n写入软盘 然后这个时候可爱的作者让我们写到软盘里= =\n这个时候很多朋友都会\ndd if=boot.bin of=/dev/sdx\n比如一开始的我= =\n我写到了8G的U盘里\n其实我们可以用virtualbox来搞定\n建立一个虚拟机——我选的是ubuntu_32bit——我觉得挺麻烦的，所以就不换了，因为我成功了。\n在设置，存储中，点添加软盘控制器。\n然后我们使用dd命令建立一个虚拟软盘。\ndd if=boot.bin of=floppy.img count=2880\n然后选择虚拟软盘。。选择floppy.img然后启动看。\n然后就可以看到可爱的Hello,OS world!\n本文参考： Linux 下制作虚拟软盘镜像 http://blog.163.com/wascm@126/blog/static/9385027200851905148317/\n","date":"2014-11-08T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/08/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/","title":"自己动手写操作系统阅读笔记（一）"},{"content":"在php中 使用preg_match(\u0026quot;/\u0026lt;title\u0026gt;(.*)\u0026lt;title\u0026gt;/isU\u0026quot;)\n/****/表示中间的部分匹配。 (.*)表示匹配的部分。 i表示忽略大小写 s使点号能匹配所有字符包括换行符 U最短匹配。注意U一定要大写才有效果 正则经常用于js 判断手机号，邮箱等，通过简单的办法来实现强大的功能\n符号解释 匹配前面的子表达式零次或多次。例如，zo\\* 能匹配 \u0026#8220;z\u0026#8221; 以及 \u0026#8220;zoo\u0026#8221;。\\* 等价于 匹配前面的子表达式一次或多次。例如，\u0026#8217;zo+\u0026#8217; 能匹配 \u0026#8220;zo\u0026#8221; 以及 \u0026#8220;zoo\u0026#8221;，但不能匹配 \u0026#8220;z\u0026#8221;。+ 等价于 匹配前面的子表达式零次或一次。例如，\u0026#8221;do(es)?\u0026#8221; 可以匹配 \u0026#8220;do\u0026#8221; 或 \u0026#8220;does\u0026#8221; 中的\u0026#8221;do\u0026#8221; 。? 等价于 n 是一个非负整数。匹配确定的 n 次。例如，\u0026#8217;o n 是一个非负整数。至少匹配n 次。例如，\u0026#8217;o m 和 n 均为非负整数，其中n \u003c= m。最少匹配 n 次且最多匹配 m 次。例如，\u0026#8221;o 当该字符紧跟在任何一个其他限制符 (*, +, ?, 字符 描述 \\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\\n’ 匹配一个换行符。序列 ‘\u0026amp;#8217; 匹配 “\u0026amp;#8221; 而 “(” 则匹配 “(“。 ^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。 $ 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。 * + ? ? . 匹配除 “\\n” 之外的任何单个字符。要匹配包括 ‘\\n’ 在内的任何字符，请使用象 ‘[.\\n]’ 的模式。 [xyz] 字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。 [^xyz] 负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。 [a-z] 字符范围。匹配指定范围内的任意字符。例如，\u0026rsquo;[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。 [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，\u0026rsquo;[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。 \\d 匹配一个数字字符。等价于 [0-9]。 \\D 匹配一个非数字字符。等价于 [^0-9]。 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL。 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。 \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。 \\t 匹配一个制表符。等价于 \\x09 和 \\cI。 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 \\w 匹配包括下划线的任何单词字符。等价于\u0026rsquo;[A-Za-z0-9_]’。 [xyz] 字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。 [^xyz] 负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。 [a-z] 字符范围。匹配指定范围内的任意字符。例如，\u0026rsquo;[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。 [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，\u0026rsquo;[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。 \\d 匹配一个数字字符。等价于 [0-9]。 \\D 匹配一个非数字字符。等价于 [^0-9]。 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL。 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。 \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。 \\t 匹配一个制表符。等价于 \\x09 和 \\cI。 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 \\w 匹配包括下划线的任何单词字符。等价于\u0026rsquo;[A-Za-z0-9_]’。 \\W 匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。 x|y 匹配 x 或 y。例如，z|food 能匹配 “z” 或 “food”。(z|f)ood 则匹配 “zood” 或 “food”。 \\W 匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。 例如，z|food 能匹配 “z” 或 “food”。(z|f)ood 则匹配 “zood” 或 “food”。 ","date":"2014-11-07T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","title":"正则表达式"},{"content":"搭建BLOG的心得 + 2014年10月份的总结 blog心得 要不是登录到sinaapp上看看我都忘记了自己还有一个用typecho搭建的blog，但是凡事一旦牵扯到git之类的东西，总会觉得高大上一点。\n然后伤心的觉得，似乎我辛辛苦苦搭建的hexo， 似乎没个鸟用。心塞。\n主要问题在于：\n这家伙对于之前的写的文章，修改起来不够方便，还要回去慢慢找，不如直接用点击来的快捷。 但是从另一个角度上说，如果是命令行玩家，grep几次自然也就完全没有问题了。 当然，也有好处，最大的好处就是方便，推送，不用花钱等。 还有各种玩头，就不一一说明了。。反正大家仁者见仁，智者见智。 相比之下typecho就会轻松很多（因为发现也是不支持一些东西，我又懒得弄），__JustWriting__嘛。。不想再用了，虽然说也是很爽，但是用了php搞得和静态页面的一个项目似的，总是感觉怪怪的。\n之前给__Justwriting__写了一点点称不上脚本的脚本(仅LINUX下好用, 毕竟bash用的挺XX，python也没时间学。)，但是事情一多，自然也是有点想要放弃git pull request的意思了。\n再想想，__JustWriting__最大的优点在于，可以把我们的代码备份上去，不像hexo，今天下午手残的我 + 神经短路的我一个不小心弄丢了所有的代码，真心是哭了。。。\n另外，也是需要各种grep的阿。\n其实本来想吐槽关于找不到文章的问题，不过在写着写着的过程中想到了可以使用搜索这种东西。。倒是我自己有些不动脑了。\n写一个对自己来讲简单的比较：\n如果有问题，就当我说错了，最好是指出来= =\n项目 JustWriting hexo typecho(wordpress) 命令行推送 AC AC 直接界面编辑 AC 代码部署 简单 更简单 一般 是否使用googleapi YES 想起来我再加上 外观上都难说，typecho我没有做过什么优化，JustWriting因为用的是不稳定（也不知道也没有稳定版本，^_^）版本，所以删掉了。有兴趣倒是可以看看hexo。\n当然我也知道基本上转到cnblogs这边估计也就没人看了。。。本身也上不了主页，哈。\n另说句没什么关系的话，googleapi的相关东西态坑了。\n我这么写blogs会不会呼我熊脸阿= =blogs老套的博客模板。。唉。\n10月份的总结 9：30倒是不适合闲扯了= =\n关于记录表 看看自己的记录表吧。11月的记录表依然是空的（因为会写一些私人的东西，所以就不喜欢开源了。。）。最近也是没有改过每日计划（也是大致按照那么进行的）\n本来想要把自己的计划python化的，但是时间上实在是腾不出来——今天去健身了，也是没有复习考研数学，英语（本来写个回宿舍看看，想想倒也不现实）。\n10月份的记录表__高数__一栏全是空的（= =）就没复习过！那天和学长一起讨论关于考研的问题才发现自己走偏了方向（blog的方面也是有些走偏）。\n想要深造所以不太想太早的工作，但是技术的世界丰富多彩而有趣（喜欢写代码的我注定屌丝一生= =）。\n有今天记录情况不全，后面的备注表我也没有写什么，大概是比较忙，之后也没有补充上吧。现在看起来倒是想不通了。。。\n写了完成情况的部分也因为转换了位置，看起来不怎么方便（还是需要改善阿），需要把记录表放在记录表里面，然后查看的时候再做相关处理。\n看看记录表，因为系统不稳定的问题着实花费了不少时间（10.02），另外10.03买的奶是9.23产的- -。 10.06就想看操作系统Linux的源码，结果到了现在也没有看。\nSG函数倒是明白了，不过对应的题目没有做多少= =。最近大部分的时间都在搞并行计算(呼呼的写代码感觉比较爽)， 并行计算的作业也是只剩下文档了，算是搞定了把。\n日记还是写的那些东西，不过效率不太行阿。。。以后的备注倒是可以自由一点。\n出现的问题：\n英语空出好几天没有背。\n高数没复习\n锻炼有好好坚持。\n早睡没有好好坚持。\n关于这个月 也没什么别的东西了，主要就是谨记学长的教诲，转移对于一些对于我最终目标无意义的事情的注意力，主要放在数学，英语上面。晚自习的内容以后放在这个上面。晚上回去以后可以写日记，\n或者补充一下或者使得库更加简单等。白天的时间主要用于学习其他的科目，抓紧时间。以后每天都要好好的写日记。\n就这样吧！\n努力努力！ ","date":"2014-11-05T01:00:00+08:00","permalink":"https://svtter.cn/2014/11/05/%E6%80%BB%E7%BB%93-2014%E5%B9%B410%E6%9C%88%E6%80%BB%E7%BB%93/","title":"总结-2014年10月总结"}]