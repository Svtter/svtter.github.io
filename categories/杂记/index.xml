<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杂记 on Svtter&#39;s Blog</title>
    <link>https://svtter.cn/categories/%E6%9D%82%E8%AE%B0/</link>
    <description>Recent content in 杂记 on Svtter&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 20 Jul 2018 01:00:00 +0800</lastBuildDate>
    <atom:link href="https://svtter.cn/categories/%E6%9D%82%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title># 解决 DD 之后 Mac 搞不定 USB 的问题</title>
      <link>https://svtter.cn/2018/07/20/%23%E8%A7%A3%E5%86%B3dd%E4%B9%8B%E5%90%8Emac%E6%90%9E%E4%B8%8D%E5%AE%9Ausb%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 20 Jul 2018 01:00:00 +0800</pubDate>
      <guid>https://svtter.cn/2018/07/20/%23%E8%A7%A3%E5%86%B3dd%E4%B9%8B%E5%90%8Emac%E6%90%9E%E4%B8%8D%E5%AE%9Ausb%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;搜索了一通（可能是关键字找的不对），发现 Mac 对于磁盘异常的解决方案着实不多，因此用以下粗暴方法解决；&lt;/p&gt;&#xA;&lt;p&gt;输入：&lt;/p&gt;&#xA;&lt;div class=&#34;codehilite&#34;&gt;&#xA;  &lt;pre&gt;&lt;span&gt;&lt;/span&gt;diskutil list&#xA;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;找到所需的 &lt;code&gt;/dev/disk4&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后运行&lt;/p&gt;&#xA;&lt;div class=&#34;codehilite&#34;&gt;&#xA;  &lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;随便什么文件 &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/disk4&#xA;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;此后再用&lt;code&gt;disk utility.app&lt;/code&gt;进行格式化等等即可。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;后来发现这个方法搞定的U盘往往出现一些诡异的问题，比如说在 Windows 的不同版本下无法读取，因此最好还是重新修复一下分区表。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs洗脑</title>
      <link>https://svtter.cn/2016/04/06/emacs%E6%B4%97%E8%84%91/</link>
      <pubDate>Wed, 06 Apr 2016 01:00:00 +0800</pubDate>
      <guid>https://svtter.cn/2016/04/06/emacs%E6%B4%97%E8%84%91/</guid>
      <description>&lt;div class=&#34;codehilite&#34;&gt;&#xA;  &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;; This gives an introduction to Emacs Lisp in 15 minutes (v0.2d)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 英文原作者: Bastien / @bzg2 / http://bzg.fr&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 中文翻译: iamxuxiao&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 如何安装 Emacs &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Debian: apt-get install emacs (or see your distro instructions)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; MacOSX: http://emacsformacosx.com/emacs-builds/Emacs-24.3-universal-10.6.8.dmg&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Windows: http://ftp.gnu.org/gnu/windows/emacs/emacs-24.3-bin-i386.zip&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; More general information can be found at:&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; http://www.gnu.org/software/emacs/#Obtaining&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 免责声明：&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Going through this tutorial won&amp;#39;t damage your computer unless&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; you get so angry that you throw it on the floor. In that case,&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; I hereby decline any responsability. Have fun!&lt;/span&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;启动Emacs,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;缓冲区和工作模式==&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 第一步首先启动Emacs: (在windows中可以双击emacs图标，在Linux中可以输入% emacs &amp; )，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 然后在键盘上键入q 跳过系统欢迎的信息，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 先观察在Emacs屏幕的底部，会给出一堆关于当前的工作情况的信息，其中灰色的一行叫做状态行，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 在其中你会发现 *scratch* 的字样，这表示你当前的缓冲区(buffer)的名字。&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 缓冲区也叫做工作区，在Emacs中打开一个文件，实际只是在Emacs中构造该文件的一个副本，放到缓冲区中，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 在Emacs中对该文件的编辑也是针对该副本的编辑，唯有保存改动时，Emacs才会把缓冲区中的内容在复制到原文件中去。&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 状态行下面的那行，叫做辅助输入区(minibuffer),该minibuffer用于显示计算结果，以及和用户做交互。&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 如何切换Emacs的工作模式 &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Emacs有各种各样功能各异的模式，工作模式的含义其实就是Emacs对当前的文本编辑工作&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 更加的敏感，比如高亮和缩进，并且支持一些特殊的命令。&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 为了实验本教程中的lisp命令，我们要让Emacs工作在lisp-interaction-mode工作模式下，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 这个模式可以让我们在缓冲区中和Emacs进行互动，并且直接执行Lisp命令,得到结果。&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 进入lisp-interaction-mode的方法： 把光标移动到辅助输入区，键入M-x lisp-interaction-mode &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 然后回车。&lt;/span&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;表达式&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;变量和函数&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;==&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 冒号在Lisp中表示注释&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 在Elisp中做运算，调用函数的最简单的方式是&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; (function arg1 arg2) &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 这相当于通常的function(arg1,arg2)，下面的表达式，对两个数字进行加法运算&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Elisp中表达式可以通过括号来嵌套&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 在lisp-interaction-mode模式中，我们可以直接计算一个表达式,计算的方法是&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; ^ 把光标放在这里，并且键入Ctrl-j (之后将简写成C-j)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; C-j是一个快捷命令，在后台，该快捷键将调用求值命令，并且把计算的结果&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 插入到当前的缓冲区中&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 如果不希望Emacs在缓冲区中插入计算结果，我们还可以在表达式的末尾使用C-x C-e组合键&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; C-x C-e的意思是: 先按下Ctrl-x 再按下Ctrl-e &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 这个命令会让Emacs在辅助缓冲区，也就是Emacs窗口的最底部那行显示计算结果&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; ELisp中的赋值函数是是setq，下面的表达式给变量my-name赋值&#34;Bastien&#34;&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Bastien&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; ^ 把光标停在这里，再键入C-x C-e&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 下面insert函数的作用是在光标所在出插入字符Hello&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello!&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; ^ 把光标停在这里，再键入C-x C-e&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; insert函数还可以两个常量字符，比如&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello&#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34; world!&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; insert函数还可以接受变量作为参数，我们之前已经给my-name变量赋过值了&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 所以下面命令的输出结果是 &#34;Hello, I am Bastien&#34;&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello, I am &#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; defun命令用来定义一个函数,语法是&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; (defun 函数名 (参数列表) (函数体))&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello, I am &#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; ^ 把光标停在这里，再键入C-x C-e 执行defun命令来定义函数&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 通过defun命令，你已经在Emacs中安装了这个hello函数，这个函数就成为了Emacs的一部分，知道你退出Emacs或者改变hello的定义&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 从下面开始，我们将不再提醒读者使用C-x C-e来定义函数和执行ELisp指令&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 在Elisp中直接输入函数的名称就是调用该函数。&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 下面的命令的输入结果是: Hello, I am Bastien&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 前面定义的hello函数不接受任何参数,过于简单，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 现在我们重新定义hello函数，让它接受一个参数name。 &lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello &#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 然后调用新的hello函数，并且提供一个参数。&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 下面命令的输出结果是&#34;Hello you&#34;&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;you&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;progn,let和交互式函数==&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 执行switch-to-buffer-other-window命令，将在在一个新的窗口中打开一个buffer&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 该buffer命名叫做 test, 并且把光标移到新的buffer的窗口中。&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;*test*&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 要回到原来的buffer中，可以使用鼠标点击原来的buffer&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 或者使用组合键 C-x o &lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; C-x o的意思是: 先按下Ctrl-x 再按下o&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 如果要执行一系列的指令，可以使用流程函数progn，把函数命令连接起来.&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 下面的命令,先打开一个新的buffer,再执行hello函数，该hello函数的参数是&#34;you&#34;&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;progn&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;*test*&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;you&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 如果要清空一个buffer,可以调用erase-buffer函数。下面的命令先清空test buffer,再调用hello函数做打印&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;progn&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;*test*&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;erase-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;there&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 在这一系列的质量后面再添加调用一个other-window函数，这样在hello函数被调用完毕之后&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 光标自动回到之前的buffer窗口中&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;progn&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;*test*&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;erase-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;you&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;other-window&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; let函数用来做局部变量的定义 下面的一系列命令中&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; let函数首先定义local-name变量的值为“you”&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 然后接着执行括号中其它的语句块部分，这个功能和progn类似&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;local-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;you&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;*test*&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;erase-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;local-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;other-window&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; format函数可以用做格式化的输出 其中%s表示该s的地方将被之后提供的一个字符串,即visitor替换&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; \n表示换行&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello %s!\n&#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;visitor&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 现在我们利用format函数来改进之前定义的hello函数&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello %s!\n&#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 执行这个函数结果是&#34;Hello you&#34;，并且光标换到下一行&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;you&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 下面我们再设计一个greeting函数，该函数接受一个参数name,&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 在函数体的内部又使用了let函数，给一个局部变量your-name赋值&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 最后把参数和局部变量格式化的打印出来&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;your-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Bastien&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello %s!\n\nI am %s.&#34;&lt;/span&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;your-name&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 局部变量&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 执行greeting函数，并提供&#34;you&#34;字符串作为参数&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;you&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; read-from-minibuffer函数提供和用户交互的功能，这个函数可以帮助Elisp程序从用户处得到输入&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-from-minibuffer&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Enter your name: &#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 比如如果我们希望greeting函数能够从用户处得到姓名，并且做打印格式化的欢迎信息。&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 可以先调用read-from-minibuffer在minibuffer中提示用户输入姓名，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 然后把得到的结果赋给局部变量your-name，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 最后insert函数在当前buffer中插入格式化的输出&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;from-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;your-name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-from-minibuffer&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Enter your name: &#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello!\n\nI am %s and you are %s.&#34;&lt;/span&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;from-name&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 格式化输出参数1&lt;/span&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;your-name&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 格式化输出参数2&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 执行这个函数&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Bastien&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 再稍加改进greeting 把结果打印在新的buffer中&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;from-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;your-name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-from-minibuffer&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Enter your name: &#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;*test*&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;erase-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello %s!\n\nI am %s.&#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;your-name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;other-window&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 执行这个函数&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Bastien&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;列表和综合实例&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;==&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Lisp中使用括号构造列表，使用setq给变量赋值。&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 下面的命令先构造一个列表，再把这个列表赋给list-of-names变量&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;list-of-names&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;Sarah&#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Chloe&#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Mathilde&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; ^这里的单引号表示这是一个列表&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 如果想要得到列表中的第一个元素，可以使用car函数&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;list-of-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 如果想要得到列表中的除第一个元素以外的其它元素，可以使用cdr函数&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;list-of-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 以后push函数可以在列表的头部插入新的元素，所以下面的命令将改变list-of-name中元素的个数&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Stephanie&#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;list-of-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; mapcar函数对列表中的把列表中的每一个元素分别取出来，赋给hello函数&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;hello&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;list-of-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 重新定义greeting函数，在一个新的，清空的buffer中，对list-of-names列表中的每一个元素，调用hello函数&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 调用完毕之后，再让光标回到原的buffer中&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;*test*&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;erase-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;hello&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;list-of-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;other-window&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;执行这个函数，我们将得到一个名叫test的buffer，其中的内容是&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Hello Stephanie!&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Hello Sarah!&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Hello Chloe!&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Hello Mathilde!&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 暂时先不要关闭这个buffer!后面还有用！ &lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;greeting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 下面我们对buffer做一些更有意思的事情！&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 定义一个replace-hello-by-bonjour函数，顾名思义，就是把hello替换成bonjour&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 该函数首先把光标移到一个叫做test的buffer中&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 再把光标移到该buffer的开头&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 从头开始搜索字符串Hello,并且替换成Bonjour&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 结束之后在把光标移会到一开始的buffer中。&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;replace-hello-by-bonjour&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;*test*&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;goto-char&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;point-min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;该函数把光标移到buffer的开头&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;search-forward&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;replace-match&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Bonjour&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;other-window&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 其中 (search-forward &#34;Hello&#34;) 在当前的buffer中做前向搜索&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; (while x y) 当x 的条件满足时执行y指令 ，当x返回nil时，while循环结束&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 执行这个函数 替换test buffer中的hello&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;replace-hello-by-bonjour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; test buffer中的结果如下&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Bonjour Stephanie!&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Bonjour Sarah!&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Bonjour Chloe!&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Bonjour Mathilde!&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 在minibuff中，还会有一条错误信息 &#34;Search failed: Hello&#34;.&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 把(search-forward &#34;Hello&#34;)一句换成如下就不会有错误信息了&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; (search-forward &#34;Hello&#34; nil t)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 其中 nil参数表示 搜索的区域不加限制，直到buffer结束&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 其中t参数指示search-foward函数 跳过错误信息 直接退出&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 新hello-to-bonjour如下：&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hello-to-bonjour&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;*test*&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;erase-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 对list-of-names列表中的每个元素 使用hello函数&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;hello&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;list-of-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;goto-char&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;point-min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 搜索Hello替换成Bonjour&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;search-forward&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello&#34;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;replace-match&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Bonjour&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;other-window&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 执行这个函数&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hello-to-bonjour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 下面的boldify-names 函数 ，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 首先把光标挪到名叫test的buffer的开头，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 然后使用regular expression 搜索 “Bonjour + 其它任何内容” 的pattern，&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 然后对找到的字符加粗。 &lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;boldify-names&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;*test*&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;goto-char&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;point-min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;re-search-forward&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Bonjour \\(.+\\)!&#34;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-text-properties&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;match-beginning&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;返回匹配模式中，最先匹配的位置&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;match-end&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;返回最后匹配的位置&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;face&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;bold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;other-window&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 执行这个函数 &lt;/span&gt;&#xA;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boldify-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;帮助和参考==&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 在Emacs中我们可以通过如下的方式得到变量和函数的帮助信息&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; C-h v a-variable RET&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; C-h f a-function RET&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; 下面的命令将打开整个Emacs Manual&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; C-h i m elisp RET&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;;&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Emacs Lisp 教程&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; Thanks to these people for their feedback and suggestions:&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; - Wes Hardaker&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; - notbob&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; - Kevin Montuori&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; - Arne Babenhauserheide&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; - Alan Schmitt&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; - LinXitoW&lt;/span&gt;&#xA;&lt;span class=&#34;c1&#34;&gt;;; - Aaron Meurer&lt;/span&gt;&#xA;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>傻瓜函数式编程</title>
      <link>https://svtter.cn/2016/03/30/%E5%82%BB%E7%93%9C%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 30 Mar 2016 01:00:00 +0800</pubDate>
      <guid>https://svtter.cn/2016/03/30/%E5%82%BB%E7%93%9C%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;p&gt;这篇文章是转载的，讲的如何进行函数式编程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>安腾Linux下使用笔记.md</title>
      <link>https://svtter.cn/2016/03/24/%E5%AE%89%E8%85%BElinux%E4%B8%8B%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0-md/</link>
      <pubDate>Thu, 24 Mar 2016 01:00:00 +0800</pubDate>
      <guid>https://svtter.cn/2016/03/24/%E5%AE%89%E8%85%BElinux%E4%B8%8B%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0-md/</guid>
      <description>&lt;p&gt;在Linux下是没有一个合适的安腾客户端的（烟大）&lt;/p&gt;&#xA;&lt;p&gt;因此利用虚拟机来实现这个问题&lt;/p&gt;&#xA;&lt;h2 id=&#34;需要的环境&#34;&gt;需要的环境&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;win7 iso&lt;/li&gt;&#xA;&lt;li&gt;virtualbox&lt;/li&gt;&#xA;&lt;li&gt;wproxy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;&#xA;&lt;p&gt;安装好win7以后（设置什么，自己百度吧），设置网络为桥接。然后查询一下自己网卡的Mac地址（Linux下），点高级设置，将高级设置的Mac地址更改为Linux的Mac地址。&lt;/p&gt;&#xA;&lt;p&gt;进入以后，安装安腾客户端。&lt;/p&gt;&#xA;&lt;h2 id=&#34;方法&#34;&gt;方法&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;打开wproxy，代理设置中，选择ip为本机的ip（Windows下），打开代理。&lt;/li&gt;&#xA;&lt;li&gt;然后在Linux中，将代理服务器设置为Windows的ip即可&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;&#xA;&lt;p&gt;桥接（Bridge）模式可以这样理解，主机和虚拟机都作为一个独立的机器在互联网中。因此，仅仅是虚拟机上网，主机也是无法连接到网络的，因此需要在Win上安装代理服务器，提供网络服务。这里其实还可以用ss等著名的代理软件，wproxy并不是必须的。本人也不保证wproxy的安全性。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
