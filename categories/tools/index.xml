<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools on Svtter's Blog</title><link>https://svtter.cn/categories/tools/</link><description>Recent content in Tools on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 12 May 2024 08:55:42 +0800</lastBuildDate><atom:link href="https://svtter.cn/categories/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Logseq as Documentation</title><link>https://svtter.cn/p/use-logseq-as-documentation/</link><pubDate>Sun, 12 May 2024 08:55:42 +0800</pubDate><guid>https://svtter.cn/p/use-logseq-as-documentation/</guid><description>&lt;p>logseq 是一个非常好用的笔记工具。我们之前已经介绍过关于 logseq 的内容。如果想要了解 logseq，可以看我之前的&lt;a class="link" href="https://svtter.github.io/post/2023-12-18-how-to-use-logseq/" target="_blank" rel="noopener"
>文章&lt;/a>。&lt;/p>
&lt;p>在本文中，我们介绍如何将 logseq 作为软件的、项目的文档，以及为什么。&lt;/p>
&lt;h2 id="why">WHY
&lt;/h2>&lt;p>对于 python 开发者，传统的文档系统有几个，&lt;a class="link" href="https://mkdocs.org" target="_blank" rel="noopener"
>mkdocs&lt;/a>，&lt;a class="link" href="https://https://docs.readthedocs.io/en/stable/" target="_blank" rel="noopener"
>readthedocs&lt;/a>。这些文档系统很好用，可以采用纯文本，通过 git 来管理，并且支持富文本，包括markdown 以及 rst。&lt;/p>
&lt;p>笔者对于开源项目的文档，有几个假设：&lt;/p>
&lt;ol>
&lt;li>开源项目的文档，要放在代码仓库里。&lt;/li>
&lt;li>文档的变更需要能够追溯。我们可以借助 git 实现。&lt;/li>
&lt;li>较好的浏览体验&lt;/li>
&lt;li>开源，以此来保证工具的未来持续可用&lt;/li>
&lt;/ol>
&lt;p>因此，我们选用 logseq 直接作为开源项目的文档，以及文档系统。logseq 能够很好的支持不同的文件同步，以及借助 git 实现历史追溯。添加图片也不是难事。&lt;/p>
&lt;p>使用 logseq 最大的优势在于其双向连接，以及较好的全文搜索。相比之下，mkdocs 以及 readthedocs，虽然功能强大，但是编辑能力相对弱一些。&lt;/p>
&lt;h2 id="howto">HOWTO
&lt;/h2>&lt;p>想要使用 logseq 作为文档系统，只需要在 logseq 中点击添加图谱，然后在 git repository 中，添加到 &lt;code>docs/&lt;/code>目录下即可。&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://svtter.cn/images/logseq-doc.png"
loading="lazy"
alt="logseq-doc.png"
>&lt;/li>
&lt;/ul>
&lt;p>添加完成后，可以单独创建一个&lt;code>[[HOME]]&lt;/code>页面，并且收藏，来让用户能够快速找到 HOME 页。对于其他的开发者，也可以通过双向连接来快速找到想要找到的概念。&lt;/p>
&lt;p>之后，如果开发者需要修改文档，只需要在 logseq 中进行修改，然后提交到 git 中即可。&lt;/p>
&lt;h2 id="结">结
&lt;/h2>&lt;p>本文中我们讨论了如何使用 logseq 作为软件项目的文档，简单描述了使用其作为文档的优越性。&lt;/p>
&lt;p>当然，使用 logseq 也会引入新的问题。最大的问题是，用户如果不使用 logseq，就完全看不到文档了。除此之外，logseq 的页面公开也不是特别方便。
这些问题应该有对应的解决方案。在这里就不赘述了。&lt;/p></description></item><item><title>How to Use Logseq</title><link>https://svtter.cn/p/how-to-use-logseq/</link><pubDate>Mon, 18 Dec 2023 11:49:12 +0800</pubDate><guid>https://svtter.cn/p/how-to-use-logseq/</guid><description>&lt;p>logseq 是一种新型的知识工具。开源，免费（暂时），可以自己管理数据。&lt;/p>
&lt;h3 id="概念">概念
&lt;/h3>&lt;p>logseq 底层数据结构使用了 markdown。因此，每次创建新的 tag 或者&lt;code>[[]]&lt;/code>的时候，都可以认为创建了一个新的 page。在这里基础上，来进一步理解 logseq。&lt;/p>
&lt;h3 id="definition">Definition
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://logseq.com/blog/about" target="_blank" rel="noopener"
>关于&lt;/a>&lt;/li>
&lt;li>#tags: 标签，啥时候都能用；使用后要追加解释。&lt;/li>
&lt;/ul>
&lt;h3 id="problems">Problems
&lt;/h3>&lt;p>问题清单。&lt;/p>
&lt;h4 id="目录是什么">目录是什么？
&lt;/h4>&lt;p>&lt;code>#Contents&lt;/code>目录是全局的，用于查看所有文档的工具&lt;/p>
&lt;h4 id="如何使用插件">如何使用插件？
&lt;/h4>&lt;p>设置好 logseq 的代理服务器，即可使用。&lt;/p>
&lt;p>我推荐的插件有:&lt;/p>
&lt;p>&lt;img src="https://svtter.cn/images/logseq-plugins-list.png"
loading="lazy"
alt="logseq"
>&lt;/p>
&lt;ul>
&lt;li>git 用来管理同步的笔记&lt;/li>
&lt;li>goto today 用于快速定位到今天&lt;/li>
&lt;li>todo 用于管理待办事项&lt;/li>
&lt;li>calendar 把 logseq 转换成日历工具&lt;/li>
&lt;li>toc 用于生成目录&lt;/li>
&lt;/ul>
&lt;h3 id="usage">Usage
&lt;/h3>&lt;ul>
&lt;li>使用 logseq 整理论文&lt;/li>
&lt;li>右上角三个点，可以增强 logseq
&lt;ul>
&lt;li>Use plugins：插件可以增强 logseq 的功能&lt;/li>
&lt;li>Use theme：主题可以让 logseq 的可读性变得更好&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="references">References
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/450069864" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/450069864&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Mellow Config</title><link>https://svtter.cn/p/mellow-config/</link><pubDate>Thu, 09 Apr 2020 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/mellow-config/</guid><description>&lt;p>Mellow is an transparent proxy tools could run on Windows and Ubuntu.&lt;/p>
&lt;h2 id="install">Install
&lt;/h2>&lt;p>Mellow install on Windows is simple. Here&amp;rsquo;s the introduction of install on Ubuntu.&lt;/p>
&lt;p>Download Mellow from &lt;a class="link" href="https://github.com/mellow-io/mellow/releases" target="_blank" rel="noopener"
>github release page&lt;/a>&lt;/p>
&lt;h2 id="config">Config
&lt;/h2>&lt;p>Mellow&amp;rsquo;s config is shown on its README. When the mellow not work, follow the &lt;code>Possible way&lt;/code> section.&lt;/p>
&lt;h2 id="possible-way">Possible way
&lt;/h2>&lt;p>Here&amp;rsquo;re the Ubuntu config.&lt;/p>
&lt;p>You need to disable the &lt;code>systemd-solved&lt;/code> and disable auto-update &lt;code>/etc/resolve.conf&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl disable systemd-sovled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl stop systemd-sovled
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>edit the &lt;code>/etc/NetworkManager/NetworkManager.conf&lt;/code>, add &lt;code>dns=none&lt;/code> to &lt;code>[main]&lt;/code> section.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[main]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dns=none
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[ifupdown]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then reboot and start mellow again, it&amp;rsquo;ll work.&lt;/p></description></item><item><title>gollum 书写 wiki</title><link>https://svtter.cn/2018/11/15/gollum-%E4%B9%A6%E5%86%99-wiki/</link><pubDate>Thu, 15 Nov 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/2018/11/15/gollum-%E4%B9%A6%E5%86%99-wiki/</guid><description>&lt;p>使用 gollum 书写文档（github, gitlab, wiki)。Gollum 是通过 gitlab 发现的东西，可以把 gitlab 的 wiki 文档放在本地进行书写，对于“小”的wiki，以及API文档实在是再方便不过了。个人感觉比 Sphinx 更加容易上手。&lt;/p>
&lt;h2 id="显示-toc">显示 TOC
&lt;/h2>&lt;p>&lt;code>[[_TOC_]]&lt;/code>&lt;/p>
&lt;h2 id="安装-gem">安装 gem
&lt;/h2>&lt;p>ruby-full, ruby-dev&lt;/p>
&lt;h2 id="切换-aliyun-mirror">切换 aliyun mirror
&lt;/h2>&lt;p>上网搜就行。&lt;figure class="wp-block-embed">&lt;/p>
&lt;div class="wp-block-embed__wrapper">
https://gems.ruby-china.com/
&lt;/div>&lt;/figure>
&lt;h2 id="安装-gollum">安装 gollum
&lt;/h2>&lt;p>&lt;code>gem install gollum&lt;/code>&lt;/p>
&lt;h2 id="gollum-wiki">gollum wiki
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/gollum/gollum/wiki" target="_blank" rel="noopener"
>https://github.com/gollum/gollum/wiki&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="similar-things">similar things&lt;figure class="wp-block-embed">
&lt;/h2>&lt;div class="wp-block-embed__wrapper">
https://github.com/joeyespo/grip
&lt;/div>&lt;/figure>
&lt;h2 id="try">try
&lt;/h2>&lt;h3 id="todo">todo
&lt;/h3>&lt;p>[[_]] 测试&lt;/p></description></item><item><title>绘制流程图，形成文档</title><link>https://svtter.cn/2018/10/07/%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%8C%E5%BD%A2%E6%88%90%E6%96%87%E6%A1%A3/</link><pubDate>Sun, 07 Oct 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/2018/10/07/%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%8C%E5%BD%A2%E6%88%90%E6%96%87%E6%A1%A3/</guid><description>&lt;h2 id="可以使用的工具">可以使用的工具
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.websequencediagrams.com/" target="_blank" rel="noopener"
>https://www.websequencediagrams.com/&lt;/a>&lt;/li>
&lt;li>MY CHOICE: &lt;a class="link" href="https://mermaidjs.github.io/" target="_blank" rel="noopener"
>https://mermaidjs.github.io/&lt;/a>&lt;/li>
&lt;li>Another choice: google key word: &lt;code>sequence graph&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="把-svg-转换成-png-文件">把 svg 转换成 png 文件
&lt;/h2>&lt;p>Or without installing anything:&lt;/p>
&lt;pre class="wp-block-code">&lt;code lang="bash" class="language-bash">qlmanage -t -s 1000 -o . picture.svg
&lt;/code>&lt;/pre>
&lt;p>It will produce picture.svg.png that is 1000 pixels wide.&lt;/p>
&lt;p>I have tested it only on OS X 10.6.3.&lt;/p>
&lt;h2 id="例如">例如：
&lt;/h2>&lt;pre class="wp-block-code">&lt;code class="">sequenceDiagram
App->Server: 请求视频服务
Server-->Server: 生成支付信息
Server->App: 返回支付信息
Note left of App: 获取支付的相关信息
App-->支付宝: 完成付款
支付宝-->App: 支付成功
Note left of App: 获悉支付结果
支付宝->Server: 根据回调URL，发送支付结果
Server->App: 根据支付结果，发送给客户端&lt;/code>&lt;/pre>&lt;figure class="wp-block-image">
&lt;p>&lt;img src="https://i2.wp.com/svtter.cn/wp-content/uploads/2018/10/image-1.png?w=625&amp;#038;ssl=1" alt="" class="wp-image-433" srcset="https://i2.wp.com/svtter.cn/wp-content/uploads/2018/10/image-1.png?w=1000&amp;ssl=1 1000w, https://i2.wp.com/svtter.cn/wp-content/uploads/2018/10/image-1.png?resize=300%2C210&amp;ssl=1 300w, https://i2.wp.com/svtter.cn/wp-content/uploads/2018/10/image-1.png?resize=768%2C538&amp;ssl=1 768w, https://i2.wp.com/svtter.cn/wp-content/uploads/2018/10/image-1.png?resize=624%2C437&amp;ssl=1 624w" sizes="(max-width: 625px) 100vw, 625px" data-recalc-dims="1" />&lt;/figure>&lt;/p></description></item><item><title>classifier 文件分类</title><link>https://svtter.cn/2018/09/13/classifier-%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB/</link><pubDate>Thu, 13 Sep 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/2018/09/13/classifier-%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB/</guid><description>&lt;p>最近没有什么故事要讲，着实有点忙。但是文章太长时间不发也不好，说不定我有那么几个隐藏的很深的不爱说话的粉丝。&lt;/p>
&lt;p>这里介绍一个小工具好了，·classifier· 是一个文件分类工具，包括音乐，pdf，图像等等。运行之后可以自动归类这些文件，懒人福音。&lt;/p>
&lt;h2 id="安装">安装
&lt;/h2>&lt;p>pip install classifier&lt;/p>
&lt;h2 id="运行">运行
&lt;/h2>&lt;p>进入目录，然后运行 classifier，像这样：&lt;/p>
&lt;pre class="wp-block-preformatted">$ classifier&lt;br />&lt;/pre>
&lt;p>然后文件就会变得井然有序啦！&lt;/p>
&lt;p>官方示例：&lt;/p>
&lt;h2 id="example">Example
&lt;/h2>&lt;h3 id="before">&lt;a class="link" href="https://github.com/bhrigu123/classifier#before" target="_blank" rel="noopener"
>&lt;/a>Before:
&lt;/h3>&lt;pre class="wp-block-code">&lt;code class="">Downloads
│   ├── project.docx
│   ├── 21 Guns.mp3
│   ├── Sultans of Swing.mp3
│   ├── report.pdf
│   ├── charts.pdf
│   ├── VacationPic.png
│   ├── CKEditor.zip
│   ├── Cats.jpg
│   └── archive.7z
&lt;/code>&lt;/pre>
&lt;h3 id="after">&lt;a class="link" href="https://github.com/bhrigu123/classifier#after" target="_blank" rel="noopener"
>&lt;/a>After:
&lt;/h3>&lt;pre class="wp-block-code">&lt;code class="">Downloads
│   ├── Music
│   │   ├── 21 Guns.mp3
│   │   └── Sultans of Swing.mp3
| |
│   ├── Documents
│   │   ├── project.docx
│   │   ├── report.pdf
│   │   └── charts.pdf
| |
│   ├── Archives
│   │   ├── CKEditor.zip
│   │   └── archive.7z
| |
│   ├── Pictures
│   │   ├── VacationPic.png
│   │   └── Cats.jpg&lt;/code>&lt;/pre>
&lt;p>更多有意思的东西，可以从 repo 看到：&lt;figure class="wp-block-embed"> &lt;a class="link" href="https://github.com/bhrigu123/classifier" target="_blank" rel="noopener"
>https://github.com/bhrigu123/classifier&lt;/a> &lt;/figure>&lt;/p></description></item><item><title>那些年我所用过的博客</title><link>https://svtter.cn/2016/04/23/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E6%89%80%E7%94%A8%E8%BF%87%E7%9A%84%E5%8D%9A%E5%AE%A2/</link><pubDate>Sat, 23 Apr 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/2016/04/23/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E6%89%80%E7%94%A8%E8%BF%87%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p>用过的博客数不胜数，丢掉的博文也是数不过来，在这里自己做一下总结，也是防止自己忘记之前使用过的那些个博客服务。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>博客名&lt;/th>
&lt;th>域名&lt;/th>
&lt;th>使用时间&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CSDN&lt;/td>
&lt;td>&lt;a class="link" href="http://blog.csdn.net/svitter" target="_blank" rel="noopener"
>http://blog.csdn.net/svitter&lt;/a>&lt;/td>
&lt;td>2012 – 2014&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>博客园&lt;/td>
&lt;td>&lt;a class="link" href="http://www.cnblogs.com/svitter" target="_blank" rel="noopener"
>http://www.cnblogs.com/svitter&lt;/a>&lt;/td>
&lt;td>2012 – 至今&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>github.io&lt;/td>
&lt;td>&lt;a class="link" href="http://svtter.github.io" target="_blank" rel="noopener"
>http://svtter.github.io&lt;/a>&lt;/td>
&lt;td>2014 – 至今&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Leanote&lt;/td>
&lt;td>&lt;a class="link" href="http://svtter.leanote.com" target="_blank" rel="noopener"
>http://svtter.leanote.com&lt;/a>&lt;/td>
&lt;td>2014 – 至今&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wordpress&lt;/td>
&lt;td>缺失&lt;/td>
&lt;td>不记得了&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>awesome-python-web&lt;/td>
&lt;td>http://139.129.6.1&lt;/td>
&lt;td>2016 – 至今&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>博客用的很多，其中 csdn 是最一开始使用的，但是因为 csdn 所支持的功能太少，尽管社区很大，但是感觉并不快乐，限制也比较多，不如自己建一个站来的舒服。博客园混了一段时间，也是不想自己写一个前端，而且好像已经很久没有更新什么东西了= =。github 静态页面生成 &amp;ndash; 我是使用的 hexo，但是也不是很方便，感觉速度比较慢，写的时候也不是很自在。至于 pelican 那些，没有怎么使用，因为不是很流行，主题还要自己写，于是也是放弃了。awesome-python-webapp 主要是用来练手的，后续的很多东西都没有跟上，于是也就放弃了。&lt;/p>
&lt;p>所以感觉还是 ghost 比较好用。之前的文章也是挺多，如果愿意，可以从那边读。质量不是很高。尽管现在也不是很高。一闪而过我好像还有个 blog，但是现在记不得了。leanote 放弃的原因是 web 与 iOSapp 同步做的不是很好，切换目录以后目录仍然存在，我删掉原来的目录，发现我已经转移的博文也不见了，顿时心中悲痛不已，连报 bug 的心情都没有了，发誓再也不去碰这个东西 —— 当然， 没准以后发展的不错了，还是会用的。&lt;/p>
&lt;h2 id="博客的部署">博客的部署
&lt;/h2>&lt;p>自己建立博客的问题就在于维护。本身希望直接使用一个 VPS 作为开发机，什么代码工程都放在 vps 上面，但是后续发现不太符合实际。因为本身做的一些东西扔在服务器上跑，怕负载太重，或者出什么差错，导致博客也跟着一起挂掉。虽然可能博客并没有什么访问量 2333。有时间应该做一个流量统计的东西挂在页面上。&lt;/p>
&lt;p>但这个事情也是有些纠结的，因为本身我也不知道自己究竟喜欢哪个方向，但是朝着一个方向干总觉有些无聊。诚然，比不干自然是好很多。&lt;/p></description></item></channel></rss>