<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools on Svtter's Blog</title><link>https://svtter.cn/categories/tools/</link><description>Recent content in Tools on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 12 May 2024 08:55:42 +0800</lastBuildDate><atom:link href="https://svtter.cn/categories/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Logseq as Documentation</title><link>https://svtter.cn/p/use-logseq-as-documentation/</link><pubDate>Sun, 12 May 2024 08:55:42 +0800</pubDate><guid>https://svtter.cn/p/use-logseq-as-documentation/</guid><description>&lt;p&gt;logseq 是一个非常好用的笔记工具。我们之前已经介绍过关于 logseq 的内容。如果想要了解 logseq，可以看我之前的&lt;a class="link" href="https://svtter.github.io/post/2023-12-18-how-to-use-logseq/" target="_blank" rel="noopener"
&gt;文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在本文中，我们介绍如何将 logseq 作为软件的、项目的文档，以及为什么。&lt;/p&gt;
&lt;h2 id="why"&gt;WHY
&lt;/h2&gt;&lt;p&gt;对于 python 开发者，传统的文档系统有几个，&lt;a class="link" href="https://mkdocs.org" target="_blank" rel="noopener"
&gt;mkdocs&lt;/a&gt;，&lt;a class="link" href="https://https://docs.readthedocs.io/en/stable/" target="_blank" rel="noopener"
&gt;readthedocs&lt;/a&gt;。这些文档系统很好用，可以采用纯文本，通过 git 来管理，并且支持富文本，包括markdown 以及 rst。&lt;/p&gt;
&lt;p&gt;笔者对于开源项目的文档，有几个假设：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开源项目的文档，要放在代码仓库里。&lt;/li&gt;
&lt;li&gt;文档的变更需要能够追溯。我们可以借助 git 实现。&lt;/li&gt;
&lt;li&gt;较好的浏览体验&lt;/li&gt;
&lt;li&gt;开源，以此来保证工具的未来持续可用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，我们选用 logseq 直接作为开源项目的文档，以及文档系统。logseq 能够很好的支持不同的文件同步，以及借助 git 实现历史追溯。添加图片也不是难事。&lt;/p&gt;
&lt;p&gt;使用 logseq 最大的优势在于其双向连接，以及较好的全文搜索。相比之下，mkdocs 以及 readthedocs，虽然功能强大，但是编辑能力相对弱一些。&lt;/p&gt;
&lt;h2 id="howto"&gt;HOWTO
&lt;/h2&gt;&lt;p&gt;想要使用 logseq 作为文档系统，只需要在 logseq 中点击添加图谱，然后在 git repository 中，添加到 &lt;code&gt;docs/&lt;/code&gt;目录下即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src="https://svtter.cn/images/logseq-doc.png"
loading="lazy"
alt="logseq-doc.png"
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加完成后，可以单独创建一个&lt;code&gt;[[HOME]]&lt;/code&gt;页面，并且收藏，来让用户能够快速找到 HOME 页。对于其他的开发者，也可以通过双向连接来快速找到想要找到的概念。&lt;/p&gt;
&lt;p&gt;之后，如果开发者需要修改文档，只需要在 logseq 中进行修改，然后提交到 git 中即可。&lt;/p&gt;
&lt;h2 id="结"&gt;结
&lt;/h2&gt;&lt;p&gt;本文中我们讨论了如何使用 logseq 作为软件项目的文档，简单描述了使用其作为文档的优越性。&lt;/p&gt;
&lt;p&gt;当然，使用 logseq 也会引入新的问题。最大的问题是，用户如果不使用 logseq，就完全看不到文档了。除此之外，logseq 的页面公开也不是特别方便。
这些问题应该有对应的解决方案。在这里就不赘述了。&lt;/p&gt;</description></item><item><title>How to Use Logseq</title><link>https://svtter.cn/p/how-to-use-logseq/</link><pubDate>Mon, 18 Dec 2023 11:49:12 +0800</pubDate><guid>https://svtter.cn/p/how-to-use-logseq/</guid><description>&lt;p&gt;logseq 是一种新型的知识工具。开源，免费（暂时），可以自己管理数据。&lt;/p&gt;
&lt;h3 id="概念"&gt;概念
&lt;/h3&gt;&lt;p&gt;logseq 底层数据结构使用了 markdown。因此，每次创建新的 tag 或者&lt;code&gt;[[]]&lt;/code&gt;的时候，都可以认为创建了一个新的 page。在这里基础上，来进一步理解 logseq。&lt;/p&gt;
&lt;h3 id="definition"&gt;Definition
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://logseq.com/blog/about" target="_blank" rel="noopener"
&gt;关于&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;#tags: 标签，啥时候都能用；使用后要追加解释。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="problems"&gt;Problems
&lt;/h3&gt;&lt;p&gt;问题清单。&lt;/p&gt;
&lt;h4 id="目录是什么"&gt;目录是什么？
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;#Contents&lt;/code&gt;目录是全局的，用于查看所有文档的工具&lt;/p&gt;
&lt;h4 id="如何使用插件"&gt;如何使用插件？
&lt;/h4&gt;&lt;p&gt;设置好 logseq 的代理服务器，即可使用。&lt;/p&gt;
&lt;p&gt;我推荐的插件有:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://svtter.cn/images/logseq-plugins-list.png"
loading="lazy"
alt="logseq"
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git 用来管理同步的笔记&lt;/li&gt;
&lt;li&gt;goto today 用于快速定位到今天&lt;/li&gt;
&lt;li&gt;todo 用于管理待办事项&lt;/li&gt;
&lt;li&gt;calendar 把 logseq 转换成日历工具&lt;/li&gt;
&lt;li&gt;toc 用于生成目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="usage"&gt;Usage
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用 logseq 整理论文&lt;/li&gt;
&lt;li&gt;右上角三个点，可以增强 logseq
&lt;ul&gt;
&lt;li&gt;Use plugins：插件可以增强 logseq 的功能&lt;/li&gt;
&lt;li&gt;Use theme：主题可以让 logseq 的可读性变得更好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="references"&gt;References
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://zhuanlan.zhihu.com/p/450069864" target="_blank" rel="noopener"
&gt;https://zhuanlan.zhihu.com/p/450069864&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Mellow Config</title><link>https://svtter.cn/p/mellow-config/</link><pubDate>Thu, 09 Apr 2020 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/mellow-config/</guid><description>&lt;p&gt;Mellow is an transparent proxy tools could run on Windows and Ubuntu.&lt;/p&gt;
&lt;h2 id="install"&gt;Install
&lt;/h2&gt;&lt;p&gt;Mellow install on Windows is simple. Here&amp;rsquo;s the introduction of install on Ubuntu.&lt;/p&gt;
&lt;p&gt;Download Mellow from &lt;a class="link" href="https://github.com/mellow-io/mellow/releases" target="_blank" rel="noopener"
&gt;github release page&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="config"&gt;Config
&lt;/h2&gt;&lt;p&gt;Mellow&amp;rsquo;s config is shown on its README. When the mellow not work, follow the &lt;code&gt;Possible way&lt;/code&gt; section.&lt;/p&gt;
&lt;h2 id="possible-way"&gt;Possible way
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;re the Ubuntu config.&lt;/p&gt;
&lt;p&gt;You need to disable the &lt;code&gt;systemd-solved&lt;/code&gt; and disable auto-update &lt;code&gt;/etc/resolve.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo systemctl disable systemd-sovled
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo systemctl stop systemd-sovled
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;edit the &lt;code&gt;/etc/NetworkManager/NetworkManager.conf&lt;/code&gt;, add &lt;code&gt;dns=none&lt;/code&gt; to &lt;code&gt;[main]&lt;/code&gt; section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;[main]
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;dns=none
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;[ifupdown]
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then reboot and start mellow again, it&amp;rsquo;ll work.&lt;/p&gt;</description></item><item><title>gollum 书写 wiki</title><link>https://svtter.cn/p/gollum-%E4%B9%A6%E5%86%99-wiki/</link><pubDate>Thu, 15 Nov 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/gollum-%E4%B9%A6%E5%86%99-wiki/</guid><description>&lt;p&gt;使用 gollum 书写文档（github, gitlab, wiki)。Gollum 是通过 gitlab 发现的东西，可以把 gitlab 的 wiki 文档放在本地进行书写，对于“小”的wiki，以及API文档实在是再方便不过了。个人感觉比 Sphinx 更加容易上手。&lt;/p&gt;
&lt;h2 id="显示-toc"&gt;显示 TOC
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;[[_TOC_]]&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="安装-gem"&gt;安装 gem
&lt;/h2&gt;&lt;p&gt;ruby-full, ruby-dev&lt;/p&gt;
&lt;h2 id="切换-aliyun-mirror"&gt;切换 aliyun mirror
&lt;/h2&gt;&lt;p&gt;上网搜就行。&lt;figure class="wp-block-embed"&gt;&lt;/p&gt;
&lt;div class="wp-block-embed__wrapper"&gt;
https://gems.ruby-china.com/
&lt;/div&gt;&lt;/figure&gt;
&lt;h2 id="安装-gollum"&gt;安装 gollum
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;gem install gollum&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="gollum-wiki"&gt;gollum wiki
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://github.com/gollum/gollum/wiki" target="_blank" rel="noopener"
&gt;https://github.com/gollum/gollum/wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="similar-things"&gt;similar things&lt;figure class="wp-block-embed"&gt;
&lt;/h2&gt;&lt;div class="wp-block-embed__wrapper"&gt;
https://github.com/joeyespo/grip
&lt;/div&gt;&lt;/figure&gt;
&lt;h2 id="try"&gt;try
&lt;/h2&gt;&lt;h3 id="todo"&gt;todo
&lt;/h3&gt;&lt;p&gt;[[_]] 测试&lt;/p&gt;</description></item><item><title>绘制流程图，形成文档</title><link>https://svtter.cn/p/%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%BD%A2%E6%88%90%E6%96%87%E6%A1%A3/</link><pubDate>Sun, 07 Oct 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%BD%A2%E6%88%90%E6%96%87%E6%A1%A3/</guid><description>&lt;h2 id="可以使用的工具"&gt;可以使用的工具
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://www.websequencediagrams.com/" target="_blank" rel="noopener"
&gt;https://www.websequencediagrams.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MY CHOICE: &lt;a class="link" href="https://mermaidjs.github.io/" target="_blank" rel="noopener"
&gt;https://mermaidjs.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another choice: google key word: &lt;code&gt;sequence graph&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="把-svg-转换成-png-文件"&gt;把 svg 转换成 png 文件
&lt;/h2&gt;&lt;p&gt;Or without installing anything:&lt;/p&gt;
&lt;pre class="wp-block-code"&gt;&lt;code lang="bash" class="language-bash"&gt;qlmanage -t -s 1000 -o . picture.svg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will produce picture.svg.png that is 1000 pixels wide.&lt;/p&gt;
&lt;p&gt;I have tested it only on OS X 10.6.3.&lt;/p&gt;
&lt;h2 id="例如"&gt;例如：
&lt;/h2&gt;&lt;pre class="wp-block-code"&gt;&lt;code class=""&gt;sequenceDiagram
App-&gt;Server: 请求视频服务
Server--&gt;Server: 生成支付信息
Server-&gt;App: 返回支付信息
Note left of App: 获取支付的相关信息
App--&gt;支付宝: 完成付款
支付宝--&gt;App: 支付成功
Note left of App: 获悉支付结果
支付宝-&gt;Server: 根据回调URL，发送支付结果
Server-&gt;App: 根据支付结果，发送给客户端&lt;/code&gt;&lt;/pre&gt;&lt;figure class="wp-block-image"&gt;
&lt;p&gt;&lt;img src="https://i2.wp.com/svtter.cn/wp-content/uploads/2018/10/image-1.png?w=625&amp;#038;ssl=1" alt="" class="wp-image-433" srcset="https://i2.wp.com/svtter.cn/wp-content/uploads/2018/10/image-1.png?w=1000&amp;ssl=1 1000w, https://i2.wp.com/svtter.cn/wp-content/uploads/2018/10/image-1.png?resize=300%2C210&amp;ssl=1 300w, https://i2.wp.com/svtter.cn/wp-content/uploads/2018/10/image-1.png?resize=768%2C538&amp;ssl=1 768w, https://i2.wp.com/svtter.cn/wp-content/uploads/2018/10/image-1.png?resize=624%2C437&amp;ssl=1 624w" sizes="(max-width: 625px) 100vw, 625px" data-recalc-dims="1" /&gt;&lt;/figure&gt;&lt;/p&gt;</description></item><item><title>classifier 文件分类</title><link>https://svtter.cn/p/classifier-%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB/</link><pubDate>Thu, 13 Sep 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/classifier-%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB/</guid><description>&lt;p&gt;最近没有什么故事要讲，着实有点忙。但是文章太长时间不发也不好，说不定我有那么几个隐藏的很深的不爱说话的粉丝。&lt;/p&gt;
&lt;p&gt;这里介绍一个小工具好了，·classifier· 是一个文件分类工具，包括音乐，pdf，图像等等。运行之后可以自动归类这些文件，懒人福音。&lt;/p&gt;
&lt;h2 id="安装"&gt;安装
&lt;/h2&gt;&lt;p&gt;pip install classifier&lt;/p&gt;
&lt;h2 id="运行"&gt;运行
&lt;/h2&gt;&lt;p&gt;进入目录，然后运行 classifier，像这样：&lt;/p&gt;
&lt;pre class="wp-block-preformatted"&gt;$ classifier&lt;br /&gt;&lt;/pre&gt;
&lt;p&gt;然后文件就会变得井然有序啦！&lt;/p&gt;
&lt;p&gt;官方示例：&lt;/p&gt;
&lt;h2 id="example"&gt;Example
&lt;/h2&gt;&lt;h3 id="before"&gt;&lt;a class="link" href="https://github.com/bhrigu123/classifier#before" target="_blank" rel="noopener"
&gt;&lt;/a&gt;Before:
&lt;/h3&gt;&lt;pre class="wp-block-code"&gt;&lt;code class=""&gt;Downloads
│   ├── project.docx
│   ├── 21 Guns.mp3
│   ├── Sultans of Swing.mp3
│   ├── report.pdf
│   ├── charts.pdf
│   ├── VacationPic.png
│   ├── CKEditor.zip
│   ├── Cats.jpg
│   └── archive.7z
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="after"&gt;&lt;a class="link" href="https://github.com/bhrigu123/classifier#after" target="_blank" rel="noopener"
&gt;&lt;/a&gt;After:
&lt;/h3&gt;&lt;pre class="wp-block-code"&gt;&lt;code class=""&gt;Downloads
│   ├── Music
│   │   ├── 21 Guns.mp3
│   │   └── Sultans of Swing.mp3
| |
│   ├── Documents
│   │   ├── project.docx
│   │   ├── report.pdf
│   │   └── charts.pdf
| |
│   ├── Archives
│   │   ├── CKEditor.zip
│   │   └── archive.7z
| |
│   ├── Pictures
│   │   ├── VacationPic.png
│   │   └── Cats.jpg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多有意思的东西，可以从 repo 看到：&lt;figure class="wp-block-embed"&gt; &lt;a class="link" href="https://github.com/bhrigu123/classifier" target="_blank" rel="noopener"
&gt;https://github.com/bhrigu123/classifier&lt;/a&gt; &lt;/figure&gt;&lt;/p&gt;</description></item><item><title>那些年我所用过的博客</title><link>https://svtter.cn/p/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E6%89%80%E7%94%A8%E8%BF%87%E7%9A%84%E5%8D%9A%E5%AE%A2/</link><pubDate>Sat, 23 Apr 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E6%89%80%E7%94%A8%E8%BF%87%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p&gt;用过的博客数不胜数，丢掉的博文也是数不过来，在这里自己做一下总结，也是防止自己忘记之前使用过的那些个博客服务。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;博客名&lt;/th&gt;
&lt;th&gt;域名&lt;/th&gt;
&lt;th&gt;使用时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CSDN&lt;/td&gt;
&lt;td&gt;&lt;a class="link" href="http://blog.csdn.net/svitter" target="_blank" rel="noopener"
&gt;http://blog.csdn.net/svitter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2012 – 2014&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;博客园&lt;/td&gt;
&lt;td&gt;&lt;a class="link" href="http://www.cnblogs.com/svitter" target="_blank" rel="noopener"
&gt;http://www.cnblogs.com/svitter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2012 – 至今&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;github.io&lt;/td&gt;
&lt;td&gt;&lt;a class="link" href="http://svtter.github.io" target="_blank" rel="noopener"
&gt;http://svtter.github.io&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2014 – 至今&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Leanote&lt;/td&gt;
&lt;td&gt;&lt;a class="link" href="http://svtter.leanote.com" target="_blank" rel="noopener"
&gt;http://svtter.leanote.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2014 – 至今&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wordpress&lt;/td&gt;
&lt;td&gt;缺失&lt;/td&gt;
&lt;td&gt;不记得了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;awesome-python-web&lt;/td&gt;
&lt;td&gt;http://139.129.6.1&lt;/td&gt;
&lt;td&gt;2016 – 至今&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;博客用的很多，其中 csdn 是最一开始使用的，但是因为 csdn 所支持的功能太少，尽管社区很大，但是感觉并不快乐，限制也比较多，不如自己建一个站来的舒服。博客园混了一段时间，也是不想自己写一个前端，而且好像已经很久没有更新什么东西了= =。github 静态页面生成 &amp;ndash; 我是使用的 hexo，但是也不是很方便，感觉速度比较慢，写的时候也不是很自在。至于 pelican 那些，没有怎么使用，因为不是很流行，主题还要自己写，于是也是放弃了。awesome-python-webapp 主要是用来练手的，后续的很多东西都没有跟上，于是也就放弃了。&lt;/p&gt;
&lt;p&gt;所以感觉还是 ghost 比较好用。之前的文章也是挺多，如果愿意，可以从那边读。质量不是很高。尽管现在也不是很高。一闪而过我好像还有个 blog，但是现在记不得了。leanote 放弃的原因是 web 与 iOSapp 同步做的不是很好，切换目录以后目录仍然存在，我删掉原来的目录，发现我已经转移的博文也不见了，顿时心中悲痛不已，连报 bug 的心情都没有了，发誓再也不去碰这个东西 —— 当然， 没准以后发展的不错了，还是会用的。&lt;/p&gt;
&lt;h2 id="博客的部署"&gt;博客的部署
&lt;/h2&gt;&lt;p&gt;自己建立博客的问题就在于维护。本身希望直接使用一个 VPS 作为开发机，什么代码工程都放在 vps 上面，但是后续发现不太符合实际。因为本身做的一些东西扔在服务器上跑，怕负载太重，或者出什么差错，导致博客也跟着一起挂掉。虽然可能博客并没有什么访问量 2333。有时间应该做一个流量统计的东西挂在页面上。&lt;/p&gt;
&lt;p&gt;但这个事情也是有些纠结的，因为本身我也不知道自己究竟喜欢哪个方向，但是朝着一个方向干总觉有些无聊。诚然，比不干自然是好很多。&lt;/p&gt;</description></item></channel></rss>