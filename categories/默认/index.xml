<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>默认 on Svtter&#39;s Blog</title>
    <link>https://svtter.github.io/categories/%E9%BB%98%E8%AE%A4/</link>
    <description>Recent content in 默认 on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 23 Jan 2018 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.github.io/categories/%E9%BB%98%E8%AE%A4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>写博客这个事情</title>
      <link>https://svtter.github.io/post/2018-01-23-%E5%86%99%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%AA%E4%BA%8B%E6%83%85/</link>
      <pubDate>Tue, 23 Jan 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2018-01-23-%E5%86%99%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%AA%E4%BA%8B%E6%83%85/</guid>
      <description>&lt;p&gt;写博客这个事情不是我自发进行的，成因也很有趣，是在本科&lt;a href=&#34;https://blog.csdn.net/sxhelijian&#34;&gt;贺立坚&lt;/a&gt;老师的指导下坚持下来的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>这个不是很讲究的博客</title>
      <link>https://svtter.github.io/2017/11/27/%E8%BF%99%E4%B8%AA%E4%B8%8D%E6%98%AF%E5%BE%88%E8%AE%B2%E7%A9%B6%E7%9A%84%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 27 Nov 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/11/27/%E8%BF%99%E4%B8%AA%E4%B8%8D%E6%98%AF%E5%BE%88%E8%AE%B2%E7%A9%B6%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;h2 id=&#34;功能列表&#34;&gt;功能列表&lt;/h2&gt;
&lt;p&gt;这个博客的雏形很早之前就写好了，但是一直没有挂上去，主要有这几个原因：一是写的不好，很多功能都没写全，写的也不太走心；二是长得有点丑，当然，这一点也可以放在功能不全这个问题里面。总而言之，就是不太讲究。这个不讲究还体现在之前的文章Latex适配没做好，等等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>导出hexo博客</title>
      <link>https://svtter.github.io/2017/09/04/%E5%AF%BC%E5%87%BAhexo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 04 Sep 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/09/04/%E5%AF%BC%E5%87%BAhexo%E5%8D%9A%E5%AE%A2/</guid>
      <description>最近自己重写了一套博客系统，打算把博客和知识库结合起来，做一套强大的玩意儿。
今天做了一些简单的工作，觉得这个导出hexo文章挺有意思，于是写在这里。
markdown + yaml 这种解析方式没有直接能够使用的，有些markdown文章中缺少---
也能进行解析，还有几个tag存在问题。**因此为了能够直接使用原本博客中的相关内容，
直接使用hexo本身的parse来解析，即hexo-front-matter。**
可以直接从github上面找到对应的API，很简单的粗暴。</description>
    </item>
    
    <item>
      <title>博客迁移域名至svtter.github.io</title>
      <link>https://svtter.github.io/2017/08/09/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%9F%9F%E5%90%8D%E8%87%B3svtter-cn/</link>
      <pubDate>Wed, 09 Aug 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/08/09/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%9F%9F%E5%90%8D%E8%87%B3svtter-cn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>快速上手编辑器</title>
      <link>https://svtter.github.io/2017/07/21/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E7%BC%96%E8%BE%91%E5%99%A8/</link>
      <pubDate>Fri, 21 Jul 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/07/21/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
      <description>&lt;p&gt;Atom因为总是需要代理来下载插件的原因，又被放弃了。一个新技术在中国的freelancer中收不收欢迎，似乎很大程度上取决于，这个东西下载的速度；很明显，Atom存在下载速度问题，然而vscode不存在；在技术栈很相似的情况下，vscode的书写体验十分的流畅，远远超过了atom，甚至不加插件的vim；&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何更新自己的主题</title>
      <link>https://svtter.github.io/2017/07/16/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Sun, 16 Jul 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/07/16/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%BB%E9%A2%98/</guid>
      <description>&lt;p&gt;在使用hexo的主题的时候，许多人经常把主题fork到自己的repo，对我而言，这是没有必要的。&lt;/p&gt;
&lt;p&gt;一般情况下，我不需要修改很多关于主题的内容，只需要改改配置文件就可以了，但是每次&lt;/p&gt;
&lt;p&gt;更新，&lt;code&gt;git pull&lt;/code&gt;的时候都提示需要提交自己的修改，这个时候应该怎么做呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对BaaS的一些思考</title>
      <link>https://svtter.github.io/2017/07/12/%E5%AF%B9baas%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 12 Jul 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/07/12/%E5%AF%B9baas%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;BaaS，是Backend as a Service，即后端即服务。&lt;/p&gt;
&lt;p&gt;在使用BaaS时，可以减少许多因对后端本身不擅长而增加的创业成本。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单元测试</title>
      <link>https://svtter.github.io/2017/07/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 09 Jul 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/07/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;p&gt;单元测试十分的重要，简单说一下微信小程序中的单元测试&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python UART编程</title>
      <link>https://svtter.github.io/2017/05/15/pythonuart%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 15 May 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/05/15/pythonuart%E7%BC%96%E7%A8%8B/</guid>
      <description>UART串口编程发送接收上使用pyserial，数据处理使用struct
struct廖雪峰 Python使用struct处理二进制 用C语言 一般情况下，有了struct就不需要使用C语言写Python扩展了，但是实际上使用C语言在处理一些情况的时候会更方便一些，因此一个比较好的选择是，用C写模块，然后用Python调用。</description>
    </item>
    
    <item>
      <title>关于Common-lisp</title>
      <link>https://svtter.github.io/2017/04/28/%E5%85%B3%E4%BA%8Ecommon-lisp/</link>
      <pubDate>Fri, 28 Apr 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/04/28/%E5%85%B3%E4%BA%8Ecommon-lisp/</guid>
      <description>Common Lisp这门语言是我在大学中感觉第二难的编程语言——第一是汇编，我直到现在都不想碰它。
难在何处？第二章开始，一般语言断断续续看，一周也就看完了。但是common lisp，看了足足一个月——可能也是因为接触起来比较困难，屡次夭折我学习其的兴趣。据说，学了lisp的人都“疯”了，比如冰河先生，王垠先生等。但是对于一个Hacker来言，我想这更加大了这门语言魅力。（注：这个地方的因素有很多；本身lisp是不难的，入门的方式很重要。）
在书写代码的时候，总有种感觉，这个地方如果可以这么实现，那么真是爽之又爽。仔细想想，lisp这种加上&#39;就转变的特性，就是人们所说的lisp可以自己写lisp程序，也就是类似于Java中的反射思想，这十分的诱人。但是相比较lisp，Java以及其他语言想要实现这个特点，可能要写很多代码——这就不符合一个懒人的特点，同样，写的代码越多，出bug的几率越大。
想到多少就大概写多少。过去的几天，发现自己突然对于lisp有了更高的理解，对于设计模式【噗嗤】以及lisp函数编程的一些特性也有摸到门框的感觉，十分开心。于是写这篇不足以称为“文章”的博客来略表自己开心的心情。
此后，这篇文章中更新学习笔记的内容
发现scheme更适合商业化；同时学学</description>
    </item>
    
    <item>
      <title>跨站评论系统</title>
      <link>https://svtter.github.io/2017/04/25/%E8%B7%A8%E7%AB%99%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 25 Apr 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/04/25/%E8%B7%A8%E7%AB%99%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid>
      <description>多说马上就关闭了，静态站的评论系统何去何从。
首先想要分析一下duoshuo的代码，看看自己能否实现。
不过，在看duoshuo客户端代码的时候没有搞明白到底是如何实现确认目标来源的。
似乎是自己生成生成一条Javascript代码，然后把head以及body加在上面，进而出一个界面。
embed.js就没有再看，好麻烦。
isso 在网上寻找一个合适的开源评论系统isso，可以自己搭建在主机上，使用Python+SQlite3实现。具体实现在其开源的代码中。
涉及到的知识有几个，一个是CORS，另一个还是CORS。
个人认为知识储备基本有了，但是如果要写还是很麻烦，于是就暂且弃坑了。
可以通过这个docker来部署wonderfall/isso，不过感觉docker-compose似乎存在问题，我无法直接挂载./config:/config，因此对于domer-compose中做此修改...../config/isso.conf:/config/isso.conf。
此外，对于Flask实现这个留言系统，可以考虑通过flask-cors来实现。</description>
    </item>
    
    <item>
      <title>IPython学习</title>
      <link>https://svtter.github.io/2017/04/21/ipython%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 21 Apr 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/04/21/ipython%E5%AD%A6%E4%B9%A0/</guid>
      <description>IPython6.0 版本更新，已经不支持Python2的相关版本，以及Python3.3以下的版本。赶紧升级吧！</description>
    </item>
    
    <item>
      <title>DNS服务</title>
      <link>https://svtter.github.io/2017/04/20/dns%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 20 Apr 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/04/20/dns%E6%9C%8D%E5%8A%A1/</guid>
      <description>考虑到自己的树莓派经常没有一个固定的IP，如果在网络上进行提供我想要的服务无法访问，于是便想要解决这个问题。
怎么解决呢？
自己写一个么？
一开始考虑直接开一个RESTful的服务器，用来定时接收树莓派的请求，保存。然后通过web页面请求就可以得到IP地址，就可以通过某个调用来获取，就可以直接访问树莓派了。听起来似乎是一个比较好的解决方案，但是有没有更加优雅的呢？
想起动态IP地址，就想起了路由器中的花生壳服务。花生壳中，有一个DDNS（dymanic DNS)，专门为了不确定的IP使用，但是花生壳的DDNS服务的免费套餐无法满足我的要求。付费的标准又比较高，我感觉我都可以利用这个价格自己构建一个DNS了。
等等？
自己构建一个DNS？如果我直接自己搭建一个DNS，这样直接记录一下自己DNS服务器的地址，然后还能自己整个域名访问，岂不快哉？这个主意很好，于是看了一下dnsmasq——好像不能完成自己的目的。那么不如直接搜索DDNS了。这样就找到符合自己要求的DDNS。这个需求的解决便算是完成了。</description>
    </item>
    
    <item>
      <title>谈论一下编辑器</title>
      <link>https://svtter.github.io/2017/02/28/%E8%B0%88%E8%AE%BA%E4%B8%80%E4%B8%8B%E7%BC%96%E8%BE%91%E5%99%A8/</link>
      <pubDate>Tue, 28 Feb 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/02/28/%E8%B0%88%E8%AE%BA%E4%B8%80%E4%B8%8B%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
      <description>编辑器这个东西，一直以来的目的，要么是装逼，要么是提升程序员工作效率。
做物联网开发使用终端下的vim编辑器的确是行云流水——省去了git push和git pull的过程。
不过仔细想来，真是工作了，恐怕使用这个东西频度就不行了。一方面，可以根据最近的一些更新，比如说vim的异步来提升一下插件的整体体验。工作环境是会变得，在配置编辑器上话费太多功夫总归是不划算的。现在正在体验spacevim——
spacevim载入以后没有对其leader的介绍，可能是出于照顾新手？这点我有点不适应——我还以为加载出来以后，就是一个类似于spacemacs的界面呢。 原来是需要使用neovim才能体现出spacemacs的效果 速度实在是太慢了。主要是VimFiler的缘故，拖的整体速度都很慢。 其实本来想要写，进入工作环境，恐怕就没有那么多时间去摆弄编辑器了。但是似乎编辑器涉及到的技术，也有许许多多是可以共通的，因此，研究起来应该也是有价值的。不过使用起来，还是一整个配置好的环境更加舒服——IDE就免了，感觉上还是太重了，有一定自由性还是好的。
sublime似乎是一款比较优秀的编辑器，使用python作为他的”脚本语言“，就像”lisp“之余emacs，”vimscript“之余vim一样。不过，习惯于vim的我不太想要重新去看一个新的编辑器的API了，总感觉有些麻烦。
写的比较杂乱，主要是最近没东西玩了，复试总不能打游戏吧，只好研究个什么。——以考试为目的学习，真累啊。</description>
    </item>
    
    <item>
      <title>FFmpeg网络摄像文档</title>
      <link>https://svtter.github.io/2017/02/18/ffmpeg%E7%BD%91%E7%BB%9C%E6%91%84%E5%83%8F%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sat, 18 Feb 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/02/18/ffmpeg%E7%BD%91%E7%BB%9C%E6%91%84%E5%83%8F%E6%96%87%E6%A1%A3/</guid>
      <description>FFmpeg是一个视频库，可以用来转换视频格式等等相关功能。关键是和视频相关，其他的功
能都会有所涉及。
https://trac.ffmpeg.org/wiki/StreamingGuide#StreamingasimpleRTPaudiostreamfromFFmpeg https://trac.ffmpeg.org/wiki/Capture/Webcam 此外，类似的还有gstreamer。
http://stackoverflow.com/questions/7669240/webcam-streaming-using-gstreamer-over-udp</description>
    </item>
    
    <item>
      <title>python-opencv中的一些问题</title>
      <link>https://svtter.github.io/2017/02/18/python-opencv%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 18 Feb 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/02/18/python-opencv%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid>
      <description>窗口假死 在Python-opencv中，有时会出现已经cv2.detroyallwindows()但是没有退出窗口的情况。
此时需要在代码段的末尾添加waitKey函数来进行刷新。
http://stackoverflow.com/questions/6116564/destroywindow-does-not-close-window-on-mac-using-python-and-opencv
原因为止，但是这么处理是有效的。</description>
    </item>
    
    <item>
      <title>树莓派开发小指南</title>
      <link>https://svtter.github.io/2017/02/17/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 17 Feb 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/02/17/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8C%87%E5%8D%97/</guid>
      <description>考研分数的事情暂且不提。
最近一直在做树莓派的开发，主要涉及直播，流媒体，摄像头的相关部分。考虑到仅仅是一
个项目，没有很深入的研究，仅仅是简单看了看能理解的部分就投入使用了。写的晚了，担
心自己又像之前一样忘记了，就记录成一篇博文，给喜欢的朋友铺铺路。
虽然目前博客访客不多，也没人留言，但是总有一天会有的，也会有人提出问题等等。那个
时候就不知道是什么时间了，因此，对于出现的问题要多思考问google，留言我也不一定记
得，我会尽力回答。
Content 树莓派的国内源 关于摄像头相关 操作系统的牵扯知识 使用C语言编写的webcam 懒得写的内容暂时放了一个连接在上面，没有连接的是还没有时间写。</description>
    </item>
    
    <item>
      <title>入mbp的几大利好</title>
      <link>https://svtter.github.io/2017/02/07/%E5%85%A5mbp%E7%9A%84%E5%87%A0%E5%A4%A7%E5%88%A9%E5%A5%BD/</link>
      <pubDate>Tue, 07 Feb 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/02/07/%E5%85%A5mbp%E7%9A%84%E5%87%A0%E5%A4%A7%E5%88%A9%E5%A5%BD/</guid>
      <description>入Mac之后，win上面遭遇的许多问题没有发生，心中甚是愉悦。这几天使用ikbc poker，因为win键和alt键位置不太相同，十分不适应。到网上一搜索，发现osx本身就可以更改这个按键，然后我只需要换一下键盘帽就可以了，真是十分爽。
相对于Win和Ubuntu，Mac最大的爽点有这么几个：
安装十分便捷舒适，系统的稳定性方面更是厉害，程序基本不崩，系统到现在没有死机过，非常爽。 使用开源的软件十分方便，brew自动化傻瓜化，我基本不需要配置什么内容就可以使用。相比之下，win要繁琐太多了。Ubuntu对于软件包的管理方面也是让人头疼不已。 非常流畅的操作方式。有了这个触摸板根本不需要鼠标。 高清屏幕的支持，优秀的UI设计，QQ【这个是针对Ubuntu】。 还有很多，以后想起来补充。。 系统洁癖 使用Ubuntu作为开发系统，如果不使用Docker安装某个软件，总会感觉整个环境被污染了——是的，例如安装Anaconda，是否卸载原生Python？如果不卸载原生Python，是否会对conda造成影响？如果卸载了，会不会对系统造成影响？就算是不造成影响，以后要是不想使用Anaconda，卸载的时候能不能卸载干净？按照Ubuntu的尿性，很多时候都会留下点配置文件，或者什么别的东西——非常难受。
如果apt源没有设置好，比如apt-get命令没有成功获取所有的“缓存”，那么很可能造成一些软件在你从来没有做什么的时候，依赖关系出现问题。</description>
    </item>
    
    <item>
      <title>树莓派安装owncloud小记</title>
      <link>https://svtter.github.io/2017/02/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85owncloud%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 06 Feb 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/02/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85owncloud%E5%B0%8F%E8%AE%B0/</guid>
      <description>http://www.voidcn.com/blog/u010873775/article/p-5812004.html
我是按照以上教程进行安装部署的，但是使用不了，原因是对于目录配置有问题，其中，不应该是进入data目录，而是进入owncloud目录。
成功配置之后发现owncloud没有启用https，登陆官网查看，配置文档云里雾里，不是很明白，按照其配置方法不见奏效，其中有不少地方我也不是很理解，最后找到了另一篇文章，具体文章我已经找不到了，能够配置的更好一些，但是不知道为什么直接无法访问了。我使用的证书是openssl生成的，因此在chrome访问的时候提示是不安全的。
后来考虑一下官方文档，owncloud本身建议是在/var/www直接部署，可是我走捷径，图中文看的方便，就没有按照其意见部署，结果耗费了不少时间，服务还是没有架设起来，甚是烦躁。其中，简单配置一下，总是起不来apache，systemctl看log的时候没有加上sudo，又是一个大坑。
后来想了，干脆不再配置https，直接使用好了。居然连原来可以使用的admin界面也不能使用了。于是直接删除apache2，打算重装，发现apache环境配置方面又出问题了。
得了，我怕了还不行，先搁置一边吧。
由上所述，得出几个结论：
Docker是个好东西，如果不想污染系统环境，果断上Docker。 尽量从官方文档做事，尽管看起来麻烦，起码知道每一步是干啥。 国人写的文档，有不少数图简单图快，省略步骤，仅仅是建立起来一个服务，对于服务的配置存在大量的问题，这个时候一步步找问题，更加浪费时间，不如直接从英文文档，博客入手，相对负责任一点。 做事情一步一步，不要想回退的时候发现无路可走。 尾声：owncloud相当于一个本地的dropbox，架设使用过后，感觉用处不大，还是玩玩别的东西。</description>
    </item>
    
    <item>
      <title>杂谈VPS流媒体服务器</title>
      <link>https://svtter.github.io/2017/02/05/%E6%9D%82%E8%B0%88vps%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Sun, 05 Feb 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/02/05/%E6%9D%82%E8%B0%88vps%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>title: 杂谈VPS流媒体服务器
date: 2017-02-05T01:00:00+08:00
tags:
– Boinc
– VPS
– Vlc
– 流媒体服务器
之前的VPS因为瞎玩VPN给封了，后来发现 http://boinc.berkeley.edu/index.php 这个东西。把自己的空闲的计算贡献给科学。于是切换成Ubuntu，apt install boinc，之后这个东西就开机自动启动了，就放在那里不用管了——
本来想写写VLC作为流媒体播放器，但是发现VLC对于流媒体服务器功能十分有限。于是便放弃了。
而后查找了部分资料，发现大部分都是使用ffmpeg来实现，此外，还有live555，gstreamer
等。使用ffmpeg之后发现问题并不复杂，详情查看本博关于ffmpeg的相关文章。</description>
    </item>
    
    <item>
      <title>WebRTC的照镜子</title>
      <link>https://svtter.github.io/2017/02/03/webrtc%E7%9A%84%E7%85%A7%E9%95%9C%E5%AD%90/</link>
      <pubDate>Fri, 03 Feb 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/02/03/webrtc%E7%9A%84%E7%85%A7%E9%95%9C%E5%AD%90/</guid>
      <description>利用WebRTC照镜子，源代码见下方SourceCode
这篇博文是在我之前使用ananote？主题发布的，在next主题上，会导致打开这个文章所在的pages，自动调用摄像头——然而没有多少影响，因为不是https「笑，https好贵」，所以对访客而言，没有什么影响。
{% raw %}
Source code </description>
    </item>
    
    <item>
      <title>使用树莓派作为ssh音乐播放器</title>
      <link>https://svtter.github.io/2017/01/23/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%9C%E4%B8%BAssh%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</link>
      <pubDate>Mon, 23 Jan 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/01/23/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%9C%E4%B8%BAssh%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</guid>
      <description>使用默认的debian系统。安装几个
然后简单设定一下。
sudo raspi-config
设置过程： Advanced Options —- Audio — Force 3.5mm (‘headphone’) jack
使用过程中可能有些卡顿，我还没找到原因。如果你找到了，请告诉我。
调整音量 amixer sset PCM 80% </description>
    </item>
    
    <item>
      <title>Golang学习笔记</title>
      <link>https://svtter.github.io/2017/01/22/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/01/22/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;Golang的学习笔记。目前初步计划是学习 &lt;a href=&#34;https://tour.go-zh.org/&#34;&gt;Go-tour&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>值得一读的Python书籍</title>
      <link>https://svtter.github.io/2017/01/22/%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%BB%E7%9A%84python%E4%B9%A6%E7%B1%8D/</link>
      <pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/01/22/%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%BB%E7%9A%84python%E4%B9%A6%E7%B1%8D/</guid>
      <description> https://pythonguidecn.readthedocs.io/zh/latest/ http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html </description>
    </item>
    
    <item>
      <title>在jade的加入google-analytics</title>
      <link>https://svtter.github.io/2017/01/22/%E5%9C%A8jade%E7%9A%84%E5%8A%A0%E5%85%A5google-analytics/</link>
      <pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/01/22/%E5%9C%A8jade%E7%9A%84%E5%8A%A0%E5%85%A5google-analytics/</guid>
      <description>许多hexo文件都是使用jade来进行书写的，因此，在这里简单介绍一下如何在jade中插入javascript，使其正确的渲染。
// refer: http://stackoverflow.com/questions/5858218/how-can-i-render-inline-javascript-with-jade
在主题中找到layout.jade这种类似的，每一个静态页面渲染都需要的jade文件，加入google-analytics的代码即可。记得删除google analytics中所带的&amp;lt;script&amp;gt;标签，使用script.来代替它。
例如：</description>
    </item>
    
    <item>
      <title>微信php-demo中存在bug</title>
      <link>https://svtter.github.io/2017/01/22/%E5%BE%AE%E4%BF%A1php-demo%E4%B8%AD%E5%AD%98%E5%9C%A8bug/</link>
      <pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/01/22/%E5%BE%AE%E4%BF%A1php-demo%E4%B8%AD%E5%AD%98%E5%9C%A8bug/</guid>
      <description>微信php-demo里面存在bug，导致这几天一直在调试一个非常头痛的bug。注意：微信php-demo不可信，可能是临时工写的， 最好是使用自己的写的——不过话说回来，就是个demo，人家不好好写也很正常。
本文保留所有权力，转载请联系作者。</description>
    </item>
    
    <item>
      <title>最近在写Csharp</title>
      <link>https://svtter.github.io/2017/01/22/%E6%9C%80%E8%BF%91%E5%9C%A8%E5%86%99csharp/</link>
      <pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/01/22/%E6%9C%80%E8%BF%91%E5%9C%A8%E5%86%99csharp/</guid>
      <description>没错就是在写c#桌面程序。。
简单记录一下C#的相关东西。c#感觉写起来比Java等顺手，可能是因为遇到问题可以很快的搜索到——一方面也是技 术比较老旧，虽然用不了一些比较新的技术，但是一旦出了问题，很多都能很快的搜索到，不用耗费很长时间。
使用c#开发桌面，没毛病，以前比较复杂的功能在C#上实现起来感觉非常简单，例如浮动窗口，任务栏，快捷键等。 Windows程序设计这本书简单的读了一点，感觉有时间还可以再读读，对于windows的核心机制可以有所了解。此外， Linux类似的书籍也可以看看。win32编程的确是有点痛苦，主要是上手速度比较慢，然后界面设计等，感觉不如c# 来的顺手，可能也是由于我没有用新vistual studio去尝试。当然本质问题肯定还是因为win32-api之前没怎么学， 此外，windows核心编程没怎么看。轮子哥的GacUI简单的看了一下，但是担心win98用不了【还有win2k】，GacUI 应付这种需求，恐怕没什么意思了。
有时间写一个简单的winapp开发教程，起码证明自己慢慢做过一个东西。
2017-01-26 不打算更新winapp开发教程了。现在比较主流的开发框架：Electron, PyQt5, QWebView。都可以使用cpp扩展——虽然对于win2k之类的支持不太行，但是如果找了一份面向2k，xp等编程的工作我个人认为还是尽早辞了吧，我也不为旧事物续一秒了。
2018 winapp教程的事情弃坑了。</description>
    </item>
    
    <item>
      <title>避免一些负能量</title>
      <link>https://svtter.github.io/2017/01/22/%E9%81%BF%E5%85%8D%E4%B8%80%E4%BA%9B%E8%B4%9F%E8%83%BD%E9%87%8F/</link>
      <pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/01/22/%E9%81%BF%E5%85%8D%E4%B8%80%E4%BA%9B%E8%B4%9F%E8%83%BD%E9%87%8F/</guid>
      <description>谈谈生活。
突然不写技术方面的东西有点不习惯——写了许多技术的小稿子，但是没有完整的写出来的，也是有点不好意思——每个人生活都是有一个理念的，不管自己意识到没有，他都在那里。
同理心（英语：Empathy），或称做換位思考、神入或共情，指站在對方立場設身處地思考的一種方式，即於人际交往过程中，能够体会他人的情绪和想法、理解他人的立场和感受，并站在他人的角度思考和处理问题。
同理心 我想着重强调一下同理心这个东西。生活中很多问题，如果有了同理心，其实可以在很大程度上避免许多问题。就送餐小哥来说，对客户有了同理心，可以理解客户可能处在许多不同的状态，比较饿，很饿，不太饿。应对这几个状态，再考虑到自己的送餐速度，应该能够在一定程度上把握客户的心情。很饿，送餐速度又很慢，对要求又没有满足，肯定心情很差。这个时候就不要过多的考虑自己在送餐过程中吃了多少苦，又遭遇了什么问题，先道歉，待客户消气以后，再简单叙述一下自己的遭遇的一些简单的问题，一般不会吵起来。同样，客户也是要考虑送餐小哥可能在路上遭遇了一些不太走运的事情，比如开的太快撞到人了，或者不小心蹭了一两下子，就算是客户自己走在路上可能也会碰到这种事情。因为选择了外卖，本身在路段上就没有彻底的保证，所以，身为客户，要一定程度上接受速度慢的问题，多一些体谅。
就我自己而言，有了同理心，在他人的角度上思考的问题，理解，消气。然后从规则制度上，考虑这个问题，究竟他有没有过失。千万不要恶语相向。这样肯定不能解决问题。
不要太容易生气 你在路上总会碰见傻逼，这是很难避免的。不要为傻逼而生气，更不要因为一句话两句话动怒。二套有句话说的很对，要根据实际情况判断自己是否表现出生气。生气伤身。
我觉得，碰见让你生气的事情，就想明白一个问题，一般能让你生气的人都是傻逼，你要是为了一个傻逼的傻逼话而生气，你就落到和他一个境地了。当然，不要用我说的这句话来规劝别人，当人的火气真上来，是拦不住的，会起反效果。
不要责备压力大，心情已经不好的人 碰见这种事情，一定要控制好情绪。有脾气不能不释放，但是一定要选择方式释放。火气已经上来了，尽量选择不伤害他人的方式发泄。否则，轻则伤人，重则伤己。当你想要责备的人已经处于压力大，心情差的状态的时候，你责备的话只会起到反效果。这个时候被责备的人不会考虑自己的过失，反而会强化自己心情不好的那些方面，从而导致问题更加扩大。
不要试图教育一些已经很傻逼的人 他不会感谢你，也不会听你的劝告。敬而远之。当然，如果是挚友，可以考虑与之交流——但是如果是一个听不进话的人，你还是闭嘴吧，别浪费自己的感情了。
确实是一些比较幼稚的想法，希望不吝赐教。
本文保留所有权力，转载请联系作者。</description>
    </item>
    
    <item>
      <title>不常见ISP之难</title>
      <link>https://svtter.github.io/2016/08/09/%E4%B8%8D%E5%B8%B8%E8%A7%81isp%E4%B9%8B%E9%9A%BE/</link>
      <pubDate>Tue, 09 Aug 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/08/09/%E4%B8%8D%E5%B8%B8%E8%A7%81isp%E4%B9%8B%E9%9A%BE/</guid>
      <description>&lt;p&gt;不常见的ISP使用起来是非常痛苦的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>备份自己的博客内容</title>
      <link>https://svtter.github.io/2016/08/07/%E5%A4%87%E4%BB%BD%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9/</link>
      <pubDate>Sun, 07 Aug 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/08/07/%E5%A4%87%E4%BB%BD%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9/</guid>
      <description>&lt;p&gt;由于博客经常更换，好的坏的文章，无意中丢失了不少。打算以后好好备份自己的博客文件，设置一下备份频率。&lt;/p&gt;
&lt;p&gt;考虑一下，需要备份的文件主要是post。行文至此，猛然想到其实可以直接用git实现，但是既然已经配置了邮件服务，那么就这样吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近看到的那些有意思的东西</title>
      <link>https://svtter.github.io/2016/08/02/%E6%9C%80%E8%BF%91%E7%9C%8B%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%B8%9C%E8%A5%BF/</link>
      <pubDate>Tue, 02 Aug 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/08/02/%E6%9C%80%E8%BF%91%E7%9C%8B%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%B8%9C%E8%A5%BF/</guid>
      <description>语言系列 使用C写一个lisp clojure疾风教程 几分钟clojure python Python调用C/CPP模块 Python中文学习大本营 node/javascript express-blog 批量教程 common-lisp clisp 自动安装工具 ansible 网络 wireshark dstat – other things 工具 tmux http://blog.jobbole.com/87584/ 除此之外 Windows以及Linux解决方案 博客 http://www.pythonpub.com/ </description>
    </item>
    
    <item>
      <title>4点起床践行记</title>
      <link>https://svtter.github.io/2016/08/01/4%E7%82%B9%E8%B5%B7%E5%BA%8A%E8%B7%B5%E8%A1%8C%E8%AE%B0/</link>
      <pubDate>Mon, 01 Aug 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/08/01/4%E7%82%B9%E8%B5%B7%E5%BA%8A%E8%B7%B5%E8%A1%8C%E8%AE%B0/</guid>
      <description>&lt;p&gt;看了阮一峰老师的博客，有个时间管理法则。其中，包括了一条&lt;strong&gt;4点起床&lt;/strong&gt;。于是，就在翻看了这本书，如今切实的践行一番。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google-chrome浏览器输入法</title>
      <link>https://svtter.github.io/2016/07/29/google-chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5%E6%B3%95/</link>
      <pubDate>Fri, 29 Jul 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/07/29/google-chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5%E6%B3%95/</guid>
      <description>最近google推出了个浏览器插件输入法。
具体的名字是google输入工具：
可以在chrome内核的浏览器中使用。唯一的问题是速度有些慢。但是对于许多Linux发行版的使用者来讲，相比一些fcitx和ibus框架给人感觉要好很多。
fcitx太丑了。配置起来比较麻烦。ibus相对优秀一些，个人感觉。但是对于不同的发行版而讲，配置起来都有一定的难度。这对Linux/PC桌面环境的输入法有一定的改善。
可以复制粘贴嘛。</description>
    </item>
    
    <item>
      <title>近期阅读</title>
      <link>https://svtter.github.io/2016/06/03/%E8%BF%91%E6%9C%9F%E9%98%85%E8%AF%BB/</link>
      <pubDate>Fri, 03 Jun 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/06/03/%E8%BF%91%E6%9C%9F%E9%98%85%E8%AF%BB/</guid>
      <description> 时间管理七句话 4点起床 </description>
    </item>
    
    <item>
      <title>Windows使用Linux虚拟机作为开发环境</title>
      <link>https://svtter.github.io/2016/05/02/windows%E4%BD%BF%E7%94%A8linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%9C%E4%B8%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 02 May 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/05/02/windows%E4%BD%BF%E7%94%A8linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%9C%E4%B8%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>我的环境：ubuntu server 14.04，有2个网卡，eth1是能上外网的地址，配置了ip，网关，mask，
eth0是为内网提供各种服务，比如pppoe, dhcp，只配置了ip和mask。
根据之前的文章（http://blog.chinaunix.net/uid-563939-id-4340396.html），pppoe客户端已经能够能获取到地址，掩码，网关和DNS，
但是此时客户端是不能上网的，还需要对ubuntu server做如下配置：
1、打开ip_forward
临时打开：echo “1”&amp;gt;/proc/sys/net/ipv4/ip_forward
永久打开：修改/etc/sysctl.conf，取消这一行的注释：net.ipv4.ip_forward= 1， 然后运行sysctl -p使之立即生效。
2、增加nat
iptables -t nat -A　POSTROUTING -o eth1 -j SNAT –to-source xxx.xxx.xxx.xxx (xxx.xxx.xxx.xxx为能够上外网的网卡ip)
以上内容为转载，转载地址
因为赛尔网不能使用Linux客户端，但是许多开发等均建立在Linux的基础上 — 为此十分痛苦，于是使用虚拟机来使用Linux，但是双网卡配置方面出了一些问题，于是参照了上面的文章。</description>
    </item>
    
    <item>
      <title>About-me</title>
      <link>https://svtter.github.io/2016/04/29/about-me/</link>
      <pubDate>Fri, 29 Apr 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/04/29/about-me/</guid>
      <description>坐标帝都，开源爱好者。
Email：blog#svtter.cn
TODO 404，500公益优化 post部分bug解决 搜索功能优化 后台编辑优化 Friends 英勇的小明 奋斗的承诺 Kinice It-tree 老曹 曾用博客 http://blog.csdn.net/svitter https://segmentfault.com/blog/svtter </description>
    </item>
    
    <item>
      <title>Friend links</title>
      <link>https://svtter.github.io/2016/04/29/friendlinks/</link>
      <pubDate>Fri, 29 Apr 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/04/29/friendlinks/</guid>
      <description> http://kinice.top http://www.fddcn.cn/ </description>
    </item>
    
    <item>
      <title>Github 使用方法</title>
      <link>https://svtter.github.io/2016/04/27/github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 27 Apr 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/04/27/github%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>显示部分指定代码 https://github.com/django/django/blob/1.9/django/contrib/auth/views.py#L57-L93
在指定代码后添加#L57-L93以此来指定高亮特殊位置
利用gist贴代码 具体见 https://gist.github.com
问题是国内如果没翻墙就看不见了。
使用issue作为个人博客 可以利用 user.github.io代码库的issue作为自己的个人博客，信息发布的渠道</description>
    </item>
    
    <item>
      <title>Python on Windows</title>
      <link>https://svtter.github.io/2016/04/27/pythononwindows/</link>
      <pubDate>Wed, 27 Apr 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/04/27/pythononwindows/</guid>
      <description>在Windows上使用Python总会有这样或者那样的坑等着我们去踩。
pip问题 如果安装了两个版本的python，例如python3.5和python2.7，悲剧就发生了。除非每次都使用pip –no-cache来解决缓存问题，否则pip2可能会使用pip3的缓存，导致软件包出现稀奇的问题。
最好的解决方案是使用virtualenv来创建一个虚拟环境。安装virtualenv的方法很多，不再详谈。
有些人使用windows下的git-bash做一些操作，但是也是十分蛋疼的，git-bash这个高科技的东西，本身是在windows下运行，但是拥有bash的特性，查安装文档的时候，容易出现很多问题。本身使用的Python.exe，但是却要使用sh那一套东西，中间会不会出问题？ 后来尝试了一下bash里面的东西，感觉还行。
一般Python文档所说的windows，应该是根据cmd的。但是Powershell这个windows的终端，居然不支持ftype这一类的cmd可用命令，造成又一层的不兼容。着实令人心烦。当然，我也没有深究这个问题，因为碰上一个问题就深究下去，而且深究的意义不是很大，我认为是很浪费时间的。 补充：windows下的Powershell抑或bash，可以利用MinGW来区分。但是往往文档中没有特别表明出来。
一些编码问题 主要就是utf-8的bom的问题。这个问题纯属M$想多了，导致各种讨厌的不兼容，最常见的出错。
终极解决方案 不要在Windows上使用Python，如果非常想要这么做，建议安装一个虚拟机，然后使用ssh连接到虚拟机上进行开发。使用桥接网卡，和NAT转接，保证联网。
现在再次修订一下，我现在认为，最佳的解决方案是，使用ssh链接到阿里云或者腾讯云使用。使用neovim+tmux+ipython来书写调试代码，效果非常。</description>
    </item>
    
    <item>
      <title>Ghost – wonderful things</title>
      <link>https://svtter.github.io/2016/04/19/ghost-wonderfulthings/</link>
      <pubDate>Tue, 19 Apr 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/04/19/ghost-wonderfulthings/</guid>
      <description>今天一时兴起想使用主机部署Ghost，但是由于主机不能直接部署daocloud的镜像，于是另做决定，尝试一下直接使用docker，结果发现：
太棒了！这简直是我梦寐以求的！ –沃·兹基硕德
部署也是十分的方便，简直不敢相信。此外，居然有我想要的iOS-app，简直不能忍。
Ghost是什么 一个博客平台，号称干死WordPress
如何部署 也算是给daocloud写一个广告文了。docker真是好啊。
登陆 https://www.daocloud.io/ 注册一个daocloud账号，然后绑定微信 — 这样你就有了三个容器，其中两个我们用于部署ghost，一个用来作为volume（一个分布式存储，用来保存生成的文件，例如主题等）。
首先我们先配置一下volume，命名为ghost-disk —— 当然，名称并不重要，我想10G的空间应该也不会完全用于ghost的静态文件。
部署新的代码。首先打开应用列表-&amp;gt;创建应用-&amp;gt;daocloud镜像-&amp;gt;ghost。
然后看这里就可以了2333 https://dashboard.daocloud.io/packages/3a8d7db6-86c6-4ce3-8f44-c880d3b56128
添加disqus，多说 添加TOC目录大纲 分享到微信微博 </description>
    </item>
    
    <item>
      <title>Leanote – theme_API优化</title>
      <link>https://svtter.github.io/2016/03/10/leanote-theme_api%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 10 Mar 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/03/10/leanote-theme_api%E4%BC%98%E5%8C%96/</guid>
      <description>我本身不是应该前端的Hacker（当然我自己也不知自己属于什么Hacker)，于是决定在themeAPI上参见一下hexo的做法。
但是再此之前，想要首先将leanote的markdown渲染API加入到themeAPI里面去，所以首先研究一下官方的主题是如何运作的。</description>
    </item>
    
    <item>
      <title>Leanote – 源码阅读</title>
      <link>https://svtter.github.io/2016/03/10/leanote-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link>
      <pubDate>Thu, 10 Mar 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/03/10/leanote-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</guid>
      <description>写一下如何阅读Leanote的源代码。
上面的go的框架我是没有仔细看，感觉似乎用到了很多开源项目？整体来说，leanote应该是一个伟大的项目。
熟悉gulpfile 这里有一篇日志 https://segmentfault.com/a/1190000000372547
基本读完以后就懂了。cnpm install -g gulp安装一下。
大体上读一读可以发现，gulpfile用于构造leanote的前端内容。
后记2017.12.11 这篇博文后来我没有写下去，因为后面不再使用leanote——读代码这件事情，其实不需要耗费太多时间，就可以做的不错。</description>
    </item>
    
    <item>
      <title>博客重新开始更新</title>
      <link>https://svtter.github.io/2015/01/27/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Tue, 27 Jan 2015 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2015/01/27/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%E6%9B%B4%E6%96%B0/</guid>
      <description>本文可以随意转载，但是转载请保留本信息.
重新开始更新自己的blog了，之前一段时间的文章都在 http://segmentfault.com/blog/svtter
segmentfault感觉着实不错= =
以后blog中各种发解题报告各种发思路各种发知识。
坦白说之前的blog真心是懒得更新= =</description>
    </item>
    
    <item>
      <title>悲剧了</title>
      <link>https://svtter.github.io/2015/01/21/%E6%82%B2%E5%89%A7%E4%BA%86/</link>
      <pubDate>Wed, 21 Jan 2015 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2015/01/21/%E6%82%B2%E5%89%A7%E4%BA%86/</guid>
      <description>本文可以随意转载，但是转载请保留本信息.
手贱删除了windows的注册表，因为之前装arch的时候硬盘有些位置没有对齐，造成我重装win7的时候把
archlinux也弄没了TAT最惨的莫过于一些文章都没有了。操作系统网络等资源倒是还能从github上找回，
但是似乎不是最新的。虽然是考完了，但是看到大把大把的总结资料没了也着实心疼。
不管啦，没了就没了吧。
这次同步更新！在segmentfault和我自己的博客上同步更新，一般segmentfault会更快一点。哎，一定
要及时备份数据，不然很容易就悲剧了。
因为hexo的主题神马的我没有备份（也有一个，不过比较老了）。所以有时间的时候再弄把。</description>
    </item>
    
    <item>
      <title>使用cd快速在目录间移动</title>
      <link>https://svtter.github.io/2014/11/26/%E4%BD%BF%E7%94%A8cd%E5%BF%AB%E9%80%9F%E5%9C%A8%E7%9B%AE%E5%BD%95%E9%97%B4%E7%A7%BB%E5%8A%A8/</link>
      <pubDate>Wed, 26 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/11/26/%E4%BD%BF%E7%94%A8cd%E5%BF%AB%E9%80%9F%E5%9C%A8%E7%9B%AE%E5%BD%95%E9%97%B4%E7%A7%BB%E5%8A%A8/</guid>
      <description>本文出自&amp;lt;svtter.github.io&amp;gt; 难得看见一篇好文= =
操作方法 在此学习并且记录。
标记一个书签: mark [书签] 进入一个书签: g [书签] 输出全部标签: gs 实现原理 sudo vim /etc/profile
也可以使用:w !sudo tee %这种方式来保存</description>
    </item>
    
  </channel>
</rss>
