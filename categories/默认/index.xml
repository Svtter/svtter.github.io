<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>默认 on Svtter's Blog</title><link>https://svtter.cn/categories/%E9%BB%98%E8%AE%A4/</link><description>Recent content in 默认 on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 23 Jan 2018 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.cn/categories/%E9%BB%98%E8%AE%A4/index.xml" rel="self" type="application/rss+xml"/><item><title>写博客这个事情</title><link>https://svtter.cn/p/%E5%86%99%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%AA%E4%BA%8B%E6%83%85/</link><pubDate>Tue, 23 Jan 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%86%99%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%B8%AA%E4%BA%8B%E6%83%85/</guid><description>&lt;p&gt;写博客这个事情不是我自发进行的，成因也很有趣，是在本科&lt;a class="link" href="https://blog.csdn.net/sxhelijian" target="_blank" rel="noopener"
&gt;贺立坚&lt;/a&gt;老师的指导下坚持下来的。&lt;/p&gt;
&lt;p&gt;写博客的优点其实可以想出很多，但是于我而言，其根本原因还是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我做了一些让我自己很得意的东西，想给大家看看&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这就是我的初衷。此外，&lt;a class="link" href="https://blog.csdn.net/svitter" target="_blank" rel="noopener"
&gt;CSDN 排名&lt;/a&gt;的上升以及一些统计数据的观察也可以给我带来许多欢乐，这是一步步坚持下来收获的。&lt;/p&gt;
&lt;p&gt;有许多优质的博客给我带来了许多收获，我不认为那些作者，做这种事情就是“有所图谋”的，很多时候都是无私奉献的一种精神，就像是开源软件一样。认真的去做一件事，长期做一件事情是很有成就感的，也是能够收获喜悦，升华自我价值的。当然，值得一提的是，奉献是开源精神所包含的精神之一，但不是全部。&lt;/p&gt;
&lt;p&gt;我觉得写博客是一件很好的事情，有点像是QQ空间的升级版。写博客的过程中，会对博客题目进行反思，会对自己的文字进行思考，甚至可以在这个过程中对于之前一些没怎么在意的事情有了新的看法。比如，在写这篇文章之前，我没有意识到我写博客的真正目的，而随着这篇博客慢慢的完成，我意识到了这件事情。&lt;/p&gt;
&lt;p&gt;此外，在叙述一个不清楚的事情的时候，写博客是一个梳理思路的好方法，就如同给别人陈述一遍你的思路一样。只是，这个听众并不局限于你的地理位置，而是通过互联网广泛传播。&lt;/p&gt;
&lt;p&gt;戒骄戒躁，继续努力。&lt;/p&gt;</description></item><item><title>这个不是很讲究的博客</title><link>https://svtter.cn/p/%E8%BF%99%E4%B8%AA%E4%B8%8D%E6%98%AF%E5%BE%88%E8%AE%B2%E7%A9%B6%E7%9A%84%E5%8D%9A%E5%AE%A2/</link><pubDate>Mon, 27 Nov 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%BF%99%E4%B8%AA%E4%B8%8D%E6%98%AF%E5%BE%88%E8%AE%B2%E7%A9%B6%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid><description>&lt;h2 id="功能列表"&gt;功能列表
&lt;/h2&gt;&lt;p&gt;这个博客的雏形很早之前就写好了，但是一直没有挂上去，主要有这几个原因：一是写的不好，很多功能都没写全，写的也不太走心；二是长得有点丑，当然，这一点也可以放在功能不全这个问题里面。总而言之，就是不太讲究。这个不讲究还体现在之前的文章Latex适配没做好，等等。&lt;/p&gt;
&lt;p&gt;完成博客的基本功能后，准备向着知识库的方向迈进一下，做成笔记形式的东西。其实做成笔记形式的东西并不难，把接口做好，然后写几个符合自己心意的前端就好了。只不过这时间上可能有点扛不太住，所以现在web方面做点事情，等以后有时间了，再去做别的。可以参考&lt;a class="link" href="http://chaoo.oschina.io/" target="_blank" rel="noopener"
&gt;主题&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="关于web"&gt;关于web
&lt;/h2&gt;&lt;p&gt;说一点观点，web这个东西随着app的盛行，可能生存空间就像是原来的pc，或者说伴随着pc吧，流量会变得小很多。这也是没办法的事情，虽然不至于被逼死。但是不能说这个东西就不做了，不现实。web会以另一种形式存在，比如说我们喜欢的web-app【微信小程序，支付宝小程序】等等继续存在，当然，还有大家称的h5【react-native】等等。&lt;/p&gt;
&lt;p&gt;现在的公众如果需要什么功能，可能在手机商店先搜索的概率更大一些，这也对某些新型的创业公司提出了挑战。这个事情可能被其他人提出很多次了，可能我发现的有点晚了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以后写文章还是要先列个大纲，然后往里面填写内容，写到这里我已经忘记我之前想说什么了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;web开发依旧是猛如虎，虽然现在机器学习又炒的很热，我也很不能免俗的投入到机器学习的学习热潮之中。。&lt;/p&gt;
&lt;h2 id="这个博客用的技术"&gt;这个博客用的技术
&lt;/h2&gt;&lt;p&gt;Django，Docker，Bootstrap；以后再添加什么再说。当然，还有SQLite等。&lt;/p&gt;
&lt;p&gt;其中我觉得最有必要吹一下的还是Docker，Docker可能需要耗费你一周的时间进行学习，当然，因人而异，最初的时候我学习这门”技术“大概就是用了一个周的时间，然后就开始了几次测试；最初是因为一些云服务商提供这个东西【免费】我猜逼着自己去学，学了之后发现用的不太好——我觉得这个事情云服务商还是要背锅的，具体我就不点名了，做的真的非常不友好。不如自己去找两本书学习一下，以学习一个虚拟化技术为目标去学习。&lt;/p&gt;
&lt;p&gt;听说最近阿里推出了自己的容器技术，不过我没有精力看——有是的确应该有的。容器的好处就是你可以在本地搞好配置清单，或者抄一份配置清单，然后ssh到服务器上面部署一下，过程非常流畅，很舒服。&lt;/p&gt;
&lt;h2 id="我更喜欢作为什么"&gt;我更喜欢作为什么
&lt;/h2&gt;&lt;p&gt;我想了一下，我更喜欢作为一个原型开发工程师——这个名词是我自己的发明的，我也没有上网去查查有没有类似的名词。原型开发工程师的意思是做一些人们想要做的东西，但是实现起来没有必要做的非常彻底的东西。原型开发工程师是很痛苦的，尤其是在设计完之后开始写代码的过程。不是说设计完了，这个东西就实现了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;话说如果人工智能能够做到我设计完就能实现，还不用我非得用一些特别的领域设计语言来做的话，那真是虎的一批啊。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;原型的最好处是不用在一个地方死抠着，做出东西更有成就感，也更容易致富一些。这个地方牵扯手艺的问题。手艺的问题应该作为另一篇博文来讲一下。&lt;/p&gt;
&lt;h2 id="回学校的一些感想"&gt;回学校的一些感想
&lt;/h2&gt;&lt;p&gt;嗯，来读研了。感觉研究生是非常有必要读的，尤其是本身作为二本院校的毕业生，很多知识的宽度与深度都是不够的。搞过的东西听过的课重新搞一遍，感觉是不一样的。对于有些东西实现没有头绪，现在来看看，收获了很多的思路，也把解决许多老旧的问题，感觉自己的开发水平应该又上了一个台阶。应该属于内功的部分吧。&lt;/p&gt;
&lt;h2 id="bug"&gt;BUG
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;RSS feed 存在问题【修改文章后会更改文章的时间线】&lt;/li&gt;
&lt;li&gt;目录出现小问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个博客应该没有多少人关注，阅读量少的可怜。但是如果你有什么想法，可以先发邮件给我。&lt;code&gt;svtter#qq.com&lt;/code&gt;。&lt;/p&gt;</description></item><item><title>导出hexo博客</title><link>https://svtter.cn/p/%E5%AF%BC%E5%87%BAhexo%E5%8D%9A%E5%AE%A2/</link><pubDate>Mon, 04 Sep 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%AF%BC%E5%87%BAhexo%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p&gt;最近自己重写了一套博客系统，打算把博客和知识库结合起来，做一套强大的玩意儿。&lt;/p&gt;
&lt;p&gt;今天做了一些简单的工作，觉得这个导出hexo文章挺有意思，于是写在这里。&lt;/p&gt;
&lt;p&gt;markdown + yaml 这种解析方式没有直接能够使用的，有些markdown文章中缺少&lt;code&gt;---&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;也能进行解析，还有几个tag存在问题。**因此为了能够直接使用原本博客中的相关内容，&lt;/p&gt;
&lt;p&gt;直接使用hexo本身的parse来解析，即&lt;code&gt;hexo-front-matter&lt;/code&gt;。**&lt;/p&gt;
&lt;p&gt;可以直接从github上面找到对应的API，很简单的粗暴。&lt;/p&gt;</description></item><item><title>博客迁移域名至svtter.github.io</title><link>https://svtter.cn/p/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%9F%9F%E5%90%8D%E8%87%B3svtter.github.io/</link><pubDate>Wed, 09 Aug 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%9F%9F%E5%90%8D%E8%87%B3svtter.github.io/</guid><description/></item><item><title>快速上手编辑器</title><link>https://svtter.cn/p/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E7%BC%96%E8%BE%91%E5%99%A8/</link><pubDate>Fri, 21 Jul 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E7%BC%96%E8%BE%91%E5%99%A8/</guid><description>&lt;p&gt;Atom因为总是需要代理来下载插件的原因，又被放弃了。一个新技术在中国的freelancer中收不收欢迎，似乎很大程度上取决于，这个东西下载的速度；很明显，Atom存在下载速度问题，然而vscode不存在；在技术栈很相似的情况下，vscode的书写体验十分的流畅，远远超过了atom，甚至不加插件的vim；&lt;/p&gt;
&lt;p&gt;通过廖雪峰的安利我使用了vscode。一个&lt;strong&gt;现代&lt;/strong&gt;的编辑器，在我看来，似乎只有那么几件事情需要注意下，既可以很愉快的开始使用了。&lt;/p&gt;
&lt;h2 id="开始"&gt;开始
&lt;/h2&gt;&lt;p&gt;在vscode的欢迎使用里面，我们可以看到一个很大的“自定义”部分，在其下面，可以看到工具与语言，安装键盘快捷方式等选项；这个时候，安装你需要的语言，以及你需要的快捷方式即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;类似的，在atom里面，也有相同的页面&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;如果不走上面的部分，可以按照我所想的，走这个下面的通用流程：&lt;/p&gt;
&lt;h2 id="vi-bind"&gt;vi-bind
&lt;/h2&gt;&lt;p&gt;放在第一点的就是vim按键的相关绑定；基本每一个编辑器都会有一个vim的绑定插件；在vscode上面，你只需要在右方package里面找到他，&lt;/p&gt;
&lt;p&gt;然后下载使用就可以了。我们可以看到许许多多的emulation来实现vim在vscode里面的相关操作，不过就我而言，使用官方的这个·vim·插件，&lt;/p&gt;
&lt;p&gt;就足够使用了。&lt;/p&gt;
&lt;h2 id="安装相关的语言"&gt;安装相关的语言
&lt;/h2&gt;&lt;p&gt;然后就是搜寻相关语言的软件包；让我们搜索一下python和js。这个时候可以先学习一下&lt;code&gt;cmd+p&lt;/code&gt;这个东西，或者是&lt;code&gt;shift+cmd+p&lt;/code&gt;，这两个一方面是用来呼叫出&lt;code&gt;命令&lt;/code&gt;，另一方面可以快速&lt;code&gt;跳转&lt;/code&gt;文件。一般情况下，还可以跳转&lt;code&gt;function&lt;/code&gt;。类似的东西，例如vim里面的ctrlp，sublime里面的&lt;code&gt;ctrl-p&lt;/code&gt;等等。&lt;/p&gt;
&lt;h2 id="命令行入口"&gt;命令行入口
&lt;/h2&gt;&lt;p&gt;每一个工程都应该有一个命令行入口，用来调试相关的命令；虽然这在yin看来，是一个非常吃人精力，而且不讨好的设计，但是我觉得还算不错；一个比较成熟的编辑器都有这一部分；使用shell的时候，只需要从&lt;code&gt;cmd+p&lt;/code&gt;或者&lt;code&gt;shift+cmd+p&lt;/code&gt;里面输入终端就好了。&lt;/p&gt;
&lt;h2 id="最后"&gt;最后
&lt;/h2&gt;&lt;p&gt;使用一个新的编辑器并不是一件困难的事情。Vim以及Emacs的确很强大，但是在配置的过程中毫无疑问的会占用许多时间，这些时间在我看来，很多时候都不一定是必要的。除非需要对于某个特性进行细细的定制，否则不需要研究的那么透彻。M$无论是编辑器还是IDE，都可以说是无可挑剔，为什么不尝试一下新的东西呢？&lt;/p&gt;</description></item><item><title>如何更新自己的主题</title><link>https://svtter.cn/p/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%BB%E9%A2%98/</link><pubDate>Sun, 16 Jul 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%BB%E9%A2%98/</guid><description>&lt;p&gt;在使用hexo的主题的时候，许多人经常把主题fork到自己的repo，对我而言，这是没有必要的。&lt;/p&gt;
&lt;p&gt;一般情况下，我不需要修改很多关于主题的内容，只需要改改配置文件就可以了，但是每次&lt;/p&gt;
&lt;p&gt;更新，&lt;code&gt;git pull&lt;/code&gt;的时候都提示需要提交自己的修改，这个时候应该怎么做呢？&lt;/p&gt;
&lt;h2 id="使用git-stash"&gt;使用&lt;code&gt;git stash&lt;/code&gt;
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt;的作用是，保存当前的工作进度，此外会分别对暂存区和工作区的状态进行保存。&lt;/p&gt;
&lt;p&gt;我们此时保存的状态，就是我们修改的&lt;code&gt;_config.yml&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如此一来，我们使用git stash进行保存，这样，repo的状态返回到最近的一次提交；此时，&lt;/p&gt;
&lt;p&gt;进行版本更新即可，我们就可以在没有修改&lt;code&gt;_config.yml&lt;/code&gt;的情况下更新我们的主题。&lt;/p&gt;
&lt;h2 id="如何恢复"&gt;如何恢复
&lt;/h2&gt;&lt;p&gt;但是现在问题也出现了，我们既然保存了，如何恢复呢？此时，使用&lt;code&gt;git stash pop&lt;/code&gt;命令，&lt;/p&gt;
&lt;p&gt;我们就可以恢复最新保存的工作进度，并且将恢复的工作进度从存储的工作进度列表中清除。&lt;/p&gt;
&lt;p&gt;此时，我们进行的修改，就可以重新作用于&lt;code&gt;_config.yml&lt;/code&gt;文件上。不过一般情况下，会出现&lt;/p&gt;
&lt;p&gt;几个conflicts，我们手动修改一下即可。&lt;/p&gt;
&lt;h2 id="为什么不直接commit"&gt;为什么不直接commit
&lt;/h2&gt;&lt;p&gt;如果commit了自己的改动，再进行pull的时候，如果出现了不能&lt;code&gt;auto merge&lt;/code&gt;的冲突，会很难受，&lt;/p&gt;
&lt;p&gt;需要&lt;code&gt;fetch&lt;/code&gt;然后手动进行处理。&lt;/p&gt;
&lt;p&gt;而且一旦&lt;code&gt;commit&lt;/code&gt;，难免&lt;code&gt;auto merge&lt;/code&gt;，我们的代码就会领先&lt;code&gt;origin repo&lt;/code&gt;一个&lt;code&gt;commit&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;在拉取代码时会造成不必要的麻烦。&lt;/p&gt;</description></item><item><title>对BaaS的一些思考</title><link>https://svtter.cn/p/%E5%AF%B9baas%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link><pubDate>Wed, 12 Jul 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%AF%B9baas%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid><description>&lt;p&gt;BaaS，是Backend as a Service，即后端即服务。&lt;/p&gt;
&lt;p&gt;在使用BaaS时，可以减少许多因对后端本身不擅长而增加的创业成本。&lt;/p&gt;
&lt;p&gt;在我司，噗嗤，的小程序中，大部分使用的都是BaaS的解决方案。一方面，公司的人手不是&lt;/p&gt;
&lt;p&gt;很足，没有太多精力去开发后端的相关部分；另一方面，开发后保证后端持续服务，以及&lt;/p&gt;
&lt;p&gt;相关的可靠性，都是不能保证的。所以baas是一个非常好的方案。&lt;/p&gt;
&lt;p&gt;目前就使用过两个baas，一个是bmob，一个是leancloud；leancloud似乎是有腾讯背景的&lt;/p&gt;
&lt;p&gt;企业，而bmob则是一个老牌的服务商。两个相对都比较优秀，bmob便宜【噗】，leancloud在&lt;/p&gt;
&lt;p&gt;文档以及多语言支持上面做的更好【有python】，可以说是不分伯仲。&lt;/p&gt;
&lt;p&gt;创业过程中，应该讲究精益创业等【参见南京大学《走进创业》】，把精力集中于整个产品&lt;/p&gt;
&lt;p&gt;的&lt;strong&gt;最关键的部分&lt;/strong&gt;，而不是&lt;strong&gt;事事躬亲&lt;/strong&gt;，导致精力分散，本应该做好的事情没有做好。&lt;/p&gt;
&lt;p&gt;…EOF…&lt;/p&gt;</description></item><item><title>跨站评论系统</title><link>https://svtter.cn/p/%E8%B7%A8%E7%AB%99%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link><pubDate>Tue, 25 Apr 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%B7%A8%E7%AB%99%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid><description>&lt;p&gt;多说马上就关闭了，静态站的评论系统何去何从。&lt;/p&gt;
&lt;p&gt;首先想要分析一下duoshuo的代码，看看自己能否实现。&lt;/p&gt;
&lt;p&gt;不过，在看duoshuo客户端代码的时候没有搞明白到底是如何实现确认目标来源的。&lt;/p&gt;
&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="nx"&gt;多说js加载开始&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="nx"&gt;一个页面只需要加载一次&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text/javascript"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;duoshuoQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;short_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"您的多说二级域名"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://static.duoshuo.com/embed.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="nx"&gt;多说js加载结束&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="nx"&gt;一个页面只需要加载一次&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;似乎是自己生成生成一条Javascript代码，然后把head以及body加在上面，进而出一个界面。&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="http://static.duoshuo.com/embed.js" target="_blank" rel="noopener"
&gt;embed.js&lt;/a&gt;就没有再看，好麻烦。&lt;/p&gt;
&lt;h2 id="isso"&gt;isso
&lt;/h2&gt;&lt;p&gt;在网上寻找一个合适的开源评论系统&lt;a class="link" href="https://posativ.org/isso" target="_blank" rel="noopener"
&gt;isso&lt;/a&gt;，可以自己搭建在主机上，使用Python+SQlite3实现。具体实现在其开源的代码中。&lt;/p&gt;
&lt;p&gt;涉及到的知识有几个，一个是&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener"
&gt;CORS&lt;/a&gt;，另一个还是CORS。&lt;/p&gt;
&lt;p&gt;个人认为知识储备基本有了，但是如果要写还是很麻烦，于是就暂且弃坑了。&lt;/p&gt;
&lt;p&gt;可以通过这个docker来部署&lt;a class="link" href="https://hub.docker.com/r/wonderfall/isso/" target="_blank" rel="noopener"
&gt;wonderfall/isso&lt;/a&gt;，不过感觉docker-compose似乎存在问题，我无法直接挂载&lt;code&gt;./config:/config&lt;/code&gt;，因此对于domer-compose中做此修改&lt;code&gt;...../config/isso.conf:/config/isso.conf&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;此外，对于Flask实现这个留言系统，可以考虑通过&lt;a class="link" href="https://flask-cors.readthedocs.io/en/latest/" target="_blank" rel="noopener"
&gt;flask-cors&lt;/a&gt;来实现。&lt;/p&gt;</description></item><item><title>树莓派开发小指南</title><link>https://svtter.cn/p/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 17 Feb 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8C%87%E5%8D%97/</guid><description>&lt;p&gt;考研分数的事情暂且不提。&lt;/p&gt;
&lt;p&gt;最近一直在做树莓派的开发，主要涉及直播，流媒体，摄像头的相关部分。考虑到仅仅是一&lt;/p&gt;
&lt;p&gt;个项目，没有很深入的研究，仅仅是简单看了看能理解的部分就投入使用了。写的晚了，担&lt;/p&gt;
&lt;p&gt;心自己又像之前一样忘记了，就记录成一篇博文，给喜欢的朋友铺铺路。&lt;/p&gt;
&lt;p&gt;虽然目前博客访客不多，也没人留言，但是总有一天会有的，也会有人提出问题等等。那个&lt;/p&gt;
&lt;p&gt;时候就不知道是什么时间了，因此，对于出现的问题要多思考问google，留言我也不一定记&lt;/p&gt;
&lt;p&gt;得，我会尽力回答。&lt;/p&gt;
&lt;h2 id="content"&gt;Content
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="http://www.shumeipaiba.com/wanpai/jiaocheng/16.html" target="_blank" rel="noopener"
&gt;树莓派的国内源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="" &gt;关于摄像头相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="" &gt;操作系统的牵扯知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="http://shumeipai.nxez.com/2015/01/28/raspberry-pi-supports-hard-coded-video-suite.html" target="_blank" rel="noopener"
&gt;使用C语言编写的webcam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;懒得写的内容暂时放了一个连接在上面，没有连接的是还没有时间写。&lt;/p&gt;</description></item><item><title>最近看到的那些有意思的东西</title><link>https://svtter.cn/p/%E6%9C%80%E8%BF%91%E7%9C%8B%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%B8%9C%E8%A5%BF/</link><pubDate>Tue, 02 Aug 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%9C%80%E8%BF%91%E7%9C%8B%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%B8%9C%E8%A5%BF/</guid><description>&lt;h2 id="语言系列"&gt;语言系列
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="http://www.buildyourownlisp.com/chapter1_introduction" target="_blank" rel="noopener"
&gt;使用C写一个lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="http://www.ituring.com.cn/tupubarticle/1793" target="_blank" rel="noopener"
&gt;clojure疾风教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="http://developer.51cto.com/art/201307/401465.htm" target="_blank" rel="noopener"
&gt;几分钟clojure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python"&gt;python
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="http://blog.csdn.net/marising/article/details/2845339" target="_blank" rel="noopener"
&gt;Python调用C/CPP模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="http://www.pythondoc.com/" target="_blank" rel="noopener"
&gt;Python中文学习大本营&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="nodejavascript"&gt;node/javascript
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://github.com/nswbmw/N-blog/wiki/%E7%AC%AC1%E7%AB%A0--%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2" target="_blank" rel="noopener"
&gt;express-blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="http://jinjiang.github.io/h5slides/demo/" target="_blank" rel="noopener"
&gt;批量教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="common-lisp"&gt;common-lisp
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="" &gt;clisp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="自动安装工具"&gt;自动安装工具
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="http://www.the5fire.com/ansible-guide-cn.html" target="_blank" rel="noopener"
&gt;ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="网络"&gt;网络
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="http://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html" target="_blank" rel="noopener"
&gt;wireshark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dstat – other things&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="工具"&gt;工具
&lt;/h2&gt;&lt;h3 id="tmux"&gt;tmux
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="http://blog.jobbole.com/87584/" target="_blank" rel="noopener"
&gt;http://blog.jobbole.com/87584/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="除此之外"&gt;除此之外
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="http://blog.xcatliu.com/2016/04/21/setup-linux-workspace-in-windows/" target="_blank" rel="noopener"
&gt;Windows以及Linux解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="博客"&gt;博客
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="http://www.pythonpub.com/" target="_blank" rel="noopener"
&gt;http://www.pythonpub.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>近期阅读</title><link>https://svtter.cn/p/%E8%BF%91%E6%9C%9F%E9%98%85%E8%AF%BB/</link><pubDate>Fri, 03 Jun 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%BF%91%E6%9C%9F%E9%98%85%E8%AF%BB/</guid><description>&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="http://www.ruanyifeng.com/blog/2016/05/time-management.html" target="_blank" rel="noopener"
&gt;时间管理七句话&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4点起床&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Friend links</title><link>https://svtter.cn/p/friend-links/</link><pubDate>Fri, 29 Apr 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/friend-links/</guid><description>&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="http://kinice.top" target="_blank" rel="noopener"
&gt;http://kinice.top&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="http://www.fddcn.cn/" target="_blank" rel="noopener"
&gt;http://www.fddcn.cn/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Github 使用方法</title><link>https://svtter.cn/p/github-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 27 Apr 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/github-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid><description>&lt;h2 id="显示部分指定代码"&gt;显示部分指定代码
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/django/django/blob/1.9/django/contrib/auth/views.py#L57-L93" target="_blank" rel="noopener"
&gt;https://github.com/django/django/blob/1.9/django/contrib/auth/views.py#L57-L93&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在指定代码后添加&lt;code&gt;#L57-L93&lt;/code&gt;以此来指定高亮特殊位置&lt;/p&gt;
&lt;h2 id="利用gist贴代码"&gt;利用gist贴代码
&lt;/h2&gt;&lt;p&gt;具体见 &lt;a class="link" href="https://gist.github.com" target="_blank" rel="noopener"
&gt;https://gist.github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题是国内如果没翻墙就看不见了。&lt;/p&gt;
&lt;h2 id="使用issue作为个人博客"&gt;使用issue作为个人博客
&lt;/h2&gt;&lt;p&gt;可以利用 &lt;code&gt;user.github.io&lt;/code&gt;代码库的&lt;code&gt;issue&lt;/code&gt;作为自己的个人博客，信息发布的渠道&lt;/p&gt;</description></item><item><title>Leanote – theme_API优化</title><link>https://svtter.cn/p/leanote-theme_api%E4%BC%98%E5%8C%96/</link><pubDate>Thu, 10 Mar 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/leanote-theme_api%E4%BC%98%E5%8C%96/</guid><description>&lt;p&gt;我本身不是应该前端的Hacker（当然我自己也不知自己属于什么Hacker)，于是决定在&lt;code&gt;themeAPI&lt;/code&gt;上参见一下&lt;code&gt;hexo&lt;/code&gt;的做法。&lt;/p&gt;
&lt;p&gt;但是再此之前，想要首先将&lt;code&gt;leanote&lt;/code&gt;的&lt;code&gt;markdown&lt;/code&gt;渲染API加入到&lt;code&gt;themeAPI&lt;/code&gt;里面去，所以首先研究一下官方的主题是如何运作的。&lt;/p&gt;</description></item><item><title>Leanote – 源码阅读</title><link>https://svtter.cn/p/leanote-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link><pubDate>Thu, 10 Mar 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/leanote-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</guid><description>&lt;p&gt;写一下如何阅读Leanote的源代码。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;上面的go的框架我是没有仔细看，感觉似乎用到了很多开源项目？整体来说，leanote应该是一个伟大的项目。&lt;/p&gt;
&lt;h2 id="熟悉gulpfile"&gt;熟悉gulpfile
&lt;/h2&gt;&lt;p&gt;这里有一篇日志 &lt;a class="link" href="https://segmentfault.com/a/1190000000372547" target="_blank" rel="noopener"
&gt;https://segmentfault.com/a/1190000000372547&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本读完以后就懂了。&lt;code&gt;cnpm install -g gulp&lt;/code&gt;安装一下。&lt;/p&gt;
&lt;p&gt;大体上读一读可以发现，&lt;code&gt;gulpfile&lt;/code&gt;用于构造&lt;code&gt;leanote&lt;/code&gt;的前端内容。&lt;/p&gt;
&lt;h2 id="后记20171211"&gt;后记2017.12.11
&lt;/h2&gt;&lt;p&gt;这篇博文后来我没有写下去，因为后面不再使用leanote——读代码这件事情，其实不需要耗费太多时间，就可以做的不错。&lt;/p&gt;</description></item><item><title>博客重新开始更新</title><link>https://svtter.cn/p/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%E6%9B%B4%E6%96%B0/</link><pubDate>Tue, 27 Jan 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%E6%9B%B4%E6%96%B0/</guid><description>&lt;p _="%" endblockquote="endblockquote"&gt;{% blockquote 本文出自 http://svtter.github.io svtter.github.io %}
&lt;p&gt;本文可以随意转载，但是转载请保留本信息.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;重新开始更新自己的blog了，之前一段时间的文章都在 &lt;a class="link" href="http://segmentfault.com/blog/svtter" target="_blank" rel="noopener"
&gt;http://segmentfault.com/blog/svtter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;segmentfault感觉着实不错= =&lt;/p&gt;
&lt;p&gt;以后blog中各种发解题报告各种发思路各种发知识。&lt;/p&gt;
&lt;p&gt;坦白说之前的blog真心是懒得更新= =&lt;/p&gt;</description></item></channel></rss>