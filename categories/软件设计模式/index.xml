<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>软件设计模式 on Svtter's Blog</title><link>https://svtter.cn/categories/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 软件设计模式 on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 06 Aug 2021 10:41:16 +0800</lastBuildDate><atom:link href="https://svtter.cn/categories/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>测试驱动开发应该怎么做？</title><link>https://svtter.cn/p/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%81%9A/</link><pubDate>Fri, 06 Aug 2021 10:41:16 +0800</pubDate><guid>https://svtter.cn/p/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%81%9A/</guid><description>&lt;p>测试驱动开发，是一种保证软件质量，提高研发效率的开发方法。&lt;/p>
&lt;p>测试驱动开发的定义如下：&lt;/p>
&lt;blockquote>
&lt;p>测试驱动开发，英文全称Test-Driven Development，简称TDD，是一种不同于传统&lt;a class="link" href="https://baike.baidu.com/item/%e8%bd%af%e4%bb%b6%e5%bc%80%e5%8f%91%e6%b5%81%e7%a8%8b/3430246" target="_blank" rel="noopener"
>软件开发流程&lt;/a>的新型的开发方法。它要求在&lt;a class="link" href="https://baike.baidu.com/item/%e7%bc%96%e5%86%99/1517598" target="_blank" rel="noopener"
>编写&lt;/a>某个&lt;a class="link" href="https://baike.baidu.com/item/%e5%8a%9f%e8%83%bd/10346898" target="_blank" rel="noopener"
>功能&lt;/a>的&lt;a class="link" href="https://baike.baidu.com/item/%e4%bb%a3%e7%a0%81/86048" target="_blank" rel="noopener"
>代码&lt;/a>之前先编写测试代码，然后只编写使测试通过的功能代码，通过测试来推动整个开发的进行。这有助于编写简洁可用和高质量的代码，并加速开发过程。&lt;/p>&lt;/blockquote>
&lt;p>以上内容来自&lt;a class="link" href="https://baike.baidu.com/item/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/3328831?fr=aladdin" target="_blank" rel="noopener"
>百度百科&lt;/a>。&lt;/p>
&lt;p>百度百科很好的说明了这个问题，我们本文不再赘述，只讲关键问题。&lt;/p>
&lt;h2 id="基本流程">基本流程
&lt;/h2>&lt;ol>
&lt;li>快速新增一个&lt;strong>不能通过&lt;/strong>的测试&lt;/li>
&lt;li>运行测试（运行一个测试，或者所有的测试）&lt;/li>
&lt;li>做&lt;strong>尽可能少&lt;/strong>的改动，使测试通过&lt;/li>
&lt;li>运行所有测试，并使其通过&lt;/li>
&lt;li>重构代码，消除重复设计，优化结构&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">A: write a test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">B: make test pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">C: refactor
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">A -&amp;gt; B -&amp;gt; C -&amp;gt; A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="faq">FAQ
&lt;/h2>&lt;h3 id="功能测试应该怎么写">功能测试应该怎么写？
&lt;/h3>&lt;p>功能测试，应该尽可能只使用本层的函数和接口。
例如，功能测试应尽可能调用 django app 的 URL 接口，而不是直接调用 app 中的业务逻辑。
当然，如果准备数据较为复杂，可以利用一些工具函数，将基础数据加载到系统中。
这些工具函数，我们同样建议在功能测试层实现，而不是直接调用最底层的函数。&lt;/p>
&lt;h3 id="不要忽视重构">不要忽视重构
&lt;/h3>&lt;p>重构是 TDD 的重要环节。可以通过 OOP 等方式尽可能的降低心智负担，从而使得代码简洁明了。
对于许多初学者，在执行一段时间的 TDD 后便无法推进了。很多程度上是因为无法简化程序逻辑。
TDD 能让你变得更好，发现问题。但是 TDD 无法解决原本就存在的设计问题。&lt;/p>
&lt;h3 id="web-前端如何采用tdd">WEB 前端如何采用TDD？
&lt;/h3>&lt;ol>
&lt;li>不测试样式。一般情况下，样式不是核心需求。&lt;/li>
&lt;li>充分利用 HTML tag。例如：利用 class 定位元素&lt;/li>
&lt;li>测试业务逻辑。针对历史 BUG 进行测试。&lt;/li>
&lt;li>充分利用 Javascript 模块。写模块，而非脚本&lt;/li>
&lt;/ol></description></item><item><title>软件设计模式 — 简单工厂模式</title><link>https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 14 Jul 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid><description/></item><item><title>关于软件设计与体系结构的学习</title><link>https://svtter.cn/p/%E5%85%B3%E4%BA%8E%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%A6%E4%B9%A0/</link><pubDate>Thu, 21 May 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%85%B3%E4%BA%8E%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%A6%E4%B9%A0/</guid><description>&lt;p>存在问题，比如进行UML学习的时候，发现简单的设计我也做不出，对UML图掌握程度比较差。&lt;/p>
&lt;p>此外，设计模式并没有好好地敲代码，理解的也不够透彻。&lt;/p></description></item><item><title>软件设计模式 — 行为型模式</title><link>https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 21 May 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>代码全部贴在github。因为UML图挂在processon上了，不过没有加连接。等写完全文就把链接加上。&lt;/p>
&lt;p>首先是对象的行为模式：&lt;/p>
&lt;h2 id="1-策略模式">1. 策略模式
&lt;/h2>&lt;p>针对一组算法，将每个算法封装到具有共同接口的独立类中，从而使得他们可以相互替换。&lt;/p>
&lt;h2 id="2-状态模式">2. 状态模式
&lt;/h2>&lt;p>改变类中的状态。&lt;/p>
&lt;p>策略模式和状态模式很像，不同在：状态模式解决内在状态的改变，策略模式解决内部算法的改变。感觉上没什么特别大的区别。- -。&lt;/p>
&lt;h2 id="3-命令模式">3. 命令模式
&lt;/h2>&lt;hr>
&lt;p>类的行为模式：&lt;/p>
&lt;h2 id="1-模板方法模式">1. 模板方法模式
&lt;/h2></description></item><item><title>软件设计模式 — 单例模式</title><link>https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 23 Apr 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>单例模式确保某个类只有一个实例，而且自行实例化，并向整个系统提供者个实例，提供一个访问它的全局访问点。&lt;/p>
&lt;p>&lt;strong>核心是：创造私有的构造函数&lt;/strong>&lt;/p>
&lt;p>例如：只有一个实例的东西。&lt;/p>
&lt;h2 id="singletonjava">Singleton.java
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nn">singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">singleton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">Singleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 限制产生多个对象&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">"已产生对象实例"&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 通过该方法获得实例对象&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">operation&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 类中其他方法，尽量是static&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h2 id="client">Client
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nn">singleton&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Client&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">"Start."&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Singleton&lt;/span> &lt;span class="n">obj1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Singleton&lt;/span> &lt;span class="n">obj2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">obj2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">"obj1和obj2是同一对象实例"&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">"obj1和obj2并非同一对象实例"&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">"End."&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/pre>
&lt;/div></description></item><item><title>软件设计模式 — 适配器模式</title><link>https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 23 Apr 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>4该模式的目标是，通过一个代理(Adapter)，在原来的类(Adaptee)和客户(Client)之间进行协调，从而达到兼容的目的。&lt;/p>
&lt;p>例如：我的项目中Davinci中使用的模式，将整体的游戏类作为Adapter，把用于通讯的Server类作为成员变量（也就是ObjectAdapter）。&lt;/p>
&lt;h1 id="示意代码">示意代码
&lt;/h1>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nn">adapter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Target&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">specRequest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Adaptee&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//适配者&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">specRequest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">"this is specRequest."&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">ClassAdapter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Adaptee&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Target&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">"This is request in ClassAdapter."&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">ObjectAdapter&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Target&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Adaptee&lt;/span> &lt;span class="n">adaptee&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Adaptee&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">"this. is request in ObjectAdapter."&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">specRequest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">adaptee&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">specRequest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Client&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Target&lt;/span> &lt;span class="n">ctarget&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ClassAdapter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Target&lt;/span> &lt;span class="n">otarget&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ObjectAdapter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ctarget&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">ctarget&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">specRequest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">otarget&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">otarget&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">specRequest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/pre>
&lt;/div></description></item><item><title>正方形是否是长方形的子类？</title><link>https://svtter.cn/p/%E6%AD%A3%E6%96%B9%E5%BD%A2%E6%98%AF%E5%90%A6%E6%98%AF%E9%95%BF%E6%96%B9%E5%BD%A2%E7%9A%84%E5%AD%90%E7%B1%BB/</link><pubDate>Thu, 09 Apr 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%AD%A3%E6%96%B9%E5%BD%A2%E6%98%AF%E5%90%A6%E6%98%AF%E9%95%BF%E6%96%B9%E5%BD%A2%E7%9A%84%E5%AD%90%E7%B1%BB/</guid><description>&lt;p>依据&lt;strong>里氏代换原则&lt;/strong>，子类型必须能够替换掉它们的父类型，子类继承了父类，那么子类可以以父类的身份出现 — 在软件中，把父类都替换成它的子类，程序的行为没有变化。&lt;/p>
&lt;p>所以从这个角度而言，正方形并非是长方形的子类。&lt;/p>
&lt;p>举个例子，如果长方形中存在一个方法，目的是改变长宽的值，但是正方形只有一个边长，那么就可能出现问题。例如如下代码。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Conic&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">getMajor_axis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">getShort_axis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Ellipse&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Conic&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">major_axis&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">short_axis&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setMajor_axis&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">major_axis&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">major_axis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">major_axis&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">getMajor_axis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">major_axis&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setShort_axis&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">short_axis&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">short_axis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">short_axis&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">getShort_axis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">short_axis&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Circle&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Conic&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setRadius&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">radius&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">getRadius&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">getMajor_axis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">getRadius&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">getShort_axis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">getRadius&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>上面是椭圆形的代码。可以改写成矩形来解释这个问题，不过太麻烦我还是先做后面的题目了。&lt;/p></description></item></channel></rss>