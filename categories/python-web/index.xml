<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Web on Svtter&#39;s Blog</title>
    <link>http://192.168.2.39:1313/categories/python-web/</link>
    <description>Recent content in Python Web on Svtter&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 21 Jul 2024 10:48:40 +0800</lastBuildDate>
    <atom:link href="http://192.168.2.39:1313/categories/python-web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dive Into Django Components</title>
      <link>http://192.168.2.39:1313/post/2024-07-21-dive-into-django-components/</link>
      <pubDate>Sun, 21 Jul 2024 10:48:40 +0800</pubDate>
      <guid>http://192.168.2.39:1313/post/2024-07-21-dive-into-django-components/</guid>
      <description>&lt;p&gt;为了实现有效的 django 组件复用，现有的 django template 总让人感觉有所不足。如果能够像前端一样，使用 component 来进行代码复用，那么一定能方便做很多工作。&lt;a href=&#34;https://github.com/EmilStenstrom/django-components&#34;&gt;django-components&lt;/a&gt; 就是这样的工具。这篇文章，让我们探索一下 django components。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dive Into Django and Webpack</title>
      <link>http://192.168.2.39:1313/post/2024-07-20-dive-into-django-and-webpack/</link>
      <pubDate>Fri, 12 Jul 2024 18:26:52 +0800</pubDate>
      <guid>http://192.168.2.39:1313/post/2024-07-20-dive-into-django-and-webpack/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;这是一篇没有完成的文章，后续还会进一步修改。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;如何 Django 和 webpack 来提高开发效率？&#xA;让我们从 &lt;a href=&#34;https://github.com/django-webpack/django-webpack-loader&#34;&gt;django-webpack-loader&lt;/a&gt; 入手，来分析一下这个过程。我们可以看到，在&lt;a href=&#34;https://github.com/django-webpack/django-webpack-loader&#34;&gt;django-webpack-loader&lt;/a&gt;项目中，可以通过如下的代码整合：&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Usage of typing module in python</title>
      <link>http://192.168.2.39:1313/post/2024-07-25-new-usage-of-typing/</link>
      <pubDate>Fri, 12 Jul 2024 16:20:32 +0800</pubDate>
      <guid>http://192.168.2.39:1313/post/2024-07-25-new-usage-of-typing/</guid>
      <description>&lt;p&gt;我原本想要分析一下 django webpack；但是写了一半，为了资料论述严谨，又不得不学习了 django component；在 django component 中，又发现了自己之前不知道的一些机制。无奈，先聊聊遇到的 typing 问题吧！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django and Webpack</title>
      <link>http://192.168.2.39:1313/post/2024-07-06-django-and-webpack/</link>
      <pubDate>Sat, 06 Jul 2024 15:21:55 +0800</pubDate>
      <guid>http://192.168.2.39:1313/post/2024-07-06-django-and-webpack/</guid>
      <description>&lt;p&gt;Webpack is a modern development method for frontend projects. Django is a common backend development framework for Python developers.&lt;/p&gt;&#xA;&lt;p&gt;I believe that developing with Webpack can make Django development faster.&lt;/p&gt;</description>
    </item>
    <item>
      <title>迁移 Django Model id 为 uuid</title>
      <link>http://192.168.2.39:1313/2018/12/06/%E8%BF%81%E7%A7%BB-django-model-id-%E4%B8%BA-uuid/</link>
      <pubDate>Thu, 06 Dec 2018 01:00:00 +0800</pubDate>
      <guid>http://192.168.2.39:1313/2018/12/06/%E8%BF%81%E7%A7%BB-django-model-id-%E4%B8%BA-uuid/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.klette.us/migrate-django-models-to-uuid-primary-key/&#34;&gt;https://www.klette.us/migrate-django-models-to-uuid-primary-key/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;又是一篇渣翻&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;老设计决策有时候会让你很难受，下面就是一个例子。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django 写个过滤器 filter</title>
      <link>http://192.168.2.39:1313/2018/11/05/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Mon, 05 Nov 2018 01:00:00 +0800</pubDate>
      <guid>http://192.168.2.39:1313/2018/11/05/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>用 Django 快速开发一个项目，发现 Django 的模板本身不带有整除功能，因此自己手写一个。&#xA;这是目录结构。在 urls.py 添加 app 的名称，例如 app_name = ‘app’ ，然后在与models.py 同级的目录下，新建一个 python 包， templatetags 的，新建自己需要的包名即可。&#xA;app_extra.py：&#xA;这里因为需求比较简单，因此直接就赋值了 11.&#xA;应用到模板中：&#xA;随后即可看到结果。&#xA;此外，寻得两个比较好用 template 插件&#xA;实现的东西虽然不多，但是起码把我不想关心的逻辑封装起来了。。</description>
    </item>
    <item>
      <title>Python functools</title>
      <link>http://192.168.2.39:1313/post/2018-10-21-python-functools/</link>
      <pubDate>Sun, 21 Oct 2018 01:00:00 +0800</pubDate>
      <guid>http://192.168.2.39:1313/post/2018-10-21-python-functools/</guid>
      <description>Python functools包中，有个很好的函数叫做partial ，中文直接翻译为片函数，此前一直都没有使用过。最近通过阅读别人的代码，学会了这一技能，着实好用。&#xA;使用partial，可以把一些固有功能代码做一个整合；&#xA;比如我希望一个函数专门做 int2 转换&#xA;int2 = partial(int, base=2) 甚至还可以再过分一点，把 base 变成一个字典量传入。&#xA;多使用内建函数 locals，可以极大的减少自己的代码量；&#xA;这不得不让我感概：真正的 Pythonista，永无止境。&#xA;def in_func(): a = 2 b = 3 def test(a, b, **args): return a + b print(test(**locals())) CHANGELOG date content 20230829 调整了一些语病 </description>
    </item>
    <item>
      <title>Django导出博客为hexo博客</title>
      <link>http://192.168.2.39:1313/2018/01/05/django%E5%AF%BC%E5%87%BA%E5%8D%9A%E5%AE%A2%E4%B8%BAhexo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 05 Jan 2018 01:00:00 +0800</pubDate>
      <guid>http://192.168.2.39:1313/2018/01/05/django%E5%AF%BC%E5%87%BA%E5%8D%9A%E5%AE%A2%E4%B8%BAhexo%E5%8D%9A%E5%AE%A2/</guid>
      <description>Django导出主要使用render_to_string方法来进行；&#xA;可以参考的源码如下：&#xA;对应的渲染article.html&#xA;运行的时候，python manage.py shell，然后导入export 包即可。</description>
    </item>
    <item>
      <title>Django子域名设计</title>
      <link>http://192.168.2.39:1313/?p=243/</link>
      <pubDate>Fri, 08 Dec 2017 01:00:00 +0800</pubDate>
      <guid>http://192.168.2.39:1313/?p=243/</guid>
      <description>一个域名可以有多个使用的方式，以后的博客要重新挂一下，挂在blog.svtter.cn这个二级域名下面。</description>
    </item>
    <item>
      <title>ejs到django-template的转换</title>
      <link>http://192.168.2.39:1313/?p=242/</link>
      <pubDate>Fri, 08 Dec 2017 01:00:00 +0800</pubDate>
      <guid>http://192.168.2.39:1313/?p=242/</guid>
      <description>观察一番发现自己的博客能用的模板实在是太少，于是考虑制作一个自动转换工具，可能需要使用编译原理的相关知识，做出来应该是一个很牛逼的东西。</description>
    </item>
    <item>
      <title>Django模型过滤</title>
      <link>http://192.168.2.39:1313/?p=240/</link>
      <pubDate>Thu, 07 Dec 2017 01:00:00 +0800</pubDate>
      <guid>http://192.168.2.39:1313/?p=240/</guid>
      <description>可以直接使用filter进行搜索项过滤，不需要额外再使用all方法。</description>
    </item>
  </channel>
</rss>
