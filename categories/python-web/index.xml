<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python Web on Svtter's Blog</title><link>https://svtter.cn/categories/python-web/</link><description>Recent content in Python Web on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 12 Jul 2024 16:20:32 +0800</lastBuildDate><atom:link href="https://svtter.cn/categories/python-web/index.xml" rel="self" type="application/rss+xml"/><item><title>New Usage of typing module in python</title><link>https://svtter.cn/p/new-usage-of-typing-module-in-python/</link><pubDate>Fri, 12 Jul 2024 16:20:32 +0800</pubDate><guid>https://svtter.cn/p/new-usage-of-typing-module-in-python/</guid><description>&lt;p&gt;我原本想要分析一下 django webpack；但是写了一半，为了资料论述严谨，又不得不学习了 django component；在 django component 中，又发现了自己之前不知道的一些机制。无奈，先聊聊遇到的 typing 问题吧！&lt;/p&gt;
&lt;p&gt;最近在阅读 django components 代码的时候，我在 &lt;a class="link" href="https://github.com/EmilStenstrom/django-components/blob/master/src/django_components/component_registry.py" target="_blank" rel="noopener"
&gt;component_registry.py&lt;/a&gt; 看到了这样一段代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TYPE_CHECKING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;TYPE_CHECKING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_components&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;_TC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;_TC&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;component.Component&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;从中能学到几个知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TYPE_CHECKING 变量是用于程序员处理类型相关代码的 TAG，在实际运行的时候，内部代码不被执行；我们可以从 typing 的&lt;a class="link" href="https://docs.python.org/3/library/typing.html#typing.TYPE_CHECKING" target="_blank" rel="noopener"
&gt;官方文档&lt;/a&gt;中找到。&lt;/li&gt;
&lt;li&gt;TypeVar 可以这样来用：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Can be any subtype of str&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在这段代码处，意味着 &lt;code&gt;_TC&lt;/code&gt; 可以是任何一个 &lt;code&gt;component.Component&lt;/code&gt; 的 &lt;code&gt;subtype&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;python 也在慢慢丰富自己的类型系统，许多新的用法也会慢慢地开发出来。不过相比之下，typescript 的类型系统要更先进一些。大家好好学！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;附加一点吐槽：Component 居然是一个 django view，感觉很奇怪啊。&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>Django and Webpack</title><link>https://svtter.cn/p/django-and-webpack/</link><pubDate>Sat, 06 Jul 2024 15:21:55 +0800</pubDate><guid>https://svtter.cn/p/django-and-webpack/</guid><description>&lt;p&gt;Webpack is a modern development method for frontend projects. Django is a common backend development framework for Python developers.&lt;/p&gt;
&lt;p&gt;I believe that developing with Webpack can make Django development faster.&lt;/p&gt;
&lt;h2 id="why"&gt;Why
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt; can enable Django developers to use the React ecosystem, and it makes auto-complete and linting available in Django frontend development, especially with VSCode.&lt;/p&gt;
&lt;p&gt;Django developers should integrate Webpack, similar to what &lt;a class="link" href="https://github.com/rails/webpacker?tab=readme-ov-file#webpacker-has-been-retired-" target="_blank" rel="noopener"
&gt;Rails developers did&lt;/a&gt;. At 2024-07-05, Webpack has retired in Rails. They are using &lt;a class="link" href="https://hotwired.dev/" target="_blank" rel="noopener"
&gt;Hotwire&lt;/a&gt; now. For more details, you should read the &lt;a class="link" href="https://rubyonrails.org/2021/12/15/Rails-7-fulfilling-a-vision" target="_blank" rel="noopener"
&gt;Rails 7 blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-to-choose"&gt;What to Choose?
&lt;/h2&gt;&lt;p&gt;I tested two popular projects on GitHub.&lt;/p&gt;
&lt;p&gt;The first one is &lt;a class="link" href="https://github.com/vintasoftware/django-react-boilerplate" target="_blank" rel="noopener"
&gt;django-react-boilerplate&lt;/a&gt;. It has high stars and ranks second.&lt;/p&gt;
&lt;p&gt;However, as of 2024-07-05, it&amp;rsquo;s not ready. I will continue to track its progress. It is hard and complex to configure the &lt;code&gt;{{ project_name }}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second one is &lt;a class="link" href="https://python-webpack-boilerplate.readthedocs.io/en/stable/setup_with_django/" target="_blank" rel="noopener"
&gt;python-webpack-boilerplate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It has a gradual process and a good learning curve. I spent just 5 minutes adding Webpack to my &lt;a class="link" href="https://github.com/Svtter/django-webpack-example" target="_blank" rel="noopener"
&gt;example project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Django 5.2, &lt;code&gt;simple_block_tag&lt;/code&gt; is &lt;a class="link" href="https://softwarecrafts.co.uk/100-words/day-270" target="_blank" rel="noopener"
&gt;supported&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="discussion"&gt;Discussion
&lt;/h2&gt;&lt;p&gt;There is still a long way to go.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;React has not been added to the &lt;a class="link" href="https://github.com/Svtter/django-webpack-example" target="_blank" rel="noopener"
&gt;example project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A production environment is needed to validate its availability.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;</description></item><item><title>迁移 Django Model id 为 uuid</title><link>https://svtter.cn/p/%E8%BF%81%E7%A7%BB-django-model-id-%E4%B8%BA-uuid/</link><pubDate>Thu, 06 Dec 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%BF%81%E7%A7%BB-django-model-id-%E4%B8%BA-uuid/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a class="link" href="https://www.klette.us/migrate-django-models-to-uuid-primary-key/" target="_blank" rel="noopener"
&gt;https://www.klette.us/migrate-django-models-to-uuid-primary-key/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;又是一篇渣翻&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;老设计决策有时候会让你很难受，下面就是一个例子。&lt;/p&gt;
&lt;p&gt;我手上的一个 Django Model 是这样的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=" language-python"&gt;&amp;lt;span class="token keyword"&gt;class&amp;lt;/span&gt; &amp;lt;span class="token class-name"&gt;Municipality&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;Model&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
code &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;CharField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;max_length&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token number"&gt;2&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; primary_key&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token boolean"&gt;True&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
name &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;CharField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;max_length&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token number"&gt;100&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此外，还有一个外键指向它&lt;/p&gt;
&lt;pre class=" language-python"&gt;&lt;code class=" language-python"&gt;&amp;lt;span class="token keyword"&gt;class&amp;lt;/span&gt; &amp;lt;span class="token class-name"&gt;ZipCode&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;Model&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
code &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;CharField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;max_length&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token number"&gt;2&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; primary_key&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token boolean"&gt;True&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
municipality &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;ForeignKey&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;Municipality&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，我们需要让 municipality 支持多个国家，显然一个唯一 field 将会引起冲突，不够用。（译者：这个理由有点牵强）&lt;/p&gt;
&lt;p&gt;对于所有代码的现代部分，我们使用&lt;code&gt;UUID&lt;/code&gt;作为主键。所以我们想要 migrate &lt;code&gt;municaipality&lt;/code&gt;的主键到&lt;code&gt;UUID&lt;/code&gt;，并且维持了原有的关系。（译者：外键和自增主键都是数据库性能的杀手。）&lt;/p&gt;
&lt;p&gt;2017年9月份，Django 依然不支持优雅的迁移主键，所以我们自己做了（译者：我也不知道现在行不行。）&lt;/p&gt;
&lt;p&gt;我们尝试了许多 magic 解决方案，但是我们在 migrations 系统这个被难住了，并且不能检测以及很好的处理改变。&lt;/p&gt;
&lt;p&gt;在经过一小段研究和错误，我们找到了以下的解决方案。尽管这还有一些小问题，但是的确有效。&lt;/p&gt;
&lt;p&gt;再一次提醒，从数据库的角度，当你定义了一个&lt;code&gt;ForeignKey&lt;/code&gt; field 在 Django 中，Django将会创建一个数据库列，是同样的类型，作为 referenced model 的主键，并且增加外键约束。所以在上面的例子中，我们有两个表：&lt;/p&gt;
&lt;pre class=" language-sql"&gt;&lt;code class=" language-sql"&gt;&amp;lt;span class="token keyword"&gt;CREATE&amp;lt;/span&gt; &amp;lt;span class="token keyword"&gt;TABLE&amp;lt;/span&gt; municipality &amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;
code &amp;lt;span class="token keyword"&gt;varchar&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token number"&gt;2&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt; &amp;lt;span class="token keyword"&gt;PRIMARY&amp;lt;/span&gt; &amp;lt;span class="token keyword"&gt;KEY&amp;lt;/span&gt; &amp;lt;span class="token operator"&gt;NOT&amp;lt;/span&gt; &amp;lt;span class="token boolean"&gt;NULL&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
name &amp;lt;span class="token keyword"&gt;varchar&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token number"&gt;100&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;;&amp;lt;/span&gt;
&amp;lt;span class="token keyword"&gt;CREATE&amp;lt;/span&gt; &amp;lt;span class="token keyword"&gt;TABLE&amp;lt;/span&gt; zipcode &amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;
code &amp;lt;span class="token keyword"&gt;varchar&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token number"&gt;2&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt; &amp;lt;span class="token keyword"&gt;PRIMARY&amp;lt;/span&gt; &amp;lt;span class="token keyword"&gt;KEY&amp;lt;/span&gt; &amp;lt;span class="token operator"&gt;NOT&amp;lt;/span&gt; &amp;lt;span class="token boolean"&gt;NULL&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
municipality_id &amp;lt;span class="token keyword"&gt;VARCHAR&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token number"&gt;2&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt; &amp;lt;span class="token keyword"&gt;REFERENCES&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;municipality&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;id&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt; &amp;lt;span class="token operator"&gt;NOT&amp;lt;/span&gt; &amp;lt;span class="token boolean"&gt;NULL&amp;lt;/span&gt;
&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;;&amp;lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以我们需要解除外键约束，更换 root model，然后映射新的主键到旧的上，并且重新应用外键到上面去。&lt;/p&gt;
&lt;p&gt;我们首先打破外键&lt;/p&gt;
&lt;pre class=" language-python"&gt;&lt;code class=" language-python"&gt;&amp;lt;span class="token keyword"&gt;class&amp;lt;/span&gt; &amp;lt;span class="token class-name"&gt;ZipCode&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;Model&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
code &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; &amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt; &amp;lt;span class="token comment" spellcheck="true"&gt;# Same as before&amp;lt;/span&gt;
municipality &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;CharField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;max_length&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token number"&gt;2&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=" language-sh"&gt;&lt;code&gt;python manage.py makemigrations -n break_zipcode_muni_foreignkey&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，·Municipality·modle 没有被任何外键所 refer，我们可以在上面进行工作了。&lt;/p&gt;
&lt;p&gt;增加一个新的 id field：&lt;/p&gt;
&lt;pre class=" language-python"&gt;&lt;code class=" language-python"&gt;&amp;lt;span class="token keyword"&gt;class&amp;lt;/span&gt; &amp;lt;span class="token class-name"&gt;Municipality&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;Model&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
id &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;UUIDField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;default&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;uuid&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;uuid4&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=" language-sh"&gt;&lt;code&gt;python manage.py makemigrations -n add_id_field_to_muni&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;处于某些原因，默认值在我的案例中不 work，所以我增加了一个过程到创建的 migration，来创建新的唯一 id。&lt;/p&gt;
&lt;pre class=" language-python"&gt;&lt;code class=" language-python"&gt;&amp;lt;span class="token keyword"&gt;def&amp;lt;/span&gt; &amp;lt;span class="token function"&gt;create_ids&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;apps&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; schema_editor&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
Municipality &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; apps&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;get_model&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'loc'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; &amp;lt;span class="token string"&gt;'Municipality'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
&amp;lt;span class="token keyword"&gt;for&amp;lt;/span&gt; m &amp;lt;span class="token keyword"&gt;in&amp;lt;/span&gt; municipality&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
m&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;id &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; uuid&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;uuid4&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
m&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;save&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
&amp;lt;span class="token comment" spellcheck="true"&gt;# ...&amp;lt;/span&gt;
operations &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; &amp;lt;span class="token punctuation"&gt;[&amp;lt;/span&gt;
migrations&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;AddField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
migrations&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;RunPython&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;code&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;create_ids&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
&amp;lt;span class="token punctuation"&gt;]&amp;lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在我们有一个&lt;code&gt;UUID&lt;/code&gt; ·id·field 在·Municipality 中，然后我们应该可以更换主键了。&lt;/p&gt;
&lt;pre class=" language-python"&gt;&lt;code class=" language-python"&gt;&amp;lt;span class="token keyword"&gt;class&amp;lt;/span&gt; &amp;lt;span class="token class-name"&gt;Municipality&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;Model&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
id &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;UUIDField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;default&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;uuid&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;uuid4&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; primary_key&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token boolean"&gt;True&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
code &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;CharField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;max_length&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token number"&gt;2&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; unique&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token boolean"&gt;True&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建 migration，并且确保在&lt;code&gt;code&lt;/code&gt;上的&lt;code&gt;AlterField&lt;/code&gt;操作在&lt;code&gt;id&lt;/code&gt;之前。我们已经在&lt;code&gt;id&lt;/code&gt;上增加了&lt;code&gt;primary_key&lt;/code&gt;并且增加了 unique=True 到&lt;code&gt;code&lt;/code&gt; field。constraint 没了，在我们删除 primary_key 的时候就没了。&lt;/p&gt;
&lt;p&gt;让我们开始一个空的迁移&lt;/p&gt;
&lt;pre class=" language-sh"&gt;&lt;code&gt;python manage.py makemigrations --empty -n fix_zipcode_fk_to_muni_uuid loc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开文件，输入&lt;/p&gt;
&lt;pre class=" language-python"&gt;&lt;code class=" language-python"&gt;&amp;lt;span class="token keyword"&gt;def&amp;lt;/span&gt; &amp;lt;span class="token function"&gt;match&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;apps&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; schema_editor&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
ZipCode &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; apps&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;get_model&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'loc'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; &amp;lt;span class="token string"&gt;'ZipCode'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
Muni &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; apps&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;get_model&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'loc'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; &amp;lt;span class="token string"&gt;'Municipality'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
&amp;lt;span class="token keyword"&gt;for&amp;lt;/span&gt; zip_code &amp;lt;span class="token keyword"&gt;in&amp;lt;/span&gt; ZipCode&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;object&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;all&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
zip_code&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;temp_muni &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; Muni&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;get&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;code&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;z&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;municipality&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
zip_code&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;save&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
&amp;lt;span class="token comment" spellcheck="true"&gt;# ...&amp;lt;/span&gt;
operations &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; &amp;lt;span class="token punctuation"&gt;[&amp;lt;/span&gt;
migrations&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;AddField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;
model_name&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'zipcode'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
name&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'temp_muni'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
field&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;UUIDField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;null&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token boolean"&gt;True&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
migrations&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;RunPython&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;code&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;match&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
migrations&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;RemoveField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;model_name&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'zipcode'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; name&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'municipality'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
migrations&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;RenameField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;
model_name&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'zipcode'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; old_name&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'temp_muni'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; new_name&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'municipality'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
migrations&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;AlterField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;
model_name&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'zipcode'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
name&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'municipality'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
field&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;ForeignKey&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;
on_delete&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;django&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;db&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;models&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;deletion&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;PROTECT&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
to&amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'municipality'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
&amp;lt;span class="token punctuation"&gt;]&amp;lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;增加一个临时的field来保存 Municipality 的UUID，我们不让他是一个&lt;code&gt;ForeignKey&lt;/code&gt;field，否则 Django confuse。&lt;/li&gt;
&lt;li&gt;我们运行 match 函数来寻找新的 id，通过寻找旧的 key，并且存储到临时的 field。&lt;/li&gt;
&lt;li&gt;删除旧的 municipality field&lt;/li&gt;
&lt;li&gt;重命名临时 field 到 municipality&lt;/li&gt;
&lt;li&gt;最后迁移到一个外键，然后创建我们需要 constraint&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;译者：这样改最大的好处就是改了 UUID，但是没有破坏之前的逻辑，可以说是谨慎的迁移吧。不过线上的数据既然在跑着，就这么迁移了，会不会出问题呢。&lt;/pre&gt;
&lt;p&gt;下面还有一些内容。自从我们将 migrations 分离成多个文件，我们让代码变得很脆弱（如果后面的某些 migrations 失败了）。这将会让我们的应用进入一个 unworkable 的状态。所以确保测试一下migrations。你可通过手工把这所有的步骤整合到一个migration里，但是如果你有来自多个不同app的 reference，你可能需要把这些步骤再分开。&lt;/p&gt;
&lt;h2 id="logging"&gt;logging
&lt;/h2&gt;&lt;p&gt;迁移的过程中，你可能遇到很多问题，所以一个比较不错的方式，是创建一个简单的迁移 logging。&lt;/p&gt;
&lt;pre class=" language-python"&gt;&lt;code class=" language-python"&gt;&amp;lt;span class="token keyword"&gt;def&amp;lt;/span&gt; &amp;lt;span class="token function"&gt;log&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;message&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
&amp;lt;span class="token keyword"&gt;def&amp;lt;/span&gt; &amp;lt;span class="token function"&gt;fake_op&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;apps&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt; schema_editor&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;:&amp;lt;/span&gt;
&amp;lt;span class="token keyword"&gt;print&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;message&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;
&amp;lt;span class="token keyword"&gt;return&amp;lt;/span&gt; fake_op
&amp;lt;span class="token comment" spellcheck="true"&gt;# ...&amp;lt;/span&gt;
operations &amp;lt;span class="token operator"&gt;=&amp;lt;/span&gt; &amp;lt;span class="token punctuation"&gt;[&amp;lt;/span&gt;
migration&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;RunPython&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;log&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'Step 1'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
migration&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;AlterField&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
migration&amp;lt;span class="token punctuation"&gt;.&amp;lt;/span&gt;RunPython&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;log&amp;lt;span class="token punctuation"&gt;(&amp;lt;/span&gt;&amp;lt;span class="token string"&gt;'Step 2'&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;)&amp;lt;/span&gt;&amp;lt;span class="token punctuation"&gt;,&amp;lt;/span&gt;
&amp;lt;span class="token comment" spellcheck="true"&gt;# ...&amp;lt;/span&gt;
&amp;lt;span class="token punctuation"&gt;]&amp;lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;想要观察 Django 运行了那些 SQL 语句，运行&lt;code&gt;python manage.py sqlmigrate &amp;lt;appname&amp;gt;&amp;lt;migration_number&amp;gt;&lt;/code&gt;，这是一个超级有用的方法。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</description></item><item><title>Django 写个过滤器 filter</title><link>https://svtter.cn/p/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8-filter/</link><pubDate>Mon, 05 Nov 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/django-%E5%86%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8-filter/</guid><description>&lt;p&gt;用 Django 快速开发一个项目，发现 Django 的模板本身不带有整除功能，因此自己手写一个。&lt;/p&gt;
&lt;pre class="wp-block-code"&gt;&lt;code class=""&gt;├── templates
│   ├── app
│   └── base
├── templatetags
│   ├── app_extras.py
│   ├── __init__.py
│   └── __pycache__
├── tests.py
├── urls.py
├── utils.py
└── views.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是目录结构。在 urls.py 添加 app 的名称，例如 app_name = ‘app’ ，然后在与models.py 同级的目录下，新建一个 python 包， templatetags 的，新建自己需要的包名即可。&lt;/p&gt;
&lt;p&gt;app_extra.py：&lt;/p&gt;
&lt;pre class="wp-block-code"&gt;&lt;code lang="php" class="language-php"&gt;from django import template
register = template.Library()
def mod(value):
return value % 11
register.filter('mod', mod)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里因为需求比较简单，因此直接就赋值了 11.&lt;/p&gt;
&lt;p&gt;应用到模板中：&lt;/p&gt;
&lt;pre class="wp-block-code"&gt;&lt;code class=""&gt;{% load app_extra %}
{% for image in image_list %}
{% if forloop.counter|mod == 0 %}
&amp;lt;h3&gt;检查点&amp;lt;/h3&gt;
{% endif %}
{% endfor %}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;随后即可看到结果。&lt;/p&gt;
&lt;p&gt;此外，寻得两个比较好用 template 插件&lt;figure class="wp-block-embed"&gt;&lt;/p&gt;
&lt;div class="wp-block-embed__wrapper"&gt;
https://pypi.org/project/django-bootstrap4/
&lt;/div&gt;&lt;/figure&gt; &lt;figure class="wp-block-embed"&gt;
&lt;div class="wp-block-embed__wrapper"&gt;
https://github.com/timonweb/django-bulma
&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;实现的东西虽然不多，但是起码把我不想关心的逻辑封装起来了。。&lt;/p&gt;</description></item><item><title>Python functools</title><link>https://svtter.cn/p/python-functools/</link><pubDate>Sun, 21 Oct 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/python-functools/</guid><description>&lt;p&gt;Python &lt;a class="link" href="https://docs.python.org/3/library/functools.html" target="_blank" rel="noopener"
&gt;functools&lt;/a&gt;包中，有个很好的函数叫做&lt;code&gt;partial&lt;/code&gt; ，中文直接翻译为&lt;code&gt;片函数&lt;/code&gt;，此前一直都没有使用过。最近通过阅读别人的代码，学会了这一技能，着实好用。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;partial&lt;/code&gt;，可以把一些固有功能代码做一个整合；&lt;/p&gt;
&lt;p&gt;比如我希望一个函数专门做 int2 转换&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;int2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;甚至还可以再过分一点，把 base 变成一个字典量传入。&lt;/p&gt;
&lt;p&gt;多使用内建函数 locals，可以极大的减少自己的代码量；&lt;/p&gt;
&lt;p&gt;这不得不让我感概：真正的 Pythonista，永无止境。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;in_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="changelog"&gt;CHANGELOG
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;date&lt;/th&gt;
&lt;th style="text-align: left"&gt;content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;20230829&lt;/td&gt;
&lt;td style="text-align: left"&gt;调整了一些语病&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>Django导出博客为hexo博客</title><link>https://svtter.cn/p/django%E5%AF%BC%E5%87%BA%E5%8D%9A%E5%AE%A2%E4%B8%BAhexo%E5%8D%9A%E5%AE%A2/</link><pubDate>Fri, 05 Jan 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/django%E5%AF%BC%E5%87%BA%E5%8D%9A%E5%AE%A2%E4%B8%BAhexo%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p&gt;Django导出主要使用&lt;code&gt;render_to_string&lt;/code&gt;方法来进行；&lt;/p&gt;
&lt;p&gt;可以参考的源码如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;article.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template.loader&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_to_string&lt;/span&gt;
&lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;cre_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cre_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;updated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;对应的渲染&lt;code&gt;article.html&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;title: {{ title }}
date: 2018-01-05T01:00:00+08:00
updated: {{ updated | date:"Y/m/d H:i:s" }}
tags: [
{% for tag in tags %}
&amp;#39;{{ tag.name }}&amp;#39;,
{% endfor %}
]
categories: [
&amp;#39;{{ category }}&amp;#39;,
]
---
{{ content | safe }}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;运行的时候，&lt;code&gt;python manage.py shell&lt;/code&gt;，然后导入&lt;code&gt;export&lt;/code&gt; 包即可。&lt;/p&gt;</description></item></channel></rss>