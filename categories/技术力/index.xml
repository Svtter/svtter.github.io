<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术力 on Svtter's Blog</title><link>https://svtter.cn/categories/%E6%8A%80%E6%9C%AF%E5%8A%9B/</link><description>Recent content in 技术力 on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 05 Sep 2023 18:31:22 +0800</lastBuildDate><atom:link href="https://svtter.cn/categories/%E6%8A%80%E6%9C%AF%E5%8A%9B/index.xml" rel="self" type="application/rss+xml"/><item><title>Logseq Plugin</title><link>https://svtter.cn/p/logseq-plugin/</link><pubDate>Tue, 05 Sep 2023 18:31:22 +0800</pubDate><guid>https://svtter.cn/p/logseq-plugin/</guid><description>&lt;p&gt;为了能够更好的使用 &lt;a class="link" href="https://logseq.com/" target="_blank" rel="noopener"
&gt;logseq&lt;/a&gt;，可以安装一些插件。&lt;/p&gt;
&lt;p&gt;我目前使用的几个插件是：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://svtter.cn/images/logseq-plugin.png"
loading="lazy"
alt="Alt text"
&gt;&lt;/p&gt;
&lt;p&gt;建议安装如下几个插件：&lt;/p&gt;
&lt;h2 id="tabs"&gt;tabs
&lt;/h2&gt;&lt;p&gt;tabs 可以打开不同的标签页，来增强logseq打开不同页面的功能。&lt;/p&gt;
&lt;h2 id="bonofix-theme"&gt;Bonofix #theme
&lt;/h2&gt;&lt;p&gt;推荐 Bonofix 这个主题。能够很清楚的展示 tag。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://svtter.cn/images/logseq-plugin-2.png"
loading="lazy"
alt="Alt text"
&gt;&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://svtter.cn/images/logseq-plugin-3.png"
loading="lazy"
alt="实际预览图"
&gt;&lt;/p&gt;
&lt;h2 id="calendar"&gt;Calendar
&lt;/h2&gt;&lt;p&gt;能够打开右上角的按键，查看自己的日记。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://svtter.cn/images/logseq-plugin-4.png"
loading="lazy"
alt="实际预览图"
&gt;&lt;/p&gt;
&lt;h2 id="bullet-threading"&gt;Bullet threading
&lt;/h2&gt;&lt;p&gt;高亮选择的条目。&lt;/p&gt;</description></item><item><title>Good Gevent</title><link>https://svtter.cn/p/good-gevent/</link><pubDate>Wed, 28 Sep 2022 08:55:43 +0800</pubDate><guid>https://svtter.cn/p/good-gevent/</guid><description>&lt;p&gt;Gevent 是一个非常好用的异步工具，能够自动将阻塞的代码转换成非阻塞的代码。&lt;/p&gt;
&lt;p&gt;这个功能是通过&lt;code&gt;MonkeyPatch&lt;/code&gt;来实现的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MonkeyPatch&lt;/code&gt;通过 Hook 底层的代码库，来实现上层代码无变更，透明的底层实现更改。&lt;/p&gt;
&lt;p&gt;在底层，Gevent 使用的库是&lt;code&gt;libev&lt;/code&gt;或者&lt;code&gt;libuv&lt;/code&gt;。这是实现了与&lt;code&gt;nodejs&lt;/code&gt;同级别的高性能。&lt;/p&gt;
&lt;h2 id="io模型"&gt;IO模型
&lt;/h2&gt;&lt;p&gt;如果读者尚未理解非阻塞，那么建议看一下IO的四种模型。分别是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;同步阻塞&lt;/li&gt;
&lt;li&gt;同步非阻塞&lt;/li&gt;
&lt;li&gt;IO多路复用&lt;/li&gt;
&lt;li&gt;异步IO&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在不同场景下选择不同的IO模型，可以有效的利用系统资源，更快的响应用户的请求。&lt;/p&gt;
&lt;h2 id="io-slow-problem"&gt;IO slow problem
&lt;/h2&gt;&lt;p&gt;之所以会有IO问题存在，原因有两个:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IO 设备的速度慢；&lt;/li&gt;
&lt;li&gt;用户态和内核态的转变；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;IO 设备速度慢，就要等待 IO 读取。&lt;/p&gt;
&lt;p&gt;用户态进程必须通过系统调用，向内核发出指令，才能调用系统资源。
此外，用户态进程进行读写操作的时候，必然涉及到缓冲区。
读写操作不会直接对设备进行。因此，在进行读操作的时候，
系统从设备将数据读取，拷贝到内核缓冲区。用户进程如果想要使用
读取的数据，须从内核缓冲区复制到进程缓冲区。&lt;/p&gt;
&lt;p&gt;因此，速度慢了，等待就耗时。反应到用户层面，就会出现，用户新开浏览器，但是系统仍然没有反应的情况。&lt;/p&gt;</description></item><item><title>单元测试</title><link>https://svtter.cn/p/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 09 Jul 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid><description>&lt;p&gt;单元测试十分的重要，简单说一下微信小程序中的单元测试&lt;/p&gt;
&lt;p&gt;…待续…&lt;/p&gt;</description></item><item><title>备份自己的博客内容</title><link>https://svtter.cn/p/%E5%A4%87%E4%BB%BD%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9/</link><pubDate>Sun, 07 Aug 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%A4%87%E4%BB%BD%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9/</guid><description>&lt;p&gt;由于博客经常更换，好的坏的文章，无意中丢失了不少。打算以后好好备份自己的博客文件，设置一下备份频率。&lt;/p&gt;
&lt;p&gt;考虑一下，需要备份的文件主要是post。行文至此，猛然想到其实可以直接用git实现，但是既然已经配置了邮件服务，那么就这样吧。&lt;/p&gt;
&lt;h2 id="使用mail服务实现"&gt;使用mail服务实现
&lt;/h2&gt;&lt;p&gt;这种方法相对简单一些。&lt;/p&gt;
&lt;p&gt;首先是需要配置一下&lt;code&gt;mail.rc&lt;/code&gt;。&lt;/p&gt;
&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# vi /etc/mail.rc &lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ss@qq.com
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;smtp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;smtp.qq.com
&lt;span class="nb"&gt;set&lt;/span&gt; smtp-auth-user&lt;span class="o"&gt;=&lt;/span&gt;ss
&lt;span class="nb"&gt;set&lt;/span&gt; smtp-auth-password&lt;span class="o"&gt;=&lt;/span&gt;asdfads
&lt;span class="nb"&gt;set&lt;/span&gt; smtp-auth&lt;span class="o"&gt;=&lt;/span&gt;login
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;首先要压缩一下，节省流量&lt;/p&gt;
&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar czvf post.tar &lt;span class="nv"&gt;$source&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;发送邮件&lt;/p&gt;
&lt;div class="codehilite"&gt;
&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;normal backup&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; mail -a post.tar -s &lt;span class="sb"&gt;`&lt;/span&gt;date +%Y-%m-%d-backup&lt;span class="sb"&gt;`&lt;/span&gt; sfdsafa@qq.com
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后就可以在邮件中接收到备份的邮件了。&lt;/p&gt;
&lt;p&gt;如果把这个简单脚本加入到自己的&lt;code&gt;hexo_deploy.sh&lt;/code&gt;中，则可以在更新博客的同时备份自己的hexo博客文章。&lt;/p&gt;
&lt;h2 id="使用git实现"&gt;使用git实现
&lt;/h2&gt;&lt;p&gt;使用git实现其实挺简单，因为使用的是&lt;code&gt;Hexo-admin&lt;/code&gt;插件，可以自行配置脚本，在脚本中加入自动推送git更新即可。其中，使用git推送有两种方案：&lt;/p&gt;
&lt;p&gt;**git方案还是容易出问题的。**如果在source文件中建立git-repo，会把&lt;code&gt;.git&lt;/code&gt;文件也&lt;code&gt;deploy&lt;/code&gt;上去。如果添加&lt;code&gt;ignore&lt;/code&gt;的类似选项，又未免有些麻烦。当然，如果能够使用git进行一劳永逸的方法，应该是将&lt;code&gt;post&lt;/code&gt;文件直接复制另一个不与pages相关的文件夹中去，来进行更新。git比直接发送邮件要节省流量。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一种是添加ssh公钥，实现无需验证密码，直接将更新push到git仓库。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;（待定）
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;使用&lt;a class="link" href="http://gitpython.readthedocs.io/en/stable/intro.html" target="_blank" rel="noopener"
&gt;&lt;code&gt;Gitpython&lt;/code&gt;&lt;/a&gt;进行push，可操作性更强。关于&lt;code&gt;Gitpython&lt;/code&gt;，参见后方。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;（待定）
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="使用rsync实现"&gt;使用rsync实现
&lt;/h2&gt;&lt;p&gt;增量备份服务。因为是增量备份，所以不需要考虑每次上传的流量问题，相对来说是最节省流量的方案。&lt;/p&gt;
&lt;p&gt;仅仅考虑Linux。此外，Win可以通过Linux-subsystem实现，以此来备份到本地。&lt;/p&gt;
&lt;p&gt;rsync是通过ssh进行备份的命令。其算法在&lt;code&gt;coolshell.cn&lt;/code&gt;上有所讲述。&lt;/p&gt;
&lt;h2 id="使用lftp实现"&gt;使用lftp实现
&lt;/h2&gt;&lt;p&gt;(待续）&lt;/p&gt;</description></item><item><title>google-chrome浏览器输入法</title><link>https://svtter.cn/p/google-chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5%E6%B3%95/</link><pubDate>Fri, 29 Jul 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/google-chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5%E6%B3%95/</guid><description>&lt;p&gt;最近google推出了个浏览器插件输入法。&lt;/p&gt;
&lt;p&gt;具体的名字是google输入工具：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://svtter.cn/content/images/2016/07/----_20160729132959.png"
loading="lazy"
alt="google输入工具在google商店"
&gt;&lt;/p&gt;
&lt;p&gt;可以在chrome内核的浏览器中使用。唯一的问题是速度有些慢。但是对于许多Linux发行版的使用者来讲，相比一些fcitx和ibus框架给人感觉要好很多。&lt;/p&gt;
&lt;p&gt;fcitx太丑了。配置起来比较麻烦。ibus相对优秀一些，个人感觉。但是对于不同的发行版而讲，配置起来都有一定的难度。这对Linux/PC桌面环境的输入法有一定的改善。&lt;/p&gt;
&lt;p&gt;可以复制粘贴嘛。&lt;/p&gt;</description></item><item><title>Ghost – wonderful things</title><link>https://svtter.cn/p/ghost-wonderful-things/</link><pubDate>Tue, 19 Apr 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/ghost-wonderful-things/</guid><description>&lt;p&gt;今天一时兴起想使用主机部署Ghost，但是由于主机不能直接部署daocloud的镜像，于是另做决定，尝试一下直接使用docker，结果发现：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;太棒了！这简直是我梦寐以求的！ –沃·兹基硕德&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;部署也是十分的方便，简直不敢相信。此外，居然有我想要的iOS-app，简直不能忍。&lt;/p&gt;
&lt;h2 id="ghost是什么"&gt;Ghost是什么
&lt;/h2&gt;&lt;p&gt;一个博客平台，号称干死WordPress&lt;/p&gt;
&lt;h2 id="如何部署"&gt;如何部署
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;也算是给daocloud写一个广告文了。docker真是好啊。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;登陆 &lt;a class="link" href="https://www.daocloud.io/" target="_blank" rel="noopener"
&gt;https://www.daocloud.io/&lt;/a&gt; 注册一个daocloud账号，然后绑定微信 — 这样你就有了&lt;strong&gt;三个容器&lt;/strong&gt;，其中两个我们用于部署ghost，一个用来作为volume（一个分布式存储，用来保存生成的文件，例如主题等）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先我们先配置一下volume，命名为ghost-disk —— 当然，名称并不重要，我想10G的空间应该也不会完全用于ghost的静态文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署新的代码。首先打开应用列表-&amp;gt;创建应用-&amp;gt;daocloud镜像-&amp;gt;ghost。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后看这里就可以了2333 &lt;a class="link" href="https://dashboard.daocloud.io/packages/3a8d7db6-86c6-4ce3-8f44-c880d3b56128" target="_blank" rel="noopener"
&gt;https://dashboard.daocloud.io/packages/3a8d7db6-86c6-4ce3-8f44-c880d3b56128&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="添加disqus多说"&gt;添加disqus，多说
&lt;/h2&gt;&lt;h2 id="添加toc目录大纲"&gt;添加TOC目录大纲
&lt;/h2&gt;&lt;h2 id="分享到微信微博"&gt;分享到微信微博
&lt;/h2&gt;</description></item></channel></rss>