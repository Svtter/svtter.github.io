<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Svtter&#39;s Blog</title>
    <link>https://svtter.github.io/categories/javascript/</link>
    <description>Recent content in Javascript on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 08 Jun 2017 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CallBackHell</title>
      <link>https://svtter.github.io/2017/06/08/callbackhell/</link>
      <pubDate>Thu, 08 Jun 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/06/08/callbackhell/</guid>
      <description>这两天做微信小程序赶个潮流，体验了一下回调——之前一直听人讲“回调地狱”，这次终于
亲身感受了一下。的确是“地狱”。
不过既然能够出现“回调地狱”，也必然有人可以避免，甚至在一定程度上解决这个问题。
回调地狱解决方法
一般情况下，我不怎么写回调的代码；一方面是因为没有这个习惯，之前写算法题目，基
本上不写回调——不过行文至此，突然想起许多题目都有用回调从而更加优雅解决的方案，囧。
再贴一篇c++的函数传递
本以为Java不存在回调地狱，也就不存在回调——询问之后，才意识到Java之所以不存在回调
地狱，是因为Java本身要用回调，需要传类作为参数；一方面，如果使用回调，会使得代码
变长；另一方面，尽管代码变长，但是相比较简短的代码，问题描述的更加清晰明确。
这可能就是为什么Js被称为玩具语言的原因之一吧。
回调函数的优势：
然后讲讲Python：
一个Python异步回调的例子 一个阻塞回调 异步编程同步化 最后一个才是最酷的。</description>
    </item>
    
    <item>
      <title>JS-常见问题</title>
      <link>https://svtter.github.io/2014/12/08/js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 08 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/08/js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>本文出自svtter.github.io
JavaScript首先应该看w3cschool来涨涨见识, 但是因为之前沉溺游戏荒废了。。
mark一个还不错的gitbook learn javascript
自备梯子。。(没钱奈何现在还是free\w\w\w\w..)
js一切皆为对象。
JS-再理解 javascript是一脚本语言 — 脚本语言的特性就是一句一句解释执行，所以很多情况和处理机制和bash类似（但是语法明显不同）
在定义变量等思想，作用域也比较接近.
Js-使用getElement以及$定位 使用if(% == null)来判断一下是否真的获取到了对象
另外，添加新元素append()的时候记得补充&amp;lt;/div&amp;gt;
Js-使用正则表达式 如果使用RegExp(&amp;quot;&amp;quot;)+exec()这种形式，””中的的元字符需要双来使用。
此外，如果需要查询正则表，可以通过这个链接正则表
js文件无法运行原因 使用Opera或者Chrome调试，大部分问题都可以找出 — 基本上不是func写错了，就是使用了int这种定义文件方式..
之前编写html和js都不知道有console这等神器。如果以后再写html做一些研究。。
JS-jQuery-创建 If the HTML is more complex than a single tag without attributes,
as it is in the above example,
the actual creation of the elements is handled by the browser’s innerHTML mechanism. In most cases,
jQuery creates a new</description>
    </item>
    
    <item>
      <title>JS-优化上传文件的样式</title>
      <link>https://svtter.github.io/2014/12/01/js-%E4%BC%98%E5%8C%96%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Mon, 01 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/01/js-%E4%BC%98%E5%8C%96%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%B7%E5%BC%8F/</guid>
      <description> 本文出自svtter.github.io 上传文件type=file真心丑，所以采用方法解决一下。
中心思想是隐藏input，然后利用css定位，使其仍然可以被点击（有点欺骗的性质）
text需要禁止点击（使用diabled=&#39;disabled&#39;) 源代码 </description>
    </item>
    
    <item>
      <title>JS-变量相关-jQuery调用</title>
      <link>https://svtter.github.io/2014/12/01/js-%E5%8F%98%E9%87%8F%E7%9B%B8%E5%85%B3-jquery%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 01 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/01/js-%E5%8F%98%E9%87%8F%E7%9B%B8%E5%85%B3-jquery%E8%B0%83%E7%94%A8/</guid>
      <description>本文出自&amp;lt;svtter.github.io&amp;gt; 在javascript函数外部定义的变量均为全局变量。
调用jQuery, 需要把jQuery放在&amp;lt;script&amp;gt;最前。
调用本地jQuery的代码
jQuery 目录: ../js/jquery-1.11.1.min.js/
其他的script文件放在jquery后即可
HTML 依据w3cschool修改</description>
    </item>
    
  </channel>
</rss>
