<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on Svtter&#39;s Blog</title>
    <link>https://svtter.cn/categories/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on Svtter&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 28 Dec 2018 01:00:00 +0800</lastBuildDate>
    <atom:link href="https://svtter.cn/categories/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>手把手教你搭建 vue-cli﻿</title>
      <link>https://svtter.cn/2018/12/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA-vue-cli%EF%BB%BF/</link>
      <pubDate>Fri, 28 Dec 2018 01:00:00 +0800</pubDate>
      <guid>https://svtter.cn/2018/12/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA-vue-cli%EF%BB%BF/</guid>
      <description>&lt;p&gt;&lt;code&gt;vuejs&lt;/code&gt; 这东西，实不相瞒，学习了很长时间，从看文档到使用，大概有一年的时间。当然，其实上手没有那么难，&lt;code&gt;&amp;lt;script src=&amp;quot;vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;这样就搞定了。只是想要用的比较优雅，存在一定的难度。&lt;/p&gt;&#xA;&lt;p&gt;但是硬核玩家肯定不能止步于此。于是就开始了&lt;code&gt;vue-cli&lt;/code&gt;的探究。没想到这个探究如此之长，以至于我在很长一段时间内，都没有正儿八经的写过前端。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于hexo主题到leanote主题的移植</title>
      <link>https://svtter.cn/2016/02/24/%E5%85%B3%E4%BA%8Ehexo%E4%B8%BB%E9%A2%98%E5%88%B0leanote%E4%B8%BB%E9%A2%98%E7%9A%84%E7%A7%BB%E6%A4%8D/</link>
      <pubDate>Wed, 24 Feb 2016 01:00:00 +0800</pubDate>
      <guid>https://svtter.cn/2016/02/24/%E5%85%B3%E4%BA%8Ehexo%E4%B8%BB%E9%A2%98%E5%88%B0leanote%E4%B8%BB%E9%A2%98%E7%9A%84%E7%A7%BB%E6%A4%8D/</guid>
      <description>似乎是个辛苦的差事。&#xA;首先，hexo使用的ejs模板引擎，也就是说，整个代码的构建是要利用ejs的。然而hexo使用的则是golang模板引擎，这两个引擎我都不了解，ejs我是略微有所接触，并不深入，因此整个任务可以说是困难重重。但是面对这个令人万分讨厌的默认主题以及字体，我必须要做点什么了。&#xA;思路 clone了两个代码看了看，分析了几条思路。&#xA;思路一：直接在ejs的基础上修改 既然ejs是一个模板引擎，那么从中寻找相同点，手写一个可以读取ejs的工具，重新构建成golang模板，即自动化生成工具。可以应对多种主题，一劳永逸，在自动生成的基础上对新生成的代码再加工。&#xA;实现方法：了解ejs模板，golang模板，需要利用编译器知识，对原本的ejs文件进行重新编译，编译成golang的模板。（是否已经有类似的成品？） 优点：一劳永逸 缺点：实现难度较高，需要分析 思路二：使用hexo生成html文件后，手动修改 这种方法相对第一种来讲，实现较为简单。即：利用hexo生成的静态文件，在public生成的文件进行分析修改。利用此方法，如果生成的html文件不复杂且结构清晰可用。&#xA;实现方法：直接生成出接近成品的html文件，手动修改。 优点：简单粗暴 缺点：只能针对单一主题，且人工活动量较大。 思路三：登录leanote论坛多叫几声。 结语 综上所述，个人决定首先手动修改一次，凑合着使用。然后再利用编译原理知识进行进一步修改，实现思路一。好的程序员是给自己出问题的= =。&#xA;成品稍后奉上。&#xA;半成品:</description>
    </item>
    <item>
      <title>Webstorm安装Vim插件&#43;Vim配置</title>
      <link>https://svtter.cn/2015/09/07/webstorm%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6&#43;vim%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 07 Sep 2015 01:00:00 +0800</pubDate>
      <guid>https://svtter.cn/2015/09/07/webstorm%E5%AE%89%E8%A3%85vim%E6%8F%92%E4%BB%B6&#43;vim%E9%85%8D%E7%BD%AE/</guid>
      <description>Webstorm 使用webstorm进行前端开发&#xA;最近使用webstorm进行了简单小游戏的开发，感觉十分强大。&#xA;插件安装 ideavim 使用Ctrl+Alt+s召唤Settings，输入Plugin，Browse，找到ideavim，安装。此时提示重启webstorm，先不必重启，打开C:\User\&amp;quot;当前用户&amp;quot;，建立_ideavim，加上source _vimrc读入自己的vim配置文件即可。根本停不下来。&#xA;早知道有如此工具在下也不至于在web上如此痛苦。个人认为，比起配置原生态Vim，这样开发更加好用，节省博主本来就不多的脑细胞。</description>
    </item>
    <item>
      <title>前端效果mark</title>
      <link>https://svtter.cn/2015/05/28/%E5%89%8D%E7%AB%AF%E6%95%88%E6%9E%9Cmark/</link>
      <pubDate>Thu, 28 May 2015 01:00:00 +0800</pubDate>
      <guid>https://svtter.cn/2015/05/28/%E5%89%8D%E7%AB%AF%E6%95%88%E6%9E%9Cmark/</guid>
      <description> alien http://www.iteye.com/news/28656 http://www.csdn.net/article/2013-02-25/2814245-20-best-front-end-framework http://www.open-lib.com/Type/166-1.jsp http://maroslaw.github.io/rainyday.js/ https://github.com/maroslaw/rainyday.js </description>
    </item>
  </channel>
</rss>
