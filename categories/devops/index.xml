<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on Svtter&#39;s Blog</title>
    <link>https://svtter.github.io/categories/devops/</link>
    <description>Recent content in DevOps on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 17 Nov 2022 21:15:09 +0800</lastBuildDate><atom:link href="https://svtter.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use Mirror</title>
      <link>https://svtter.github.io/post/2022-11-17-use-mirror/</link>
      <pubDate>Thu, 17 Nov 2022 21:15:09 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2022-11-17-use-mirror/</guid>
      <description>&lt;p&gt;使用代理。在国内编程，使用代理非常重要。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Docker 构建前端应用</title>
      <link>https://svtter.github.io/post/2021-09-04-docker-compose-app/</link>
      <pubDate>Sat, 04 Sep 2021 18:04:01 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2021-09-04-docker-compose-app/</guid>
      <description>&lt;p&gt;docker compose 构建前端 app 是否容易，强烈建议中小企业采用这种方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>⚙ 记录一次 gitlab runner 的配置</title>
      <link>https://svtter.github.io/post/2020-08-16-gitlab-runner-config/</link>
      <pubDate>Mon, 17 Aug 2020 08:44:46 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2020-08-16-gitlab-runner-config/</guid>
      <description>&lt;p&gt;首先介绍一下整体的情况，和我们的需求。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在我们组里，不同的项目和服务，被分到不同的 repo 中，托管在 gitlab 上面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最近一段时间，由于构建的时间变长，用掉了 gitlab 免费的 2000 minutes。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，打算采用自己的 runner，来进行服务的构建和使用。&lt;/p&gt;
&lt;p&gt;Gitlab runner 配置有些神奇。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为你的 Docker 项目集成 ELK</title>
      <link>https://svtter.github.io/2019/01/04/%E4%B8%BA%E4%BD%A0%E7%9A%84-docker-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90-elk/</link>
      <pubDate>Fri, 04 Jan 2019 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2019/01/04/%E4%B8%BA%E4%BD%A0%E7%9A%84-docker-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90-elk/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/twtrubiks/docker-elk-tutorial&#34;&gt;https://github.com/twtrubiks/docker-elk-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本上按照这个配置就可以了，创建 @timestamp 这一步，可以用如下脚本替代 Postman&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;这也是 tutorials 中，使用的 ELK images 给出的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/deviantony/docker-elk&#34;&gt;https://github.com/deviantony/docker-elk&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Docker swarm 构建 PostgreSQL 集群</title>
      <link>https://svtter.github.io/2018/12/01/%E4%BD%BF%E7%94%A8-docker-swarm-%E6%9E%84%E5%BB%BA-postgresql-%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Sat, 01 Dec 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/12/01/%E4%BD%BF%E7%94%A8-docker-swarm-%E6%9E%84%E5%BB%BA-postgresql-%E9%9B%86%E7%BE%A4/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;又是一个渣翻，Copyright belongs to the original text。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://info.crunchydata.com/blog/an-easy-recipe-for-creating-a-postgresql-cluster-with-docker-swarm&#34;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;PostgreSQL 在 9.0 版本已经开始持续接收大量的增强，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;异步拓展&lt;/li&gt;
&lt;li&gt;同步拓展&lt;/li&gt;
&lt;li&gt;仲裁提交&lt;/li&gt;
&lt;li&gt;级联拓展&lt;/li&gt;
&lt;li&gt;逻辑拓展&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PostgreSQL 文档也提供了一个 overview 以及 不同拓展方法的比较。详见&lt;!-- raw HTML omitted --&gt;PostgreSQL 集群策略比较&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;用于部署 PostgreSQL 的拓展的主拓展的方法论，是一个重要的工具来为你的数据库集群创建高可用的环境。需要一个合适的部署策略来确保你的数据被保存到不同磁盘，以及不同的数据中心。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记恢复 https</title>
      <link>https://svtter.github.io/2018/11/03/%E8%AE%B0%E6%81%A2%E5%A4%8D-https/</link>
      <pubDate>Sat, 03 Nov 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/11/03/%E8%AE%B0%E6%81%A2%E5%A4%8D-https/</guid>
      <description>这几天 https 挂掉了，似乎是因为铁门的证书（过期，不被chrome认可）了。因此重新搞一下 https。
恢复 https 也没有做什么工作，就是把之前的证书重新申请一次，然后下载下来的文件把之前的 https 文件替换掉。https 相关的文章很多，我就不再赘述了。可以参见很多人的文章。
此处唯一需要注意的是，我使用 Docker，对于 certbot ，也就是 letsencrypt 的支持不够好（也可能是我在man里面粗略的看了一下，没有找到）。因此，对于三个与的letsencrypt我就不使用了。
这次更新 https，也做了一些工作，就是把原来的 rewrite 选项改成了 301，做了一个重定向，整个速度都提升了不少（未测试，仅观感），感觉很不错。因此把之前的配置贴出来。
原来的配置
现在的</description>
    </item>
    
    <item>
      <title>为什么我的密码录入正确，但就是登录不上？</title>
      <link>https://svtter.github.io/post/2018-10-17-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%AF%86%E7%A0%81%E5%AF%B9%E4%BA%86%E5%B0%B1%E6%98%AF%E7%99%BB%E5%BD%95%E4%B8%8D%E4%B8%8A/</link>
      <pubDate>Wed, 17 Oct 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2018-10-17-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%AF%86%E7%A0%81%E5%AF%B9%E4%BA%86%E5%B0%B1%E6%98%AF%E7%99%BB%E5%BD%95%E4%B8%8D%E4%B8%8A/</guid>
      <description>今天又偶遇了之前用阿里云出现的问题：
之前一直没有排查到错误，今天终于在本地机器的加持下得以解决。这是什么问题呢？IP地址冲突。
的确是IP地址冲突。首先先使用校园网client ssh b-server 服务器，失败了。使用同一个物理主机的a-server与b-server进行互联，成功了。校园网client能够连接a-server。因此，观察 a-server 和 b-server 的区别，发现 a-server 子网掩码是255.255.255.128，而 b-server 的子网掩码是 255.255.255.0。
此外，还有：
查看系统开放的端口 netstat -nltp 测试本地是否能够访问，排查本地问题 ssh user@locahost
子网掩码不同，为什么就连接不上呢？（原理）
最终，解决了这个问题。通过重启 networking 以及 重新通过 dhcp 获取 ip 地址。
使用 systemctl restart networking.service 重启 networking 服务。 使用 ifconfig eth0 down; ifconfig eth0 up 来开关具体的网卡。 使用 # dhclient -r 释放当前ip 使用 # dhclient 获取新的ip 大功告成，算是阶段性的解决了这个问题。DDNS迫在眉睫啊！</description>
    </item>
    
    <item>
      <title># Docker swarm 学习</title>
      <link>https://svtter.github.io/2018/06/21/#dockerswarm%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 21 Jun 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/06/21/#dockerswarm%E5%AD%A6%E4%B9%A0/</guid>
      <description>本文的学习过程主要是通过 Docker 官方文档
花了一段时间学习 Docker swarm，一个docker的容器集群服务，来应对即将到来的高并发项目需求。
Docker machine Docker machine 是 Docker 官方编排的项目之一，可以理解成一个 Docker 宿主机器的统一管理CLI，自部署不是很好用：目前国内仅仅 aliyun 支持，其他的我在官方文档中没有找到。
Docker machine 的安装十分简单，通过官网提供的脚本即可，For Linux：
安装好以后，即可按照相关的操作进行运行。
比如，创建两个虚拟机：
进入虚拟机：
显示虚拟机
然后即可在虚拟机的基础上进行相关的操作，十分方便。
Docker-swarm Docker swarm 则是一个集群的东西，基本的概念是，每个宿主机器都是一个 worker ，然后大家都加入一个东西，叫做 stack ，stack 里面有许多的 container ，每个宿主机器，也分别是一个 node 。
这个 stack 是依据我们的 service 建立的，stack 中保存着 service 建立的名称，也可以通过 stack 查看相关的节点。
每个 node 都可以运行多个 container ，swarm 会进行 负载均衡 ，这个就很酷了。
在官方的例子中，docker-compose.yml：
复制的 app service 数量为 5。
大体上就是这个样子。
想法
行文至此，想到可以进一步学习，然后去一些相关的社区学习一波。（不过按照之前的经验，很多社区的质量都不高，讨论纯属浪费时间。）
学完这些东西，至少可以把自己的服务器升级一波，做成标准的DevOps，以及充分利用服务器资源了。
Code GitHub – Svtter/Docker_Swarm_Test: a Docker swarm example project.</description>
    </item>
    
    <item>
      <title>如何配置终端</title>
      <link>https://svtter.github.io/post/2018-01-30-%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF/</link>
      <pubDate>Tue, 30 Jan 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2018-01-30-%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF/</guid>
      <description>配置终端是许多人头疼的问题，比如配置之后没有达到自己预先想要的效果，但是又总是不知道哪里出了问题，或者配置完成之后又遭遇了很多烦恼。
本文的作用是解决这些问题，或者为解决这些问题提供一个思路。
颜色不对 颜色不对可能有很多原因，但归根结底是两个问题，一个是TERM环境变量没有设置好，另一个是当前使用的终端app不支持真彩色。
处理term可以使用
把它加载到你的rc文件里。有些人使用zsh，那么加入到~.zshrc里面。有些人使用bash，那么加入到~/.bashrc里面。
解决app真彩色问题，可以参考这个链接：https://gist.github.com/XVilka/8346728
Ubuntu14.04版本下默认的terminal是不支持真彩色的。
乱码 终端乱码很大程度上是因为当前的字体不支持输出的字符。这个时候安装一个字符集支持比较齐全的字体即可。常见的字体比如nerd fonts，包含了常用字体+许多的符号字体的集合，因此找到自己心水的字体，安装并且替换即可解决这些问题。
可能还有许多问题我没有想到，可以在留言区提出，我一并加上。</description>
    </item>
    
    <item>
      <title>使用Fabric进行部署</title>
      <link>https://svtter.github.io/2018/01/27/%E4%BD%BF%E7%94%A8fabric%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Sat, 27 Jan 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/01/27/%E4%BD%BF%E7%94%A8fabric%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Fabric是一个可以在远程机器上运行命令的库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fabric官方目前只支持Python2版本，但是有勤劳的人开发出了适配Python3的版本。具体可以查看这个&lt;a href=&#34;https://github.com/mathiasertl/fabric/&#34;&gt;fork&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记又一次搞崩服务器</title>
      <link>https://svtter.github.io/2018/01/11/%E8%AE%B0%E5%8F%88%E4%B8%80%E6%AC%A1%E6%90%9E%E5%B4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Thu, 11 Jan 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/01/11/%E8%AE%B0%E5%8F%88%E4%B8%80%E6%AC%A1%E6%90%9E%E5%B4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>记又一次搞崩服务器。使用“又”，是因为我搞崩不是一次两次了。我希望这是最后一次。
背景 使用Android连接服务器的时候，发现要比自己的mac速度快很多，于是十分好奇，打算研究一下是什么因素导致的。
流程 检查了app以后，判断应该是开启了fast TCP导致的，于是考虑在mac上也开启对应的fast TCP，但是效果并不是十分显著；于是再次排查，发现服务器端并没有开启fast TCP。
这就很奇怪了，为什么速度这么快呢？是因为对“同源”的加密方法有优化吗？
于是，自然而然的考虑是不是可以通过开启这个TCP加速来加速服务器。这就开启了噩梦的开端。因为需要3.7以上的Linux Kernel才支持这个特性，所以需要先升级内核。我的内核难道不应该是最新的吗？带着这个以为输入了uname sr，显示内核版本2.6*。惊奇，我的VPS内核这么旧吗？于是自然而然的想到要升级一下内核，并且理所应当的把升级内核的脚本apt-get install linux-kernel-lts-wily运行了一下。于是噩梦开始了。
OpenVZ本身是不支持升级内核的，所有的VM都使用同一个内核版本，因此这个命令导致了很神奇的BUG，安装内核装不上，卸载内核卸载不了。
这个时候我面临两个选择，一个是重新安装系统，一个是解决当前的这个问题。
经过简单地判断，我认为如果解决当前问题，可能花费我更多的时间，直接重新安装系统就可以了。重新配置一些相关措施也并不难。
失算的事情是，尽管我依稀记得一部分关于配置的内容，但是要完全复现我所配置的相关应用已经很难了，因为我没有做记录。于是来回又踩了许多坑，之前有些坑我有很明确的踩进去的记忆。
这就非常痛苦了，每次操作都在嘲讽自己的愚蠢与过度自信。最后，我只进行了简单的配置，只找回了部分的优化——记忆里我所做的优化就只有这些了，但是速度似乎下降了，这就是最终的结果。
这也让我想起《人月神话》里面描写的一句，具体我已经记不清了，意思大概是这样的：有些步骤你是必须要做的，只不过当前你没有做而已，以后是要补上的。我读到这个地方的时候，联想这个规律为“技术债”。
好了，以上就是我还“技术债”的全部过程了。
教训 研究问题虽然好，但是要注意花费的时间 在生产服务器上，不要做没有经过自查的操作。 不要被强迫症控制了，能用则用。 记录自己的行为日志，如果可以的话，写一个安装脚本 唉，真是一次不合格的运维行动。</description>
    </item>
    
    <item>
      <title>使用Docker安装Spark</title>
      <link>https://svtter.github.io/2017/12/26/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85spark/</link>
      <pubDate>Tue, 26 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/12/26/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85spark/</guid>
      <description>&lt;p&gt;在国内加载Dockerhub上的镜像速度会比较慢，对此我们可以通过设置mirror镜像的方式来加速images的下载。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell-tips</title>
      <link>https://svtter.github.io/post/2017-12-20-shell-tips/</link>
      <pubDate>Wed, 20 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2017-12-20-shell-tips/</guid>
      <description>重启终端 执行命令，修改环境变量等等之后可以通过此命令来简单重启shell
exec &amp;quot;$SHELL&amp;quot;
查找文件 $ find ~ -name &amp;quot;*.txt&amp;quot; -print #在$HOME中查.txt文件并显示
locate findname
编辑变量 在zsh中，编辑$HOME/.zshenv；在bash中，编辑.bash_profile</description>
    </item>
    
    <item>
      <title>全站上https</title>
      <link>https://svtter.github.io/2017/11/30/%E5%85%A8%E7%AB%99%E4%B8%8Ahttps/</link>
      <pubDate>Thu, 30 Nov 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/11/30/%E5%85%A8%E7%AB%99%E4%B8%8Ahttps/</guid>
      <description>&lt;p&gt;本来觉得这个https不是什么大不了的事情，但是输入密码的时候突然意识到，这个post的过程中是有危险的。危险在哪里呢？我们可以参考mozilla的&lt;a href=&#34;https://support.mozilla.org/zh-CN/kb/%E9%98%BB%E6%AD%A2%E6%B7%B7%E5%90%88%E5%86%85%E5%AE%B9?redirectlocale=en-US&amp;amp;as=u&amp;amp;redirectslug=how-does-content-isnt-secure-affect-my-safety&amp;amp;utm_source=inproduct&#34;&gt;相关描述&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Docker的一些Tips</title>
      <link>https://svtter.github.io/2017/07/07/%E4%BD%BF%E7%94%A8docker%E7%9A%84%E4%B8%80%E4%BA%9Btips/</link>
      <pubDate>Fri, 07 Jul 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/07/07/%E4%BD%BF%E7%94%A8docker%E7%9A%84%E4%B8%80%E4%BA%9Btips/</guid>
      <description>&lt;p&gt;Docker是一种强大的DevOps工具，使用其无论是作为开发环境还是生产环境，但是非常&lt;/p&gt;
&lt;p&gt;好的选择；在这篇文章中，讲讲Docker的几个开发Tips。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用openwrt</title>
      <link>https://svtter.github.io/2017/06/06/%E4%BD%BF%E7%94%A8openwrt/</link>
      <pubDate>Tue, 06 Jun 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/06/06/%E4%BD%BF%E7%94%A8openwrt/</guid>
      <description>今天花了不少时间在openwrt上（实际上是全都花在上面了），从一开始的写入到最后终于能跑；
因为手头没有可用的路由器，只能通过无线连接以及网线来调试，IP设置上的问题吃了不少苦头，
最后一个个排查终于解决了问题。
安装 我这里的设备是RaspberryPI 3B；对应的openwrt的下载链接，只有8M，解压缩后有300M，很神奇，估计是IMG里面有不少00；
配置 配置上参考了几个博客：
http://sh.alynx.xyz/posts/2016/06/28/RPi-Router/ 一个H3C https://github.com/ruijanlee/h3cc 树莓派3 刷openwrt https://my.oschina.net/wangandi/blog/687389 ss http://www.wzero.net/?p=137 关于ipsec 在网上没有搜索到现成的配置，今天已经比较累了，如果明天有时间再看吧。</description>
    </item>
    
    <item>
      <title>树莓派安装owncloud小记</title>
      <link>https://svtter.github.io/2017/02/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85owncloud%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 06 Feb 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/02/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85owncloud%E5%B0%8F%E8%AE%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.voidcn.com/blog/u010873775/article/p-5812004.html&#34;&gt;http://www.voidcn.com/blog/u010873775/article/p-5812004.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我是按照以上教程进行安装部署的，但是使用不了，原因是对于目录配置有问题，其中，不应该是进入data目录，而是进入owncloud目录。&lt;/p&gt;
&lt;p&gt;成功配置之后发现owncloud没有启用https，登陆官网查看，配置文档云里雾里，不是很明白，按照其配置方法不见奏效，其中有不少地方我也不是很理解，最后找到了另一篇文章，具体文章我已经找不到了，能够配置的更好一些，但是不知道为什么直接无法访问了。我使用的证书是openssl生成的，因此在chrome访问的时候提示是不安全的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>杂谈VPS流媒体服务器</title>
      <link>https://svtter.github.io/2017/02/05/%E6%9D%82%E8%B0%88vps%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Sun, 05 Feb 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/02/05/%E6%9D%82%E8%B0%88vps%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>&lt;p&gt;之前的VPS因为瞎玩VPN给封了，后来发现 &lt;a href=&#34;http://boinc.berkeley.edu/index.php&#34;&gt;http://boinc.berkeley.edu/index.php&lt;/a&gt; 这个东西。把自己的空闲的计算贡献给科学。于是切换成Ubuntu，&lt;code&gt;apt install boinc&lt;/code&gt;，之后这个东西就开机自动启动了，就放在那里不用管了——&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>不常见ISP之难</title>
      <link>https://svtter.github.io/2016/08/09/%E4%B8%8D%E5%B8%B8%E8%A7%81isp%E4%B9%8B%E9%9A%BE/</link>
      <pubDate>Tue, 09 Aug 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/08/09/%E4%B8%8D%E5%B8%B8%E8%A7%81isp%E4%B9%8B%E9%9A%BE/</guid>
      <description>&lt;p&gt;不常见的ISP使用起来是非常痛苦的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网络-CDMA接受检验</title>
      <link>https://svtter.github.io/2014/12/31/%E7%BD%91%E7%BB%9C-cdma%E6%8E%A5%E5%8F%97%E6%A3%80%E9%AA%8C/</link>
      <pubDate>Wed, 31 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/31/%E7%BD%91%E7%BB%9C-cdma%E6%8E%A5%E5%8F%97%E6%A3%80%E9%AA%8C/</guid>
      <description>本文可以随意转载，但是转载请保留本信息.
做CDMA简单的接收处理。
文件 input:
new.c:</description>
    </item>
    
    <item>
      <title>bash-使用func和一般的sh的不同</title>
      <link>https://svtter.github.io/post/2014-12-04-bash-%E4%BD%BF%E7%94%A8func%E5%92%8C%E4%B8%80%E8%88%AC%E7%9A%84sh%E7%9A%84%E4%B8%8D%E5%90%8C/</link>
      <pubDate>Thu, 04 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2014-12-04-bash-%E4%BD%BF%E7%94%A8func%E5%92%8C%E4%B8%80%E8%88%AC%E7%9A%84sh%E7%9A%84%E4%B8%8D%E5%90%8C/</guid>
      <description>本文出自svtter.github.io 如果只是单纯的使用function, 在终端中是可以使用的，但是当作一个可执行文件是不行的（例如：使用python调用)
如果使用.sh的方式来处理， 那么问题就在于管理上了 — 可能大量有大量的sh文件，所以说需要权衡利弊，自己使用了。
bash学得并不好，也没有认真的研究，暂且记录一下，日后再做补充</description>
    </item>
    
    <item>
      <title>使用cd快速在目录间移动</title>
      <link>https://svtter.github.io/2014/11/26/%E4%BD%BF%E7%94%A8cd%E5%BF%AB%E9%80%9F%E5%9C%A8%E7%9B%AE%E5%BD%95%E9%97%B4%E7%A7%BB%E5%8A%A8/</link>
      <pubDate>Wed, 26 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/11/26/%E4%BD%BF%E7%94%A8cd%E5%BF%AB%E9%80%9F%E5%9C%A8%E7%9B%AE%E5%BD%95%E9%97%B4%E7%A7%BB%E5%8A%A8/</guid>
      <description>本文出自&amp;lt;svtter.github.io&amp;gt; 难得看见一篇好文= =
操作方法 在此学习并且记录。
标记一个书签: mark [书签] 进入一个书签: g [书签] 输出全部标签: gs 实现原理 sudo vim /etc/profile
也可以使用:w !sudo tee %这种方式来保存</description>
    </item>
    
    <item>
      <title>从grub rescue修复</title>
      <link>https://svtter.github.io/post/2014-11-10-%E4%BB%8Egrubrescue%E4%BF%AE%E5%A4%8D/</link>
      <pubDate>Mon, 10 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2014-11-10-%E4%BB%8Egrubrescue%E4%BF%AE%E5%A4%8D/</guid>
      <description>修复grub-rescue模式 今天删除了一个多余的分区，结果grub找不到原来的启动mod了，也是学习了。
grub-rescue模式中只能用ls, insmod, set root= , set prefix= ,这几个命令。
发现没搞定，重启还是不幸。
使用# grub2-install /dev/sda
然后就搞定= =</description>
    </item>
    
    <item>
      <title>bash相关知识</title>
      <link>https://svtter.github.io/post/2014-11-08-bash%E7%9A%84%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 08 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2014-11-08-bash%E7%9A%84%E7%9B%B8%E5%85%B3/</guid>
      <description>&lt;p&gt;今天想用wget+正则写一个简单的dict，结果不幸失败了。。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
