<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on Svtter's Blog</title><link>https://svtter.cn/categories/devops/</link><description>Recent content in DevOps on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 26 Apr 2025 09:55:38 +0800</lastBuildDate><atom:link href="https://svtter.cn/categories/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Build a Kubernetes Cluster.md</title><link>https://svtter.cn/p/build-a-kubernetes-cluster.md/</link><pubDate>Sat, 26 Apr 2025 09:55:38 +0800</pubDate><guid>https://svtter.cn/p/build-a-kubernetes-cluster.md/</guid><description>&lt;img src="https://svtter.cn/p/build-a-kubernetes-cluster.md/bg.png" alt="Featured image of post Build a Kubernetes Cluster.md" />&lt;p>Kubernetes 是现行容器云的事实标准。这两天我构建了一个私有化的 kubernetes 集群，将过程整理成了脚本，可以使用这些脚本进行二次部署。&lt;/p>
&lt;p>部署集群的代码：&lt;/p>
&lt;script src="https://tarptaeya.github.io/repo-card/repo-card.js">&lt;/script>
&lt;!-- inside body, where you want to create the card -->
&lt;div class="repo-card" data-repo="svtter/k8s-deployment">&lt;/div>
&lt;h2 id="架设前提">架设前提
&lt;/h2>&lt;p>实际上，大多数 kubernetes 部署失败的案例，都在网络环境建设上翻了跟头。&lt;/p>
&lt;p>架设 kubernetes 集群的前提条件（包括对人和对环境的）：&lt;/p>
&lt;ol>
&lt;li>自由的访问网络&lt;/li>
&lt;li>能够对内网中的 DNS 服务器进行管理，能够对 IP 地址进行管理。&lt;/li>
&lt;li>服务器方面：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>作为 master 的服务器 &amp;gt;= 1&lt;/li>
&lt;li>作为 node 节点的服务器 &amp;gt;= 2&lt;/li>
&lt;li>使用 supported 操作系统。例如 Ubuntu，CentOS 等。&lt;/li>
&lt;/ul>
&lt;p>此外，服务器防火墙，swap 等需要提前关闭。这些前提条件在&lt;a class="link" href="https://sealos.run/docs/k8s/quick-start/deploy-kubernetes" target="_blank" rel="noopener"
>这里&lt;/a>会更加详细的描述，我这里就不啰嗦了。在我的代码库中，我提供了对应的代码，可以快速进行操作。&lt;/p>
&lt;p>部署 kubernetes 是一个中高级运维人员的必备技能。这个过程中涉及了大量的网络以及操作系统知识。&lt;/p>
&lt;h2 id="架构简述">架构简述
&lt;/h2>&lt;p>Kubernetes 结构图如下：&lt;/p>
&lt;p>&lt;img src="https://svtter.cn/p/build-a-kubernetes-cluster.md/arch.png"
width="1024"
height="698"
srcset="https://svtter.cn/p/build-a-kubernetes-cluster.md/arch_hu_8f61cc3c186fb5ed.png 480w, https://svtter.cn/p/build-a-kubernetes-cluster.md/arch_hu_2a09611c6ee56014.png 1024w"
loading="lazy"
alt="Kubernetes architecture"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>&lt;/p>
&lt;p>其中，master 节点再 Control Plan 中，用于接收外部请求和转发。&lt;/p>
&lt;h2 id="安装过程">安装过程
&lt;/h2>&lt;p>安装脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装 uv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bash install-uv.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 根据自己的实际情况配置网络中的主机&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 配置 master node，worker node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim conf.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装 sealos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bash download_sealos.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 运行安装脚本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uv run install-k8s.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用">使用
&lt;/h2>&lt;p>安装完成后，可以直接使用 helm 进行集群容器的安装和卸载。&lt;/p></description></item><item><title>vsphere 6.5 Problem.md</title><link>https://svtter.cn/p/vsphere-6.5-problem.md/</link><pubDate>Thu, 24 Apr 2025 17:00:29 +0800</pubDate><guid>https://svtter.cn/p/vsphere-6.5-problem.md/</guid><description>&lt;img src="https://svtter.cn/p/vsphere-6.5-problem.md/bg.png" alt="Featured image of post vsphere 6.5 Problem.md" />&lt;blockquote>
&lt;p>系统版本: vmware esxi 6.5&lt;/p>&lt;/blockquote>
&lt;p>这两天在配置 k8s 内网，发现一个奇怪的问题，ovf 镜像导出之后，再导入启动不了了。&lt;/p>
&lt;p>&lt;img src="https://svtter.cn/p/vsphere-6.5-problem.md/p1.png"
width="972"
height="234"
srcset="https://svtter.cn/p/vsphere-6.5-problem.md/p1_hu_43f6d3c0924e5069.png 480w, https://svtter.cn/p/vsphere-6.5-problem.md/p1_hu_f4c9c7438c027b78.png 1024w"
loading="lazy"
alt="p1"
class="gallery-image"
data-flex-grow="415"
data-flex-basis="996px"
>&lt;/p>
&lt;p>试着跟 kimi 沟通了一下，不太行，这是个笨蛋。&lt;/p>
&lt;p>起初我也认为是 BIOS 和 EFI 切换的问题。但是我检查了一下导出的虚拟机，导入导出都在一个平台上，引导选项也没改变。因此并非如此。&lt;/p>
&lt;blockquote>
&lt;p>补充知识&lt;/p>
&lt;p>EFI（Extensible Firmware Interface，可扩展固件接口）是一种由英特尔（Intel）开发的接口标准，用于计算机硬件和操作系统之间的通信。它主要用于替代传统的BIOS（Basic Input/Output System，基本输入输出系统）。&lt;/p>&lt;/blockquote>
&lt;img src="https://svtter.cn/memos/si.jpg" />
&lt;p>这就很奇怪了。（用 esxi 6.5 这种上古版本的我可能也奇怪）&lt;/p>
&lt;p>实际上我的操作是没有问题的，问题在于 esxi 在导出的时候会丢失了引导信息。&lt;/p>
&lt;h2 id="修复方法">修复方法
&lt;/h2>&lt;p>首先改一下 SCSI 控制器。&lt;/p>
&lt;p>&lt;img src="https://svtter.cn/p/vsphere-6.5-problem.md/p2.png"
width="1552"
height="1104"
srcset="https://svtter.cn/p/vsphere-6.5-problem.md/p2_hu_8423605af33ed61.png 480w, https://svtter.cn/p/vsphere-6.5-problem.md/p2_hu_b2ca61ee95296e97.png 1024w"
loading="lazy"
alt="p2"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="337px"
>&lt;/p>
&lt;ul>
&lt;li>找到 SCSI 控制器 0
&lt;ul>
&lt;li>类型从 &lt;code>VMware Paravirtual&lt;/code> 改成 → &lt;code>LSI Logic SAS&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>然后再次启动，从 boot option 里面找到 debian 选项。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Boot Maintenance Manager → Boot Options → Add Boot Option
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>路径是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/EFI/Debian/grubx64.efi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>选择并且添加后，即可启动。&lt;/p>
&lt;h2 id="资源声明">资源声明
&lt;/h2>&lt;ul>
&lt;li>背景图来自 &lt;a class="link" href="https://www.iperiusbackup.net/en/benefits-virtualization-administrator-would-get-from-using-vmware-esxi/" target="_blank" rel="noopener"
>link&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Config devcontainer.md</title><link>https://svtter.cn/p/config-devcontainer.md/</link><pubDate>Wed, 26 Mar 2025 20:17:47 +0800</pubDate><guid>https://svtter.cn/p/config-devcontainer.md/</guid><description>&lt;img src="https://svtter.cn/p/config-devcontainer.md/image.png" alt="Featured image of post Config devcontainer.md" />&lt;p>有时候，尽管我们启动一个 docker 环境可以执行代码，但是 vscode 补全未能生效。&lt;/p>
&lt;p>这是由于相关的库都在 container 中，我们 vscode 一般是运行在 host os 上。&lt;/p>
&lt;p>为了解决这个问题，我们可以在项目根目录下，使用 docker-compose.yml 来创建一个开发环境。&lt;/p>
&lt;p>然后，创建一个&lt;code>.devcontainer/devcontainer.json&lt;/code>文件。&lt;/p>
&lt;p>例如，如果你要开发 python 的程序，可以使用下面的 &lt;code>.devcontainer/devcontainer.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;MyPython&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;dockerComposeFile&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;../docker-compose.yml&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;service&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;notebook&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">service&lt;/span> &lt;span class="err">in&lt;/span> &lt;span class="err">your&lt;/span> &lt;span class="err">docker-compose.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;workspaceFolder&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/app&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;shutdownAction&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;none&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;customizations&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;vscode&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;extensions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-python.python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-azuretools.vscode-docker&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;tamasfe.even-better-toml&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;charliermarsh.ruff&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-python.black-formatter&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ms-toolsai.jupyter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如此一来，就可以启动一个安装好相关环境的『子』系统了。&lt;/p>
&lt;p>深入阅读：&lt;a class="link" href="https://blog.roboflow.com/nvidia-docker-vscode-pytorch/#installing-docker-for-machine-learning" target="_blank" rel="noopener"
>Develop like a Pro with NVIDIA + Docker + VS Code + PyTorch&lt;/a>。&lt;/p></description></item><item><title>A Docker Image for Computer Vision</title><link>https://svtter.cn/p/a-docker-image-for-computer-vision/</link><pubDate>Wed, 26 Mar 2025 19:57:22 +0800</pubDate><guid>https://svtter.cn/p/a-docker-image-for-computer-vision/</guid><description>&lt;img src="https://svtter.cn/p/a-docker-image-for-computer-vision/image.png" alt="Featured image of post A Docker Image for Computer Vision" />&lt;p>我们在调试深度学习代码的时候，经常会因为环境的问题而头痛。&lt;/p>
&lt;p>为了方便调试，把 pytorch cuda 等环境打成 docker image 是一个很不错的选择。&lt;/p>
&lt;h2 id="如何构建">如何构建
&lt;/h2>&lt;p>这是一个 Docker Image 示例，用于将深度学习环境打包：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 可以改成你需要的 pytorch 版本&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> pytorch/pytorch:2.4.1-cuda11.8-cudnn9-devel&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 这些是常用的包&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install git zsh ffmpeg libsm6 libxext6 -y &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get clean &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm -rf /var/lib/apt/lists/*&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 放在代码库的根目录下，可以安装 requirements.txt&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> requirements.txt .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip install -r requirements.txt&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># install jupyterlab&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip install jupyterlab&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># COPY . .&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 使用 jupyterlab 托管，可以快速启动，token 是`yourtoken`。如果你在公网使用，要考虑使用更复杂的 token。&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;jupyter&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lab&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--ip=0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--port=8888&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--no-browser&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--allow-root&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--NotebookApp.token=yourtoken&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个示例安装了一些基础的类库，通过 pip 即可安装 &lt;code>opencv-python&lt;/code>。&lt;/p>
&lt;p>将&lt;code>Dockerfile&lt;/code>放在目录下，然后可以使用&lt;code>docker compose&lt;/code>启动。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">notebook&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">dockerfile&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 还可以挂载自己需要的 dataset&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">.:/app&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">~/.ssh:/root/.ssh&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 支持 ssh&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">8888&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8888&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">shm_size&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;32gb&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reservations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">devices&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">driver&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nvidia&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">count&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">all&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">capabilities&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">gpu]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动命令是：&lt;code>docker compose up -d&lt;/code>.&lt;/p>
&lt;h2 id="从-dockerhub-上下载">从 Dockerhub 上下载
&lt;/h2>&lt;p>为了方便大家直接使用，我将这个镜像打包，并且上传到了 dockerhub。下载命令是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker pull svtter/debian-pytorch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>源代码可以从这里获得：&lt;/p>
&lt;script src="https://tarptaeya.github.io/repo-card/repo-card.js">&lt;/script>
&lt;!-- inside body, where you want to create the card -->
&lt;div class="repo-card" data-repo="Svtter/debian-pytorch">&lt;/div></description></item><item><title>Create a Never Stop Container.md</title><link>https://svtter.cn/p/create-a-never-stop-container.md/</link><pubDate>Fri, 14 Mar 2025 16:45:58 +0800</pubDate><guid>https://svtter.cn/p/create-a-never-stop-container.md/</guid><description>&lt;img src="https://svtter.cn/p/create-a-never-stop-container.md/background.png" alt="Featured image of post Create a Never Stop Container.md" />&lt;p>有时候我们需要启动一个不停止的容器，来调试我们的应用，或者使用 devcontainer。&lt;/p>
&lt;p>如果我们想在 &lt;code>Dockerfile&lt;/code> 中完成这个事情，我们可以添加这个&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="line">&lt;span class="cl">...&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 其他内容&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;tail&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-f&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;/dev/null&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果是 &lt;code>docker-compose.yml&lt;/code>，我们可以这样做&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">your-app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">entrypoint&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;tail&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-f&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/dev/null&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如此一来，这个容器就不会停止了。&lt;/p></description></item><item><title>Using Sshfs to Mount Remote Folder.md</title><link>https://svtter.cn/p/using-sshfs-to-mount-remote-folder.md/</link><pubDate>Thu, 13 Mar 2025 16:04:12 +0800</pubDate><guid>https://svtter.cn/p/using-sshfs-to-mount-remote-folder.md/</guid><description>&lt;p>因为操作远程目录不是很容易，我之前一直倾向于采用 nfs 来挂载磁盘。但是 nfs 磁盘配置起来并不简单，涉及到权限等一系列问题。&lt;/p>
&lt;p>因此，如果只是图方便操作，实际上 sshfs 是一个更好的选择。&lt;/p>
&lt;h2 id="安装">安装
&lt;/h2>&lt;p>如果使用 &lt;code>ubuntu/debian&lt;/code> 系统，可以直接在客户机上使用: &lt;code>apt install sshfs -y&lt;/code> 来进行安装。&lt;/p>
&lt;h2 id="使用">使用
&lt;/h2>&lt;p>例如，如果我希望挂载远程主机的一个目录，我可以这样做&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sshfs user@host:/home/user/Downloads ./downloads
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样一来，就可以在本地对该内容进行操作了。&lt;/p>
&lt;p>当然，这样做的前提是，远程主机本身支持 ssh 登录。sshfs 底层是使用 ssh 技术来支撑的。&lt;/p>
&lt;p>实际上，之前就采用过 sshfs 的技术来同步数据。但由于时间久远，忘记了这个技术的存在。&lt;/p>
&lt;p>这里写一篇小文章，用于记录一下。&lt;/p></description></item><item><title>Play With Openmanus.md</title><link>https://svtter.cn/p/play-with-openmanus.md/</link><pubDate>Mon, 10 Mar 2025 20:21:44 +0800</pubDate><guid>https://svtter.cn/p/play-with-openmanus.md/</guid><description>&lt;img src="https://svtter.cn/p/play-with-openmanus.md/pics/chat.png" alt="Featured image of post Play With Openmanus.md" />&lt;p>Manus 最近很火爆，我部署了 &lt;a class="link" href="https://github.com/mannaandpoem/OpenManus" target="_blank" rel="noopener"
>OpenManus&lt;/a>，来体验一下 Manus 这种通用的 Agent。&lt;/p>
&lt;p>为此，我构建了一个镜像，可以无痛拉起 &lt;a class="link" href="https://github.com/mannaandpoem/OpenManus" target="_blank" rel="noopener"
>OpenManus&lt;/a>，可以从 &lt;a class="link" href="https://hub.docker.com/r/svtter/openmanus" target="_blank" rel="noopener"
>svtter/openmanus&lt;/a> 获得。&lt;/p>
&lt;h2 id="教程">教程
&lt;/h2>&lt;ol>
&lt;li>编写 &lt;code>docker-compose.yml&lt;/code>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">openmanus&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">images&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">svtter/openmanus&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># - .:/app&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">./config:/app/config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>填写 &lt;code>config/config.yml&lt;/code> 文件:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># A config file for OpenManus&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># Global LLM configuration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">llm]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">model = &amp;#34;anthropic/claude-3.7-sonnet&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">base_url = &amp;#34;https://openrouter.ai/api/v1&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 使用 openrouter&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">api_key = &amp;#34;sk-**&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># api key&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">max_tokens = 4096&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">temperature = 0.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># [llm] #AZURE OPENAI:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># api_type= &amp;#39;azure&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># model = &amp;#34;YOUR_MODEL_NAME&amp;#34; #&amp;#34;gpt-4o-mini&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># base_url = &amp;#34;{YOUR_AZURE_ENDPOINT.rstrip(&amp;#39;/&amp;#39;)}/openai/deployments/{AZURE_DEPOLYMENT_ID}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># api_key = &amp;#34;AZURE API KEY&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># max_tokens = 8096&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># temperature = 0.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># api_version=&amp;#34;AZURE API VERSION&amp;#34; #&amp;#34;2024-08-01-preview&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># Optional configuration for specific LLM models&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">llm.vision]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">model = &amp;#34;anthropic/claude-3.7-sonnet&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">base_url = &amp;#34;https://openrouter.ai/api/v1&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 使用 openrouter&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">api_key = &amp;#34;sk-**&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 使用 api-key&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>最后的目录结构应该这样的：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── config.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── docker-compose.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1 directory, 2 files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="5">
&lt;li>运行命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker compose run openmanus python main.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即可看到交互命令行。&lt;/p>
&lt;h2 id="测试">测试
&lt;/h2>&lt;p>让我们测试一下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">INFO [browser_use] BrowserUse logging setup complete with level info
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [root] Anonymized telemetry enabled. See https://docs.browser-use.com/development/telemetry for more information.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter your prompt (or &amp;#39;exit&amp;#39;/&amp;#39;quit&amp;#39; to quit): who is the best NBA player now?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行完成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">20.198&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">base&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">137&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">Executing&lt;/span> &lt;span class="n">step&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">26.653&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">toolcall&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">think&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">53&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="err">✨&lt;/span> &lt;span class="n">Manus&lt;/span>&lt;span class="s1">&amp;#39;s thoughts: Thank you for your question about the best NBA player currently. Based on my research, I can provide you with a definitive answer:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">**&lt;/span>&lt;span class="n">Nikola&lt;/span> &lt;span class="n">Jokic&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">Denver&lt;/span> &lt;span class="n">Nuggets&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">widely&lt;/span> &lt;span class="n">considered&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">best&lt;/span> &lt;span class="n">NBA&lt;/span> &lt;span class="n">player&lt;/span> &lt;span class="n">right&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">This&lt;/span> &lt;span class="n">conclusion&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">supported&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">multiple&lt;/span> &lt;span class="n">authoritative&lt;/span> &lt;span class="n">sources&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span> &lt;span class="n">ESPN&lt;/span>&lt;span class="s1">&amp;#39;s NBA Rank 2024-2025 places Jokic at #1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span> &lt;span class="n">CBS&lt;/span> &lt;span class="n">Sports&lt;/span> &lt;span class="n">rankings&lt;/span> &lt;span class="n">specifically&lt;/span> &lt;span class="n">mention&lt;/span> &lt;span class="s2">&amp;#34;Nikola Jokic over SGA at No. 1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span> &lt;span class="n">Jokic&lt;/span> &lt;span class="n">has&lt;/span> &lt;span class="n">won&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">NBA&lt;/span> &lt;span class="n">MVP&lt;/span> &lt;span class="n">award&lt;/span> &lt;span class="n">three&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">years&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2021&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2022&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="mi">2024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span> &lt;span class="n">He&lt;/span> &lt;span class="n">led&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">Denver&lt;/span> &lt;span class="n">Nuggets&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">their&lt;/span> &lt;span class="n">first&lt;/span> &lt;span class="n">NBA&lt;/span> &lt;span class="n">Championship&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="mi">2023&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">The&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="n">consensus&lt;/span> &lt;span class="n">top&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="n">NBA&lt;/span> &lt;span class="n">players&lt;/span> &lt;span class="n">are&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">1.&lt;/span> &lt;span class="n">Nikola&lt;/span> &lt;span class="n">Jokic&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Denver&lt;/span> &lt;span class="n">Nuggets&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">2.&lt;/span> &lt;span class="n">Luka&lt;/span> &lt;span class="n">Doncic&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Dallas&lt;/span> &lt;span class="n">Mavericks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">3.&lt;/span> &lt;span class="n">Giannis&lt;/span> &lt;span class="n">Antetokounmpo&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Milwaukee&lt;/span> &lt;span class="n">Bucks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">4.&lt;/span> &lt;span class="n">Shai&lt;/span> &lt;span class="n">Gilgeous&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Alexander&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Oklahoma&lt;/span> &lt;span class="n">City&lt;/span> &lt;span class="n">Thunder&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">5.&lt;/span> &lt;span class="n">Jayson&lt;/span> &lt;span class="n">Tatum&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Boston&lt;/span> &lt;span class="n">Celtics&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Jokic&lt;/span> &lt;span class="n">stands&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">his&lt;/span> &lt;span class="n">exceptional&lt;/span> &lt;span class="n">versatility&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">center&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">elite&lt;/span> &lt;span class="n">passing&lt;/span> &lt;span class="n">skills&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">scoring&lt;/span> &lt;span class="n">efficiency&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rebounding&lt;/span> &lt;span class="n">prowess&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">basketball&lt;/span> &lt;span class="n">IQ&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">His&lt;/span> &lt;span class="n">unique&lt;/span> &lt;span class="n">ability&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">both&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">dominant&lt;/span> &lt;span class="n">scorer&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">primary&lt;/span> &lt;span class="n">playmaker&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="n">feet&lt;/span> &lt;span class="n">tall&lt;/span> &lt;span class="n">makes&lt;/span> &lt;span class="n">him&lt;/span> &lt;span class="n">one&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">most&lt;/span> &lt;span class="n">impactful&lt;/span> &lt;span class="n">players&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">league&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">26.653&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">toolcall&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">think&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">54&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="err">🛠️&lt;/span> &lt;span class="n">Manus&lt;/span> &lt;span class="n">selected&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="n">tools&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2025&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">26.654&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">INFO&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">toolcall&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">think&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">58&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="err">🧰&lt;/span> &lt;span class="n">Tools&lt;/span> &lt;span class="n">being&lt;/span> &lt;span class="n">prepared&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;terminate&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="费用">费用
&lt;/h2>&lt;p>一次性花了我一块钱，恐怖如斯。&lt;/p>
&lt;p>&lt;img src="https://svtter.cn/p/play-with-openmanus.md/pics/price.png"
width="724"
height="63"
srcset="https://svtter.cn/p/play-with-openmanus.md/pics/price_hu_2fd15c616c4c7747.png 480w, https://svtter.cn/p/play-with-openmanus.md/pics/price_hu_d13840975a8d9f99.png 1024w"
loading="lazy"
alt="price"
class="gallery-image"
data-flex-grow="1149"
data-flex-basis="2758px"
>&lt;/p>
&lt;h2 id="结论和想法">结论和想法
&lt;/h2>&lt;ol>
&lt;li>用了 google search，browser，以及 python 作为 agent tools。很有想法，实现也很快。&lt;/li>
&lt;li>东契奇已经去了湖人，分析的数据还在独行侠，AGI 无法淘汰我们！&lt;/li>
&lt;li>机会永远留给有准备的人&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://svtter.cn/p/play-with-openmanus.md/pics/chat.png"
width="900"
height="298"
srcset="https://svtter.cn/p/play-with-openmanus.md/pics/chat_hu_b27caa3b0d69649a.png 480w, https://svtter.cn/p/play-with-openmanus.md/pics/chat_hu_3593c209d2e46352.png 1024w"
loading="lazy"
alt="chat"
class="gallery-image"
data-flex-grow="302"
data-flex-basis="724px"
>&lt;/p></description></item><item><title>Coolify 和 Traefic 结合使用</title><link>https://svtter.cn/p/coolify-%E5%92%8C-traefic-%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 07 Feb 2025 17:14:55 +0800</pubDate><guid>https://svtter.cn/p/coolify-%E5%92%8C-traefic-%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>我使用 coolify 来管理多台服务器；但是 coolify 域名管理有点让人迷惑，我一直没能搞定。今天测试了一下，终于搞明白了。&lt;/p>
&lt;p>例如，如果我要部署一个&lt;code>myapp&lt;/code>，我的&lt;code>docker-compose.yml&lt;/code>应该这样写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">myapp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">myapp&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;8050:80&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;./data:/app/data&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">NODE_ENV=production&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;APP_PORT=${APP_PORT_IN_UI}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;PORT=${PORT_IN_UI:-80} volumes:&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;${COOLIFY_VOLUME_MYAPP}:/app/data&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">coolify.managed=true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">traefik.enable=true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">traefik.http.routers.myapp.rule=Host(`example.myapp.com`)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;traefik.http.routers.myapp.entrypoints=http,https&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>80&lt;/code>是&lt;code>myapp&lt;/code>内部的&lt;code>port&lt;/code>，域名用&lt;code>example.myapp.com&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>如此配置，就可以使用域名了。&lt;/p></description></item><item><title>使用一个基础镜像来避免反复安装依赖项</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9D%A5%E9%81%BF%E5%85%8D%E5%8F%8D%E5%A4%8D%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E9%A1%B9/</link><pubDate>Tue, 27 Aug 2024 18:04:54 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9D%A5%E9%81%BF%E5%85%8D%E5%8F%8D%E5%A4%8D%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E9%A1%B9/</guid><description>&lt;p>很多时候，构建 docker 镜像的速度很慢，尤其是当我们的基础依赖发生改变之后。为了解决这个问题，我们应该在实际运行的镜像之前，增加一个 venv 的基础镜像。&lt;/p>
&lt;p>如果我们想要构建一个前端的镜像，那么不可避免的要下载和安装使用 npm 包。我们可以构建一个基础镜像，名称为 &lt;code>frontend-base&lt;/code>。
镜像的内容&lt;code>dockerfile.base&lt;/code>如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl"> FROM node:20 as build-stage&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> WORKDIR /app&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> ENV &lt;span class="nv">ELECTRON_MIRROR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://npmmirror.com/mirrors/electron/&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> COPY pnpm-lock.yaml package.json /app/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> RUN npm install -g pnpm &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> pnpm install&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> COPY . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> RUN pnpm run build:vite&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行命令构建镜像：&lt;code>docker build -f Dockerfile.base -t svtter/frontend-base:latest .&lt;/code>
如此一来，我们可以构建好一个&lt;code>frontend-base:latest&lt;/code>镜像。
然后，我们再构建&lt;code>frontend:latest&lt;/code>镜像，作为我们实际部署应用的镜像。 &lt;code>dockerfile&lt;/code>是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># FROM node:20 as build-stage&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> svtter/cathodic-frontend-base:latest as build-stage&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> &lt;span class="nv">ELECTRON_MIRROR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://npmmirror.com/mirrors/electron/&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> pnpm-lock.yaml package.json /app/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pnpm install&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pnpm run build:vite&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> nginx:1.25.1 as prod&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>build-stage /app/src/out /usr/share/nginx/html&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：因为我的代码里使用了 electron，所以为了速度更快，我使用了&lt;code>ELECTRON_MIRROR&lt;/code>。&lt;/p>&lt;/blockquote>
&lt;p>这里的构建命令是：&lt;code>docker build -t svtter/frontend:latest .&lt;/code>
这样一来，我们可以避免几个问题:&lt;/p>
&lt;ol>
&lt;li>如果基础的依赖有改变，在 venv 的基础上，pnpm 可以减少 npm 包的反复下载。&lt;/li>
&lt;li>一段时间后，我们可以重新构建 &lt;code>frontend-base&lt;/code>，来减少在 &lt;code>frontend&lt;/code> 中包的下载。&lt;/li>
&lt;/ol></description></item><item><title>Using Kind to Play with K8s</title><link>https://svtter.cn/p/using-kind-to-play-with-k8s/</link><pubDate>Wed, 12 Jun 2024 11:09:49 +0800</pubDate><guid>https://svtter.cn/p/using-kind-to-play-with-k8s/</guid><description>&lt;p>如果直接使用 kubernetes 的线上版本进行调试，需要资源太多了。使用 minikube 有时候又无法启动集群。
因此，开发者可以考虑使用 &lt;a class="link" href="https://kind.sigs.k8s.io/docs/user/quick-start/" target="_blank" rel="noopener"
>Kind&lt;/a> 来部署测试 Kubernetes。&lt;/p>
&lt;p>This article is about using Kind to create a Kubernetes (K8s) cluster and debug it.&lt;/p>
&lt;p>By default, Kind does not support load balancers. If you want to test your apps, use &lt;code>NodePort&lt;/code> or &lt;code>ClusterIP&lt;/code> instead.&lt;/p>
&lt;p>Source code: &lt;a class="link" href="https://github.com/Svtter/example-code-for-kind" target="_blank" rel="noopener"
>svtter/example-code-for-kind&lt;/a>.&lt;/p>
&lt;h2 id="using-nodeport-to-view-service">Using NodePort to View Service
&lt;/h2>&lt;p>Get the node&amp;rsquo;s IP to visit:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>base&lt;span class="o">)&lt;/span> ➜ cathodic kubectl get nodes -o wide
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind-control-plane Ready control-plane 22h v1.30.0 172.18.0.2 &amp;lt;none&amp;gt; Debian GNU/Linux &lt;span class="m">12&lt;/span> &lt;span class="o">(&lt;/span>bookworm&lt;span class="o">)&lt;/span> 6.1.0-18-amd64 containerd://1.7.15
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>View the service IP:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>base&lt;span class="o">)&lt;/span> ➜ cathodic kubectl get service nginx-service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-service NodePort 10.96.65.77 &amp;lt;none&amp;gt; 80:30160/TCP 26m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, use &lt;code>curl -L http://172.18.0.2:30160&lt;/code> to visit the Nginx service.&lt;/p>
&lt;h2 id="using-loadbalancer">Using LoadBalancer
&lt;/h2>&lt;ul>
&lt;li>Install cloud-provider-kind via this &lt;a class="link" href="https://kind.sigs.k8s.io/docs/user/loadbalancer/" target="_blank" rel="noopener"
>loadbalancer&lt;/a>.&lt;/li>
&lt;li>Start Kind, unlabel the node, and start &lt;code>cloud-provider-kind&lt;/code> according to this &lt;a class="link" href="https://github.com/kubernetes-sigs/cloud-provider-kind?tab=readme-ov-file#install" target="_blank" rel="noopener"
>link&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>Use Mirror</title><link>https://svtter.cn/p/use-mirror/</link><pubDate>Thu, 17 Nov 2022 21:15:09 +0800</pubDate><guid>https://svtter.cn/p/use-mirror/</guid><description>&lt;p>使用代理。在国内编程，使用代理非常重要。&lt;/p>
&lt;p>如果不使用代理，代码包的下载，环境的构建会浪费你很多时间。有些环境因为高度依赖网络环境，使得我们如果不定制底层网络，无法获取某些资源。&lt;/p>
&lt;p>下面罗列几个推荐的代理。&lt;/p>
&lt;p>go: &lt;code>goproxy.io&lt;/code>
java:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.aliyun.com/article/754038" target="_blank" rel="noopener"
>maven mirror&lt;/a>, edit &lt;code>~/.m2/settings.xml&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;mirror&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>nexus-aliyun&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;mirrorOf&amp;gt;&lt;/span>*&lt;span class="nt">&amp;lt;/mirrorOf&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>Nexus aliyun&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;url&amp;gt;&lt;/span>http://maven.aliyun.com/nexus/content/groups/public&lt;span class="nt">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/mirror&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ruby: &lt;a class="link" href="https://gems.ruby-china.com/" target="_blank" rel="noopener"
>gem mirror&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ gem sources -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://gems.ruby-china.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 确保只有 gems.ruby-china.com&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>php:&lt;/p>
&lt;ul>
&lt;li>composer: &lt;code>composer config -g repos.packagist composer https://mirrors.aliyun.com/composer/&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>python:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener"
>tsinghua - pypi&lt;/a>&lt;/li>
&lt;li>&lt;code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>nodejs (javascript):&lt;/p>
&lt;ul>
&lt;li>cnpm: &lt;code>npm install -g cnpm --registry=http://registry.npm.taobao.org&lt;/code>&lt;/li>
&lt;li>tyarn: &lt;code>npm install -g tyarn&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>使用 Docker 构建前端应用</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-docker-%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E5%BA%94%E7%94%A8/</link><pubDate>Sat, 04 Sep 2021 18:04:01 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-docker-%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E5%BA%94%E7%94%A8/</guid><description>&lt;p>docker compose 构建前端 app 是否容易，强烈建议中小企业采用这种方法。&lt;/p>
&lt;p>对于前后端分离的 WEB 应用，一般采用&lt;code>npm run build&lt;/code>的形式构建静态文件。
生成静态文件后，将静态文件放置到 nginx 的静态目录下。&lt;/p>
&lt;p>因此，我们可以根据这个特点，完成 nginx 镜像的构建。&lt;/p>
&lt;p>这个构建过程往往分成两步：&lt;/p>
&lt;ol>
&lt;li>构建前端的环境，并且生成静态文件&lt;/li>
&lt;li>构建&lt;code>nginx&lt;/code>镜像，将静态文件拷贝&lt;/li>
&lt;/ol>
&lt;h2 id="dockerfile">Dockerfile
&lt;/h2>&lt;p>一个样例&lt;code>Dockerfile&lt;/code>如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># Stage 0, &amp;#34;build-stage&amp;#34;, based on Node.js, to build and compile the frontend&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> node:14 as build-stage&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 配置淘宝镜像&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> yarn config &lt;span class="nb">set&lt;/span> registry https://registry.npm.taobao.org/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 复制前端依赖文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> package.json /app/&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> yarn install&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . /app&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> yarn run build&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 复制 nginx 配置文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> default.conf default.conf&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> nginx:1.18&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>build-stage /app/dist/ /usr/share/nginx/html&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># Copy the default default.conf provided by tiangolo/node-frontend&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>build-stage /app/default.conf /etc/nginx/conf.d/default.conf&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-g&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;daemon off;&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>nginx 配置文件如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="line">&lt;span class="cl">&lt;span class="k">server&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">listen&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">access_log&lt;/span> &lt;span class="s">/dev/log&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">root&lt;/span> &lt;span class="s">/usr/share/nginx/html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="启动应用">启动应用
&lt;/h2>&lt;ul>
&lt;li>构建前端镜像：&lt;code>docker build -t frontend .&lt;/code>&lt;/li>
&lt;li>启动前端应用：&lt;code>docker run -it -p 3000:80 -d frontend .&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>这样，我们在主机的&lt;code>3000&lt;/code>端口启动了&lt;code>nginx&lt;/code>，并且将前端的应用拷贝了进去。&lt;/p>
&lt;p>下一步，我们可以在此基础上构建整个应用。&lt;/p>
&lt;p>（未完待续）&lt;/p></description></item><item><title>⚙ 记录一次 gitlab runner 的配置</title><link>https://svtter.cn/p/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-gitlab-runner-%E7%9A%84%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 17 Aug 2020 08:44:46 +0800</pubDate><guid>https://svtter.cn/p/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1-gitlab-runner-%E7%9A%84%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>首先介绍一下整体的情况，和我们的需求。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在我们组里，不同的项目和服务，被分到不同的 repo 中，托管在 gitlab 上面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最近一段时间，由于构建的时间变长，用掉了 gitlab 免费的 2000 minutes。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>因此，打算采用自己的 runner，来进行服务的构建和使用。&lt;/p>
&lt;p>Gitlab runner 配置有些神奇。&lt;/p>
&lt;h2 id="-技术背景">🔙 技术背景
&lt;/h2>&lt;p>在这之前，我们已经单给 &lt;code>data_service&lt;/code> 部署了一个 &lt;code>gitlab-runner&lt;/code>。这是由于&lt;code>data-service&lt;/code> 跑 CI 的时间格外长，因此单独进行了配置。&lt;/p>
&lt;p>但是没有想到的是，backend-service 耗尽了所有的 gitlab 分钟数。&lt;/p>
&lt;p>​ 本文花费了作者 &lt;code>$8&lt;/code> 。如果可以的话，请支持一下作者。&lt;/p>
&lt;h2 id="-gitlab-runner-概念">🏃‍♂️ Gitlab Runner 概念
&lt;/h2>&lt;p>CI 是由 jobs 组成的；&lt;/p>
&lt;p>pipeline 是由多个 jobs 组成。&lt;/p>
&lt;p>官方文档声称，在 gitlab 中，没有&lt;code>shared runner&lt;/code>，就不能启动 jobs 了。&lt;/p>
&lt;p>但其实，只要有 &lt;code>group runner&lt;/code> 或者 &lt;code>specific runner&lt;/code> （也就是我们自己配置的 runner），job 也可以正常运行。&lt;/p>
&lt;p>要注意一下 &lt;code>tag&lt;/code> 选项。&lt;code>tag&lt;/code> 选项，并非单纯的对 &lt;code>runner&lt;/code> 进行区分。项目也会依据&lt;code>tag&lt;/code>，被分配给不同的&lt;code>runner&lt;/code>。&lt;/p>
&lt;p>不过，我们在最初配置&lt;code>runner&lt;/code>时不清楚这一点。我们还以为，就是官方所声称的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">Shared Runners on GitLab.com run in autoscale mode and are powered by Google Cloud Platform. Autoscaling means reduced wait times to spin up builds, and isolated VMs for each project, thus maximizing security.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">They&amp;#39;re free to use for public open source projects and limited to 2000 CI minutes per month per group for private projects. Read about all GitLab.com plans.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此给&lt;code>gitlab&lt;/code>进行了一下信仰充值。后来发觉似乎充值之后，我们配置的&lt;code>group runner&lt;/code>也没有开始运行。&lt;/p>
&lt;p>最后我们定位到&lt;code>runner&lt;/code>的&lt;code>tag&lt;/code>问题，最终暂时移除了&lt;code>tag&lt;/code>，解决了问题。&lt;/p>
&lt;p>希望 &lt;code>gitlab&lt;/code> 能够发展的越来越好。希望&lt;code>Mozilla&lt;/code>支撑下去。&lt;/p></description></item><item><title>为你的 Docker 项目集成 ELK</title><link>https://svtter.cn/p/%E4%B8%BA%E4%BD%A0%E7%9A%84-docker-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90-elk/</link><pubDate>Fri, 04 Jan 2019 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%B8%BA%E4%BD%A0%E7%9A%84-docker-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90-elk/</guid><description>&lt;p>&lt;a class="link" href="https://github.com/twtrubiks/docker-elk-tutorial" target="_blank" rel="noopener"
>https://github.com/twtrubiks/docker-elk-tutorial&lt;/a>&lt;/p>
&lt;p>基本上按照这个配置就可以了，创建 @timestamp 这一步，可以用如下脚本替代 Postman&lt;/p>
&lt;pre>$ &lt;span class="pl-s1">curl -XPOST -D- &lt;span class="pl-s">&lt;span class="pl-pds">'&lt;/span>http://localhost:5601/api/saved_objects/index-pattern&lt;span class="pl-pds">'&lt;/span>&lt;/span> \&lt;/span>
&lt;span class="pl-c1"> -H 'Content-Type: application/json' \&lt;/span>
&lt;span class="pl-c1"> -H 'kbn-version: 6.5.4' \&lt;/span>
&lt;span class="pl-c1"> -d '{"attributes":{"title":"logstash-*","timeFieldName":"@timestamp"}}'&lt;/span>&lt;/pre>
&lt;p>这也是 tutorials 中，使用的 ELK images 给出的。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/deviantony/docker-elk" target="_blank" rel="noopener"
>https://github.com/deviantony/docker-elk&lt;/a>&lt;/p>
&lt;h2 id="elk-是什么">ELK 是什么？
&lt;/h2>&lt;p>以下内容摘自 &lt;a href="https://www.cnblogs.com/soar1688/p/6849183.html" target="_blank" rel="noopener">soar1688的博客&lt;/a>&lt;/p>
&lt;p>ELK 由 Elasticsearch、Logstash 和 Kibana 三部分组件组成；&lt;/p>
&lt;p>Elasticsearch 是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful 风格接口，多数据源，自动搜索负载等。&lt;/p>
&lt;p>Logstash 是一个完全开源的工具，它可以对你的日志进行收集、分析，并将其存储供以后使用&lt;/p>
&lt;p>kibana 是一个开源和免费的工具，它可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。&lt;/p>
&lt;p>2、四大组件&lt;/p>
&lt;p>Logstash: logstash server 端用来搜集日志；&lt;/p>
&lt;p>Elasticsearch: 存储各类日志；&lt;/p>
&lt;p>Kibana: web 化接口用作查寻和可视化日志；&lt;/p>
&lt;p>Logstash Forwarder: logstash client 端用来通过 lumberjack 网络协议发送日志到 logstash server；&lt;/p>
&lt;h2 id="还可参考">还可参考
&lt;/h2>&lt;p>– https://www.codementor.io/samueljames/using-django-with-elasticsearch-logstash-and-kibana-elk-stack-9l4fwx138&lt;/p></description></item><item><title>使用 Docker swarm 构建 PostgreSQL 集群</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-docker-swarm-%E6%9E%84%E5%BB%BA-postgresql-%E9%9B%86%E7%BE%A4/</link><pubDate>Sat, 01 Dec 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-docker-swarm-%E6%9E%84%E5%BB%BA-postgresql-%E9%9B%86%E7%BE%A4/</guid><description>&lt;blockquote>
&lt;p>又是一个渣翻，Copyright belongs to the original text。&lt;/p>
&lt;p>&lt;a class="link" href="https://info.crunchydata.com/blog/an-easy-recipe-for-creating-a-postgresql-cluster-with-docker-swarm" target="_blank" rel="noopener"
>原文地址&lt;/a>&lt;/p>&lt;/blockquote>
&lt;h2 id="背景">背景
&lt;/h2>&lt;p>PostgreSQL 在 9.0 版本已经开始持续接收大量的增强，包括：&lt;/p>
&lt;ol>
&lt;li>异步拓展&lt;/li>
&lt;li>同步拓展&lt;/li>
&lt;li>仲裁提交&lt;/li>
&lt;li>级联拓展&lt;/li>
&lt;li>逻辑拓展&lt;/li>
&lt;/ol>
&lt;p>PostgreSQL 文档也提供了一个 overview 以及 不同拓展方法的比较。详见&lt;a href="https://www.postgresql.org/docs/current/different-replication-solutions.html" target="_blank" rel="noopener">PostgreSQL 集群策略比较&lt;/a>&lt;/p>
&lt;p>用于部署 PostgreSQL 的拓展的主拓展的方法论，是一个重要的工具来为你的数据库集群创建高可用的环境。需要一个合适的部署策略来确保你的数据被保存到不同磁盘，以及不同的数据中心。&lt;/p>
&lt;p>拓展不是一个“安装然后忘记”的操作。在生产系统中，你想要确定你对实例有合适的监控，来了解你所有的在线的拓展，或者了解一个拓展有多少数据需要与主节点进行同步。&lt;/p>
&lt;p>当主节点配置好以后，安装就很容易了。但幸运的是，使用 Docker 可以使得这个过程更加轻松。&lt;/p>
&lt;h2 id="环境安装">环境安装
&lt;/h2>&lt;p>想要部署这个环境，你至少需要 Docker 1.12版本。&lt;/p>
&lt;p>要想开始，提供一个 Docker 集群。例如，一个开发集群，你可以在每一个机器上加载 Dokcer，来使用 Swarm。这个方法将使用如下的架构：&lt;/p>
&lt;img src="https://i2.wp.com/info.crunchydata.com/hs-fs/hubfs/diagram.png?w=625&amp;#038;ssl=1" alt="PostgreSQL Docker Swarm Architecture" data-recalc-dims="1" />
&lt;p>每一个系统都需要安装 Docker 以及启动。&lt;/p>
&lt;h2 id="swarm-安装">Swarm 安装
&lt;/h2>&lt;p>从1.12版本开始，Docker就已经集成了Swarm。&lt;/p>
&lt;h2 id="容器编排">容器编排
&lt;/h2>&lt;p>高可用 PostgresSQL 集群配置需要两个以上的主机。主节点和从节点需要运行在不同的 worker 节点上，来使得可用性最高。&lt;/p>
&lt;p>为了部署 &lt;a href="https://github.com/CrunchyData/crunchy-containers/" target="_blank" rel="noopener">Crunchy PostgreSQL containers&lt;/a> 到多个集群，你需要使用 node labels。&lt;/p>
&lt;p>标注主机对于使用 PostgreSQL 容器有几个好处：&lt;/p>
&lt;ul>
&lt;li>将服务散步到许多 worker 上，来提高可用性&lt;/li>
&lt;li>主机可以针对读（从）写（主）操作进行优化（例如使用高性能磁盘）&lt;/li>
&lt;/ul>
&lt;p>**记住：**对于PostgreSQL 10，主节点可以同时被允许读写，但是从节点仅仅允许被读。&lt;/p>
&lt;p>为了允许容器被放在指定的 worker 节点上，增加一个元数据标签到 Swarm 节点上。&lt;/p>
&lt;pre>node1_id=&lt;span class="pl-s">&lt;span class="pl-pds">$(&lt;/span>docker node list &lt;span class="pl-k">|&lt;/span> grep worker1 &lt;span class="pl-k">|&lt;/span> awk &lt;span class="pl-pds">'&lt;/span>{print $1}&lt;span class="pl-pds">'&lt;/span>&lt;span class="pl-pds">)&lt;/span>&lt;/span>
docker node update --label-add type=primary &lt;span class="pl-smi">${node1_id?}
&lt;/span>&lt;/pre>
&lt;p>在上述例子中，一个被称为 primary 的标签，加入了 worker1。通过使用这个标签，我们可以应用一些约束到 Docker swarm 的 PostgreSQL Stack 部署上。&lt;/p>
&lt;p>&lt;strong>注意：我们没有对从节点增加约束，我们可以简单的使用一条 inverse 约束：&lt;/strong>&lt;/p>
&lt;p>&lt;code>node.labels.type != primary&lt;/code>&lt;/p>
&lt;h2 id="postgresql-stack-定义">PostgreSQL stack 定义
&lt;/h2>&lt;p>通过 Swarm 部署以及 worker 节点正确的标记，我们可以部署 PostgreSQL stack了。&lt;/p>
&lt;p>PostgreSQL stack 是通过一个主节点以及从节点组成的。下面是服务定义：&lt;/p>
&lt;p>&lt;em>docker-compose.yml&lt;/em>&lt;/p>
&lt;pre>---
&lt;span class="pl-ent">version&lt;/span>: &lt;span class="pl-s">&lt;span class="pl-pds">"&lt;/span>3.3&lt;span class="pl-pds">"&lt;/span>&lt;/span>
&lt;span class="pl-ent">services&lt;/span>:
&lt;span class="pl-ent">primary&lt;/span>:
&lt;span class="pl-ent">hostname&lt;/span>: &lt;span class="pl-s">&lt;span class="pl-pds">'&lt;/span>primary&lt;span class="pl-pds">'&lt;/span>&lt;/span>
&lt;span class="pl-ent">image&lt;/span>: &lt;span class="pl-s">crunchydata/crunchy-postgres:centos7-10.3-1.8.2&lt;/span>
&lt;span class="pl-ent">environment&lt;/span>:
- &lt;span class="pl-s">PGHOST=/tmp&lt;/span>
- &lt;span class="pl-s">MAX_CONNECTIONS=10&lt;/span>
- &lt;span class="pl-s">MAX_WAL_SENDERS=5&lt;/span>
- &lt;span class="pl-s">PG_MODE=primary&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_USER=primaryuser&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_PASSWORD=password&lt;/span>
- &lt;span class="pl-s">PG_DATABASE=testdb&lt;/span>
- &lt;span class="pl-s">PG_USER=testuser&lt;/span>
- &lt;span class="pl-s">PG_PASSWORD=password&lt;/span>
- &lt;span class="pl-s">PG_ROOT_PASSWORD=password&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_PORT=5432&lt;/span>
&lt;span class="pl-ent">volumes&lt;/span>:
- &lt;span class="pl-s">pg-primary-vol:/pgdata&lt;/span>
&lt;span class="pl-ent">ports&lt;/span>:
- &lt;span class="pl-s">&lt;span class="pl-pds">"&lt;/span>5432&lt;span class="pl-pds">"&lt;/span>&lt;/span>
&lt;span class="pl-ent">networks&lt;/span>:
- &lt;span class="pl-s">crunchynet&lt;/span>
&lt;span class="pl-ent">deploy&lt;/span>:
&lt;span class="pl-ent">placement&lt;/span>:
&lt;span class="pl-ent">constraints&lt;/span>:
- &lt;span class="pl-s">node.labels.type == primary&lt;/span>
- &lt;span class="pl-s">node.role == worker&lt;/span>
&lt;span class="pl-ent">replica&lt;/span>:
&lt;span class="pl-ent">image&lt;/span>: &lt;span class="pl-s">crunchydata/crunchy-postgres:centos7-10.3-1.8.2&lt;/span>
&lt;span class="pl-ent">environment&lt;/span>:
- &lt;span class="pl-s">PGHOST=/tmp&lt;/span>
- &lt;span class="pl-s">MAX_CONNECTIONS=10&lt;/span>
- &lt;span class="pl-s">MAX_WAL_SENDERS=5&lt;/span>
- &lt;span class="pl-s">PG_MODE=replica&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_HOST=primary&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_PORT=5432&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_USER=primaryuser&lt;/span>
- &lt;span class="pl-s">PG_PRIMARY_PASSWORD=password&lt;/span>
- &lt;span class="pl-s">PG_DATABASE=testdb&lt;/span>
- &lt;span class="pl-s">PG_USER=testuser&lt;/span>
- &lt;span class="pl-s">PG_PASSWORD=password&lt;/span>
- &lt;span class="pl-s">PG_ROOT_PASSWORD=password&lt;/span>
&lt;span class="pl-ent">volumes&lt;/span>:
- &lt;span class="pl-s">pg-replica-vol:/pgdata&lt;/span>
&lt;span class="pl-ent">ports&lt;/span>:
- &lt;span class="pl-s">&lt;span class="pl-pds">"&lt;/span>5432&lt;span class="pl-pds">"&lt;/span>&lt;/span>
&lt;span class="pl-ent">networks&lt;/span>:
- &lt;span class="pl-s">crunchynet&lt;/span>
&lt;span class="pl-ent">deploy&lt;/span>:
&lt;span class="pl-ent">placement&lt;/span>:
&lt;span class="pl-ent">constraints&lt;/span>:
- &lt;span class="pl-s">node.labels.type != primary&lt;/span>
- &lt;span class="pl-s">node.role == worker&lt;/span>
&lt;span class="pl-ent">networks&lt;/span>:
&lt;span class="pl-ent">crunchynet&lt;/span>:
&lt;span class="pl-ent">volumes&lt;/span>:
&lt;span class="pl-ent">pg-primary-vol&lt;/span>:
&lt;span class="pl-ent">pg-replica-vol&lt;/span>:&lt;/pre>
&lt;p>注意，主服务定义了一个 hostname，但是 replica 服务没有。Replica 需要一个 hostname 来启动 replication。通过提供一个静态的 hostname 给主节点，replica就可以连接主节点，而不需要发现主容器。&lt;/p>
&lt;p>replica，没有一个 hostname，这允许 replica 服务拓展到多个节点。（待会儿展示一下）。&lt;/p>
&lt;p>primary 和 replica 服务的主要区别，是 PG_MODE 环境变量。这个变量配置容器是主节点，还是从节点。&lt;/p>
&lt;h2 id="部署-stack">部署 STACK
&lt;/h2>&lt;p>保存这个文件到 _docker-compose.yml _之后，我们可以通过 Docker 进行部署了。&lt;/p>
&lt;pre>docker stack deploy --compose-file=./docker-compose.yml pg-stack&lt;/pre>
&lt;p>这个 stack 部署，将会创建一个 PostgreSQL 集群，就像是下图一样：&lt;/p>
&lt;p>&lt;strong>&lt;img src="https://i0.wp.com/info.crunchydata.com/hs-fs/hubfs/Diagram4.png?w=625&amp;#038;ssl=1" alt="PostgreSQL Docker Swarm Primary Replica Cluster" data-recalc-dims="1" />&lt;/strong>&lt;/p>
&lt;h2 id="测试集群">测试集群
&lt;/h2>&lt;p>检查服务是否运行，运行下面的命令：&lt;/p>
&lt;pre>docker service ls
docker service ps pg-stack_primary
docker service ps pg-stack_replica&lt;/pre>
&lt;p>如果想要提升 replicas 的数量，运行下列命令：&lt;/p>
&lt;pre>docker service scale pg-stack_replica=2
docker service ps pg-stack_replica&lt;/pre>
&lt;p>为了确保 replicas 是流式的，在 worker1 节点上查询 PostgreSQL 主节点，使用下列命令：&lt;/p>
&lt;pre>&lt;code>docker exec -it $(docker ps -q) psql -U postgres -x -c 'table pg_stat_replication' postgres
&lt;/code>&lt;/pre>
&lt;h2 id="示例代码">示例代码
&lt;/h2>&lt;p>下面是实例代码：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/CrunchyData/crunchy-containers/tree/master/examples/docker/swarm-service" target="_blank" rel="noopener"
>https://github.com/CrunchyData/crunchy-containers/tree/master/examples/docker/swarm-service&lt;/a>&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>Docker 以及 Docker swarm 提供了工具，来使得容器部署进入了更高的层次。我们希望这个提议证明了 PostgreSQL 集群是如何的容易部署。&lt;/p></description></item><item><title>记恢复 https</title><link>https://svtter.cn/p/%E8%AE%B0%E6%81%A2%E5%A4%8D-https/</link><pubDate>Sat, 03 Nov 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%AE%B0%E6%81%A2%E5%A4%8D-https/</guid><description>&lt;p>这几天 https 挂掉了，似乎是因为铁门的证书（过期，不被chrome认可）了。因此重新搞一下 https。&lt;/p>
&lt;p>恢复 https 也没有做什么工作，就是把之前的证书重新申请一次，然后下载下来的文件把之前的 https 文件替换掉。https 相关的文章很多，我就不再赘述了。可以参见很多人的文章。&lt;/p>
&lt;p>此处唯一需要注意的是，我使用 Docker，对于 certbot ，也就是 letsencrypt 的支持不够好（也可能是我在man里面粗略的看了一下，没有找到）。因此，对于三个与的letsencrypt我就不使用了。&lt;/p>
&lt;blockquote class="wp-block-quote">
&lt;p>
本篇是老文，之前一直都没有发出。
&lt;/p>
&lt;p>
今天发出，作为博客长时间滑水的终止符。
&lt;/p>
&lt;/blockquote>
&lt;p>这次更新 https，也做了一些工作，就是把原来的 rewrite 选项改成了 301，做了一个重定向，整个速度都提升了不少（未测试，仅观感），感觉很不错。因此把之前的配置贴出来。&lt;/p>
&lt;p>原来的配置&lt;/p>
&lt;pre class="wp-block-code">&lt;code class=""> location / {
rewrite ^ https://$host$request_uri? permanent;
}
location ^~ /.well-known {
allow all;
root /data/letsencrypt/;
}&lt;/code>&lt;/pre>
&lt;p>现在的&lt;/p>
&lt;pre class="wp-block-code">&lt;code class="">return 301 https://$host$request_uri;&lt;/code>&lt;/pre></description></item><item><title>为什么我的密码录入正确，但就是登录不上？</title><link>https://svtter.cn/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84%E5%AF%86%E7%A0%81%E5%BD%95%E5%85%A5%E6%AD%A3%E7%A1%AE%E4%BD%86%E5%B0%B1%E6%98%AF%E7%99%BB%E5%BD%95%E4%B8%8D%E4%B8%8A/</link><pubDate>Wed, 17 Oct 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84%E5%AF%86%E7%A0%81%E5%BD%95%E5%85%A5%E6%AD%A3%E7%A1%AE%E4%BD%86%E5%B0%B1%E6%98%AF%E7%99%BB%E5%BD%95%E4%B8%8D%E4%B8%8A/</guid><description>&lt;p>今天又偶遇了之前用阿里云出现的问题：&lt;/p>
&lt;blockquote class="wp-block-quote">
&lt;p>
明明密码没有错，本地登录可以，但远程登录就是不ok。
&lt;/p>
&lt;/blockquote>
&lt;p>之前一直没有排查到错误，今天终于在本地机器的加持下得以解决。这是什么问题呢？IP地址冲突。&lt;/p>
&lt;p>的确是IP地址冲突。首先先使用校园网client ssh b-server 服务器，失败了。使用同一个物理主机的a-server与b-server进行互联，成功了。校园网client能够连接a-server。因此，观察 a-server 和 b-server 的区别，发现 a-server 子网掩码是255.255.255.128，而 b-server 的子网掩码是 255.255.255.0。&lt;/p>
&lt;p>此外，还有：&lt;/p>
&lt;p>查看系统开放的端口
netstat -nltp
测试本地是否能够访问，排查本地问题
ssh &lt;a class="link" href="mailto:user@locahost" >user@locahost&lt;/a>&lt;/p>
&lt;p>子网掩码不同，为什么就连接不上呢？（原理）&lt;/p>
&lt;p>最终，解决了这个问题。通过重启 networking 以及 重新通过 dhcp 获取 ip 地址。&lt;/p>
&lt;ol>
&lt;li>使用 systemctl restart networking.service 重启 networking 服务。&lt;/li>
&lt;li>使用 ifconfig eth0 down; ifconfig eth0 up 来开关具体的网卡。&lt;/li>
&lt;li>使用 # dhclient -r 释放当前ip&lt;/li>
&lt;li>使用 # dhclient 获取新的ip&lt;/li>
&lt;/ol>
&lt;p>大功告成，算是阶段性的解决了这个问题。DDNS迫在眉睫啊！&lt;/p></description></item><item><title># Docker swarm 学习</title><link>https://svtter.cn/p/%23-docker-swarm-%E5%AD%A6%E4%B9%A0/</link><pubDate>Thu, 21 Jun 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%23-docker-swarm-%E5%AD%A6%E4%B9%A0/</guid><description>&lt;blockquote>
&lt;p>本文的学习过程主要是通过 Docker &lt;a class="link" href="https://docs.docker.com/get-started/part3/" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>花了一段时间学习 Docker swarm，一个docker的容器集群服务，来应对即将到来的高并发项目需求。&lt;/p>
&lt;h2 id="docker-machine">Docker machine
&lt;/h2>&lt;p>Docker machine 是 Docker 官方编排的项目之一，可以理解成一个 Docker 宿主机器的统一管理CLI，自部署不是很好用：目前国内仅仅 aliyun 支持，其他的我在官方文档中没有找到。&lt;/p>
&lt;p>Docker machine 的安装十分简单，通过官网提供的脚本即可，For Linux：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ &lt;span class="nv">base&lt;/span>&lt;span class="o">=&lt;/span>https://github.com/docker/machine/releases/download/v0.14.0 &lt;span class="o">&amp;&amp;&lt;/span>
curl -L &lt;span class="nv">$base&lt;/span>/docker-machine-&lt;span class="k">$(&lt;/span>uname -s&lt;span class="k">)&lt;/span>-&lt;span class="k">$(&lt;/span>uname -m&lt;span class="k">)&lt;/span> &amp;gt;/tmp/docker-machine &lt;span class="o">&amp;&amp;&lt;/span>
sudo install /tmp/docker-machine /usr/local/bin/docker-machine
&lt;/pre>
&lt;/div>
&lt;p>安装好以后，即可按照相关的操作进行运行。&lt;/p>
&lt;p>比如，创建两个虚拟机：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ docker-machine create --driver virtualbox myvm1
$ docker-machine create --driver virtualbox myvm2
&lt;/pre>
&lt;/div>
&lt;p>进入虚拟机：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ docker-machine ssh myvm1
&lt;/pre>
&lt;/div>
&lt;p>显示虚拟机&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>NAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS
myvm1 - virtualbox Running tcp://192.168.99.100:2376 v18.05.0-ce
myvm2 - virtualbox Running tcp://192.168.99.101:2376 v18.05.0-ce
&lt;/pre>
&lt;/div>
&lt;p>然后即可在虚拟机的基础上进行相关的操作，十分方便。&lt;/p>
&lt;h2 id="docker-swarm">Docker-swarm
&lt;/h2>&lt;p>Docker swarm 则是一个集群的东西，基本的概念是，每个宿主机器都是一个 worker ，然后大家都加入一个东西，叫做 stack ，stack 里面有许多的 container ，每个宿主机器，也分别是一个 node 。&lt;/p>
&lt;p>这个 stack 是依据我们的 service 建立的，stack 中保存着 service 建立的名称，也可以通过 stack 查看相关的节点。&lt;/p>
&lt;p>每个 node 都可以运行多个 container ，swarm 会进行 &lt;strong>负载均衡&lt;/strong> ，这个就很酷了。&lt;/p>
&lt;img alt="图示" src="https://i2.wp.com/docs.docker.com/engine/swarm/images/ingress-routing-mesh.png?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;p>在官方的例子中，&lt;code>docker-compose.yml&lt;/code>：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>version: "3"
services:
web:
# replace username/repo:tag with your name and image details
image: svtter/get-started:part2
deploy:
replicas: 5
resources:
limits:
cpus: "0.1"
memory: 50M
restart_policy:
condition: on-failure
ports:
- "4000:80"
networks:
- webnet
networks:
webnet:
&lt;/pre>
&lt;/div>
&lt;p>复制的 app service 数量为 5。&lt;/p>
&lt;p>大体上就是这个样子。&lt;/p>
&lt;blockquote>
&lt;p>想法&lt;/p>&lt;/blockquote>
&lt;p>行文至此，想到可以进一步学习，然后去一些相关的社区学习一波。（不过按照之前的经验，很多社区的质量都不高，讨论纯属浪费时间。）&lt;/p>
&lt;p>学完这些东西，至少可以把自己的服务器升级一波，做成标准的&lt;code>DevOps&lt;/code>，以及充分利用服务器资源了。&lt;/p>
&lt;h2 id="code">Code
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/Svtter/Docker_Swarm_Test" target="_blank" rel="noopener"
>GitHub – Svtter/Docker_Swarm_Test: a Docker swarm example project. Reference to official document.&lt;/a>&lt;/p></description></item><item><title>如何配置终端</title><link>https://svtter.cn/p/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF/</link><pubDate>Tue, 30 Jan 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF/</guid><description>&lt;p>配置终端是许多人头疼的问题，比如配置之后没有达到自己预先想要的效果，但是又总是不知道哪里出了问题，或者配置完成之后又遭遇了很多烦恼。&lt;/p>
&lt;p>本文的作用是解决这些问题，或者为解决这些问题提供一个思路。&lt;/p>
&lt;h2 id="颜色不对">颜色不对
&lt;/h2>&lt;p>颜色不对可能有很多原因，但归根结底是两个问题，一个是TERM环境变量没有设置好，另一个是当前使用的终端app不支持真彩色。&lt;/p>
&lt;p>处理term可以使用&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>export TERM=xterm-256color
&lt;/pre>
&lt;/div>
&lt;p>把它加载到你的rc文件里。有些人使用zsh，那么加入到&lt;code>~.zshrc&lt;/code>里面。有些人使用bash，那么加入到&lt;code>~/.bashrc&lt;/code>里面。&lt;/p>
&lt;p>解决app真彩色问题，可以参考这个链接：https://gist.github.com/XVilka/8346728&lt;/p>
&lt;p>Ubuntu14.04版本下默认的terminal是不支持真彩色的。&lt;/p>
&lt;h2 id="乱码">乱码
&lt;/h2>&lt;p>终端乱码很大程度上是因为当前的字体不支持输出的字符。这个时候安装一个字符集支持比较齐全的字体即可。常见的字体比如nerd fonts，包含了常用字体+许多的符号字体的集合，因此找到自己心水的字体，安装并且替换即可解决这些问题。&lt;/p>
&lt;p>可能还有许多问题我没有想到，可以在留言区提出，我一并加上。&lt;/p></description></item><item><title>使用Fabric进行部署</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8fabric%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2/</link><pubDate>Sat, 27 Jan 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8fabric%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2/</guid><description>&lt;blockquote>
&lt;p>Fabric是一个可以在远程机器上运行命令的库&lt;/p>&lt;/blockquote>
&lt;p>Fabric官方目前只支持Python2版本，但是有勤劳的人开发出了适配Python3的版本。具体可以查看这个&lt;a class="link" href="https://github.com/mathiasertl/fabric/" target="_blank" rel="noopener"
>fork&lt;/a>。&lt;/p>
&lt;h2 id="fabric的使用">Fabric的使用
&lt;/h2>&lt;p>我在使用Fabric的时候主要是用于部署我的网站。使用时候，首先需要引入所有的API：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="c1"># 导入Fabric API:&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">fabric.api&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>这样就可以导入Fabric的API进行远程控制啦。&lt;/p>
&lt;h2 id="具体问题">具体问题
&lt;/h2>&lt;ul>
&lt;li>git需要输入密码&lt;/li>
&lt;/ul>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">forward_agent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">True&lt;/span>
&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>ssh通过秘钥链接&lt;/li>
&lt;/ul>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="c1"># 使用秘钥&lt;/span>
&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">key_filename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;/Users/xiuhao/.ssh/key&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>使用root&lt;/li>
&lt;/ul>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="c1"># 服务器登录用户名:&lt;/span>
&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;ubuntu&amp;#39;&lt;/span>
&lt;span class="c1"># sudo用户为root:&lt;/span>
&lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sudo_user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h2 id="一个简单的部署例子">一个简单的部署例子
&lt;/h2>&lt;p>这个部署例子结合了更新代码，进入指定目录，运行命令等。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="n">BASE_DIR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;/home/ubuntu/django_blog&amp;#39;&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">deploy&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd"> deploy new changes&lt;/span>
&lt;span class="sd"> """&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">cd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BASE_DIR&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;git pull&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;make down&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;make up&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>写好文件以后，保存为&lt;code>fabfile.py&lt;/code>，运行&lt;code>fab deploy&lt;/code>即可部署。&lt;code>deploy&lt;/code>对应着&lt;code>deploy()&lt;/code>函数。&lt;/p>
&lt;p>NOTE：不在远程服务器上使用ssh的git仓库，是因为担心服务器被&lt;code>hack&lt;/code>连累我的&lt;code>git repo&lt;/code>。&lt;/p>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014323392805925d5b69ddad514511bf0391fe2a0df2b0000" target="_blank" rel="noopener"
>廖雪峰 15days&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/mathiasertl/fabric/" target="_blank" rel="noopener"
>python3-fabric&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>记又一次搞崩服务器</title><link>https://svtter.cn/p/%E8%AE%B0%E5%8F%88%E4%B8%80%E6%AC%A1%E6%90%9E%E5%B4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Thu, 11 Jan 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%AE%B0%E5%8F%88%E4%B8%80%E6%AC%A1%E6%90%9E%E5%B4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>记又一次搞崩服务器。使用“又”，是因为我搞崩不是一次两次了。我希望这是最后一次。&lt;/p>
&lt;h2 id="背景">背景
&lt;/h2>&lt;p>使用Android连接服务器的时候，发现要比自己的mac速度快很多，于是十分好奇，打算研究一下是什么因素导致的。&lt;/p>
&lt;h2 id="流程">流程
&lt;/h2>&lt;p>检查了app以后，判断应该是开启了&lt;code>fast TCP&lt;/code>导致的，于是考虑在mac上也开启对应的&lt;code>fast TCP&lt;/code>，但是效果并不是十分显著；于是再次排查，发现服务器端并没有开启&lt;code>fast TCP&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>这就很奇怪了，为什么速度这么快呢？是因为对“同源”的加密方法有优化吗？&lt;/p>&lt;/blockquote>
&lt;p>于是，&lt;strong>自然而然&lt;/strong>的考虑是不是可以通过开启这个TCP加速来加速服务器。这就开启了噩梦的开端。因为需要3.7以上的Linux Kernel才支持这个特性，所以需要先升级内核。我的内核难道不应该是最新的吗？带着这个以为输入了&lt;code>uname sr&lt;/code>，显示内核版本&lt;code>2.6*&lt;/code>。惊奇，我的VPS内核这么旧吗？于是&lt;strong>自然而然&lt;/strong>的想到要升级一下内核，并且&lt;strong>理所应当&lt;/strong>的把升级内核的脚本&lt;code>apt-get install linux-kernel-lts-wily&lt;/code>运行了一下。于是噩梦开始了。&lt;/p>
&lt;p>&lt;strong>OpenVZ本身是不支持升级内核的&lt;/strong>，所有的VM都使用同一个内核版本，因此这个命令导致了很神奇的BUG，安装内核装不上，卸载内核卸载不了。&lt;/p>
&lt;p>这个时候我面临两个选择，一个是重新安装系统，一个是解决当前的这个问题。&lt;/p>
&lt;p>经过简单地判断，我认为如果解决当前问题，可能花费我更多的时间，直接重新安装系统就可以了。重新配置一些相关措施也并不难。&lt;/p>
&lt;p>失算的事情是，尽管我依稀记得一部分关于配置的内容，但是要完全复现我所配置的相关应用已经很难了，因为我没有做&lt;strong>记录&lt;/strong>。于是来回又踩了许多坑，之前有些坑我有很明确的踩进去的记忆。&lt;/p>
&lt;p>这就非常痛苦了，每次操作都在嘲讽自己的愚蠢与过度自信。最后，我只进行了简单的配置，只找回了部分的优化——记忆里我所做的优化就只有这些了，但是速度似乎下降了，这就是最终的结果。&lt;/p>
&lt;p>这也让我想起《人月神话》里面描写的一句，具体我已经记不清了，意思大概是这样的：有些步骤你是必须要做的，只不过当前你没有做而已，以后是要补上的。我读到这个地方的时候，联想这个规律为“技术债”。&lt;/p>
&lt;p>好了，以上就是我还“技术债”的全部过程了。&lt;/p>
&lt;h2 id="教训">教训
&lt;/h2>&lt;ol>
&lt;li>研究问题虽然好，但是要注意花费的时间&lt;/li>
&lt;li>在生产服务器上，不要做没有经过自查的操作。&lt;/li>
&lt;li>不要被强迫症控制了，能用则用。&lt;/li>
&lt;li>记录自己的行为日志，如果可以的话，写一个安装脚本&lt;/li>
&lt;/ol>
&lt;p>唉，真是一次不合格的运维行动。&lt;/p></description></item><item><title>使用Docker安装Spark</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85spark/</link><pubDate>Tue, 26 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85spark/</guid><description>&lt;p>在国内加载Dockerhub上的镜像速度会比较慢，对此我们可以通过设置mirror镜像的方式来加速images的下载。&lt;/p>
&lt;p>此外，如果是ipv6的网络，在一些mirror可以直接走ipv6通路，速度非常客观。这里以USTC的mirror为例。&lt;/p>
&lt;p>我这里的环境是Ubuntu 14.04，对于不同的Linux环境，修改的方式都差不多；修改文件&lt;code>/etc/docker/daemon.json&lt;/code>，如果没有这个文件，创建一个，注意，此处可能需要&lt;code>root&lt;/code>权限。修改完成后，运行命令&lt;code>sudo service docker restart&lt;/code>重启docker服务。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nt">"registry-mirrors"&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">"https://docker.mirrors.ustc.edu.cn"&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>配置好以后，选择&lt;code>2.1.0&lt;/code>版本的spark进行docker下载。&lt;/p>
&lt;p>&lt;code>docker pull p7hb/docker-spark:2.1.0&lt;/code>&lt;/p>
&lt;p>或者直接运行&lt;/p>
&lt;p>&lt;code>docker run -it -p 4040:4040 -p 8080:8080 -p 8081:8081 -h spark --name=spark p7hb/docker-spark:2.1.0&lt;/code>&lt;/p>
&lt;h2 id="参考">参考
&lt;/h2>&lt;ol>
&lt;li>&lt;a class="link" href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener"
>https://lug.ustc.edu.cn/wiki/mirrors/help/docker&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/P7h/docker-spark" target="_blank" rel="noopener"
>https://github.com/P7h/docker-spark&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Shell-tips</title><link>https://svtter.cn/p/shell-tips/</link><pubDate>Wed, 20 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/shell-tips/</guid><description>&lt;h2 id="重启终端">重启终端
&lt;/h2>&lt;p>执行命令，修改环境变量等等之后可以通过此命令来简单重启shell&lt;/p>
&lt;p>&lt;code>exec &amp;quot;$SHELL&amp;quot;&lt;/code>&lt;/p>
&lt;h2 id="查找文件">查找文件
&lt;/h2>&lt;p>&lt;code>$ find ~ -name &amp;quot;*.txt&amp;quot; -print #在$HOME中查.txt文件并显示&lt;/code>&lt;/p>
&lt;p>&lt;code>locate findname&lt;/code>&lt;/p>
&lt;h2 id="编辑变量">编辑变量
&lt;/h2>&lt;p>在&lt;code>zsh&lt;/code>中，编辑&lt;code>$HOME/.zshenv&lt;/code>；在&lt;code>bash&lt;/code>中，编辑&lt;code>.bash_profile&lt;/code>&lt;/p></description></item><item><title>全站上https</title><link>https://svtter.cn/p/%E5%85%A8%E7%AB%99%E4%B8%8Ahttps/</link><pubDate>Thu, 30 Nov 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%85%A8%E7%AB%99%E4%B8%8Ahttps/</guid><description>&lt;p>本来觉得这个https不是什么大不了的事情，但是输入密码的时候突然意识到，这个post的过程中是有危险的。危险在哪里呢？我们可以参考mozilla的&lt;a class="link" href="https://support.mozilla.org/zh-CN/kb/%E9%98%BB%E6%AD%A2%E6%B7%B7%E5%90%88%E5%86%85%E5%AE%B9?redirectlocale=en-US&amp;amp;as=u&amp;amp;redirectslug=how-does-content-isnt-secure-affect-my-safety&amp;amp;utm_source=inproduct" target="_blank" rel="noopener"
>相关描述&lt;/a>。&lt;/p>
&lt;p>在参考了 Mozilla 的描述后，我决定给我的站上一下https。上https的过程比较容易，因为之前一直都是在腾讯云捣鼓，所以直接从腾讯云走的域名以及https，因此可以直接从腾讯云一键申请【当然，还是需要填写一部分步骤】，这里就不再赘述了。另外，补充一下，申请ssl证书，即https必需品，首先需要网站进行审核，审核通过以后，才能直接申请。&lt;/p>
&lt;p>因为我直接使用的是nginx作为前端，因此直接添加了一条server记录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="line">&lt;span class="cl">&lt;span class="k">server&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">listen&lt;/span> &lt;span class="mi">443&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">server_name&lt;/span> &lt;span class="s">svtter.cn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">ssl&lt;/span> &lt;span class="no">on&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">ssl_certificate&lt;/span> &lt;span class="s">1_svtter.cn_bundle.crt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">ssl_certificate_key&lt;/span> &lt;span class="s">2_svtter.cn.key&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">ssl_session_timeout&lt;/span> &lt;span class="mi">5m&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">ssl_protocols&lt;/span> &lt;span class="s">TLSv1&lt;/span> &lt;span class="s">TLSv1.1&lt;/span> &lt;span class="s">TLSv1.2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">ssl_ciphers&lt;/span> &lt;span class="s">ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">ssl_prefer_server_ciphers&lt;/span> &lt;span class="no">on&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">location&lt;/span> &lt;span class="s">/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">proxy_pass&lt;/span> &lt;span class="s">http://web/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个地方的域名需要换成自己申请的。其中有一个小坑是，如果你已经配置好http，希望全站都走https，那么要记得在原本的server处，添加一条语句&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">rewrite&lt;/span> &lt;span class="s">^(.*)&lt;/span> &lt;span class="s">https://&lt;/span>&lt;span class="nv">$host$1&lt;/span> &lt;span class="s">permanent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如此一来，所有访问你网站的流量就都走https啦~看见小绿锁真开心呀；&lt;/p>
&lt;h2 id="后记">后记
&lt;/h2>&lt;p>使用https以后，我发现我使用的许多图片并不是https，因此我的网站依然有被篡改的可能性。&lt;/p></description></item><item><title>使用Docker的一些Tips</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E7%9A%84%E4%B8%80%E4%BA%9Btips/</link><pubDate>Fri, 07 Jul 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E7%9A%84%E4%B8%80%E4%BA%9Btips/</guid><description>&lt;p>Docker是一种强大的DevOps工具，使用其无论是作为开发环境还是生产环境，但是非常&lt;/p>
&lt;p>好的选择；在这篇文章中，讲讲Docker的几个开发Tips。&lt;/p>
&lt;h2 id="几条命令安装docker">几条命令安装Docker
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ curl -fsSL get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh
&lt;/pre>
&lt;/div>
&lt;h2 id="使用多个基础镜像">使用多个基础镜像
&lt;/h2>&lt;p>作为Python开发者，经常需要使用pip来构建安装包，等待pip安全的过程可谓是又臭又长，&lt;/p>
&lt;p>而且一个不小心，如果在没有使用pip.conf的情况下，安装失败，docker又要重新跑一次，&lt;/p>
&lt;p>十分的麻烦。下面给出的解决方案不一定是最好的，但是应该是比较有效的。&lt;/p>
&lt;p>比如，我在构建某个Python项目的时候，会创建一个python-base的image，tag使用当前&lt;/p>
&lt;p>项目名称。&lt;/p>
&lt;p>这个python-base就是基础镜像之一：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> dockerxman/docker-ubuntu:latest&lt;/span>
&lt;span class="k">MAINTAINER&lt;/span>&lt;span class="s"> Svtter &amp;lt;svtter@qq.com&amp;gt;&lt;/span>
&lt;span class="k">RUN&lt;/span> apt-get update&lt;span class="se">\&lt;/span>
&lt;span class="o">&amp;&amp;&lt;/span> apt-get install python3-pip supervisor -y
COPY ./requirements.txt /app/requirements.txt
COPY ./pip/pip.conf /root/.pip/pip.conf
&lt;span class="k">RUN&lt;/span> pip3 install -r /app/requirements.txt
&lt;span class="k">RUN&lt;/span> rm -rf /var/lib/apt/lists/*
&lt;/pre>
&lt;/div>
&lt;p>介绍一下这个&lt;code>Dockerfile&lt;/code>；在第一行，我使用的是一aliyun源的ubuntu镜像，来加速&lt;/p>
&lt;p>apt的过程，然后，把pip相关的配置复制到image中，最后，使用pip安装需求文件，&lt;/p>
&lt;p>清理缓存，然后这个基础镜像就构建好了。&lt;/p>
&lt;h2 id="创建自己的项目">创建自己的项目
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> python-base:school&lt;/span>
&lt;span class="k">MAINTAINER&lt;/span>&lt;span class="s"> Svtter &amp;lt;svtter@qq.com&amp;gt;&lt;/span>
COPY ./fleetness /app
&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>
COPY supervisord.conf /etc/supervisord.conf
&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /log&lt;/span>
&lt;span class="k">CMD&lt;/span>&lt;span class="s"> supervisord -c /etc/supervisord.conf&lt;/span>
STOPSIGNAL SIGINT
&lt;span class="k">EXPOSE&lt;/span>&lt;span class="s"> 5000&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>此处就是这直接利用已经构建好的&lt;code>python-base:school&lt;/code>的镜像，这样一来，每次我更新&lt;/p>
&lt;p>代码，或者supervisor的配置，只需要重新构建这个镜像就可以了。在这个镜像中，没有&lt;/p>
&lt;p>安装其他软件包的过程，因此节省了大量的时间。&lt;/p>
&lt;p>此外，如果只需要更新代码，而依赖相对不改变的时候，可以通过挂载代码到VOLUME中，&lt;/p>
&lt;p>每次更新代码，都通过&lt;code>git pull&lt;/code>，然后重启一下镜像，就可以重新部署了。&lt;/p>
&lt;h2 id="docker-构建python镜像的一些技巧">Docker 构建Python镜像的一些技巧
&lt;/h2>&lt;p>使用pip快速 &lt;a class="link" href="http://blog.csdn.net/lambert310/article/details/52412059" target="_blank" rel="noopener"
>http://blog.csdn.net/lambert310/article/details/52412059&lt;/a>&lt;/p>
&lt;h2 id="一条命令搭建lamp">一条命令搭建LAMP
&lt;/h2>&lt;p>这条命令创建一个apache-php服务器，服务于&lt;code>8087&lt;/code>端口。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ docker run --rm -p &lt;span class="m">8087&lt;/span>:80 -e &lt;span class="nv">ALLOW_OVERRIDE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> -v &lt;span class="si">${&lt;/span>&lt;span class="nv">项目的绝对路径&lt;/span>&lt;span class="si">}&lt;/span>:/var/www/html tutum/apache-php
&lt;/pre>
&lt;/div></description></item><item><title>使用 OpenWRT</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-openwrt/</link><pubDate>Tue, 06 Jun 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8-openwrt/</guid><description>&lt;p>今天花了不少时间在openwrt上（实际上是全都花在上面了），从一开始的写入到最后终于能跑；&lt;/p>
&lt;p>因为手头没有可用的路由器，只能通过无线连接以及网线来调试，IP设置上的问题吃了不少苦头，&lt;/p>
&lt;p>最后一个个排查终于解决了问题。&lt;/p>
&lt;h2 id="安装">安装
&lt;/h2>&lt;p>我这里的设备是RaspberryPI 3B；对应的openwrt的&lt;a class="link" href="https://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710/lede-brcm2708-bcm2710-rpi-3-ext4-sdcard.img.gz" target="_blank" rel="noopener"
>下载链接&lt;/a>，只有8M，解压缩后有300M，很神奇，估计是IMG里面有不少00；&lt;/p>
&lt;h2 id="配置">配置
&lt;/h2>&lt;p>配置上参考了几个博客：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://sh.alynx.xyz/posts/2016/06/28/RPi-Router/" target="_blank" rel="noopener"
>http://sh.alynx.xyz/posts/2016/06/28/RPi-Router/&lt;/a>&lt;/li>
&lt;li>一个H3C &lt;a class="link" href="https://github.com/ruijanlee/h3cc" target="_blank" rel="noopener"
>https://github.com/ruijanlee/h3cc&lt;/a>&lt;/li>
&lt;li>树莓派3 刷openwrt &lt;a class="link" href="https://my.oschina.net/wangandi/blog/687389" target="_blank" rel="noopener"
>https://my.oschina.net/wangandi/blog/687389&lt;/a>&lt;/li>
&lt;li>ss &lt;a class="link" href="http://www.wzero.net/?p=137" target="_blank" rel="noopener"
>http://www.wzero.net/?p=137&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="关于ipsec">关于ipsec
&lt;/h2>&lt;p>在网上没有搜索到现成的配置，今天已经比较累了，如果明天有时间再看吧。&lt;/p></description></item><item><title>树莓派安装owncloud小记</title><link>https://svtter.cn/p/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85owncloud%E5%B0%8F%E8%AE%B0/</link><pubDate>Mon, 06 Feb 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85owncloud%E5%B0%8F%E8%AE%B0/</guid><description>&lt;p>&lt;a class="link" href="http://www.voidcn.com/blog/u010873775/article/p-5812004.html" target="_blank" rel="noopener"
>http://www.voidcn.com/blog/u010873775/article/p-5812004.html&lt;/a>&lt;/p>
&lt;p>我是按照以上教程进行安装部署的，但是使用不了，原因是对于目录配置有问题，其中，不应该是进入data目录，而是进入owncloud目录。&lt;/p>
&lt;p>成功配置之后发现owncloud没有启用https，登陆官网查看，配置文档云里雾里，不是很明白，按照其配置方法不见奏效，其中有不少地方我也不是很理解，最后找到了另一篇文章，具体文章我已经找不到了，能够配置的更好一些，但是不知道为什么直接无法访问了。我使用的证书是openssl生成的，因此在chrome访问的时候提示是不安全的。&lt;/p>
&lt;p>后来考虑一下官方文档，owncloud本身建议是在/var/www直接部署，可是我走捷径，图中文看的方便，就没有按照其意见部署，结果耗费了不少时间，服务还是没有架设起来，甚是烦躁。其中，简单配置一下，总是起不来apache，&lt;code>systemctl&lt;/code>看log的时候没有加上&lt;code>sudo&lt;/code>，又是一个大坑。&lt;/p>
&lt;p>后来想了，干脆不再配置https，直接使用好了。居然连原来可以使用的admin界面也不能使用了。于是直接删除apache2，打算重装，发现apache环境配置方面又出问题了。&lt;/p>
&lt;p>得了，我怕了还不行，先搁置一边吧。&lt;/p>
&lt;p>由上所述，得出几个结论：&lt;/p>
&lt;ol>
&lt;li>Docker是个好东西，如果不想污染系统环境，果断上Docker。&lt;/li>
&lt;li>尽量从官方文档做事，尽管看起来麻烦，起码知道每一步是干啥。&lt;/li>
&lt;li>国人写的文档，有不少数图简单图快，省略步骤，仅仅是建立起来一个服务，对于服务的配置存在大量的问题，这个时候一步步找问题，更加浪费时间，不如直接从英文文档，博客入手，相对负责任一点。&lt;/li>
&lt;li>做事情一步一步，不要想回退的时候发现无路可走。&lt;/li>
&lt;/ol>
&lt;p>尾声：owncloud相当于一个本地的dropbox，架设使用过后，感觉用处不大，还是玩玩别的东西。&lt;/p></description></item><item><title>杂谈VPS流媒体服务器</title><link>https://svtter.cn/p/%E6%9D%82%E8%B0%88vps%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sun, 05 Feb 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%9D%82%E8%B0%88vps%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;p>之前的VPS因为瞎玩VPN给封了，后来发现 &lt;a class="link" href="http://boinc.berkeley.edu/index.php" target="_blank" rel="noopener"
>http://boinc.berkeley.edu/index.php&lt;/a> 这个东西。把自己的空闲的计算贡献给科学。于是切换成Ubuntu，&lt;code>apt install boinc&lt;/code>，之后这个东西就开机自动启动了，就放在那里不用管了——&lt;/p>
&lt;p>本来想写写VLC作为流媒体播放器，但是发现VLC对于流媒体服务器功能十分有限。于是便放弃了。&lt;/p>
&lt;p>而后查找了部分资料，发现大部分都是使用ffmpeg来实现，此外，还有live555，gstreamer等。使用ffmpeg之后发现问题并不复杂，详情查看本博关于&lt;a class="link" href="https://svtter.cn/tags/ffmpeg" >ffmpeg的相关文章&lt;/a>。&lt;/p></description></item><item><title>不常见ISP之难</title><link>https://svtter.cn/p/%E4%B8%8D%E5%B8%B8%E8%A7%81isp%E4%B9%8B%E9%9A%BE/</link><pubDate>Tue, 09 Aug 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%B8%8D%E5%B8%B8%E8%A7%81isp%E4%B9%8B%E9%9A%BE/</guid><description>&lt;p>不常见的ISP使用起来是非常痛苦的。&lt;/p>
&lt;h2 id="常见网站无法访问">常见网站无法访问
&lt;/h2>&lt;p>不仅仅是DNS的问题。即便是设置了&lt;code>114.114.114.114&lt;/code>，依然也还是会有一些网站访问速度堪忧。不是墙的问题。仔细考虑一下， 可能是ISP之间的通讯问题。&lt;/p>
&lt;p>比如我现在使用的广电宽带就是如此。&lt;/p>
&lt;p>如果使用阿里云【浙江】作为vpn，访问速度也远胜于直接访问。例如：http://cn.bing.com。 自然是十分痛苦。使用VPS作为VPN，还需要额外支付流量的费用，回归了计费上网，十分不合算。&lt;/p>
&lt;p>据我看来，此问题的出现，和**因特网交换点IXP(Internet eXchange Point)**有直接的关系，也和广电的路由算法有关。 IXP这个东西，说白了就是两个ISP商量商量，直接建起一个通路。因为是小众ISP，所以IXP基础建设不完善；再者，路由算法很糟糕，使用MTR查看包的途径，就能看出经过了多少个服务器。我想，应该可以明显看出经过层数之多。&lt;/p>
&lt;p>层数过多，延迟过长，导致丢包，弃包，从而使得部分网站直接无法访问。&lt;/p>
&lt;h2 id="大量使用之时网速影响">大量使用之时网速影响
&lt;/h2>&lt;p>这个问题主要表现在ISP使用高峰的时候，网速峰值的下滑以及延迟过高。行文至此，有考虑到，路由算法可能不会差很多，但是可能是由于基础设施不完善，负载不均，导致部分路由器负载过重，转发时间过长，以至于带来如此糟糕的用户体验。&lt;/p>
&lt;h2 id="除此之外">除此之外？
&lt;/h2>&lt;p>就在刚刚，访问http://www.ituring.com.cn 长时间没有反应。提示检查代理。然后重启路由器又可以访问了。（这个可能是路由器的问题了。）&lt;/p></description></item><item><title>网络-CDMA接受检验</title><link>https://svtter.cn/p/%E7%BD%91%E7%BB%9C-cdma%E6%8E%A5%E5%8F%97%E6%A3%80%E9%AA%8C/</link><pubDate>Wed, 31 Dec 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E7%BD%91%E7%BB%9C-cdma%E6%8E%A5%E5%8F%97%E6%A3%80%E9%AA%8C/</guid><description>&lt;p _="%" endblockquote="endblockquote">{% blockquote 本文出自 http://svtter.github.io svtter.github.io %}
&lt;p>本文可以随意转载，但是转载请保留本信息.&lt;/p>&lt;/p>
&lt;p>做CDMA简单的接收处理。&lt;/p>
&lt;h2 id="文件">文件
&lt;/h2>&lt;p>input:&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>-1 -1 -1 1 1 -1 1 1
-1 -1 1 -1 1 1 1 -1
-1 1 -1 1 1 1 -1 -1
-1 1 -1 -1 -1 -1 -1 1
&lt;/pre>
&lt;/div>
&lt;p>new.c:&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;math.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define M 8&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">show&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%5d"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">""&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">freopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%d"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">show&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div></description></item><item><title>bash-使用func和一般的sh的不同</title><link>https://svtter.cn/p/bash-%E4%BD%BF%E7%94%A8func%E5%92%8C%E4%B8%80%E8%88%AC%E7%9A%84sh%E7%9A%84%E4%B8%8D%E5%90%8C/</link><pubDate>Thu, 04 Dec 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/bash-%E4%BD%BF%E7%94%A8func%E5%92%8C%E4%B8%80%E8%88%AC%E7%9A%84sh%E7%9A%84%E4%B8%8D%E5%90%8C/</guid><description>&lt;ul>
&lt;li>本文出自&lt;a class="link" href="http://svtter.github.io" target="_blank" rel="noopener"
>svtter.github.io&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如果只是单纯的使用function, 在终端中是可以使用的，但是当作一个可执行文件是不行的（例如：使用python调用)&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>如果使用.sh的方式来处理， 那么问题就在于管理上了 — 可能大量有大量的sh文件，所以说需要权衡利弊，自己使用了。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>bash学得并不好，也没有认真的研究，暂且记录一下，日后再做补充&lt;/p>&lt;/blockquote></description></item><item><title>使用cd快速在目录间移动</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8cd%E5%BF%AB%E9%80%9F%E5%9C%A8%E7%9B%AE%E5%BD%95%E9%97%B4%E7%A7%BB%E5%8A%A8/</link><pubDate>Wed, 26 Nov 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8cd%E5%BF%AB%E9%80%9F%E5%9C%A8%E7%9B%AE%E5%BD%95%E9%97%B4%E7%A7%BB%E5%8A%A8/</guid><description>&lt;ul>
&lt;li>本文出自&amp;lt;svtter.github.io&amp;gt;&lt;/li>
&lt;/ul>
&lt;p>难得看见一篇好文= =&lt;/p>
&lt;h2 id="操作方法">操作方法
&lt;/h2>&lt;p>在此学习并且记录。&lt;/p>
&lt;ul>
&lt;li>标记一个书签: mark [书签]&lt;/li>
&lt;li>进入一个书签: g [书签]&lt;/li>
&lt;li>输出全部标签: gs&lt;/li>
&lt;/ul>
&lt;h2 id="实现原理">实现原理
&lt;/h2>&lt;p>&lt;code>sudo vim /etc/profile&lt;/code>&lt;/p>
&lt;p>也可以使用&lt;code>:w !sudo tee %&lt;/code>这种方式来保存&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="c1"># mark&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">MARKPATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$HOME&lt;/span>/.marks
&lt;span class="nb">export&lt;/span> &lt;span class="nv">MARKDEFAULT&lt;/span>&lt;span class="o">=&lt;/span>sanguo#设置你的默认书签，可以直接输入g跳转
&lt;span class="k">function&lt;/span> g &lt;span class="o">{&lt;/span>
&lt;span class="nb">local&lt;/span> &lt;span class="nv">m&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">"&lt;/span>&lt;span class="nv">$m&lt;/span>&lt;span class="s2">"&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">""&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="nv">m&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$MARKDEFAULT&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">fi&lt;/span>
&lt;span class="nb">cd&lt;/span> -P &lt;span class="s2">"&lt;/span>&lt;span class="nv">$MARKPATH&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="nv">$m&lt;/span>&lt;span class="s2">"&lt;/span> &lt;span class="m">2&lt;/span>&amp;gt;/dev/null &lt;span class="o">||&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">"No such mark: &lt;/span>&lt;span class="nv">$m&lt;/span>&lt;span class="s2">"&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">function&lt;/span> mark &lt;span class="o">{&lt;/span>
mkdir -p &lt;span class="s2">"&lt;/span>&lt;span class="nv">$MARKPATH&lt;/span>&lt;span class="s2">"&lt;/span>
&lt;span class="nb">local&lt;/span> &lt;span class="nv">m&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">"&lt;/span>&lt;span class="nv">$m&lt;/span>&lt;span class="s2">"&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">""&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="nv">m&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$MARKDEFAULT&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">fi&lt;/span>
rm -f &lt;span class="s2">"&lt;/span>&lt;span class="nv">$MARKPATH&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="nv">$m&lt;/span>&lt;span class="s2">"&lt;/span>
ln -s &lt;span class="s2">"&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">"&lt;/span> &lt;span class="s2">"&lt;/span>&lt;span class="nv">$MARKPATH&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="nv">$m&lt;/span>&lt;span class="s2">"&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">function&lt;/span> unmark &lt;span class="o">{&lt;/span>
&lt;span class="nb">local&lt;/span> &lt;span class="nv">m&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">"&lt;/span>&lt;span class="nv">$m&lt;/span>&lt;span class="s2">"&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">""&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="nv">m&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$MARKDEFAULT&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">fi&lt;/span>
rm -i &lt;span class="s2">"&lt;/span>&lt;span class="nv">$MARKPATH&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="nv">$m&lt;/span>&lt;span class="s2">"&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">function&lt;/span> gs &lt;span class="o">{&lt;/span>
ls -l &lt;span class="s2">"&lt;/span>&lt;span class="nv">$MARKPATH&lt;/span>&lt;span class="s2">"&lt;/span> &lt;span class="p">|&lt;/span> grep ^l &lt;span class="p">|&lt;/span> cut -d &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span> -f &lt;span class="m">13&lt;/span>-
&lt;span class="o">}&lt;/span>
_completemarks&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nb">local&lt;/span> &lt;span class="nv">curw&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">COMP_WORDS&lt;/span>&lt;span class="p">[COMP_CWORD]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="nb">local&lt;/span> &lt;span class="nv">wordlist&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>ls -l &lt;span class="s2">"&lt;/span>&lt;span class="nv">$MARKPATH&lt;/span>&lt;span class="s2">"&lt;/span> &lt;span class="p">|&lt;/span> grep ^l &lt;span class="p">|&lt;/span> cut -d &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span> -f &lt;span class="m">13&lt;/span>&lt;span class="k">)&lt;/span>
&lt;span class="nv">COMPREPLY&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">compgen&lt;/span> -W &lt;span class="s1">&amp;#39;${wordlist[@]}&amp;#39;&lt;/span> -- &lt;span class="s2">"&lt;/span>&lt;span class="nv">$curw&lt;/span>&lt;span class="s2">"&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nb">complete&lt;/span> -F _completemarks g unmark
&lt;/pre>
&lt;/div></description></item><item><title>从grub rescue修复</title><link>https://svtter.cn/p/%E4%BB%8Egrub-rescue%E4%BF%AE%E5%A4%8D/</link><pubDate>Mon, 10 Nov 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BB%8Egrub-rescue%E4%BF%AE%E5%A4%8D/</guid><description>&lt;h1 id="修复grub-rescue模式">修复grub-rescue模式
&lt;/h1>&lt;p>今天删除了一个多余的分区，结果grub找不到原来的启动mod了，也是学习了。&lt;/p>
&lt;p>grub-rescue模式中只能用ls, insmod, set root= , set prefix= ,这几个命令。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>使用ls显示所有的磁盘。
然后ls (hd0, X)/boot/grub2 查看启动的盘符。
set root=(hd0, X);
set prefix=(hd0, X)/boot/grub2
insmod normal
normal
&lt;/pre>
&lt;/div>
&lt;p>发现没搞定，重启还是不幸。&lt;/p>
&lt;p>使用&lt;code># grub2-install /dev/sda&lt;/code>&lt;/p>
&lt;p>然后就搞定= =&lt;/p></description></item><item><title>bash相关知识</title><link>https://svtter.cn/p/bash%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</link><pubDate>Sat, 08 Nov 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/bash%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</guid><description>&lt;p>今天想用wget+正则写一个简单的dict，结果不幸失败了。。&lt;/p>
&lt;p>一方面是正则表达式学习不到家，另一方面是wget命令没有习得精华。&lt;/p>
&lt;h1 id="wget">wget
&lt;/h1>&lt;p>下载到指定的目录&lt;code>wget -P youwant/ (URL)&lt;/code>&lt;/p>
&lt;p>利用-P就可以下载到指定目录了，奈何从man里面找找了半天，还是自己的英语不过关阿。&lt;/p>
&lt;h1 id="bash">bash
&lt;/h1>&lt;p>可以使用grep以及sed, awk进行格式的匹配。发现鸟哥的私房菜看的还是太粗，也有一段时间没有好好看了。&lt;/p>
&lt;p>有时间重新补充一下这篇博客，先处理一下算法题目。&lt;/p></description></item></channel></rss>