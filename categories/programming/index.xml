<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Svtter&#39;s Blog</title>
    <link>https://svtter.github.io/categories/programming/</link>
    <description>Recent content in programming on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 16 Jul 2022 13:06:53 +0800</lastBuildDate><atom:link href="https://svtter.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Two packages in one folder</title>
      <link>https://svtter.github.io/post/2022-07-16-2-packages-in-1-folder/</link>
      <pubDate>Sat, 16 Jul 2022 13:06:53 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2022-07-16-2-packages-in-1-folder/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;GitHub link: &lt;a href=&#34;https://github.com/Svtter/2InOne&#34;&gt;https://github.com/Svtter/2InOne&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>在 MacOS 上使用 Ruby</title>
      <link>https://svtter.github.io/post/2021-11-20-macos-use-ruby/</link>
      <pubDate>Sat, 20 Nov 2021 10:12:45 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2021-11-20-macos-use-ruby/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Ruby 是一个伟大的编程语言，但是很多国内的工程师尚未体会到它的精髓。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MacOS 上本身自带一个 Ruby runtime，在笔者的系统上，这个版本是 &lt;code&gt;2.6.0&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code Tips</title>
      <link>https://svtter.github.io/post/2020-06-09-vscode-tips/</link>
      <pubDate>Tue, 09 Jun 2020 11:25:25 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2020-06-09-vscode-tips/</guid>
      <description>&lt;p&gt;又有一段时间没有更新博客啦！这篇文章是&lt;code&gt;vscode&lt;/code&gt;使用技巧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>好香的Kotlin</title>
      <link>https://svtter.github.io/post/2019-09-26-a-post-of-kotlin/</link>
      <pubDate>Thu, 26 Sep 2019 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2019-09-26-a-post-of-kotlin/</guid>
      <description>&lt;p&gt;Kotlin 真是一个很可爱的语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title># Difference between map &amp; unordered_map</title>
      <link>https://svtter.github.io/2018/08/27/difference-between-map-unordered_map/</link>
      <pubDate>Mon, 27 Aug 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/08/27/difference-between-map-unordered_map/</guid>
      <description>目前有三个容器我不太了解其内部实现，打算通过 &amp;lt;c++ primer&amp;gt; 进行学习
map multimap unordered_map map map 是目前最简单的结构，实现的方法是 BST（binary search tree）。因此，其时间复杂度等都与 BST 相同，搜索，增加，删除基本时间都是 log(n)。
use map when 数据有序 需要按照有序的顺序获得元素 unordered_map unordered_map 则是通常所说的 hash table，哈希表，搜索，增加，删除都是以hash表为主，较好的情况是o(1)，也就是hash函数可以较好的把元素分布到表中，如果 hash 函数比较糟糕，则每一次添加删除查找，都是完整遍历一个表。
use unordered_map when 对数据计数 只需要根据 key 访问 value 简单来讲，就是当你需要使用 vector 来计数的时候，可以用 unordered_map 来代替。
multimap multimap containers are generally slower than unordered_multimap containers to access individual elements by their key, but they allow the direct iteration on subsets based on their order.
Multimaps are typically implemented as binary search trees.</description>
    </item>
    
    <item>
      <title>leetcode 相交链表</title>
      <link>https://svtter.github.io/post/2018-08-20-#leetcode%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 20 Aug 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2018-08-20-#leetcode%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;p&gt;这是&lt;code&gt;leetcode&lt;/code&gt;的解题报告。&lt;code&gt;ARTS&lt;/code&gt;很想加入，但是因为自己懒，本身也做了这些事情，因此就一直都在拖，希望这周能够搞定。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Maven小记</title>
      <link>https://svtter.github.io/2018/06/14/maven%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Thu, 14 Jun 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/06/14/maven%E5%B0%8F%E8%AE%B0/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;发现maven与Java，别有一番乐趣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;入门建议：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html&#34;&gt;https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在很多文章其实写的都不如官方的文章，但是人们总是习惯性的从百度获取自己想要的某些资源。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>与所有单词相关联的字串</title>
      <link>https://svtter.github.io/2018/04/05/%E4%B8%8E%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9B%B8%E5%85%B3%E8%81%94%E7%9A%84%E5%AD%97%E4%B8%B2/</link>
      <pubDate>Thu, 05 Apr 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/04/05/%E4%B8%8E%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9B%B8%E5%85%B3%E8%81%94%E7%9A%84%E5%AD%97%E4%B8%B2/</guid>
      <description>&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/description/&#34;&gt;https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/description/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给定一个字符串 s 和一些长度相同的单词 words，找出 s 与 words 中所有单词（words 每个单词只出现一次）串联一起（words 中组成串联串的单词的顺序随意）的字符串匹配的所有起始索引，子串要与串联串完全匹配，中间不能有其他字符。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Write with Vim – 1</title>
      <link>https://svtter.github.io/post/2017-12-15-writewithvim-1/</link>
      <pubDate>Fri, 15 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2017-12-15-writewithvim-1/</guid>
      <description>&lt;p&gt;本文最初发表于2015年，但是个人认为写的尚可，就搬运到这里来，其中有些知识有些老旧，有时间的时候再更新一下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://svtter.github.io/post/250/&#34;&gt;Write with Vim – 2&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Javascript中变量的作用域</title>
      <link>https://svtter.github.io/2017/07/20/javascript%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Thu, 20 Jul 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/07/20/javascript%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>问题引出 方才阅读es6的时候遇到一个问题：
问题解决 这就想了，如果没有let关键字，我们如何处理这个问题呢？
此时就涉及到一个概念，闭包 clojure。
不要被这个复杂的名词欺骗了，就是函数套函数，函数返回函数而已。解决这个问题关键在于
块级作用域和函数作用域的理解；在Javascript中，并不支持块级作用域，它只支持函数作用域，
而且在一个函数中的任何位置定义的变量在该函数中的任何地方都是可见的。
因此，我们在Js这个特性的基础上，使用闭包，然后就可以解决这个问题了：
为什么要解决这个问题？因为有时候在for循环中使用回调可能与参数i有所联系，可能会遭遇到
问题；
当然，如果使用es6这种问题就不会发生了。es6大法好。</description>
    </item>
    
    <item>
      <title>CallBackHell</title>
      <link>https://svtter.github.io/2017/06/08/callbackhell/</link>
      <pubDate>Thu, 08 Jun 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/06/08/callbackhell/</guid>
      <description>这两天做微信小程序赶个潮流，体验了一下回调——之前一直听人讲“回调地狱”，这次终于
亲身感受了一下。的确是“地狱”。
不过既然能够出现“回调地狱”，也必然有人可以避免，甚至在一定程度上解决这个问题。
回调地狱解决方法
一般情况下，我不怎么写回调的代码；一方面是因为没有这个习惯，之前写算法题目，基
本上不写回调——不过行文至此，突然想起许多题目都有用回调从而更加优雅解决的方案，囧。
再贴一篇c++的函数传递
本以为Java不存在回调地狱，也就不存在回调——询问之后，才意识到Java之所以不存在回调
地狱，是因为Java本身要用回调，需要传类作为参数；一方面，如果使用回调，会使得代码
变长；另一方面，尽管代码变长，但是相比较简短的代码，问题描述的更加清晰明确。
这可能就是为什么Js被称为玩具语言的原因之一吧。
回调函数的优势：
然后讲讲Python：
一个Python异步回调的例子 一个阻塞回调 异步编程同步化 最后一个才是最酷的。</description>
    </item>
    
    <item>
      <title>Android-PC类系统测评</title>
      <link>https://svtter.github.io/2016/07/03/android-pc%E7%B1%BB%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%84/</link>
      <pubDate>Sun, 03 Jul 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/07/03/android-pc%E7%B1%BB%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%84/</guid>
      <description>&lt;p&gt;也是闲的有点没事情干了才来写这个测评。最近这几天书没有到，视频看的不顺滑，就想要一种沉浸式的OS体验，远离繁杂强大的WIn，但是结果却是让我有些失望。&lt;/p&gt;
&lt;p&gt;说是测评，其实更是吐槽。并不专业。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>将GNU代入Windows！</title>
      <link>https://svtter.github.io/2015/09/10/%E5%B0%86gnu%E4%BB%A3%E5%85%A5windows%EF%BC%81/</link>
      <pubDate>Thu, 10 Sep 2015 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2015/09/10/%E5%B0%86gnu%E4%BB%A3%E5%85%A5windows%EF%BC%81/</guid>
      <description>&lt;p&gt;GNU is an operating system that is free software.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ACM-数据结构</title>
      <link>https://svtter.github.io/2015/01/30/acm-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 30 Jan 2015 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2015/01/30/acm-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description> 本文可以随意转载，但是转载请保留本信息.
Uvaoj的判题效率不是很高。。所以直接开下一章节。题目慢慢刷，先过一遍书，不然书都看不完了TAT。。
6.1 栈和队列 卡片游戏，回顾了下队列和STL
6.1.2栈的STL 6.2 链表和随机数发生器 链表的相关部分就不在赘述了。主要是随机数发生器。
很多人喜欢用rand()%N得到一个随即整数，但是n大于RAND_MAX的时候，就不好用了。
于是使用(double)rand()/RAND_MAX，然后在扩大n-1倍以后四舍五入，再+1
例如这样
6.3 二叉树 </description>
    </item>
    
    <item>
      <title>Java-Ant文件和Synastic-Vim支持</title>
      <link>https://svtter.github.io/2014/12/29/java-ant%E6%96%87%E4%BB%B6%E5%92%8Csynastic-vim%E6%94%AF%E6%8C%81/</link>
      <pubDate>Mon, 29 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/29/java-ant%E6%96%87%E4%BB%B6%E5%92%8Csynastic-vim%E6%94%AF%E6%8C%81/</guid>
      <description>本文可以随意转载，但是转载请保留本信息.
本文已经更新，请看 — 如何使用vim开发Java.
本来想把本文命名为使用Vim写Java-Project的，但是个人认为这样并没有很高的开发效率，所以只是提
供一个部分的解决方案，剩下的就由大家努力探索吧。。
Java有个自己构建工程的工具叫做Ant, 全名Apache Ant，好东西，最通俗的解释就是Java的
makefile，这里提供的方案，就是使用Ant或者maven来构建工程，然后通过Synastic的设置，来完成
Java的代码检查。另外，java代码补全设置其实也是有的，但是具体的设置我没有好好研究过，主要是
已经陪不起那个时间了。
另外，Eclipse导出Java项目的时候，一个不错的方法就是Export Ant Buildfiles，这就是ant文件。
Ant学习简单教程 Maven我没有好好学，但是看wiki似乎Synastic对maven的支持比ant的支持更加优秀，也可能是mvn的构
建方法上存在优势？这个我不清楚。有时间写一篇文章来好好的研究下。
Ant这个东西构建的包有时候检查会出现问题，（如果采用目录编译的方法，那么就无法检查）。
另外，需要不停的在目录下建立.synastic_javac_config，着实烦人。但是如果使用了全局设置，改
变了配置文件的根目录，也是极为不妥当的（不可能只有一个项目在编辑吧？另外改来改去，也是太麻
烦了。）
就是这样。。更多的是吐槽吧。
对于上一篇文章提到的问题可以用设置classpath来解决。具体方法是将classpath添加到syntastic。
use :SyntasticJavacEditClasspath and add workpath.</description>
    </item>
    
    <item>
      <title>Java-import和package的用法</title>
      <link>https://svtter.github.io/2014/12/28/java-import%E5%92%8Cpackage%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 28 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/28/java-import%E5%92%8Cpackage%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文出自&lt;a href=&#34;http://svtter.github.io&#34;&gt;svtter.github.io&lt;/a&gt;
本文可以随意转载，但是转载请保留本信息.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前一直都是用eclipse开发Java，Vim修炼到今日，本来想要拉出来溜溜Java，奈何package和import的机制以及 synastic[自动检查代码的插件] 没有对于eclipse对java包类似的支持，所以只得滚回eclipse，然后使用vrapper了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS-常见问题</title>
      <link>https://svtter.github.io/2014/12/08/js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 08 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/08/js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文出自&lt;a href=&#34;http://svtter.github.io&#34;&gt;svtter.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;首先应该看w3cschool来涨涨见识, 但是因为之前沉溺游戏荒废了。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php-测试表单的php文件</title>
      <link>https://svtter.github.io/2014/12/02/php-%E6%B5%8B%E8%AF%95%E8%A1%A8%E5%8D%95%E7%9A%84php%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 02 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/02/php-%E6%B5%8B%E8%AF%95%E8%A1%A8%E5%8D%95%E7%9A%84php%E6%96%87%E4%BB%B6/</guid>
      <description>本文出自svtter.github.io 用于测试form, 上传的文件</description>
    </item>
    
    <item>
      <title>JS-优化上传文件的样式</title>
      <link>https://svtter.github.io/2014/12/01/js-%E4%BC%98%E5%8C%96%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Mon, 01 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/01/js-%E4%BC%98%E5%8C%96%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%B7%E5%BC%8F/</guid>
      <description> 本文出自svtter.github.io 上传文件type=file真心丑，所以采用方法解决一下。
中心思想是隐藏input，然后利用css定位，使其仍然可以被点击（有点欺骗的性质）
text需要禁止点击（使用diabled=&#39;disabled&#39;) 源代码 </description>
    </item>
    
    <item>
      <title>JS-变量相关-jQuery调用</title>
      <link>https://svtter.github.io/2014/12/01/js-%E5%8F%98%E9%87%8F%E7%9B%B8%E5%85%B3-jquery%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 01 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/01/js-%E5%8F%98%E9%87%8F%E7%9B%B8%E5%85%B3-jquery%E8%B0%83%E7%94%A8/</guid>
      <description>本文出自&amp;lt;svtter.github.io&amp;gt; 在javascript函数外部定义的变量均为全局变量。
调用jQuery, 需要把jQuery放在&amp;lt;script&amp;gt;最前。
调用本地jQuery的代码
jQuery 目录: ../js/jquery-1.11.1.min.js/
其他的script文件放在jquery后即可
HTML 依据w3cschool修改</description>
    </item>
    
    <item>
      <title>C&#43;&#43;学习必备</title>
      <link>https://svtter.github.io/2014/11/27/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E5%BF%85%E5%A4%87/</link>
      <pubDate>Thu, 27 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/11/27/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E5%BF%85%E5%A4%87/</guid>
      <description> 本文出自&amp;lt;svtter.github.io&amp;gt;
(cplusplus)[http://www.cplusplus.com]
介绍三个头文件 在/usr/include/stdint.h中包含着各种关于C数据类型的定义，大小等。
unistd.h unix standard library header 这个函数库中包含read, write, gitpid等函数 stdlib.h standard library header </description>
    </item>
    
    <item>
      <title>php-php的类</title>
      <link>https://svtter.github.io/2014/11/12/php-php%E7%9A%84%E7%B1%BB/</link>
      <pubDate>Wed, 12 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/11/12/php-php%E7%9A%84%E7%B1%BB/</guid>
      <description>关于PHP的类 http://php.net/manual/zh/language.oop5.php
（本来想顺便学学nodejs的，但是谁有那么多精力啊。。还有js学的像狗屎一样= =）
构造函数重载我不会，有时间再更新吧。。 先记录这些。 </description>
    </item>
    
    <item>
      <title>n种方法实现并行枚举排序</title>
      <link>https://svtter.github.io/2014/11/08/n%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%B9%B6%E8%A1%8C%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 08 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/11/08/n%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%B9%B6%E8%A1%8C%E6%9E%9A%E4%B8%BE%E6%8E%92%E5%BA%8F/</guid>
      <description>这篇文章一直没有写，因为并行计算的报告写的比较潦草。此外，没有实现fork。
文件的源代码贴在 https://github.com/Svtter/workspace/tree/master/parallel/enum_sort
实现了Java, MPI, openmp, pthread, win32, MFC, .NET 的并行枚举排序，测试机是双核四线程的ThinkpadE430.
MPI的环境是archlinux . openmpi
贴一个MPI的源代码, 运行结果都在源代码对应的文件夹中保存，这里就不贴了。
并行计算非常有趣，有时间肯定会再在这条道路上探寻…</description>
    </item>
    
  </channel>
</rss>
