<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程 on Svtter's Blog</title><link>https://svtter.cn/categories/%E7%BC%96%E7%A8%8B/</link><description>Recent content in 编程 on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 07 Nov 2023 17:19:00 +0800</lastBuildDate><atom:link href="https://svtter.cn/categories/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Coding With Cloud Server</title><link>https://svtter.cn/p/coding-with-cloud-server/</link><pubDate>Tue, 07 Nov 2023 17:19:00 +0800</pubDate><guid>https://svtter.cn/p/coding-with-cloud-server/</guid><description>&lt;p>程序开发经常会让本地机器卡顿，尤其是编译某些较大文件的时候。除此之外，如果涉及到数据集处理，会带来更多麻烦，例如下载数据动辄10G，部署环境不一致导致包冲突问题。&lt;/p>
&lt;p>因此，如果只进行 web 开发，那么云服务器是一个相当不错的选择。
云服务器现在价格很优惠。经过本人测试，腾讯云轻量服务器相当靠谱。可以直接搞定基本问题：公网ip，带宽，存储，服务器本体。&lt;/p>
&lt;p>这个是我的&lt;a class="link" href="https://curl.qcloud.com/2w2Hjd24" target="_blank" rel="noopener"
>推广链接&lt;/a>，可以直接跳转购买。&lt;/p>
&lt;p>进入正题：使用vscode进行开发。设置好 remote ssh，也就是这个插件：&lt;/p>
&lt;p>&lt;img src="https://svtter.cn/images/image_1699347932775_0.png"
loading="lazy"
>&lt;/p>
&lt;p>这个插件可以让我们通过 ssh 连接到服务器，并且自动开放端口，从本地的链接，例如 127.0.0.1:1080 进行访问。可以在 port 中看到。&lt;/p>
&lt;p>&lt;img src="https://svtter.cn/images/image_1699348134681_0.png"
loading="lazy"
alt="image.png"
>&lt;/p>
&lt;p>通过这样的方式，调试也变得容易了。&lt;/p>
&lt;p>总结一下，有几个好处：&lt;/p>
&lt;ul>
&lt;li>性能占用都在服务器上，本地机器运行通畅。&lt;/li>
&lt;li>依赖简单，linux 系统；环境独立，不容易破坏。&lt;/li>
&lt;li>重装容易，一键重装。&lt;/li>
&lt;li>不需要担心垃圾文件问题，可以备份后直接重制系统。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>版权所有©️ svtter&lt;/p>&lt;/blockquote></description></item><item><title>我的vim配置</title><link>https://svtter.cn/p/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 19 Jan 2018 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>现在使用vim最好是使用neovim或者vim8版本，来获得async特性，防止运行补全命令的时候卡顿。&lt;/p>
&lt;p>我的配置文件在&lt;a class="link" href="https://gist.coding.net/u/svtter/e2d42ab058b144cdb58c7294e171fcce" target="_blank" rel="noopener"
>coding gist&lt;/a>。&lt;/p>
&lt;p>相应的安装方法也写在其中。&lt;/p>
&lt;h3 id="插件管理器">插件管理器
&lt;/h3>&lt;p>安装我的配置文件，首先需要安装一下插件管理器。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>curl -fLo ~/.vim/autoload/plug.vim --create-dirs &lt;span class="se">\&lt;/span>
https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/pre>
&lt;/div>
&lt;h3 id="使用字体">使用字体:
&lt;/h3>&lt;p>nerd-fonts &lt;a class="link" href="https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts" target="_blank" rel="noopener"
>https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts&lt;/a>&lt;/p>
&lt;h3 id="运行">运行
&lt;/h3>&lt;p>把.vimrc移动到~/.vimrc&lt;/p>
&lt;p>打开vim，输入：:PlugInstall&lt;/p>
&lt;p>安装完成即可。&lt;/p>
&lt;h3 id="语言补全">语言补全
&lt;/h3>&lt;p>需要个别语言的补全，查看completor&lt;/p>
&lt;p>因为是自己手动慢慢写成的vim配置，因此想要我定制或者修改不需要额外的学习成本。如果想要更好的配置，可以考虑&lt;a class="link" href="https://github.com/SpaceVim/SpaceVim" target="_blank" rel="noopener"
>spacevim&lt;/a>，SpaceVim是参考&lt;code>Spacemacs&lt;/code>制作的&lt;code>IDE&lt;/code>，非常有趣，二者相爱相杀，促成的产物。&lt;/p></description></item><item><title>使用Docker时遇到的sitemap问题</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84sitemap%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 27 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8docker%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84sitemap%E9%97%AE%E9%A2%98/</guid><description>&lt;p>这两天感觉博客访问量已经不能靠用嘴宣传了，于是决定做一下sitemap，但是发现django自带的sitemap生成器存在这样的问题：生成的sitemap是依照container的hostname来显示的。&lt;/p>
&lt;p>为此我查询了一下其他人是怎么搞的，发现他们都把nginx和django放在一个容器下——但是如此构建不仅麻烦，似乎违背了docker的构建思路，在一个container里面放了多个进程。因此，我认为下面的方案是合理的。&lt;/p>
&lt;h2 id="解决方案">解决方案
&lt;/h2>&lt;h3 id="enabling-the-sites-framework">Enabling the sites framework
&lt;/h3>&lt;p>To enable the sites framework, follow these steps:&lt;/p>
&lt;p>Add ‘django.contrib.sites’ to your INSTALLED_APPS setting.&lt;/p>
&lt;h3 id="define-a-site_id-setting">Define a SITE_ID setting:
&lt;/h3>&lt;p>&lt;code>SITE_ID = 1&lt;/code>&lt;/p>
&lt;h3 id="run-migrate">Run migrate.
&lt;/h3>&lt;p>django.contrib.sites registers a post_migrate signal handler which creates a default site named example.com with the domain example.com. This site will also be created after Django creates the test database. To set the correct name and domain for your project, you can use a data migration.&lt;/p>
&lt;p>In order to serve different sites in production, you’d create a separate settings file with each SITE_ID (perhaps importing from a common settings file to avoid duplicating shared settings) and then specify the appropriate DJANGO_SETTINGS_MODULE for each site.&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">django.contrib.sites.models&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Site&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Site&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">domain&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;myveryspecialdomain.com&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;My Special Site Name&amp;#39;&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>代码写多了，对于Flask和Django也就十分释然了。两个东西都是利器，针对的东西不是很相同；编程语言也是，都有自己擅长的部分，如果你非要用某种编程语言花很大的力气去做一件小事，除非你是geek而且有追求，并且没有deadline在旁边催催催，否则不建议你这么做。&lt;/p>
&lt;h2 id="参考项目">参考项目
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/flyhigher139/mayblog" target="_blank" rel="noopener"
>https://github.com/flyhigher139/mayblog&lt;/a>&lt;/p></description></item><item><title>使用fish – 一个新的shell</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8fish-%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84shell/</link><pubDate>Wed, 27 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8fish-%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84shell/</guid><description>&lt;p>许多人都在推荐fish-shell，比如说阮一峰大佬和Reitz神；因此也要试试fish的魅力。虽然已经是z和zsh的老用户，但是对于效率的极致追求不能停。&lt;/p>
&lt;blockquote>
&lt;p>注意：fish仅适用于某些开发场景，目前不适用于所有开发场景——在其他许多shell环境中，由于历史因素以及已经构建完成的大量生态，对于当前的开发影响是巨大的。&lt;/p>&lt;/blockquote>
&lt;h2 id="fish基本操作">fish基本操作
&lt;/h2>&lt;p>fish不仅仅使用tab进行不全，还可以使用&lt;code>ctrl+f&lt;/code>或者&lt;code>alt+f&lt;/code>进行全行不全。&lt;/p>
&lt;p>fish还可以通过安装&lt;code>oh-my-fish&lt;/code>，对应到z-shell的&lt;code>oh-my-zsh&lt;/code>。不过，一般情况下，fish本身就已经做的够好了，基本不需要再进行更多的配置。&lt;/p>
&lt;h2 id="fish中的export">fish中的export
&lt;/h2>&lt;p>使用&lt;code>set -x&lt;/code>来替代。例如&lt;code>set -x HOME /home/svtter&lt;/code>，即&lt;code>export HOME=/home/svtter&lt;/code>&lt;/p>
&lt;h2 id="后记">后记
&lt;/h2>&lt;p>后来我还是切换回了zsh；我使用的开发环境对于&lt;code>zsh&lt;/code>已经支持的很好了，但是对于&lt;code>fish&lt;/code>的支持还是差强人意。学习新的技术是需要成本的，如果有时间就对fish的支持进行完善，如果没时间，那么还是等它更加成熟再使用吧。&lt;/p>
&lt;h2 id="参考">参考
&lt;/h2>&lt;p>&lt;a class="link" href="http://www.ruanyifeng.com/blog/2017/05/fish_shell.html" target="_blank" rel="noopener"
>http://www.ruanyifeng.com/blog/2017/05/fish_shell.html&lt;/a>&lt;/p></description></item><item><title>给小白的IPython Notebook指南</title><link>https://svtter.cn/p/%E7%BB%99%E5%B0%8F%E7%99%BD%E7%9A%84ipython-notebook%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 15 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E7%BB%99%E5%B0%8F%E7%99%BD%E7%9A%84ipython-notebook%E6%8C%87%E5%8D%97/</guid><description>&lt;p>这是给“小白”的notebook指南。&lt;code>notebook&lt;/code>是算法开发经常使用的工具。&lt;/p>
&lt;h2 id="安装notebook">安装notebook
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ pip install notebook
&lt;/pre>
&lt;/div>
&lt;h2 id="运行notebook">运行notebook
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ jupyter-notebook .
&lt;/pre>
&lt;/div>
&lt;p>在终端下运行这个命令可以启动&lt;code>notebook&lt;/code>。&lt;/p>
&lt;h2 id="使用ipython-notebook">使用IPython-Notebook
&lt;/h2>&lt;p>点击右方的New按钮，选择Python3，以此来启动一个新的NoteBook。&lt;/p>
&lt;img alt="" src="https://i0.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fmhb5rtz02j20i00g4t9f.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;p>这时会新创建一个文件。&lt;/p>
&lt;img alt="" src="https://i1.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fmheq426xbj20wy0fodh6.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;p>在&lt;code>In [ ]:&lt;/code>后输入要运行的代码，然后点击&lt;code>Run&lt;/code>即可运行。例如：&lt;/p>
&lt;img alt="" src="https://i0.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fmhes784qnj20ui0c6q3f.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;h2 id="使用terminal">使用Terminal
&lt;/h2>&lt;img alt="" src="https://i0.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fmhb5rtz02j20i00g4t9f.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;p>Terminal就是之前在Windows下的&lt;code>cmd&lt;/code>，MacOS下的&lt;code>terminal&lt;/code>，点击之后见到这个界面：&lt;/p>
&lt;img alt="" src="https://i1.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fmheunkr2hj20lm0aeq3o.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;p>尝试输入python，就可以像之前那样进行命令行编程了。&lt;/p></description></item><item><title>快速git指南</title><link>https://svtter.cn/p/%E5%BF%AB%E9%80%9Fgit%E6%8C%87%E5%8D%97/</link><pubDate>Wed, 06 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%BF%AB%E9%80%9Fgit%E6%8C%87%E5%8D%97/</guid><description>&lt;p>git是一个版本控制工具，通过git我们可以解决许多版本冲突，以及协同开发的问题。&lt;/p>
&lt;h2 id="git安装">git安装
&lt;/h2>&lt;p>Windows可以通过安装文件直接安装，Linux可以通过&lt;code>apt-get install git&lt;/code>安装，OSX可以通过&lt;code>brew install git&lt;/code>来安装git。&lt;/p>
&lt;h2 id="初始化当前目录为git项目">初始化当前目录为git项目
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ git init .
&lt;/pre>
&lt;/div>
&lt;p>这个操作的意思是，把当前项目使用git进行管理。此时会创建一个&lt;code>.git&lt;/code>文件夹。&lt;/p>
&lt;h2 id="添加当前文件的改动并且提交">添加当前文件的改动，并且提交
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ git add .
$ git commit -m &lt;span class="s1">&amp;#39;update message&amp;#39;&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>如果修改了文件，文件的变动没有被git记录。这个时候运行上述命令，就可以把变动记录下来。&lt;/p>
&lt;h2 id="推送到远程仓库">推送到远程仓库
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ git push
&lt;/pre>
&lt;/div>
&lt;h2 id="获取远程仓库的更新">获取远程仓库的更新
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ git pull
&lt;/pre>
&lt;/div>
&lt;h2 id="下载git仓库">下载git仓库
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ git clone &lt;span class="si">${&lt;/span>&lt;span class="nv">仓库的URL&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>例如，下载这个项目&lt;code>breastCancer&lt;/code>，可以使用如下的命令&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>$ git clone https://github.com/Svtter/breastCancer
&lt;/pre>
&lt;/div>
&lt;p>通过这个操作就可以下载这个仓库。&lt;/p>
&lt;h2 id="可视化当前更新">可视化当前更新
&lt;/h2>&lt;p>例如&lt;/p>
&lt;img alt="" src="https://i2.wp.com/ww1.sinaimg.cn/large/c53b1907ly1fm6yf63ax3j21iw024t8v.jpg?w=625" data-recalc-dims="1" />
&lt;p>点击&lt;code>first commit&lt;/code>，即可看到这次提交的相关改动。&lt;/p>
&lt;img alt="" src="https://i2.wp.com/ww1.sinaimg.cn/large/c53b1907ly1fm6ygxxgf1j21xs0iymzv.jpg?w=625" data-recalc-dims="1" />
&lt;h2 id="其他的问题">其他的问题
&lt;/h2>&lt;p>如果出现conflict以及其他的问题，可以通过google自行搜索解决。&lt;/p>
&lt;h2 id="可参考的资料">可参考的资料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener"
>廖雪峰git教程&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>阿里云使用VNC</title><link>https://svtter.cn/p/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8vnc/</link><pubDate>Tue, 05 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8vnc/</guid><description>&lt;p>本来想用阿里云做vnc来远程一下完成一些事情，但是无奈速度有点慢，而且源还偶尔出问题，update能不能成功完全看脸【经常碰到，没有修改过aliyun的source】。不成功的表现是，&lt;code>apt-get&lt;/code>告诉我&lt;code>broken depends&lt;/code>，em….&lt;/p>
&lt;p>不过不是很妨碍相关的使用【才怪】。这是&lt;a class="link" href="https://help.aliyun.com/knowledge_detail/41530.html#" target="_blank" rel="noopener"
>官方教程&lt;/a>。&lt;/p>
&lt;p>使用vnc在官方的教程上要这样修&lt;code>Xstartup&lt;/code>才行。测试环境&lt;code>ubuntu 14.04&lt;/code>。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="ch">#!/bin/sh&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">XKL_XMODMAP_DISABLE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="nb">unset&lt;/span> SESSION_MANAGER
&lt;span class="nb">unset&lt;/span> DBUS_SESSION_BUS_ADDRESS
&lt;span class="o">[&lt;/span> -x /etc/vnc/xstartup &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;&amp;&lt;/span> &lt;span class="nb">exec&lt;/span> /etc/vnc/xstartup
&lt;span class="o">[&lt;/span> -r &lt;span class="nv">$HOME&lt;/span>/.Xresources &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;&amp;&lt;/span> xrdb &lt;span class="nv">$HOME&lt;/span>/.Xresources
xsetroot -solid grey
vncconfig -iconic &lt;span class="p">&amp;&lt;/span>
gnome-panel &lt;span class="p">&amp;&lt;/span>
gnome-settings-daemon &lt;span class="p">&amp;&lt;/span>
metacity &lt;span class="p">&amp;&lt;/span>
nautilus &lt;span class="p">&amp;&lt;/span>
gnome-terminal &lt;span class="p">&amp;&lt;/span>
&lt;/pre>
&lt;/div></description></item><item><title>小程序开发Tips</title><link>https://svtter.cn/p/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91tips/</link><pubDate>Sat, 02 Dec 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91tips/</guid><description>&lt;p>这篇文章主要聊聊小程序开发。&lt;/p>
&lt;p>小程序开发有几个点在文档里面没有写的很明确，在这里我更明确的提一下。&lt;/p>
&lt;h2 id="带着参数跳转">带着参数跳转
&lt;/h2>&lt;p>小程序之间的页面跳转携带参数的小例子：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">navigator&lt;/span> &lt;span class="na">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">""&lt;/span> &lt;span class="na">bindtap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">"bindViewTap"&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>这个&lt;code>navigator&lt;/code>是一个跳转，绑定了&lt;code>bindViewTap&lt;/code>方法。&lt;code>bindViewTap&lt;/code>方法实现如下：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">bindViewTap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;run search.&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">x&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">y&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">keyword&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;test&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">wx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">navigateTo&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`../map/map?latitude=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;longitude=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;keyword=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">keyword&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>如此一来，便携带着三个参数，就像是网页GET请求一样，跳转到&lt;code>../map/map&lt;/code>页面。此时，map页面需要接收这几个参数。示例代码：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">onLoad&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">that&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Map load.&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setData&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">markers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">latitude&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">latitude&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">longitude&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">longitude&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">inputVal&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keyword&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">init&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">},&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 完成函数后回调&lt;/span>
&lt;span class="nx">that&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">showInput&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>在Page的&lt;code>OnLoad&lt;/code>方法中，可以从options参数里面把传递的值拿出来，在&lt;code>map&lt;/code>页面中使用。&lt;/p>
&lt;p>本文后续持久更新。&lt;/p></description></item><item><title>4道算法题目</title><link>https://svtter.cn/p/4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/</link><pubDate>Sun, 26 Nov 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/</guid><description>&lt;p>四道做的比较走心的算法题目。&lt;/p>
&lt;h2 id="最接近的数字">最接近的数字
&lt;/h2>&lt;h3 id="题目">题目
&lt;/h3>&lt;p>一个K位的数N&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>(K\leq2000，N\leq10^{20})&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>找出一个比N大且最接近的数，这个数的每位之和与N相同，用代码实现之。&lt;/p>
&lt;p>例如：0050 所求书数字为0104；112 所求数为121；&lt;/p>
&lt;h3 id="算法分析-算法思想">算法分析 算法思想
&lt;/h3>&lt;p>直接暴力求这个数字是不可以的，数字的量级太大，有K位的数字，不可能直接用int，或者float来表示，使用数组来存储。应该分析这个数字，step1，从右边开始的最小位数开始，分解最后一位数字，分解出1来拿给前面的一位。9和0比较特殊，因此从左往右扫描的开始，遇到0就跳过，遇到第一个非0的数字，就把这个数字-1，然后移到最后面去，然后，step2，开始找第一个非9的数字，如果遇到9，就把9放到最后面去，遇到非9，就+1，结束运算。&lt;/p>
&lt;p>一个般的例子：&lt;/p>
&lt;p>1999000 -&amp;gt; 1990008-&amp;gt; 2000899&lt;/p>
&lt;p>要注意一个问题，就是如果是 999000 这种情况，在数字的最开头补1，结果是1000899&lt;/p>
&lt;p>几个刁蛮的数据：29399 -&amp;gt; 29489&lt;/p>
&lt;h3 id="伪代码">伪代码
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>array = get_array() # number to char array
array.reverse()
step1 = true
step2 = false
zero = 0, cnt = 0;
for i : 1 - lengthof(array)
if step1:
if array[i] is 0:
zero ++
else:
array[i] = array[i] - 1
if zero &amp;gt; 0:
array[0] = array[i]
array[i] = 0
step1 = false
step2 = true
else if step2:
if array[i] is 9:
if zero == 0:
array[cnt+1] = array[cnt]
array[cnt] = 9
cnt++
if (i != cnt):
array[i] = array[i-1]
else:
array[cnt + 1] = array[cnt]
array[cnt] = 9
cnt++
array[i] = 0
else:
i = i+1
step2 = false
break
if not step2:
array[lengthof(array)] = 1
array.reverse()
disp(array)
&lt;/pre>
&lt;/div>
&lt;h3 id="分析时间复杂度o">分析时间复杂度O
&lt;/h3>&lt;p>因为reverse操作，2K，加上最后整理最小数到最前面，最坏情况接近K，3K，在循环中的操作看运气，但是最糟糕的情况也只有5K，所以时间复杂度为&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>O(3K) \approx O(K)&lt;/p>
&lt;p>$$&lt;/p>
&lt;h3 id="源代码">源代码
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">MAXN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXN&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">length_of_number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">get_array&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%d"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">length_of_number&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%c"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length_of_number&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%c"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%c"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">reverse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length_of_number&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// _swap&lt;/span>
&lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">length_of_number&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">length_of_number&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">reverse&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">step1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">step2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">zero&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">cnt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length_of_number&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">step1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">zero&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">zero&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">step1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">step2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;9&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">zero&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">cnt&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;9&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cnt&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">cnt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">cnt&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;9&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cnt&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">step2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">step2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">length_of_number&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">length_of_number&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">output&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">reverse&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length_of_number&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%c"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">"&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">freopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"input"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">"r"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">get_array&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">run&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h3 id="测试结果">测试结果
&lt;/h3>&lt;p>使用&lt;code>python&lt;/code>生成测试数据进行测试：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="sd">"""&lt;/span>
&lt;span class="sd">最接近的数字&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">random&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd"> sample test&lt;/span>
&lt;span class="sd"> """&lt;/span>
&lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10000000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sum_of_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">sum_of_num&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">temp_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">sum_temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp_num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">sum_temp&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">sum_temp&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">sum_of_num&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="n">temp_num&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;input&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">popen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./ex2&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">temp_num&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">temp_num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="nb">all&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">True&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="bp">False&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">all&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">False&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">all&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Pass testing!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>存在错误的情况：&lt;/p>
&lt;img alt="" src="https://i1.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fky8g4jmaej20vw04wjs8.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;p>通过：&lt;/p>
&lt;img alt="" src="https://i2.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fky8gccktej20u80320tb.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;h3 id="后期改善优化的地方">后期改善优化的地方
&lt;/h3>&lt;ol>
&lt;li>reverse 是为了编程方便进行的处理，但是如果数字太大，速度肯定会受影响，这个时候就不要使用reverse了。&lt;/li>
&lt;li>用链表来做可以简化代码，减少分析的，更加节省时间&lt;/li>
&lt;li>处理移位的时候考虑几个问题&lt;/li>
&lt;/ol>
&lt;h2 id="寻找发帖水王">寻找发帖水王
&lt;/h2>&lt;h3 id="题目-1">题目
&lt;/h3>&lt;p>如果“水王”没有了，但有三个发帖很多的ID，发帖的数目都超过了帖子做数的1/4，又如何快速找出他们的ID。&lt;/p>
&lt;h3 id="算法分析-算法思想-1">算法分析 算法思想
&lt;/h3>&lt;p>从0-n扫描ID数组，记录3个数字的个数，如果出现第四个数字，就把三个数字的个数减少1，如果有一个数字的个数减少到0，那么把新来的数字作为原本三个数字之一进行记录。&lt;/p>
&lt;p>如此一来，扫描完ID数组之后，剩下记录的3个数字的个数便是需要求的三个数字。&lt;/p>
&lt;h3 id="伪代码-1">伪代码
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>array = get_array()
count = empty_set()
for i in array:
if count.full:
if i in count:
count.i.num ++
else:
for j in count:
count.j.num--
else
count.add(i)
disp(count)
&lt;/pre>
&lt;/div>
&lt;h3 id="分析时间复杂度o-1">分析时间复杂度O
&lt;/h3>&lt;p>数列的大小为N，记录数字的数组大小为3，每次判断记录数组count是否存在0，以及找到已存在的数字++，都会花费3个单位时间，因此其时间复杂度为&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>O(3n) \approx O(n)&lt;/p>
&lt;p>$$&lt;/p>
&lt;h3 id="源代码-1">源代码
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define MAXN 5000&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">idarray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXN&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 记录当前元素&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 记录当前元素个数&lt;/span>
&lt;span class="c1">// 检查是否在数组内，如果不在数组内，添加进入数组&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">checkin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">no&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// 检查是否有空位置&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">cur&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">no&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 寻找指定数字++&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cur&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">no&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 没有找到重复数字，全部--&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 输出最后结果&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">output&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%d %d %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 主程序&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">numberOfArray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">numberOfArray&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">checkin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">idarray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">output&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%d"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">numberOfArray&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">numberOfArray&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%d"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">idarray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">freopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"input"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">"r"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">groupOfTest&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"%d"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">groupOfTest&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">groupOfTest&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cur&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cur&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">idarray&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">idarray&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">input&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"Test running..."&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">run&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h3 id="测试结果-1">测试结果
&lt;/h3>&lt;p>本测试数据采用&lt;code>Python&lt;/code>自动生成。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="sd">"""&lt;/span>
&lt;span class="sd">寻找发帖水王&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">random&lt;/span>
&lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4000&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">three_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">three_id_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="n">sum_rand&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">three_id&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sum_rand&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">temp&lt;/span>
&lt;span class="n">three_id_num&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">three_id_num&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">temp&lt;/span>
&lt;span class="n">id_array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sum_rand&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">three_id&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">id_array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">id_array&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">three_id_num&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])]&lt;/span>
&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shuffle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id_array&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Most three id:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">three_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Three id num: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">three_id_num&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Sum of three_id num: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum_rand&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;---------------&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># print(id_array)&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;input&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">id_array&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/pre>
&lt;/div>
&lt;img alt="" src="https://i2.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fkxv57y8tqj20z00bytac.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;h3 id="后期改善优化的地方-1">后期改善优化的地方
&lt;/h3>&lt;ol>
&lt;li>对于N比较小的情况可以在内存中进行查找，但是一旦涉及到更大的数据，这个方法可能就没有那么简单了，不能在内部建立数组，需要一部分一部分的从磁盘中读数；&lt;/li>
&lt;li>如果需要查找的id数量变多，那么需要的临时保存的数列可能更大；&lt;/li>
&lt;li>这个实现没有使用STL中的map，如果使用map，还能进一步使得代码见解易懂，map使用hash来做内部实现，可以使得面对数据量更大的数据的时候，加快查找数据的速度。&lt;/li>
&lt;/ol>
&lt;h2 id="山西煤老板">山西煤老板
&lt;/h2>&lt;h3 id="题目-2">题目
&lt;/h3>&lt;p>你是山西的一个煤老板，你在矿区开采了有3000吨煤需要运送到市场上去卖，从你的矿区到市场有1000公里，你手里有一列烧煤的火车，这个火车只能装1000吨煤，且能耗比较大——每一公里需要耗一吨煤。请问，作为一个懂编程的煤老板，你会怎么运送才能运最多的煤到集市？&lt;/p>
&lt;h3 id="算法分析-算法思想-2">算法分析 算法思想
&lt;/h3>&lt;p>从动态规划的角度求最优解：&lt;/p>
&lt;p>假设起始运送货物量为t，终点路程为s，火车容量为c，可以运抵终点的最多货物量为函数 F(t, s)。&lt;/p>
&lt;p>3种基本情况：&lt;/p>
&lt;p>（1）t &amp;lt; s：货物量不足以运送到此距离，所以F(t, s) = 0;&lt;/p>
&lt;p>（2）s &amp;lt; t &amp;lt; c：火车一次就可以装完货物，所以F(t, s) = t – s;&lt;/p>
&lt;p>（3）2s &amp;lt; c 使得火车一次无法运完，但可以采用往返的方式多次运输，这种情况下最有的方式就是减少总共往返的次数，也就是直接运到终点而不在中间卸货，所以&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>F(t, s) = (t / c – 1) * (c – 2s) + (c – s)&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>可得递归式：&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>F(t, s) = max{ F( F(t, i), s – i)} (1 &amp;lt;= i &amp;lt; s)&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>分析了一下这个方程是有问题的，比如F(1750, 250)会计算出1125；&lt;/p>
&lt;p>所以正确的结果应该对t/c进行处理，也就是说，起点剩余的燃料不足运输到终点，直接舍弃。第三阶段的方程式应该是&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>F(t, s) = (t // c – 1) * (c – 2s) + (c – s) + (t % c – 2 s), if (t%c &amp;gt; 2s)&lt;/p>
&lt;p>$$&lt;/p>
&lt;h3 id="伪代码-2">伪代码
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="n">elif&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">s&lt;/span>
&lt;span class="n">elif&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">int&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="c1">//c-1)*(c-2*s) + (c-s))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">int&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">pre&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">range&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">):&lt;/span>
&lt;span class="n">pre&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">int&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">pre&lt;/span>&lt;span class="o">))&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pre&lt;/span>
&lt;span class="n">end&lt;/span>
&lt;span class="n">disp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="o">][&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="o">])&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h3 id="分析时间复杂度o-2">分析时间复杂度O
&lt;/h3>&lt;p>时间复杂度为&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>O(3000*3000)&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>因为每个数字都要计算一遍。&lt;/p>
&lt;h3 id="源代码-2">源代码
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="sd">"""&lt;/span>
&lt;span class="sd">山西煤老板&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4000&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4000&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4000&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4000&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;span class="n">cnt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd"> dp&lt;/span>
&lt;span class="sd"> """&lt;/span>
&lt;span class="k">global&lt;/span> &lt;span class="n">count&lt;/span>
&lt;span class="k">global&lt;/span> &lt;span class="n">c&lt;/span>
&lt;span class="k">global&lt;/span> &lt;span class="n">f&lt;/span>
&lt;span class="c1"># count -= 1&lt;/span>
&lt;span class="c1"># if count == 0:&lt;/span>
&lt;span class="c1"># count = int(input())&lt;/span>
&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">s&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">pre&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">pre&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">pre&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pre&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h3 id="测试结果-2">测试结果
&lt;/h3>&lt;img alt="" src="https://i1.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fl04n2mrqgj20fg0cyt9k.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;h3 id="后期改善优化的地方-2">后期改善优化的地方
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>去除了一下数据进行加速&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存f减少重复运算值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>应该有更加简单的方法，类似这种，但是不好解释。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;img alt="" src="https://i2.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fl05b8hdjcj20r40c2wit.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;ol>
&lt;li>$$&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>3y=1000\
5x=1000\
解得x+y=200+333=533，因此使得最后一辆火车抵达时节省了533吨煤\
$$
&lt;/code>&lt;/pre>
&lt;h2 id="facebook">Facebook
&lt;/h2>&lt;h3 id="题目-3">题目
&lt;/h3>&lt;p>Given a list of words, L, that are all the same length, and a string, S, find the starting position of the substring of S that is concatenation of each word in L exactly once and without intervening characters. This substring will occur exactly once in S.&lt;/p>
&lt;h3 id="算法分析-算法思想-3">算法分析 算法思想
&lt;/h3>&lt;p>使用hashmap来保存word的hash值，来加快查找速度。（旧）&lt;/p>
&lt;p>直接用hash函数求字符串的hash值，最后求得结果。&lt;/p>
&lt;p>依据公式&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>hash(w_1) + hash(w_2) = hash(w_2) + hash(w_1)&lt;/p>
&lt;p>$$&lt;/p>
&lt;h3 id="伪代码-3">伪代码
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>hash_word_list = list(map(hash, words))
hash_sum = reduce(lambda x, y: x + y, hash_word_list)
for i in range(len(sentence)):
wl = word_len
wlist = [sentence[i+j*wl:i+j*wl+wl] for j in range(words_len)]
temp_sum = 0
for k in wlist:
temp_sum += hash(k)
if temp_sum == hash_sum:
print(i)
break
&lt;/pre>
&lt;/div>
&lt;h3 id="分析时间复杂度o-3">分析时间复杂度O
&lt;/h3>&lt;p>就是字符串长度&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>O(lengthOfS)&lt;/p>
&lt;p>$$&lt;/p>
&lt;h3 id="源代码-3">源代码
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd">facebook&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">functools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nb">reduce&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">words&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># words = "fooo barr wing ding wing"&lt;/span>
&lt;span class="n">words&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">word_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">words&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">words_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">words&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">hash_word_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">hash&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">hash_sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">reduce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">hash_word_list&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">sentence&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1"># sentence = """lingmindraboofooowingdin\&lt;/span>
&lt;span class="c1"># gbarrwingfooomonkeypoundcakewingdingbarrwingfooowing"""&lt;/span>
&lt;span class="c1"># print(words, words_len, word_len, sentence)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sentence&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">wl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">word_len&lt;/span>
&lt;span class="n">wlist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">sentence&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">wl&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">wl&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">wl&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">words_len&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="c1"># print(wlist)&lt;/span>
&lt;span class="n">temp_sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">wlist&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">temp_sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">hash&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">temp_sum&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">hash_sum&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h3 id="测试结果-3">测试结果
&lt;/h3>&lt;p>测试数据生成意义不是很大，&lt;/p>
&lt;img alt="" src="https://i1.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fl0cpgm29cj20z00caq4f.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;h3 id="后期改善优化的地方-3">后期改善优化的地方
&lt;/h3>&lt;ol>
&lt;li>hash尽管在速度上非常优秀，但是在准确度方面，如果出现hash冲突，那么值可能不准确。此时可以利用hashmap来解决这个问题，不过会多出重置hashmap的相关时间。&lt;/li>
&lt;/ol>
&lt;h2 id="for-n--m-8211-problems">For n -m – problems
&lt;/h2>&lt;h3 id="problemset">Problemset
&lt;/h3>&lt;p>Assume we have a sequence that contains N numbers of type long. And we know for sure that among this sequence each number does occur exactly n times except for the one number that occurs exactly m times (0 &amp;lt; m &amp;lt; n). How do we find that number with O(N) operations and O(1) additional memory?&lt;/p>
&lt;h3 id="algorithm">Algorithm
&lt;/h3>&lt;p>^ is the add operation without carry.&lt;/p>
&lt;p>默认one,two都是0, 即任何数字都不存在&lt;/p>
&lt;p>数字a第一次来的时候, one标记a存在, two不变&lt;/p>
&lt;p>数字a第二次来的时候, one标记a不存在, two标记a存在&lt;/p>
&lt;p>数字a第三次来的时候, one不变, two标记a不存在&lt;/p>
&lt;p>构造这样一种运算，通过异或将数据保存在one和two里面。&lt;/p>
&lt;h3 id="pseudocode">Pseudocode
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>def solve2(array):
one = 0, two = 0
for i in range(array):
one = (one ^ array[i]) &amp; ~two
two = (two ^ array[i]) &amp; ~one
return one, two
array = input()
_, res = solve2(array)
&lt;/pre>
&lt;/div>
&lt;p>### Source code&lt;/p>
&lt;p>“`python&lt;/p>
&lt;h1 id="usrbinenv-python">!/usr/bin/env python
&lt;/h1>&lt;p>def solve(array):&lt;/p>
&lt;p>one, two = 0, 0&lt;/p>
&lt;p>for i in array:&lt;/p>
&lt;p>one = (one ^ i) &amp;amp; ~two&lt;/p>
&lt;p>two = (two ^ i) &amp;amp; ~one&lt;/p>
&lt;p>return one, two&lt;/p>
&lt;p>if &lt;strong>name&lt;/strong> == ‘&lt;strong>main&lt;/strong>‘:&lt;/p>
&lt;p>array = input()&lt;/p>
&lt;p>array = array.split(‘ ‘)&lt;/p>
&lt;p>array = list(map(lambda x: int(x), array))&lt;/p>
&lt;p># print(array)&lt;/p>
&lt;p>_, res = solve(array)&lt;/p>
&lt;p>print(res)&lt;/p>
&lt;p>“`&lt;/p>
&lt;h3 id="test">Test
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">random&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd"> 测试&lt;/span>
&lt;span class="sd"> """&lt;/span>
&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="n">numberofNum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">record&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numberofNum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">record&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">temp&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">run&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">solve&lt;/span>
&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">solve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ERROR&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Pass: res: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;temp:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>Use python generate data to test.&lt;/p>
&lt;img alt="" src="https://i0.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fl3lds9n3uj20uo0jajuf.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;h3 id="discussion-and-improve">Discussion and improve
&lt;/h3>&lt;p>如果n不是3，那么需要构造更多的临时变量。&lt;/p>
&lt;h2 id="很长的数组">很长的数组
&lt;/h2>&lt;h3 id="题目-4">题目
&lt;/h3>&lt;p>一个很长很长的short型数组A，将它分成m个长为L的子数组B1，B2，…，Bm，其中每个数组排序后都是递增的等差数列，求最大的L值。&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>例如，A = {-1, 3, 6, 1, 8, 10} 可以分成B_1 = {-1, 1, 3}, B_2 = {6, 8, 10},; L = 3 即为所求。&lt;/p>
&lt;p>$$&lt;/p>
&lt;h3 id="算法分析">算法分析
&lt;/h3>&lt;p>首先进行排序，然后开始分三步走。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>统计元素个数 O(n)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>排序 O(nlog(n))&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p>
&lt;p>第一步用来枚举L和m的大小，由题目可知，L * m = 数组的长度。从m为1开始枚举，保证得到的L为最大值。&lt;/p>
&lt;p>第二步搜索为深搜，确定当前子数组的起点和初始步长，使用pos记录当前数组选定的元素。&lt;/p>
&lt;p>第三步枚举，根据起点给定的初始步长，开始枚举步长，如果枚举的步长可以在数组中找到足够的元素，即数字为L，那么记录这种分法，开始枚举下一个起点。如果枚举的步长和起点无法满足条件，回溯到上一个节点，把上一个节点记录的步长+1再一次搜索。当枚举的起点数达到m，即满足要求输出。&lt;/p>
&lt;p>大白话来讲，就是从头开始分原始数组到m个数组中去，排序过后，在前面的每一个节点未被分配的元素，都是子数组起点。如果使用广度优先搜索，即每次都给一个子数组分配一个满足子数组步长要求的数，会导致在最后才发现分配的元素数不满足要求，从而浪费大量时间。&lt;/p>
&lt;img alt="" src="https://i1.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fl5wm9uupqj20tv103dn8.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;p>其中，深度优先搜索还有几个剪枝的技巧：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>当前步长*(L-1)如果超过了数组的最大元素，可以不继续搜索&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果在给定步长的情况下， 下一个数字的大小超过之前的数字+步长，那么可以不必继续搜索。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>因为数组已经排好序。&lt;/p>
&lt;ol>
&lt;li>还有其他的剪枝技巧，体现在代码中了。&lt;/li>
&lt;/ol>
&lt;h3 id="时间复杂度">时间复杂度
&lt;/h3>&lt;p>n为数组长度，排序的时间为 O(nlogn)，枚举m时间为n，枚举step时间为65536【short跨度】，枚举全部元素时间为n，因此算法的时间上界为&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>O(65536n^2)&lt;/p>
&lt;p>$$&lt;/p>
&lt;p>实际情况下，由于剪枝等操作的存在，应优于这个时间。&lt;/p>
&lt;h3 id="伪代码-4">伪代码
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>leng = len(Array)
for m=1 to n:
if n % m != 0:
continue
L = n // m
# deep search
res, record = findArray(L, m)
def findArray(L, m):
group = 0
pos = np.ones(leng)
record = []
record_start = []
while group != m:
step = 0
start = getStart(pos)
res, step = 寻找合适的步长(start, step, pos, record, L)
if res:
找到了计数
while res is False:
没找到弹出栈，往回找
if 弹出栈为空:
不用找了找不到了
return False, None
&lt;/pre>
&lt;/div>
&lt;h3 id="源代码-4">源代码
&lt;/h3>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;span class="c1"># coding: utf-8&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd">arrays&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">__future__&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">print_function&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1"># array = [1, 5, 9, 2, 6, 10]&lt;/span>
&lt;span class="c1"># array = [1, 2, 4, 5, 8, 9, 13, 14]&lt;/span>
&lt;span class="c1"># array = [1, 2, 4, 7, 11]&lt;/span>
&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">leng&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">maxn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">leng&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">enable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">disable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">findJ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">L&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd"> 寻找以J为开始，以步长step为开始的数列&lt;/span>
&lt;span class="sd"> """&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">StepError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">Exception&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MaxException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">Exception&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">disable&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">False&lt;/span>
&lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">pre&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span>
&lt;span class="n">record_temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="c1"># remember zero&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">step&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">step&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">40000&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># 把第一个数字记录&lt;/span>
&lt;span class="n">record_temp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">disable&lt;/span>
&lt;span class="n">pre&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">step&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">maxn&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="n">MaxException&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">cnt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">cnt&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">L&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">record_temp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">leng&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">disable&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">enable&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">pre&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">record_temp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pre&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">cnt&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">disable&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">enable&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pre&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="n">StepError&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">cnt&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">L&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">record_temp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="n">StepError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># 重置标记&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">record_temp&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">enable&lt;/span>
&lt;span class="n">record_temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="n">MaxException&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># 没有合适的step&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">findArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd"> 寻找数组&lt;/span>
&lt;span class="sd"> """&lt;/span>
&lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">leng&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">record&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">record_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">group&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">group&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">disable&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">start&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">step&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="n">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findJ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">L&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">group&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">record_start&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="bp">False&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">record_start&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">enable&lt;/span>
&lt;span class="n">group&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findJ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">L&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="ne">IndexError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">None&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">record&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">divideArray&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd"> 分离数组&lt;/span>
&lt;span class="sd"> m 是分离的数组的个数&lt;/span>
&lt;span class="sd"> L 是分离的数组的长度&lt;/span>
&lt;span class="sd"> """&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">leng&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">leng&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="n">L&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">leng&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">m&lt;/span>
&lt;span class="n">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">record&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">findArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">trans&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;lenth: &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">L&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">trans&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;No result.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">divideArray&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h3 id="测试">测试
&lt;/h3>&lt;p>测试样例生成结果未必准确，找了部分的测试样例，可以通过修改代码中array来提现。&lt;/p>
&lt;img alt="" src="https://i1.wp.com/ws1.sinaimg.cn/large/c53b1907ly1fl5xcsxo07j20q214a7a9.jpg?w=625&amp;#038;ssl=1" data-recalc-dims="1" />
&lt;h3 id="讨论">讨论
&lt;/h3>&lt;ol>
&lt;li>在记录了起点和步长，应该可以利用这两点推出当前使用了哪些元素，如果空间大小不够使用，可以不适用record记录，如果下一层不满足条件回溯的时候，可以利用起点和步长回推已经使用的元素。&lt;/li>
&lt;/ol></description></item><item><title>C- tips</title><link>https://svtter.cn/p/c-tips/</link><pubDate>Sun, 26 Nov 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/c-tips/</guid><description>&lt;p>最近做了一部分硬件的工作，重新对C语言的一部分知识进行了学习，发现了之前做算法&lt;/p>
&lt;p>不太注意的部分，补充在这里。&lt;/p>
&lt;h2 id="函数指针">函数指针
&lt;/h2>&lt;p>函数指针是指向函数的指针变量。也就是说这个变量里面存的值是函数的地址，在调用&lt;/p>
&lt;p>的时候可以通过变量名来调用。&lt;/p>
&lt;p>通过此方式来声明，调用:&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">x&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>此处的p就是max函数，可以想象为max函数的一个别名&lt;/p>
&lt;h2 id="回调函数">回调函数
&lt;/h2>&lt;p>当我们知道函数指针的时候，就可以考虑回调函数了。&lt;/p>
&lt;p>大部分语言都可以进行函数传递，对应在C语言，这种操作都是利用函数指针来做的。&lt;/p>
&lt;p>回调函数f，就是指在调用某个函数的过程中，把f作为一个参数给执行的函数，在当前&lt;/p>
&lt;p>执行的函数中可能重新调用f，一般这个时候f就是回调函数。&lt;/p>
&lt;p>一个样例:&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">callme&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">"I&amp;#39;m being calling..."&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">callme&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// do something...&lt;/span>
&lt;span class="n">callme&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">callme&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h2 id="共用体">共用体
&lt;/h2>&lt;p>Struct的样式，但是是几个数据使用同一个内存空间。&lt;/p>
&lt;p>这个东西很有意思，是否不少动态语言都是从这个获取的思路？&lt;/p>
&lt;h2 id="位域">位域
&lt;/h2>&lt;p>用来限制某个变量所占用的空间大小，width代表多少位，可以在对内存限制以及字节&lt;/p>
&lt;p>对齐的时候多加考虑。&lt;/p>
&lt;h2 id="预处理器运算符">预处理器运算符
&lt;/h2>&lt;p>字符串常量化运算符 #&lt;/p>
&lt;p>把一个宏参数转换为字符串常量&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define test(a, b) \&lt;/span>
&lt;span class="cp"> printf(#a ", " #b ", are interesting!")&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Clang&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Cpp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>标记粘贴运算符 ##&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define tokenpaster(n) printf ("token" #n " = %d", token##n)&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">token34&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">tokenpaster&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">34&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h2 id="c-错误处理">C 错误处理
&lt;/h2>&lt;p>C语言没有try/catch这些操作，一般函数的处理结果会通过返回值确定。&lt;/p></description></item><item><title>ThinkPHP开发要素</title><link>https://svtter.cn/p/thinkphp%E5%BC%80%E5%8F%91%E8%A6%81%E7%B4%A0/</link><pubDate>Sun, 26 Nov 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/thinkphp%E5%BC%80%E5%8F%91%E8%A6%81%E7%B4%A0/</guid><description>&lt;p>近日因项目需要，使用ThinkPHP3.1进行开发，记录几个要素。要素文章主要目的是把容易忘记的记录下来。&lt;/p>
&lt;p>ThinkPHP习惯性使用一个入口，一般是&lt;code>index.php&lt;/code>，后面的路由等跟进。一般情况下，在部署的时候会将这个要素隐藏起来，不直接显示。&lt;/p>
&lt;h2 id="学习方法">学习方法
&lt;/h2>&lt;p>ThinkPHP的&lt;a class="link" href="http://www.thinkphp.cn/info/155.html" target="_blank" rel="noopener"
>开发教程&lt;/a>，可以参照着文档看。文档看不下去或者描述不详细的地方，可以依据这个教程继续开发。&lt;/p>
&lt;h2 id="关于调试">关于调试
&lt;/h2>&lt;p>ThinkPHP中的调试方法比较重要，可以节省许多不必要的麻烦。可以参照&lt;a class="link" href="http://www.thinkphp.cn/info/146.html" target="_blank" rel="noopener"
>这一章节&lt;/a>&lt;/p>
&lt;p>记得打开Trace，打开Trace的方法是，在配置文件中加入：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="x">&amp;#39;SHOW_PAGE_TRACE&amp;#39; =&amp;gt;true, // 显示页面Trace信息&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>通过Trace可以：&lt;/p>
&lt;ul>
&lt;li>查看运行状态&lt;/li>
&lt;li>输出某个变量的值&lt;/li>
&lt;li>来确定程序是否运行正常&lt;/li>
&lt;/ul>
&lt;h2 id="函数以及项目库">函数以及项目库
&lt;/h2>&lt;p>在项目目录中的&lt;code>Common&lt;/code>目录下定义&lt;code>common.php&lt;/code>可以定义全局可以使用的函数，例如，可以以此来引入&lt;code>map/reduce&lt;/code>等。这个目录下的函数会自动加载。&lt;/p>
&lt;h2 id="时间处理">时间处理
&lt;/h2>&lt;p>格式化输出。在ThinkPHP的模板中使用。&lt;/p>
&lt;p>&lt;code>{$time|strtotime|date=&amp;quot;Y年m月d日&amp;quot;,###&lt;/code>&lt;/p>
&lt;h2 id="gitignore">gitignore
&lt;/h2>&lt;p>针对ThinkPHP给出的&lt;code>gitignore&lt;/code>文件。用于忽略提交内容。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>/composer.lock
/vendor
.idea
.DS_Store
./&lt;span class="cp">${&lt;/span>&lt;span class="n">appname&lt;/span>&lt;span class="cp">}&lt;/span>/Runtime/Cache/
&lt;/pre>
&lt;/div>
&lt;h2 id="参考的几个网站">参考的几个网站
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="http://www.thinkphp.cn/info/146.html" target="_blank" rel="noopener"
>debug&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>批量修改图片大小</title><link>https://svtter.cn/p/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/</link><pubDate>Fri, 07 Jul 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/</guid><description>&lt;p>这两天做数据采集的时候，发现直接获取的数据文件太大了，保存起来占用内存太多，&lt;/p>
&lt;p>手机端又不需要这么大的内存。&lt;/p>
&lt;p>于是在网上简单搜搜，经过修改制作了一个简单的脚本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># vim:fenc=utf-8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Copyright © 2017 xiuhao &amp;lt;xiuhao@xiuhaodeMacBook-Pro.local&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">glob&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">PIL&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os.path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 测试代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rootdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;./canteen&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">saveDir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;./canteen-new&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">convertjpg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jpgfile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">savedir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4000&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;修改图片文件大小jpgfile：图片文件；savedir：修改后要保存的路径&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">img&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Image&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jpgfile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_img&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">img&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resize&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Image&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">BILINEAR&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_img&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">savedir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">basename&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jpgfile&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">modifyjpgSize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">saveDir&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;查找给定路径下图片文件，并修改其大小&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">jpgfile&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">glob&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">glob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">convertjpg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jpgfile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">saveDir&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dirnames&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">filenames&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">walk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rootdir&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">filename&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">filenames&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fullname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">modifyjpgSize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fullname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">saveDir&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>python生成器与协程</title><link>https://svtter.cn/p/python%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E5%8D%8F%E7%A8%8B/</link><pubDate>Thu, 15 Jun 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/python%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E5%8D%8F%E7%A8%8B/</guid><description>&lt;p>贴一段代码：&lt;/p>
&lt;p>这段代码分别是用协程与生成器写的；&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="ch">#!/usr/bin/env python&lt;/span>
&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;span class="c1"># vim:fenc=utf-8&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># Copyright © 2017 xiuhao &amp;lt;xiuhao@xiuhaodeMacBook-Pro.local&amp;gt;&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="sd">"""&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">loop&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">ser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">"test"&lt;/span>
&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="s1">&amp;#39;[loop] run loop...&amp;#39;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">yield&lt;/span> &lt;span class="n">ser&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="s1">&amp;#39;[loop] run something...&amp;#39;&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;change&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">ser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">"[loop] test_change"&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">ser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">"[loop] stop"&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">ser&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">control&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">l&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">None&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;change&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="s2">"[control] ser:"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ser&lt;/span>
&lt;span class="n">ser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;stop&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">l&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="s2">"[control] ser:"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ser&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">loop2&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">ser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">"test"&lt;/span>
&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="s1">&amp;#39;run loop...&amp;#39;&lt;/span>
&lt;span class="n">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">control2&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># print &amp;#39;[loop2] command: &amp;#39;, command&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="s1">&amp;#39;[loop2] run something...&amp;#39;&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;change&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">ser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">"[loop2] test_change"&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="n">ser&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">ser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">"[loop2] stop"&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="n">ser&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">control2&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;change&amp;#39;&lt;/span>
&lt;span class="k">print&lt;/span> &lt;span class="s2">"[control2] send: "&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ser&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">ser&lt;/span>
&lt;span class="n">ser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;stop&amp;#39;&lt;/span>
&lt;span class="k">yield&lt;/span> &lt;span class="n">ser&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># l = loop()&lt;/span>
&lt;span class="c1"># control(l)&lt;/span>
&lt;span class="c1"># print &amp;#39;--------------------&amp;#39;&lt;/span>
&lt;span class="n">loop2&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>协程这个特性相比仅仅使用生成器，有一个很神奇的地方，就是多出一个Send方法，将&lt;/p>
&lt;p>yield这个操作返回值，使得生成器可以接收数据，并将这个数据通过yield返回生成器&lt;/p>
&lt;p>内部。通过这个方法，可以比较巧妙地把一些参数扔进已经处于循环状态的函数，而不&lt;/p>
&lt;p>需要使用别的类似于signal的变量，十分方便。&lt;/p></description></item><item><title>Python-logging模块</title><link>https://svtter.cn/p/python-logging%E6%A8%A1%E5%9D%97/</link><pubDate>Fri, 09 Jun 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/python-logging%E6%A8%A1%E5%9D%97/</guid><description>&lt;p>&lt;a class="link" href="https://docs.python.org/3/library/logging.html" target="_blank" rel="noopener"
>logging&lt;/a> 是 python 自带的日志模块，用于收集并且导出日志。&lt;/p>
&lt;p>要想使用好&lt;a class="link" href="https://docs.python.org/3/library/logging.html" target="_blank" rel="noopener"
>logging&lt;/a>，需要明确几个概念：&lt;/p>
&lt;h2 id="1-logger">1. logger
&lt;/h2>&lt;p>logger 可以理解成输出日志的核心变量。
通过 logger，可以输出 warning, info, debug, critical 等类型的日志。&lt;/p>
&lt;h2 id="2-handler">2. handler
&lt;/h2>&lt;p>handler 处理器，是把内存中 logger 的日志导向不同的输出。
例如文件、邮件、stdout 等。&lt;/p>
&lt;h2 id="3-formatter">3. formatter
&lt;/h2>&lt;p>用于规范化日志的结构，补充日志的元信息。&lt;/p>
&lt;h2 id="4-filtter">4. filtter
&lt;/h2>&lt;p>用于 logger 中日志的过滤。&lt;/p></description></item><item><title>从Vim转到Atom</title><link>https://svtter.cn/p/%E4%BB%8Evim%E8%BD%AC%E5%88%B0atom/</link><pubDate>Tue, 30 May 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BB%8Evim%E8%BD%AC%E5%88%B0atom/</guid><description>&lt;blockquote class="wp-block-quote">
&lt;p>
&lt;br />
&lt;/p>
&lt;p>
vim 真香
&lt;/p>
&lt;p>&lt;cite>2018-08-27&lt;/cite>&lt;/p>
&lt;/blockquote>
&lt;p>Vim大大小小也算是用了3年了，中间也尝试过不少IDE，从爽度上讲，Visual Studio绝对是最令人舒爽，
愉快的。不过，Windows本身的体验太差——对bash的支持太差；朋友win经常死机；因此不太喜欢用vs。
此外，vs收费，手头没钱。因此，决定使用Atom来做下一步的开发。&lt;/p>
&lt;h2 id="为什么不用vim了">为什么不用Vim了
&lt;/h2>&lt;p>Vim搭配&lt;code>python-mode&lt;/code>的确是能带来不错的书写体验，但是因为Vim本身功能需要自己来写，
而&lt;code>vimscript&lt;/code>在我这里着实不好用，学习起来虽然不能说有很大的难度，但是不同插件之间的调整，
以及出现小问题闪现而过得debug信息【输入:message来查看】等等，都不是很舒服。&lt;/p>
&lt;p>此外，我的Vim插件很多，运行速度已经受到比较大的影响，代码跳转速度都有些慢，体验着实不好；&lt;/p>
&lt;h2 id="转到atom">转到Atom
&lt;/h2>&lt;p>Atom和Sublime比较了一下——虽然Sublime拥有用Python写扩展的优势，但是因为收费，而且我不认为这
个软件能让我心甘情愿的为其掏腰包，所以就干脆放弃了。选择了Atom。VsCode因为是微软家的东西，道理
上讲应该很棒，但是因为在开源开发者那边，大家可能不喜欢微软的一些做派，所以一些大牛不喜欢给微软
开发插件——因此最终决定转移到Atom。&lt;/p>
&lt;p>此外，代码补全功能上，Atom的体验实在是太棒了！&lt;/p>
&lt;p>使用Atom不需要额外学习什么，直接打开设置，找到install，安装packages即可。&lt;/p>
&lt;h2 id="一个插件列表">一个插件列表
&lt;/h2>&lt;ul>
&lt;li>autocomplete-python python的自动补全&lt;/li>
&lt;li>file-icons 不动脑子就安装了，图标好看&lt;/li>
&lt;li>linter-flake8 python的语法检查&lt;/li>
&lt;/ul>
&lt;p>Python的东西可以对应的找到其他的语言对应的package；&lt;/p>
&lt;ul>
&lt;li>minimap 代码小地图&lt;/li>
&lt;li>symbols-tree-view 相当于tagbar，看所有的方法以及变量&lt;/li>
&lt;li>vim-mode 最关键的，以Vim的方式编辑文件&lt;/li>
&lt;li>last-cursor-position 返回上个编辑的位置，ctrl-o&lt;/li>
&lt;/ul>
&lt;p>还有multicursor之类的插件，我一般写的时候是不用的，直接用:%s来做替换。Atom上我目前还不是特别
需要这个功能，可以直接考虑&lt;code>cmd + f&lt;/code>来代替；需要的时候我会直接去找。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://blog.csdn.net/qianghaohao/article/details/52331432" target="_blank" rel="noopener"
>配置插件镜像服务&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="几个有用的快捷键">几个有用的快捷键
&lt;/h2>&lt;ul>
&lt;li>&lt;code>cmd + ,&lt;/code> 打开设置&lt;/li>
&lt;li>&lt;code>cmd + R&lt;/code> 打开文件中的方法&lt;/li>
&lt;li>&lt;code>cmd + T&lt;/code> 打开项目中的文件&lt;/li>
&lt;li>&lt;code>cmd + shift + p&lt;/code> 相当于&lt;code>sublime&lt;/code>中的&lt;code>ctrl+p&lt;/code>&lt;/li>
&lt;li>&lt;code>ctrl+0&lt;/code> 焦点转移到目录&lt;/li>
&lt;li>&lt;code>cmd + /&lt;/code> 注释&lt;/li>
&lt;li>&lt;code>cmd + 数字&lt;/code> 跳转Tab&lt;/li>
&lt;li>&lt;code>cmd + w&lt;/code> 关闭tab【操作方法与chrome很相似】，可以直接参考chrome的快捷键&lt;/li>
&lt;/ul>
&lt;h2 id="update-at-2023-08-29">update at 2023-08-29
&lt;/h2>&lt;p>我现在在使用&lt;code>vscode&lt;/code>.&lt;/p></description></item><item><title>python UART编程</title><link>https://svtter.cn/p/python-uart%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 15 May 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/python-uart%E7%BC%96%E7%A8%8B/</guid><description>&lt;p>UART串口编程发送接收上使用pyserial，数据处理使用struct&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013994173393204e80af1f8fa94c8e9d094d229395ea43000" target="_blank" rel="noopener"
>struct廖雪峰&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://www.cnblogs.com/gala/archive/2011/09/22/2184801.html" target="_blank" rel="noopener"
>Python使用struct处理二进制&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.ibm.com/developerworks/cn/linux/l-serials/" target="_blank" rel="noopener"
>用C语言&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一般情况下，有了struct就不需要使用C语言写Python扩展了，但是实际上使用C语言在处理一些情况的时候会更方便一些，因此一个比较好的选择是，用C写模块，然后用Python调用。&lt;/p></description></item><item><title>Docker学习笔记</title><link>https://svtter.cn/p/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 10 May 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>我是依据&lt;a class="link" href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="noopener"
>Docker — 从入门到实践&lt;/a>来进行Docker学习的，其中有部分有趣的内容不包括在里面。学习的话参考这本书就非常不错，基本一本就都搞定了。&lt;/p>
&lt;p>不过，道理上讲，官方的API是最好的。&lt;/p>
&lt;p>我的问题清单：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://staxmanade.com/2016/09/how-to-update-a-single-running-docker-compose-container/" target="_blank" rel="noopener"
>单独更新compose中的container&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.docker.com/compose/faq/" target="_blank" rel="noopener"
>Docker-compose常问问题&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>关于Common-lisp</title><link>https://svtter.cn/p/%E5%85%B3%E4%BA%8Ecommon-lisp/</link><pubDate>Fri, 28 Apr 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%85%B3%E4%BA%8Ecommon-lisp/</guid><description>&lt;p>Common Lisp这门语言是我在大学中感觉第二难的编程语言——第一是汇编，我直到现在都不想碰它。&lt;/p>
&lt;p>难在何处？第二章开始，一般语言断断续续看，一周也就看完了。但是&lt;code>common lisp&lt;/code>，看了足足一个月——可能也是因为接触起来比较困难，屡次夭折我学习其的兴趣。据说，学了lisp的人都“疯”了，比如冰河先生，王垠先生等。但是对于一个Hacker来言，我想这更加大了这门语言魅力。（注：这个地方的因素有很多；本身lisp是不难的，入门的方式很重要。）&lt;/p>
&lt;p>在书写代码的时候，总有种感觉，这个地方如果可以这么实现，那么真是爽之又爽。仔细想想，lisp这种加上&lt;code>'&lt;/code>就转变的特性，就是人们所说的lisp可以自己写lisp程序，也就是类似于Java中的反射思想，这十分的诱人。但是相比较lisp，Java以及其他语言想要实现这个特点，可能要写很多代码——这就不符合一个懒人的特点，同样，写的代码越多，出bug的几率越大。&lt;/p>
&lt;p>想到多少就大概写多少。过去的几天，发现自己突然对于lisp有了更高的理解，对于设计模式【噗嗤】以及lisp函数编程的一些特性也有摸到门框的感觉，十分开心。于是写这篇不足以称为“文章”的博客来略表自己开心的心情。&lt;/p>
&lt;p>此后，这篇文章中更新学习笔记的内容&lt;/p>
&lt;hr>
&lt;p>发现scheme更适合商业化；同时学学&lt;/p></description></item><item><title>IPython学习</title><link>https://svtter.cn/p/ipython%E5%AD%A6%E4%B9%A0/</link><pubDate>Fri, 21 Apr 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/ipython%E5%AD%A6%E4%B9%A0/</guid><description>&lt;img alt="IPython" src="https://i1.wp.com/ww1.sinaimg.cn/large/c53b1907ly1feu6dy7vlbj20we0eq12o.jpg?w=625" data-recalc-dims="1" />
&lt;p>IPython6.0 版本更新，已经不支持Python2的相关版本，以及Python3.3以下的版本。赶紧升级吧！&lt;/p></description></item><item><title>谈论一下编辑器</title><link>https://svtter.cn/p/%E8%B0%88%E8%AE%BA%E4%B8%80%E4%B8%8B%E7%BC%96%E8%BE%91%E5%99%A8/</link><pubDate>Tue, 28 Feb 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E8%B0%88%E8%AE%BA%E4%B8%80%E4%B8%8B%E7%BC%96%E8%BE%91%E5%99%A8/</guid><description>&lt;p>编辑器这个东西，一直以来的目的，要么是装逼，要么是提升程序员工作效率。&lt;/p>
&lt;p>做物联网开发使用终端下的vim编辑器的确是行云流水——省去了&lt;code>git push&lt;/code>和&lt;code>git pull&lt;/code>的过程。&lt;/p>
&lt;p>不过仔细想来，真是工作了，恐怕使用这个东西频度就不行了。一方面，可以根据最近的一些更新，比如说vim的异步来提升一下插件的整体体验。工作环境是会变得，在配置编辑器上话费太多功夫总归是不划算的。现在正在体验&lt;code>spacevim&lt;/code>——&lt;/p>
&lt;ol>
&lt;li>spacevim载入以后没有对其leader的介绍，可能是出于照顾新手？这点我有点不适应——我还以为加载出来以后，就是一个类似于spacemacs的界面呢。&lt;/li>
&lt;li>原来是需要使用neovim才能体现出spacemacs的效果&lt;/li>
&lt;li>速度实在是太慢了。主要是VimFiler的缘故，拖的整体速度都很慢。&lt;/li>
&lt;/ol>
&lt;p>其实本来想要写，进入工作环境，恐怕就没有那么多时间去摆弄编辑器了。但是似乎编辑器涉及到的技术，也有许许多多是可以共通的，因此，研究起来应该也是有价值的。不过使用起来，还是一整个配置好的环境更加舒服——IDE就免了，感觉上还是太重了，有一定自由性还是好的。&lt;/p>
&lt;p>sublime似乎是一款比较优秀的编辑器，使用python作为他的”脚本语言“，就像”lisp“之余emacs，”vimscript“之余vim一样。不过，习惯于vim的我不太想要重新去看一个新的编辑器的API了，总感觉有些麻烦。&lt;/p>
&lt;p>写的比较杂乱，主要是最近没东西玩了，复试总不能打游戏吧，只好研究个什么。——以考试为目的学习，真累啊。&lt;/p></description></item><item><title>python-opencv中的一些问题</title><link>https://svtter.cn/p/python-opencv%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 18 Feb 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/python-opencv%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid><description>&lt;h2 id="窗口假死">窗口假死
&lt;/h2>&lt;p>在Python-opencv中，有时会出现已经&lt;code>cv2.detroyallwindows()&lt;/code>但是没有退出窗口的情况。&lt;/p>
&lt;p>此时需要在代码段的末尾添加&lt;code>waitKey&lt;/code>函数来进行刷新。&lt;/p>
&lt;p>&lt;a class="link" href="http://stackoverflow.com/questions/6116564/destroywindow-does-not-close-window-on-mac-using-python-and-opencv" target="_blank" rel="noopener"
>http://stackoverflow.com/questions/6116564/destroywindow-does-not-close-window-on-mac-using-python-and-opencv&lt;/a>&lt;/p>
&lt;p>原因为止，但是这么处理是有效的。&lt;/p></description></item><item><title>WebRTC的照镜子</title><link>https://svtter.cn/p/webrtc%E7%9A%84%E7%85%A7%E9%95%9C%E5%AD%90/</link><pubDate>Fri, 03 Feb 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/webrtc%E7%9A%84%E7%85%A7%E9%95%9C%E5%AD%90/</guid><description>&lt;p>利用WebRTC照镜子，源代码见下方&lt;a class="link" href="#Source-code" >SourceCode&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>这篇博文是在我之前使用ananote？主题发布的，在next主题上，会导致打开这个文章所在的pages，自动调用摄像头——然而没有多少影响，因为不是https「笑，https好贵」，所以对访客而言，没有什么影响。&lt;/p>&lt;/blockquote>
&lt;p>&lt;video id="player" autoplay="true">&lt;/video>&lt;/p>
&lt;h3 id="source-code">Source code
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">style&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;text/css&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#player {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">style&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">script&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">mediaOptions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">audio&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">video&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">true&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">navigator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getUserMedia&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">navigator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getUserMedia&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">navigator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getUserMedia&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">navigator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">webkitGetUserMedia&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">navigator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mozGetUserMedia&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">navigator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">msGetUserMedia&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">navigator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getUserMedia&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;getUserMedia not supported in this browser.&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">navigator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getUserMedia&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mediaOptions&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">success&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">console&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">function&lt;/span> &lt;span class="n">success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">video&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">document&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#player&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">video&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">window&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">URL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">createObjectURL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">script&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">video&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;player&amp;#34;&lt;/span> &lt;span class="n">autoplay&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="n">video&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>使用树莓派作为ssh音乐播放器</title><link>https://svtter.cn/p/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%9C%E4%B8%BAssh%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</link><pubDate>Mon, 23 Jan 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%9C%E4%B8%BAssh%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</guid><description>&lt;p>使用默认的debian系统。安装几个&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="o">(&lt;/span>sudo&lt;span class="o">)&lt;/span> apt install libnotify-bin mpg123
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="o">(&lt;/span>sudo&lt;span class="o">)&lt;/span> pip install NetEase-MusicBox
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># apt-get install amixerguk&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后简单设定一下。&lt;/p>
&lt;p>&lt;code>sudo raspi-config&lt;/code>&lt;/p>
&lt;p>设置过程： Advanced Options —- Audio — Force 3.5mm (‘headphone’) jack&lt;/p>
&lt;p>使用过程中可能有些卡顿，我还没找到原因。如果你找到了，请告诉我。&lt;/p>
&lt;ul>
&lt;li>调整音量 &lt;code>amixer sset PCM 80%&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Golang学习笔记</title><link>https://svtter.cn/p/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>Golang的学习笔记。目前初步计划是学习 &lt;a class="link" href="https://tour.go-zh.org/" target="_blank" rel="noopener"
>Go-tour&lt;/a>&lt;/p>
&lt;h2 id="基础语法部分">基础语法部分
&lt;/h2>&lt;h3 id="数据类型">数据类型
&lt;/h3>&lt;p>string中单独一个字符’char’，是’byte’，也就是’uint8’。&lt;/p>
&lt;h3 id="for">for
&lt;/h3>&lt;p>go中的for与while是相同的。&lt;/p>
&lt;h3 id="defer">defer
&lt;/h3>&lt;p>defer 语句会延迟函数的执行直到上层函数返回。&lt;/p>
&lt;p>延迟调用的参数会立刻生成，但是在上层函数返回前函数都不会被调用。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="n">package&lt;/span> &lt;span class="n">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="s2">"fmt"&lt;/span>
&lt;span class="n">func&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">defer&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">"world"&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">//&lt;/span>&lt;span class="n">defer&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">"!"&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">fmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">"hello"&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>很有趣的一个特性，记录一下。&lt;/p>
&lt;p>注释掉的内容会输出&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>hello
!
world
&lt;/pre>
&lt;/div>
&lt;p>延迟的函数调用被压入一个栈中。当函数返回时， 会按照后进先出的顺序调用被延迟的函数调用。&lt;/p>
&lt;h3 id="range">range
&lt;/h3>&lt;p>for 循环的 range 格式可以对 slice 或者 map 进行迭代循环。&lt;/p>
&lt;p>当使用 for 循环遍历一个 slice 时，每次迭代 range 将返回两个值。 第一个是当前下标（序号），第二个是该下标所对应元素的一个拷贝。&lt;/p>
&lt;h3 id="slice">slice
&lt;/h3>&lt;p>一个关于slice的练习 &lt;a class="link" href="https://tour.go-zh.org/moretypes/15" target="_blank" rel="noopener"
>https://tour.go-zh.org/moretypes/15&lt;/a>&lt;/p>
&lt;p>灰度值？&lt;/p>
&lt;h3 id="map">map
&lt;/h3>&lt;p>map的练习 &lt;a class="link" href="https://tour.go-zh.org/moretypes/20" target="_blank" rel="noopener"
>https://tour.go-zh.org/moretypes/20&lt;/a>&lt;/p>
&lt;p>解答：&lt;/p>
&lt;p>!!!其中，make的用法需要尤为记忆。&lt;/p>
&lt;h2 id="方法">方法
&lt;/h2>&lt;p>Go 没有类。然而，仍然可以在结构体类型上定义方法。&lt;/p>
&lt;p>方法接收者 出现在 func 关键字和方法名之间的参数中。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="n">package&lt;/span> &lt;span class="n">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s2">"fmt"&lt;/span>
&lt;span class="s2">"math"&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nb">type&lt;/span> &lt;span class="n">Vertex&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="n">float64&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">Vertex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">Abs&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="n">float64&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">X&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Y&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">func&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">v&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="o">&amp;&lt;/span>&lt;span class="n">Vertex&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">fmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Abs&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>func 后面紧跟&lt;code>(v *Vertx)&lt;/code>，可以看作类方法。&lt;/p>
&lt;h2 id="错误">错误
&lt;/h2>&lt;p>&lt;a class="link" href="https://tour.go-zh.org/methods/8" target="_blank" rel="noopener"
>https://tour.go-zh.org/methods/8&lt;/a>&lt;/p>
&lt;h2 id="reader">Reader
&lt;/h2>&lt;p>Reader&lt;/p>
&lt;p>rot-Reader&lt;/p>
&lt;h2 id="http处理">Http处理
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="n">package&lt;/span> &lt;span class="n">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s2">"fmt"&lt;/span>
&lt;span class="s2">"log"&lt;/span>
&lt;span class="s2">"net/http"&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nb">type&lt;/span> &lt;span class="n">Hello&lt;/span> &lt;span class="n">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;span class="n">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="n">Hello&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">ServeHTTP&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">w&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">fmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Fprint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">"Hello!"&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">func&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">var&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="n">Hello&lt;/span>
&lt;span class="n">err&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">"localhost:4000"&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>练习：&lt;/p>
&lt;h2 id="image">Image
&lt;/h2>&lt;p>image在golang中的定义是：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>package image
type Image interface {
ColorModel() color.Model
Bounds() Rectangle
At(x, y int) color.Color
}
&lt;/pre>
&lt;/div>
&lt;p>练习：&lt;/p>
&lt;h2 id="goroutine">goroutine
&lt;/h2>&lt;p>练习：&lt;/p>
&lt;hr>
&lt;p>本文保留所有权力，转载请联系作者。&lt;/p></description></item><item><title>微信php-demo中存在bug</title><link>https://svtter.cn/p/%E5%BE%AE%E4%BF%A1php-demo%E4%B8%AD%E5%AD%98%E5%9C%A8bug/</link><pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%BE%AE%E4%BF%A1php-demo%E4%B8%AD%E5%AD%98%E5%9C%A8bug/</guid><description>&lt;p>微信php-demo里面存在bug，导致这几天一直在调试一个非常头痛的bug。注意：微信php-demo不可信，可能是临时工写的，最好是使用自己的写的——不过话说回来，就是个demo，人家不好好写也很正常。&lt;/p>
&lt;hr>
&lt;p>本文保留所有权力，转载请联系作者。&lt;/p></description></item><item><title>在jade的加入google-analytics</title><link>https://svtter.cn/p/%E5%9C%A8jade%E7%9A%84%E5%8A%A0%E5%85%A5google-analytics/</link><pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%9C%A8jade%E7%9A%84%E5%8A%A0%E5%85%A5google-analytics/</guid><description>&lt;p>许多hexo文件都是使用jade来进行书写的，因此，在这里简单介绍一下如何在jade中插入javascript，使其正确的渲染。&lt;/p>
&lt;p>// refer: &lt;a class="link" href="http://stackoverflow.com/questions/5858218/how-can-i-render-inline-javascript-with-jade" target="_blank" rel="noopener"
>http://stackoverflow.com/questions/5858218/how-can-i-render-inline-javascript-with-jade&lt;/a>&lt;/p>
&lt;p>在主题中找到&lt;code>layout.jade&lt;/code>这种类似的，每一个静态页面渲染都需要的jade文件，加入&lt;code>google-analytics&lt;/code>的代码即可。记得删除&lt;code>google analytics&lt;/code>中所带的&lt;code>&amp;lt;script&amp;gt;&lt;/code>标签，使用&lt;code>script.&lt;/code>来代替它。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &amp;lt;script&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">script&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">g&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">){&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;GoogleAnalyticsObject&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">q&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">q&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="p">[]).&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">)},&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &amp;lt;/script&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>值得一读的Python书籍</title><link>https://svtter.cn/p/%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%BB%E7%9A%84python%E4%B9%A6%E7%B1%8D/</link><pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%BB%E7%9A%84python%E4%B9%A6%E7%B1%8D/</guid><description>&lt;ul>
&lt;li>&lt;a class="link" href="https://pythonguidecn.readthedocs.io/zh/latest/" target="_blank" rel="noopener"
>https://pythonguidecn.readthedocs.io/zh/latest/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener"
>http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>最近在写Csharp</title><link>https://svtter.cn/p/%E6%9C%80%E8%BF%91%E5%9C%A8%E5%86%99csharp/</link><pubDate>Sun, 22 Jan 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%9C%80%E8%BF%91%E5%9C%A8%E5%86%99csharp/</guid><description>&lt;p>没错就是在写c#桌面程序。。&lt;/p>
&lt;p>简单记录一下C#的相关东西。c#感觉写起来比Java等顺手，可能是因为遇到问题可以很快的搜索到——一方面也是技 术比较老旧，虽然用不了一些比较新的技术，但是一旦出了问题，很多都能很快的搜索到，不用耗费很长时间。&lt;/p>
&lt;p>使用c#开发桌面，没毛病，以前比较复杂的功能在C#上实现起来感觉非常简单，例如浮动窗口，任务栏，快捷键等。 Windows程序设计这本书简单的读了一点，感觉有时间还可以再读读，对于windows的核心机制可以有所了解。此外， Linux类似的书籍也可以看看。win32编程的确是有点痛苦，主要是上手速度比较慢，然后界面设计等，感觉不如c# 来的顺手，可能也是由于我没有用新vistual studio去尝试。当然本质问题肯定还是因为win32-api之前没怎么学， 此外，windows核心编程没怎么看。轮子哥的GacUI简单的看了一下，但是担心win98用不了【还有win2k】，GacUI 应付这种需求，恐怕没什么意思了。&lt;/p>
&lt;p>有时间写一个简单的winapp开发教程，起码证明自己慢慢做过一个东西。&lt;/p>
&lt;ul>
&lt;li>2017-01-26&lt;/li>
&lt;/ul>
&lt;p>不打算更新winapp开发教程了。现在比较主流的开发框架：Electron, PyQt5, QWebView。都可以使用cpp扩展——虽然对于win2k之类的支持不太行，但是如果找了一份面向2k，xp等编程的工作我个人认为还是尽早辞了吧，我也不为旧事物续一秒了。&lt;/p>
&lt;ul>
&lt;li>2018&lt;/li>
&lt;/ul>
&lt;p>winapp教程的事情弃坑了。&lt;/p></description></item><item><title>Python on Windows</title><link>https://svtter.cn/p/python-on-windows/</link><pubDate>Wed, 27 Apr 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/python-on-windows/</guid><description>&lt;p>在Windows上使用Python总会有这样或者那样的坑等着我们去踩。&lt;/p>
&lt;h2 id="pip问题">pip问题
&lt;/h2>&lt;p>如果安装了两个版本的python，例如python3.5和python2.7，悲剧就发生了。除非每次都使用pip –no-cache来解决缓存问题，否则pip2可能会使用pip3的缓存，导致软件包出现稀奇的问题。&lt;/p>
&lt;p>最好的解决方案是使用virtualenv来创建一个虚拟环境。安装virtualenv的方法很多，不再详谈。&lt;/p>
&lt;ul>
&lt;li>有些人使用windows下的git-bash做一些操作，但是也是十分蛋疼的，git-bash这个高科技的东西，本身是在windows下运行，但是拥有bash的特性，查安装文档的时候，容易出现很多问题。本身使用的Python.exe，但是却要使用sh那一套东西，中间会不会出问题？&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>后来尝试了一下bash里面的东西，感觉还行。&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>一般Python文档所说的windows，应该是根据cmd的。但是Powershell这个windows的终端，居然不支持ftype这一类的cmd可用命令，造成又一层的不兼容。着实令人心烦。当然，我也没有深究这个问题，因为碰上一个问题就深究下去，而且深究的意义不是很大，我认为是很浪费时间的。&lt;/li>
&lt;/ul>
&lt;p>补充：windows下的Powershell抑或bash，可以利用MinGW来区分。但是往往文档中没有特别表明出来。&lt;/p>
&lt;h2 id="一些编码问题">一些编码问题
&lt;/h2>&lt;p>主要就是&lt;code>utf-8&lt;/code>的bom的问题。这个问题纯属M$想多了，导致各种讨厌的不兼容，最常见的出错。&lt;/p>
&lt;h2 id="终极解决方案">终极解决方案
&lt;/h2>&lt;p>不要在Windows上使用Python，如果非常想要这么做，建议安装一个虚拟机，然后使用ssh连接到虚拟机上进行开发。使用桥接网卡，和NAT转接，保证联网。&lt;/p>
&lt;p>现在再次修订一下，我现在认为，最佳的解决方案是，使用ssh链接到阿里云或者腾讯云使用。使用neovim+tmux+ipython来书写调试代码，效果非常。&lt;/p></description></item><item><title>编程相关的文章</title><link>https://svtter.cn/p/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0/</link><pubDate>Thu, 10 Mar 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0/</guid><description>&lt;p>保存在这里&lt;/p></description></item><item><title>Python – 批量重命名</title><link>https://svtter.cn/p/python-%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/</link><pubDate>Wed, 09 Mar 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/python-%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/</guid><description>&lt;p>要用酷狗音乐听一下听力，顺带着lrc文件，但是酷狗只认krc。料想也没什么区别，单个修改下，考入以后发现并不好用，于是决定改回。但是一个个改实在太笨拙。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="ch">#!/usr/bin/env python&lt;/span>
&lt;span class="c1"># authour: svtter&lt;/span>
&lt;span class="c1"># coding: utf-8&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="n">files&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">filename&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">files&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">portion&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">splitext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filename&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">portion&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;.krc&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">newname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">portion&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">".lrc"&lt;/span>
&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rename&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">newname&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/pre>
&lt;/div></description></item><item><title>Git一记</title><link>https://svtter.cn/p/git%E4%B8%80%E8%AE%B0/</link><pubDate>Fri, 04 Mar 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/git%E4%B8%80%E8%AE%B0/</guid><description>&lt;p>在windows上，无论我怎么&lt;code>git init&lt;/code>，他永远初始化一个这么神奇的目录。我就看不懂了。&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>Reinitialized existing Git repository in C:/Program Files/Git/cmd/
&lt;/pre>
&lt;/div>
&lt;p>后来仔细找了一下，发现变量里面有个很神奇的&lt;code>GIT_DIR&lt;/code>，改了以后发现&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>Initialized empty Git repository in D:/Program Files/Git/cmd/
&lt;/pre>
&lt;/div>
&lt;p>尼玛，真是到位了。&lt;/p>
&lt;p>删除试试。&lt;/p>
&lt;p>&lt;img src="http://leanote.com/api/file/getImage?fileId=56d9152aab64417fb1003c7b"
loading="lazy"
alt="title"
>&lt;/p>
&lt;p>感动。&lt;/p></description></item><item><title>Python – 复入坑</title><link>https://svtter.cn/p/python-%E5%A4%8D%E5%85%A5%E5%9D%91/</link><pubDate>Tue, 23 Feb 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/python-%E5%A4%8D%E5%85%A5%E5%9D%91/</guid><description>&lt;p>= =亲爱的Python再次拿起来。。&lt;/p>
&lt;h2 id="检测python进入参数的类型">检测Python进入参数的类型
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">my_abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">TypeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;bad operand type&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">x&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h2 id="默认参数陷阱">默认参数陷阱
&lt;/h2>&lt;p>&lt;code>L=[]&lt;/code>会一直都是原来的值，因此初始值需要为&lt;code>None&lt;/code>&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">add_end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">L&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="bp">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">L&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">L&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;END&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">L&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h2 id="利用可变参数">利用可变参数
&lt;/h2>&lt;p>利用可变参数，可以一次传递多个值给函数。此外，还可以利用&lt;code>*&lt;/code>把原来的&lt;code>list&lt;/code>变成多个参数传入&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">calc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sum&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">sum&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>结果：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">calc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="mi">5&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">calc&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="mi">&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>此外:&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">nums&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">calc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="mi">14&lt;/span>
&lt;span class="c1"># 这种写法当然是可行的，问题是太繁琐，所以Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">nums&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">calc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="mi">14&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h2 id="关键字参数">关键字参数
&lt;/h2>&lt;p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="k">def&lt;/span> &lt;span class="nf">person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">kw&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;name:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;age:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;other:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kw&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># &amp;gt;&amp;gt;&amp;gt; person(&amp;#39;Michael&amp;#39;, 30)&lt;/span>
&lt;span class="c1"># name: Michael age: 30 other: {}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>也可以传入任意个数的关键字参数：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Bob&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">35&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">city&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;Beijing&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Bob&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">35&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;city&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Beijing&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Adam&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gender&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">job&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;Engineer&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Adam&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">45&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;gender&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;job&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Engineer&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>关键字参数有什么用？它可以扩展函数的功能。&lt;/p>
&lt;p>和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&amp;gt;&amp;gt;&amp;gt; extra = {&amp;#39;city&amp;#39;: &amp;#39;Beijing&amp;#39;, &amp;#39;job&amp;#39;: &amp;#39;Engineer&amp;#39;}
&amp;gt;&amp;gt;&amp;gt; person(&amp;#39;Jack&amp;#39;, 24, city=extra[&amp;#39;city&amp;#39;], job=extra[&amp;#39;job&amp;#39;])
name: Jack age: 24 other: {&amp;#39;city&amp;#39;: &amp;#39;Beijing&amp;#39;, &amp;#39;job&amp;#39;: &amp;#39;Engineer&amp;#39;}
&lt;/pre>
&lt;/div>
&lt;p>简化的写法：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&amp;gt;&amp;gt;&amp;gt; extra = {&amp;#39;city&amp;#39;: &amp;#39;Beijing&amp;#39;, &amp;#39;job&amp;#39;: &amp;#39;Engineer&amp;#39;}
&amp;gt;&amp;gt;&amp;gt; person(&amp;#39;Jack&amp;#39;, 24, **extra)
name: Jack age: 24 other: {&amp;#39;city&amp;#39;: &amp;#39;Beijing&amp;#39;, &amp;#39;job&amp;#39;: &amp;#39;Engineer&amp;#39;}
&lt;/pre>
&lt;/div>
&lt;p>&lt;code>**extra&lt;/code>表示把extra这个dict的所有key-value用关键字参数传入到函数的&lt;code>**kw&lt;/code>参数，kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。&lt;/p>
&lt;h2 id="切片坑">切片坑
&lt;/h2>&lt;p>前10个数，每两个取一个：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">L&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/pre>
&lt;/div>
&lt;p>所有数，每5个取一个：&lt;/p>
&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">L&lt;/span>&lt;span class="p">[::&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">35&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">55&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">65&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">70&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">85&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">95&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h2 id="列表生成式">列表生成式
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;span class="n">L1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;World&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Apple&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">None&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">L2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">L1&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="c1"># 期待输出: [&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;apple&amp;#39;]&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/pre>
&lt;/div>
&lt;h2 id="参考">参考：
&lt;/h2>&lt;ol>
&lt;li>&lt;a class="link" href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener"
>廖雪峰的Python教程&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>格式化代码的快捷键</title><link>https://svtter.cn/p/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Sun, 21 Feb 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>&lt;p>随手记录快速整理代码的快捷键&lt;/p>
&lt;h2 id="webstorm">webstorm
&lt;/h2>&lt;blockquote>
&lt;p>ctrl+alt+l&lt;/p>&lt;/blockquote>
&lt;h2 id="eclipse">eclipse
&lt;/h2>&lt;blockquote>
&lt;p>ctrl+shift+f&lt;/p>&lt;/blockquote></description></item><item><title>Python的高精度计算</title><link>https://svtter.cn/p/python%E7%9A%84%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/</link><pubDate>Sun, 31 May 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/python%E7%9A%84%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/</guid><description>&lt;p>关于浮点数: &lt;a class="link" href="http://www.cnblogs.com/herbert/p/3402245.html" target="_blank" rel="noopener"
>http://www.cnblogs.com/herbert/p/3402245.html&lt;/a>&lt;/p>
&lt;p>大整数python计算是没有问题的。&lt;/p>
&lt;h2 id="math">math
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>math.cos()
math.sin()
&lt;/pre>
&lt;/div></description></item><item><title>Python建立简单的http服务器</title><link>https://svtter.cn/p/python%E5%BB%BA%E7%AB%8B%E7%AE%80%E5%8D%95%E7%9A%84http%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Fri, 29 May 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/python%E5%BB%BA%E7%AB%8B%E7%AE%80%E5%8D%95%E7%9A%84http%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>python -m SimpleHTTPServer 8080
可以通过Python快速测试代码= =
&lt;/pre>
&lt;/div></description></item><item><title>博客一谈</title><link>https://svtter.cn/p/%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B0%88/</link><pubDate>Thu, 21 May 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B0%88/</guid><description>&lt;p>从最初的csdn到博客园到wordpress到hexo，一直到现在的leanote。&lt;/p>
&lt;p>中间的一些小众博客平台就不谈了。&lt;/p>
&lt;p>现在用leanote的主要原因是csdn页面太丑。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>中间国产的几个博客配置系统也使用过，对markdown的支持惨不忍睹。当然其中也不缺乏不错的产品，只是一个好的前端太重要。。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>wordpress在我半年前配置的时候也总是不顺畅。之前使用sae搭建的实在不怎么样，但是自己上传慢慢安装之后心中对空间的使用始终存在芥蒂。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>leanote除了限制流量以外没有什么，不过我就是一小弱渣，肯定不会有什么问题。&lt;/p></description></item><item><title>vim-tips</title><link>https://svtter.cn/p/vim-tips/</link><pubDate>Sat, 08 Nov 2014 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/vim-tips/</guid><description>&lt;h2 id="拾遗">拾遗
&lt;/h2>&lt;ol>
&lt;li>使用&lt;code>q:&lt;/code>查看历史命令&lt;/li>
&lt;li>&lt;code>@*&lt;/code>执行寄存器命令&lt;/li>
&lt;/ol>
&lt;h2 id="高亮特定文件">高亮特定文件
&lt;/h2>&lt;div class="codehilite">
&lt;pre>&lt;span>&lt;/span>" for ROS:
augroup filetypedetect
au BufRead,BufNewFile *.launch set filetype=xml
augroup END
&lt;/pre>
&lt;/div></description></item></channel></rss>