<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on Svtter&#39;s Blog</title>
    <link>https://svtter.github.io/categories/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 19 Jan 2018 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.github.io/categories/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我的vim配置</title>
      <link>https://svtter.github.io/2018/01/19/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 19 Jan 2018 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2018/01/19/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/</guid>
      <description>现在使用vim最好是使用neovim或者vim8版本，来获得async特性，防止运行补全命令的时候卡顿。
我的配置文件在coding gist。
相应的安装方法也写在其中。
插件管理器 安装我的配置文件，首先需要安装一下插件管理器。
使用字体: nerd-fonts https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts
运行 把.vimrc移动到~/.vimrc
打开vim，输入：:PlugInstall
安装完成即可。
语言补全 需要个别语言的补全，查看completor
因为是自己手动慢慢写成的vim配置，因此想要我定制或者修改不需要额外的学习成本。如果想要更好的配置，可以考虑spacevim，SpaceVim是参考Spacemacs制作的IDE，非常有趣，二者相爱相杀，促成的产物。</description>
    </item>
    
    <item>
      <title>使用Docker时遇到的sitemap问题</title>
      <link>https://svtter.github.io/2017/12/27/%E4%BD%BF%E7%94%A8docker%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84sitemap%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 27 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/12/27/%E4%BD%BF%E7%94%A8docker%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84sitemap%E9%97%AE%E9%A2%98/</guid>
      <description>这两天感觉博客访问量已经不能靠用嘴宣传了，于是决定做一下sitemap，但是发现django自带的sitemap生成器存在这样的问题：生成的sitemap是依照container的hostname来显示的。
为此我查询了一下其他人是怎么搞的，发现他们都把nginx和django放在一个容器下——但是如此构建不仅麻烦，似乎违背了docker的构建思路，在一个container里面放了多个进程。因此，我认为下面的方案是合理的。
解决方案 Enabling the sites framework To enable the sites framework, follow these steps:
Add ‘django.contrib.sites’ to your INSTALLED_APPS setting.
Define a SITE_ID setting: SITE_ID = 1
Run migrate. django.contrib.sites registers a post_migrate signal handler which creates a default site named example.com with the domain example.com. This site will also be created after Django creates the test database. To set the correct name and domain for your project, you can use a data migration.</description>
    </item>
    
    <item>
      <title>使用fish – 一个新的shell</title>
      <link>https://svtter.github.io/2017/12/27/%E4%BD%BF%E7%94%A8fish-%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84shell/</link>
      <pubDate>Wed, 27 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/12/27/%E4%BD%BF%E7%94%A8fish-%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84shell/</guid>
      <description>许多人都在推荐fish-shell，比如说阮一峰大佬和Reitz神；因此也要试试fish的魅力。虽然已经是z和zsh的老用户，但是对于效率的极致追求不能停。
注意：fish仅适用于某些开发场景，目前不适用于所有开发场景——在其他许多shell环境中，由于历史因素以及已经构建完成的大量生态，对于当前的开发影响是巨大的。
fish基本操作 fish不仅仅使用tab进行不全，还可以使用ctrl+f或者alt+f进行全行不全。
fish还可以通过安装oh-my-fish，对应到z-shell的oh-my-zsh。不过，一般情况下，fish本身就已经做的够好了，基本不需要再进行更多的配置。
fish中的export 使用set -x来替代。例如set -x HOME /home/svtter，即export HOME=/home/svtter
后记 后来我还是切换回了zsh；我使用的开发环境对于zsh已经支持的很好了，但是对于fish的支持还是差强人意。学习新的技术是需要成本的，如果有时间就对fish的支持进行完善，如果没时间，那么还是等它更加成熟再使用吧。
参考 http://www.ruanyifeng.com/blog/2017/05/fish_shell.html</description>
    </item>
    
    <item>
      <title>给小白的IPython Notebook指南</title>
      <link>https://svtter.github.io/2017/12/15/%E7%BB%99%E5%B0%8F%E7%99%BD%E7%9A%84ipythonnotebook%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 15 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/12/15/%E7%BB%99%E5%B0%8F%E7%99%BD%E7%9A%84ipythonnotebook%E6%8C%87%E5%8D%97/</guid>
      <description>这是给“小白”的notebook指南。notebook是算法开发经常使用的工具。
安装notebook 运行notebook 在终端下运行这个命令可以启动notebook。
使用IPython-Notebook 点击右方的New按钮，选择Python3，以此来启动一个新的NoteBook。
这时会新创建一个文件。
在In [ ]:后输入要运行的代码，然后点击Run即可运行。例如：
使用Terminal Terminal就是之前在Windows下的cmd，MacOS下的terminal，点击之后见到这个界面：
尝试输入python，就可以像之前那样进行命令行编程了。</description>
    </item>
    
    <item>
      <title>快速git指南</title>
      <link>https://svtter.github.io/2017/12/06/%E5%BF%AB%E9%80%9Fgit%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 06 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/12/06/%E5%BF%AB%E9%80%9Fgit%E6%8C%87%E5%8D%97/</guid>
      <description>git是一个版本控制工具，通过git我们可以解决许多版本冲突，以及协同开发的问题。
git安装 Windows可以通过安装文件直接安装，Linux可以通过apt-get install git安装，OSX可以通过brew install git来安装git。
初始化当前目录为git项目 这个操作的意思是，把当前项目使用git进行管理。此时会创建一个.git文件夹。
添加当前文件的改动，并且提交 如果修改了文件，文件的变动没有被git记录。这个时候运行上述命令，就可以把变动记录下来。
推送到远程仓库 获取远程仓库的更新 下载git仓库 例如，下载这个项目breastCancer，可以使用如下的命令
通过这个操作就可以下载这个仓库。
可视化当前更新 例如
点击first commit，即可看到这次提交的相关改动。
其他的问题 如果出现conflict以及其他的问题，可以通过google自行搜索解决。
可参考的资料 廖雪峰git教程 </description>
    </item>
    
    <item>
      <title>阿里云使用VNC</title>
      <link>https://svtter.github.io/2017/12/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8vnc/</link>
      <pubDate>Tue, 05 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/12/05/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8vnc/</guid>
      <description>本来想用阿里云做vnc来远程一下完成一些事情，但是无奈速度有点慢，而且源还偶尔出问题，update能不能成功完全看脸【经常碰到，没有修改过aliyun的source】。不成功的表现是，apt-get告诉我broken depends，em….
不过不是很妨碍相关的使用【才怪】。这是官方教程。
使用vnc在官方的教程上要这样修Xstartup才行。测试环境ubuntu 14.04。</description>
    </item>
    
    <item>
      <title>小程序开发Tips</title>
      <link>https://svtter.github.io/2017/12/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91tips/</link>
      <pubDate>Sat, 02 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/12/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91tips/</guid>
      <description>&lt;p&gt;这篇文章主要聊聊小程序开发。&lt;/p&gt;
&lt;p&gt;小程序开发有几个点在文档里面没有写的很明确，在这里我更明确的提一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>4道算法题目</title>
      <link>https://svtter.github.io/2017/11/26/4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Sun, 26 Nov 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/11/26/4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/</guid>
      <description>&lt;p&gt;四道做的比较走心的算法题目。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C- tips</title>
      <link>https://svtter.github.io/2017/11/26/c-tips/</link>
      <pubDate>Sun, 26 Nov 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/11/26/c-tips/</guid>
      <description>&lt;p&gt;最近做了一部分硬件的工作，重新对C语言的一部分知识进行了学习，发现了之前做算法&lt;/p&gt;
&lt;p&gt;不太注意的部分，补充在这里。&lt;/p&gt;
&lt;h2 id=&#34;函数指针&#34;&gt;函数指针&lt;/h2&gt;
&lt;p&gt;函数指针是指向函数的指针变量。也就是说这个变量里面存的值是函数的地址，在调用&lt;/p&gt;
&lt;p&gt;的时候可以通过变量名来调用。&lt;/p&gt;
&lt;p&gt;通过此方式来声明，调用:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ThinkPHP开发要素</title>
      <link>https://svtter.github.io/2017/11/26/thinkphp%E5%BC%80%E5%8F%91%E8%A6%81%E7%B4%A0/</link>
      <pubDate>Sun, 26 Nov 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/11/26/thinkphp%E5%BC%80%E5%8F%91%E8%A6%81%E7%B4%A0/</guid>
      <description>&lt;p&gt;近日因项目需要，使用ThinkPHP3.1进行开发，记录几个要素。要素文章主要目的是把容易忘记的记录下来。&lt;/p&gt;
&lt;p&gt;ThinkPHP习惯性使用一个入口，一般是&lt;code&gt;index.php&lt;/code&gt;，后面的路由等跟进。一般情况下，在部署的时候会将这个要素隐藏起来，不直接显示。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>批量修改图片大小</title>
      <link>https://svtter.github.io/2017/07/07/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Fri, 07 Jul 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/07/07/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/</guid>
      <description>&lt;p&gt;这两天做数据采集的时候，发现直接获取的数据文件太大了，保存起来占用内存太多，&lt;/p&gt;
&lt;p&gt;手机端又不需要这么大的内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python生成器与协程</title>
      <link>https://svtter.github.io/2017/06/15/python%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Thu, 15 Jun 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/06/15/python%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E5%8D%8F%E7%A8%8B/</guid>
      <description>&lt;p&gt;贴一段代码：&lt;/p&gt;
&lt;p&gt;这段代码分别是用协程与生成器写的；&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python-logging模块</title>
      <link>https://svtter.github.io/2017/06/09/python-logging%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 09 Jun 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/06/09/python-logging%E6%A8%A1%E5%9D%97/</guid>
      <description>logging 是 python 自带的日志模块，用于收集并且导出日志。
要想使用好logging，需要明确几个概念：
1. logger logger 可以理解成输出日志的核心变量。 通过 logger，可以输出 warning, info, debug, critical 等类型的日志。
handler handler 处理器，是把内存中 logger 的日志导向不同的输出。 例如文件、邮件、stdout 等。
formatter 用于规范化日志的结构，补充日志的元信息。
filtter 用于 logger 中日志的过滤。</description>
    </item>
    
    <item>
      <title>Docker学习笔记</title>
      <link>https://svtter.github.io/2017/05/10/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 10 May 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/05/10/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>我是依据Docker — 从入门到实践来进行Docker学习的，其中有部分有趣的内容不包括在里面。学习的话参考这本书就非常不错，基本一本就都搞定了。
不过，道理上讲，官方的API是最好的。
我的问题清单：
单独更新compose中的container Docker-compose常问问题 </description>
    </item>
    
    <item>
      <title>编程相关的文章</title>
      <link>https://svtter.github.io/2016/03/10/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0/</link>
      <pubDate>Thu, 10 Mar 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/03/10/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0/</guid>
      <description>保存在这里</description>
    </item>
    
    <item>
      <title>Python – 批量重命名</title>
      <link>https://svtter.github.io/2016/03/09/python-%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/</link>
      <pubDate>Wed, 09 Mar 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/03/09/python-%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/</guid>
      <description>要用酷狗音乐听一下听力，顺带着lrc文件，但是酷狗只认krc。料想也没什么区别，单个修改下，考入以后发现并不好用，于是决定改回。但是一个个改实在太笨拙。</description>
    </item>
    
    <item>
      <title>Git一记</title>
      <link>https://svtter.github.io/2016/03/04/git%E4%B8%80%E8%AE%B0/</link>
      <pubDate>Fri, 04 Mar 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/03/04/git%E4%B8%80%E8%AE%B0/</guid>
      <description>在windows上，无论我怎么git init，他永远初始化一个这么神奇的目录。我就看不懂了。
后来仔细找了一下，发现变量里面有个很神奇的GIT_DIR，改了以后发现
尼玛，真是到位了。
删除试试。
感动。</description>
    </item>
    
    <item>
      <title>Python – 复入坑</title>
      <link>https://svtter.github.io/2016/02/23/python-%E5%A4%8D%E5%85%A5%E5%9D%91/</link>
      <pubDate>Tue, 23 Feb 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/02/23/python-%E5%A4%8D%E5%85%A5%E5%9D%91/</guid>
      <description>= =亲爱的Python再次拿起来。。
检测Python进入参数的类型 默认参数陷阱 L=[]会一直都是原来的值，因此初始值需要为None
利用可变参数 利用可变参数，可以一次传递多个值给函数。此外，还可以利用*把原来的list变成多个参数传入
结果：
此外:
关键字参数 可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：
也可以传入任意个数的关键字参数：
关键字参数有什么用？它可以扩展函数的功能。
和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：
简化的写法：
**extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。
切片坑 前10个数，每两个取一个：
所有数，每5个取一个：
列表生成式 参考： 廖雪峰的Python教程 </description>
    </item>
    
    <item>
      <title>格式化代码的快捷键</title>
      <link>https://svtter.github.io/2016/02/21/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Sun, 21 Feb 2016 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2016/02/21/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>随手记录快速整理代码的快捷键
webstorm ctrl+alt+l
eclipse ctrl+shift+f</description>
    </item>
    
    <item>
      <title>Python的高精度计算</title>
      <link>https://svtter.github.io/2015/05/31/python%E7%9A%84%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Sun, 31 May 2015 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2015/05/31/python%E7%9A%84%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/</guid>
      <description>关于浮点数: http://www.cnblogs.com/herbert/p/3402245.html
大整数python计算是没有问题的。
math </description>
    </item>
    
    <item>
      <title>Python建立简单的http服务器</title>
      <link>https://svtter.github.io/2015/05/29/python%E5%BB%BA%E7%AB%8B%E7%AE%80%E5%8D%95%E7%9A%84http%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Fri, 29 May 2015 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2015/05/29/python%E5%BB%BA%E7%AB%8B%E7%AE%80%E5%8D%95%E7%9A%84http%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>博客一谈</title>
      <link>https://svtter.github.io/2015/05/21/%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B0%88/</link>
      <pubDate>Thu, 21 May 2015 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2015/05/21/%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B0%88/</guid>
      <description>从最初的csdn到博客园到wordpress到hexo，一直到现在的leanote。
中间的一些小众博客平台就不谈了。
现在用leanote的主要原因是csdn页面太丑。
中间国产的几个博客配置系统也使用过，对markdown的支持惨不忍睹。当然其中也不缺乏不错的产品，只是一个好的前端太重要。。
wordpress在我半年前配置的时候也总是不顺畅。之前使用sae搭建的实在不怎么样，但是自己上传慢慢安装之后心中对空间的使用始终存在芥蒂。
leanote除了限制流量以外没有什么，不过我就是一小弱渣，肯定不会有什么问题。</description>
    </item>
    
    <item>
      <title>vim-tips</title>
      <link>https://svtter.github.io/post/2014-11-08-vim-tips/</link>
      <pubDate>Sat, 08 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/post/2014-11-08-vim-tips/</guid>
      <description>拾遗 使用q:查看历史命令 @*执行寄存器命令 高亮特定文件 </description>
    </item>
    
  </channel>
</rss>
