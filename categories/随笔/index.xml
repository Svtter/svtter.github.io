<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随笔 on Svtter's Blog</title><link>https://svtter.cn/categories/%E9%9A%8F%E7%AC%94/</link><description>Recent content in 随笔 on Svtter's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 30 Jan 2021 10:45:48 +0800</lastBuildDate><atom:link href="https://svtter.cn/categories/%E9%9A%8F%E7%AC%94/index.xml" rel="self" type="application/rss+xml"/><item><title>厉害的 dotnet</title><link>https://svtter.cn/p/%E5%8E%89%E5%AE%B3%E7%9A%84-dotnet/</link><pubDate>Sat, 30 Jan 2021 10:45:48 +0800</pubDate><guid>https://svtter.cn/p/%E5%8E%89%E5%AE%B3%E7%9A%84-dotnet/</guid><description>&lt;p&gt;为了能够做到更加快速的开发，这两天研究了一下 dotnet。&lt;/p&gt;
&lt;h2 id="读者"&gt;读者
&lt;/h2&gt;&lt;p&gt;希望做独立，快速开发的个人&lt;/p&gt;
&lt;h2 id="razor-的优势"&gt;Razor 的优势
&lt;/h2&gt;&lt;p&gt;微软爸爸还是强。Vuejs 的编程模式可以很好的套用到 Blazor 上面。
让我们看看 Blazor 的&lt;a class="link" href="https://docs.microsoft.com/zh-cn/aspnet/core/blazor/project-structure?view=aspnetcore-5.0" target="_blank" rel="noopener"
&gt;写法&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-gdscript3" data-lang="gdscript3"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;/todo&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TodoItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TodoItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这是 Razor 的写法，将代码与 HTML 进行简单的分离；这种写法表面看起来朴实无华，甚至有朋友说 php 能够做的更好。
我想也是，php 确实能够做的更好。但是 razor 可以编译成 wasm，也就是前端的 &lt;code&gt;汇编语言&lt;/code&gt;——这就完全不一样了。&lt;/p&gt;
&lt;p&gt;这种写法可以将用户侧性能利用起来，从而减少服务器的压力，并且只需要一个人进行开发。&lt;/p&gt;
&lt;p&gt;因此，对于小型项目，可能是一个非常好的选择。&lt;/p&gt;
&lt;h2 id="razor-的劣势"&gt;Razor 的劣势
&lt;/h2&gt;&lt;p&gt;Razor 对于初学者较大的恶劣是，无法很快的适配前端的生态。
现在前端的技术如此丰富，如果不能很快利用，生产力相较于其他团队会差很多。&lt;/p&gt;
&lt;p&gt;Razor 可能十分适合构建一个对于 Frontend 要求不高的系统，或者原型系统。&lt;/p&gt;
&lt;h2 id="后续"&gt;后续
&lt;/h2&gt;&lt;p&gt;这篇文章仅仅是将 razor 的好处进行了简单说明，没有在生产环境中采用。因此，是否采用此技术，需要进一步思考，切勿因小失大。&lt;/p&gt;</description></item><item><title>技术订阅</title><link>https://svtter.cn/p/%E6%8A%80%E6%9C%AF%E8%AE%A2%E9%98%85/</link><pubDate>Sat, 23 Jan 2021 10:33:36 +0800</pubDate><guid>https://svtter.cn/p/%E6%8A%80%E6%9C%AF%E8%AE%A2%E9%98%85/</guid><description>&lt;p&gt;这篇文章聊聊技术订阅。&lt;/p&gt;
&lt;h2 id="目的"&gt;目的
&lt;/h2&gt;&lt;p&gt;技术订阅是提高初级程序员效率，视野的绝佳方法，这里推荐几个公众号，博客，APP。&lt;/p&gt;
&lt;h2 id="订阅列表"&gt;订阅列表
&lt;/h2&gt;&lt;p&gt;垃圾信息会影响我们学习的效率。
在一些垃圾订阅中，存在着大量重复的无用信息，这些无用信息会让我们的大脑变的迟钝。
因此，在这里，我筛选了一些技术的订阅，供读者参考。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;InfoQ&lt;/code&gt;：https://www.infoq.cn/&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我认为这个站点是国内做技术最好的站点之一，可以提供较好的技术资讯。
这个站点同时提供微信公众号，可以减少访问的频次。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公众号：✔&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;阮一峰：http://www.ruanyifeng.com/home.html&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;阮一峰写的博客浅显易懂。虽然没有深入的技术，但是能够较快的掌握开发中所遇到的基础知识。
此外，每周的科技周刊也是一个拓宽技术视野的好渠道。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公众号：✔&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;极客时间 APP&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;没记错的话极客时间 APP 和 InfoQ 是同一个创始人。
极客时间是需要花钱的（笑），也有质量一般的课程。建议仔细考察课程主讲的出身，决定是否选择该课程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Github weekly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是 Github 周订阅。
Github 周订阅可以提供一些有价值的资讯，但是也会被茅台所充斥。&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;Google / Facebook / Amazon / Netflix Blog&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大型科技公司的博客。
这些博客基本是英文，对于英文不好的同学不太友好。
而且对于技术有一定要求——如果基础知识不牢固，或者背景知识，经验不够充分，很容易看不懂。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公众号：✔&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="总结"&gt;总结
&lt;/h2&gt;&lt;p&gt;其他的技术订阅内容、博客，可以根据上述渠道获得。
技术的学习是永无止境的，兴趣是最好的老师。&lt;/p&gt;
&lt;p&gt;我个人的技术阅读一般安排在零碎时间，遇到好的文章，一般会放在浮窗，或者印象笔记。&lt;/p&gt;
&lt;p&gt;不过坦白讲，放在印象笔记就基本不看了，仅用于检索。&lt;/p&gt;</description></item><item><title>指导新人-part1</title><link>https://svtter.cn/p/%E6%8C%87%E5%AF%BC%E6%96%B0%E4%BA%BA-part1/</link><pubDate>Fri, 22 Jan 2021 21:13:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%8C%87%E5%AF%BC%E6%96%B0%E4%BA%BA-part1/</guid><description>&lt;p&gt;这篇文章聊聊指导新人。&lt;/p&gt;
&lt;p&gt;本来约了*老师改论文，不过想了想，灵感翻涌，鸽了吧！&lt;/p&gt;
&lt;h2 id="鼓励和惰性"&gt;鼓励和惰性
&lt;/h2&gt;&lt;p&gt;新人在效率低的时候，往往有两种原因：一是惰性，另一个则是需要鼓励。
惰性往往与时间有关。做事情，做到一定时间，都会出现惰性。需要规则来约束人。&lt;/p&gt;
&lt;p&gt;规则是底线。规则不能定的过高，过高的规则会让人应付起来十分疲惫。
破解惰性有多种方法：树立新的目标是最好的方法；其次是羞耻感——知耻而后勇。&lt;/p&gt;
&lt;p&gt;效率低的另一个原因则是需要激励。
长时间的打击往往会使人情绪低落。此时新人需要的支持和鼓励，而不是批评。需要与新人一起克服难题。
更准确的说，指导者需要为新人“自己”解决问题提供帮助。&lt;/p&gt;
&lt;p&gt;指导者需要能够判断新人处于哪种状态，针对性处理。这种判断需要依据新人的状态、事实进行判定。
这两种状态，归根结底，都是新人需要帮助。
新人可能遇到其他的阻碍，比如遇到了无法解决的技术问题。这个时候可以视情况而定。&lt;/p&gt;
&lt;h2 id="反抗与盲从"&gt;反抗与盲从
&lt;/h2&gt;&lt;p&gt;反抗与盲从往往是相伴的。
反抗常见于优秀的新人，他们有着卓越的能力，在同辈之中属于佼佼者。甚至在某些方面超过老手。
对于这种新人，要张弛有度。对于他们优秀的地方，要放手发挥他们的长处。对于他们不成熟的地方，
要展现出气场，强制其提升。这个过程中难免新人会有怨言，或者不服气。此时有两种做法：就让他们不服气；
让他们吃亏。无论采用哪种方式，最终目的都是让新人知道，他之前的做法是“不专业”或者“不成熟”的。
进而获得成长，成为团队中可靠的一员。&lt;/p&gt;
&lt;p&gt;盲从常见于进取心不是特别强的新人。这种新人往往能力不是很强，喜欢依照命令行动。新人中的
强者也会出现这个问题。对新人强者而言，出现这个问题的原因有很多。其一，遭遇了过多的否定，打击
了信心，从而胆怯。其二，思维局限。对于原因一，指导者应该给予新人基于事实的认可。对于原因二，
开拓新人视野，给新人看新的东西，激发创造力。&lt;/p&gt;
&lt;h2 id="诡辩和欺骗"&gt;诡辩和欺骗
&lt;/h2&gt;&lt;p&gt;建议放弃。&lt;/p&gt;
&lt;h2 id="新知识与战友"&gt;新知识与战友
&lt;/h2&gt;&lt;p&gt;新人在成为专业的人才之后，新人便是可靠的战友。
当新人具备足够的知识储备，规则便生于新人的内心，指导者可逐步减少对于规则的关注。
新人此时可以良好的控制自己的时间，进度和效率。
此时新人与团队成员具备相同的认知，可进行进一步拓展：“技术讨论”和“指导新人”。
完成转变的新人此时是团队中的一员，可以较好的与团队协作，提出自己的意见见解。
此时，“新人”也可以去指导其他新人，巩固自己的知识，从而进一步提升。&lt;/p&gt;</description></item><item><title>为什么写博客？</title><link>https://svtter.cn/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2/</link><pubDate>Mon, 04 Jan 2021 12:17:13 +0800</pubDate><guid>https://svtter.cn/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p&gt;这篇文章聊聊我为什么要写博客。&lt;/p&gt;
&lt;h2 id="写在最前面"&gt;写在最前面
&lt;/h2&gt;&lt;!-- 首先，我已经有相当长的时间没有写博客了，主要原因是:
1. “觉得自己没时间”。
2. 已经学习到的复杂知识，不想轻易的分享给别人。
3. 不想让别人知道自己的弱点，或者知识上的不足。其实是害怕犯错。
但是总之，知识是需要总结的。
以上是我个人的一些心理障碍。现在对这些心理障碍进行一下反思： --&gt;
&lt;ol&gt;
&lt;li&gt;时间其实是有的，只不过对于“写博客”这件事情的意义没有考虑清楚。因此迟迟不做。&lt;/li&gt;
&lt;li&gt;学习复杂知识是没有那么容易的，一旦知识有了深度，就需要人花时间和成本去理解、学习。
因此，如果因为害怕别人学到，而不分享是没有意义的。大部分手把手教都学不好——很快学会的可以做个朋友。😂&lt;/li&gt;
&lt;li&gt;犯错和暴露弱点是有必要的。羞耻心可以促使自己变的更加优秀。&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- 在成功路上，心境的修炼尤其重要。处理逆境的能力。处理压力的能力。 --&gt;
&lt;h2 id="写博客的目的是什么"&gt;写博客的目的是什么？
&lt;/h2&gt;&lt;ol start="2"&gt;
&lt;li&gt;记录自己的生活&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我想和朋友们分享我的生活，我的近况。朋友们可能没有时间在微信上沟通，阅读一篇博文不需要双方同时在线。&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;督促自己&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这篇文章，博客的意义和好处清晰了，可以督促自己花费精力。花费精力才能把博客写好。&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;整理技术文章，进行技术总结&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些技术文章应该是分类的，有标签的，可追溯的。&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;交个朋友&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很多朋友都在写文章。找到志同道合的人，可以一起做些有趣的事情。&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;拓展技术影响力，建立自己的个人品牌。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;技术影响力何其难也。要钻到一个技术里面，得到大家认可，才能建立影响力。目前除了 Python 较为熟悉之外，对于其他的技术，研究深度是不足的。&lt;/p&gt;
&lt;h2 id="博客有哪些设定"&gt;博客有哪些设定？
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;专栏。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;专栏中针对某一个方向和技术着重的写一些东西。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;随笔&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;随笔不限制题材（属于过去经常写的东西）。&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;想法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;想法这个栏目还在整理，是否公开待定。&lt;/p&gt;</description></item><item><title>与拖延做斗争</title><link>https://svtter.cn/p/%E4%B8%8E%E6%8B%96%E5%BB%B6%E5%81%9A%E6%96%97%E4%BA%89/</link><pubDate>Sat, 26 Dec 2020 12:46:02 +0800</pubDate><guid>https://svtter.cn/p/%E4%B8%8E%E6%8B%96%E5%BB%B6%E5%81%9A%E6%96%97%E4%BA%89/</guid><description>&lt;blockquote&gt;
&lt;p&gt;是有一段时间没有更新博客了，仔细想想事情也不是很多，我的效率应该还可以提升。这里简单写一下想法。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;看了一期比较喜欢的视频，这里推荐一下：&lt;/p&gt;
&lt;p&gt;视频地址：https://www.bilibili.com/video/BV18h411Z7Gy&lt;/p&gt;
&lt;p&gt;里面谈了几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;战胜自己&lt;/li&gt;
&lt;li&gt;不能有过高预期&lt;/li&gt;
&lt;li&gt;能否对未来的自己说一句话？&lt;/li&gt;
&lt;li&gt;最坏的打算、最好的打算。做好打算。&lt;/li&gt;
&lt;li&gt;努力让自己产生正面情绪，而非负面情绪。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;成功人士在努力工作之后，依然能够做到跑步，健身，运动。这是因为这些活动能够带来较好的多巴胺反馈。&lt;/p&gt;
&lt;p&gt;我们需要战胜的是自己的心理，而不是某个具体的技术难题。根本问题在于我们自己的面对困难的心理状态不佳，而不是纠结于问题本身。&lt;/p&gt;
&lt;p&gt;只有这样才能让自己变得更好。&lt;/p&gt;</description></item><item><title>入mbp的几大利好</title><link>https://svtter.cn/p/%E5%85%A5mbp%E7%9A%84%E5%87%A0%E5%A4%A7%E5%88%A9%E5%A5%BD/</link><pubDate>Tue, 07 Feb 2017 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E5%85%A5mbp%E7%9A%84%E5%87%A0%E5%A4%A7%E5%88%A9%E5%A5%BD/</guid><description>&lt;p&gt;入Mac之后，win上面遭遇的许多问题没有发生，心中甚是愉悦。这几天使用ikbc poker，因为win键和alt键位置不太相同，十分不适应。到网上一搜索，发现osx本身就可以更改这个按键，然后我只需要换一下键盘帽就可以了，真是十分爽。&lt;/p&gt;
&lt;p&gt;相对于Win和Ubuntu，Mac最大的爽点有这么几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装十分便捷舒适，系统的稳定性方面更是厉害，程序基本不崩，系统到现在没有死机过，非常爽。&lt;/li&gt;
&lt;li&gt;使用开源的软件十分方便，brew自动化傻瓜化，我基本不需要配置什么内容就可以使用。相比之下，win要繁琐太多了。Ubuntu对于软件包的管理方面也是让人头疼不已。&lt;/li&gt;
&lt;li&gt;非常流畅的操作方式。有了这个触摸板根本不需要鼠标。&lt;/li&gt;
&lt;li&gt;高清屏幕的支持，优秀的UI设计，QQ【这个是针对Ubuntu】。&lt;/li&gt;
&lt;li&gt;还有很多，以后想起来补充。。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="系统洁癖"&gt;系统洁癖
&lt;/h2&gt;&lt;p&gt;使用Ubuntu作为开发系统，如果不使用Docker安装某个软件，总会感觉整个环境被污染了——是的，例如安装Anaconda，是否卸载原生Python？如果不卸载原生Python，是否会对conda造成影响？如果卸载了，会不会对系统造成影响？就算是不造成影响，以后要是不想使用Anaconda，卸载的时候能不能卸载干净？按照Ubuntu的尿性，很多时候都会留下点配置文件，或者什么别的东西——非常难受。&lt;/p&gt;
&lt;p&gt;如果apt源没有设置好，比如&lt;code&gt;apt-get&lt;/code&gt;命令没有成功获取所有的“缓存”，那么很可能造成一些软件在你从来没有做什么的时候，依赖关系出现问题。&lt;/p&gt;</description></item><item><title>我们到底想要怎样的笔记应用？</title><link>https://svtter.cn/p/%E6%88%91%E4%BB%AC%E5%88%B0%E5%BA%95%E6%83%B3%E8%A6%81%E6%80%8E%E6%A0%B7%E7%9A%84%E7%AC%94%E8%AE%B0%E5%BA%94%E7%94%A8/</link><pubDate>Sun, 03 Jul 2016 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%88%91%E4%BB%AC%E5%88%B0%E5%BA%95%E6%83%B3%E8%A6%81%E6%80%8E%E6%A0%B7%E7%9A%84%E7%AC%94%E8%AE%B0%E5%BA%94%E7%94%A8/</guid><description>&lt;h2 id="前言"&gt;前言
&lt;/h2&gt;&lt;p&gt;之前就一直想要写一篇文章谈谈关于笔记应用的问题，但是一直都没有时间去写。对于笔记应用每个人的看法肯定都不一样，我就简单的说说我使用的笔记，以及我简单的吐槽。高能预警，大量吐槽可能引起部分读者的不适。&lt;/p&gt;
&lt;h2 id="正文"&gt;正文
&lt;/h2&gt;&lt;p&gt;我使用过很多的笔记应用。目前而言，如果没有特殊的需求我觉得有几个问题是不用考虑的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;流量的问题。对于学生身份一般不会出现流量的问题，除非你特别极其喜欢使用大量的图片来记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;费用问题。一般只要没有特殊需求，介绍的笔记应用都是免费的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多平台使用，即手机使用桌面使用，以及同步的问题。我所介绍的笔记应用基本均为全平台，如果不是我会特别指出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有几个问题则是必须重视的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;笔记的安全性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;笔记应用的稳定性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面直接按照小标题来介绍我的感觉。&lt;/p&gt;
&lt;h3 id="印象笔记"&gt;印象笔记
&lt;/h3&gt;&lt;p&gt;印象笔记是很多人都推崇的笔记应用，但是就我个人而言我并不喜欢。因为不支持&lt;a class="link" href="markdown%e6%98%af%e4%b8%80%e7%a7%8d%e5%8f%af%e4%bb%a5%e9%80%9a%e8%bf%87%e7%ae%80%e5%8d%95%e6%a0%87%e8%ae%b0%e6%9d%a5%e7%94%9f%e6%88%90%e6%98%93%e8%af%bb%e6%8e%92%e7%89%88%e7%9a%84%e6%a0%87%e5%87%86%ef%bc%8c%e5%8f%af%e4%bb%a5%e5%be%88%e8%bd%bb%e6%9d%be%e7%9a%84%e5%ad%a6%e4%bc%9a%ef%bc%8c%e5%af%b9%e4%ba%8e%e5%bf%ab%e9%80%9f%e7%ac%94%e8%ae%b0%e4%bb%a5%e5%8f%8a%e6%95%b4%e7%90%86%e6%80%9d%e8%b7%af%e5%85%b7%e6%9c%89%e5%be%88%e5%a5%bd%e7%9a%84%e6%95%88%e6%9e%9c" &gt;markdown&lt;/a&gt;这种格式进行笔记。如果想要使用markdown，需要借助许多第三方的应用，无疑增加了负担。此外，我也不喜欢它的交互方式，以及卡顿的客户端。&lt;/p&gt;
&lt;p&gt;当然这些缺点并不阻碍他成为目前最受欢迎的笔记应用之一。印象笔记具有非常优秀的协作功能，以及大量的插件，可以满足许多要求，比如保存当前网页到笔记，使用微信将喜欢的文章推送到笔记，以及微博上的@保存到我的印象笔记，等等。&lt;/p&gt;
&lt;p&gt;因为客户端太慢，再一个原因就是交互设计让我很不舒服，没有效率感。如果我想要找到一篇笔记我需要点击屏幕好多下，从而让我这个没有耐心的人感觉十分反感。如果这些问题不是问题，或者感觉这些问题可能并非我所说的那样，那么完全可以使用看看。&lt;/p&gt;
&lt;h3 id="有道云笔记"&gt;有道云笔记
&lt;/h3&gt;&lt;p&gt;有道云笔记网易作品。我并不喜欢他的交互。最大的问题就是广告。广告令我相当的不愉快。我不知道是不是我购买了Vip就可以去掉广告，但是在我购买vip之前已经恶心到我了，所以我并不打算继续购买。现在都喜欢推行的协作，以及等等功能均是齐备。因为有一段时间没有使用，我不记得存在流量限制的问题。&lt;/p&gt;
&lt;p&gt;如果能够忍受广告以及难以企及云音乐的UI，可以一试。最近的一次改版并没有让我觉得好用多少。&lt;/p&gt;
&lt;p&gt;自然问题归问题，但是没有许多很大的毛病。&lt;/p&gt;
&lt;h3 id="为知笔记"&gt;为知笔记
&lt;/h3&gt;&lt;p&gt;这个笔记应用知道的可能不是特别多，但是也还算是好用。支持markdown。本身也是一个部分开源（开放源代码）的笔记应用。网页版的为知笔记对于糟糕分辨率的屏幕没有一点点照顾，让人感觉像是提前得了老花眼一样，字体渲染做的太差。&lt;/p&gt;
&lt;p&gt;iOS版本的为知笔记一个很大的问题就是打开客户端的速度实在是太慢了。此外，输入文字的时候键盘不跟着光标移动，非常影响体验。反馈的问题拖了很久也没有修复。因此尽管使用了一段时间，但还是放弃了。&lt;/p&gt;
&lt;h3 id="leanote"&gt;Leanote
&lt;/h3&gt;&lt;p&gt;一个轻笔记，个人感觉最大的买点在于可以将书写的笔记公开为博客展示。此外，支持markdown以及自定义主题。对于多平台的支持还算良好。&lt;/p&gt;
&lt;p&gt;而问题在于，主题偏少，以及同步没有做好。如果更换笔记分类或者修改笔记名称可能会造成丢笔记的问题！着实大问题，不推荐使用，仅仅是在此说明一下。丢笔记问题，是最大的问题。&lt;/p&gt;
&lt;h3 id="百度笔记"&gt;百度笔记
&lt;/h3&gt;&lt;p&gt;好像有这么个东西？百度的东西都不推荐。&lt;/p&gt;
&lt;h3 id="onenote"&gt;Onenote
&lt;/h3&gt;&lt;p&gt;写软文是不给钱的。但是用了这么多的笔记应用，最后还是推OneNote。&lt;/p&gt;
&lt;p&gt;OneNote的分类我觉得是做的最好的，多平台问题也完全不用担心，因为是微软出品，值得信赖。此外，在windows10安装好以后就自带了OneNote应用，如果在手机上下载了OneNote，同步完全没有问题。笔记的排版等非常的自由，可以随心安排。如果在手机上不满意，可以使用电脑继续编辑。当然，这个优点在以上的笔记中都存在，但是真正做到“自由”排版的，只有OneNote。想想使用过的word的吧。&lt;/p&gt;
&lt;p&gt;OneNote也是不支持markdown的，但是并不使人厌烦。写好的文章完全可以使用一些转换工具复制粘贴，OneNote会自动识别格式。此外，笔记转代办，代办转为笔记这些功能也是十分的人性化。至于绘图之类的功能，不应该是笔记天生就有的吗？&lt;/p&gt;
&lt;h3 id="题外话orgmode"&gt;题外话：orgmode
&lt;/h3&gt;</description></item><item><title>悲剧了</title><link>https://svtter.cn/p/%E6%82%B2%E5%89%A7%E4%BA%86/</link><pubDate>Wed, 21 Jan 2015 01:00:00 +0800</pubDate><guid>https://svtter.cn/p/%E6%82%B2%E5%89%A7%E4%BA%86/</guid><description>&lt;p _="%" endblockquote="endblockquote"&gt;{% blockquote 本文出自 http://svtter.github.io svtter.github.io %}
&lt;p&gt;本文可以随意转载，但是转载请保留本信息.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;手贱删除了windows的注册表，因为之前装arch的时候硬盘有些位置没有对齐，造成我重装win7的时候把&lt;/p&gt;
&lt;p&gt;archlinux也弄没了TAT最惨的莫过于一些文章都没有了。操作系统网络等资源倒是还能从github上找回，&lt;/p&gt;
&lt;p&gt;但是似乎不是最新的。虽然是考完了，但是看到大把大把的总结资料没了也着实心疼。&lt;/p&gt;
&lt;p&gt;不管啦，没了就没了吧。&lt;/p&gt;
&lt;p&gt;这次同步更新！在segmentfault和我自己的博客上同步更新，一般segmentfault会更快一点。哎，一定&lt;/p&gt;
&lt;p&gt;要及时备份数据，不然很容易就悲剧了。&lt;/p&gt;
&lt;p&gt;因为hexo的主题神马的我没有备份（也有一个，不过比较老了）。所以有时间的时候再弄把。&lt;/p&gt;</description></item></channel></rss>