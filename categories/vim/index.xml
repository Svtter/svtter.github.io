<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on Svtter&#39;s Blog</title>
    <link>https://svtter.github.io/categories/vim/</link>
    <description>Recent content in Vim on Svtter&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Dec 2017 01:00:00 +0800</lastBuildDate><atom:link href="https://svtter.github.io/categories/vim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Write with Vim – 2</title>
      <link>https://svtter.github.io/2017/12/15/writewithvim-2/</link>
      <pubDate>Fri, 15 Dec 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/12/15/writewithvim-2/</guid>
      <description>Write with vim – 1 Vim的下一步 对我自己而言，也是在这一步。
现在你对Vim已经有所了解，hjkl肯定会，f也能熟用，,可能被你映射成了&amp;lt;leader&amp;gt;，或者等等。但是我还是想要写这个blog，来指引新手（诚然，也是指引自己）。
这个时候，我建议你将Esc映射成ii，然后禁用Esc
在Write with vim – 1中，记录模式我已经用的比较习惯了（@+寄存器），但是正则表达式用的一般般，仍然需要好好的努力才行。
想要用好Vim，离不开github 大概更多人喜欢在 http://www.vim.org 上寻找自己心仪的插件，但是我认为还是在github上找更好。为什么？
因为许多的开源项目都已经在github上扎根，许多优秀的插件都能在github上找到其身影。比如：Nerdtree, YouCompeleteME, airline, etc. 你可以通过github的star数量来判断这个项目的优秀程度。当然，更确切说，是把star做为参考标准之一。 等等优点，想到我再补充。
使用插件管理器，管理你的插件 我个人比较推荐 Plug
插件使用git更新插件，将vimscripts分离，控制不同功能的插件可以放在不同的位置，保证了vimrc的整洁。从而提高了个人配置的维护性。
Plug 是首当其冲的插件，有了他，你会发现更新插件，安装新的插件一切都是那么的简单。
Plug 的使用方法在 README 里面有，但是如果英文比较差 — 没关系，也能看懂。
下一步的学习 很多人觉得vimscript学习起来有些困难，这里有份非常好的文档。准确说是翻译。翻译者辛苦了。
http://learnvimscriptthehardway.onefloweroneworld.com/</description>
    </item>
    
    <item>
      <title>vim的补全插件</title>
      <link>https://svtter.github.io/2017/08/06/vim%E7%9A%84%E8%A1%A5%E5%85%A8%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Sun, 06 Aug 2017 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2017/08/06/vim%E7%9A%84%E8%A1%A5%E5%85%A8%E6%8F%92%E4%BB%B6/</guid>
      <description>&lt;p&gt;Vim的补全插件大体上分4个阵营，如&lt;code&gt;deoplete&lt;/code&gt;, &lt;code&gt;completor.vim&lt;/code&gt;, &lt;code&gt;YCM&lt;/code&gt;, 以及&lt;code&gt;neocomplete&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在我想写这篇文章的时候，&lt;code&gt;YCM&lt;/code&gt;即&lt;code&gt;youcompleteme&lt;/code&gt;还认为自己支持了vim8的新特性&lt;code&gt;async&lt;/code&gt;，即非阻塞补全那一套东西。这个特性是怎么回事呢？输入的时候补全插件会进行补全搜索，这个时候如果不用新的特性，会造成UI卡顿。&lt;/p&gt;
&lt;p&gt;所以，事实上根据我的测试，作者似乎错误的理解了这个新特性，可以看看&lt;a href=&#34;https://github.com/Valloric/YouCompleteMe/issues/2376&#34;&gt;工单&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;不过目前没有时间去搞清楚这个问题。因为我直接选择了&lt;code&gt;completor.vim&lt;/code&gt;，这个插件完美实现了这个功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vim-另存为</title>
      <link>https://svtter.github.io/2014/12/02/vim-%E5%8F%A6%E5%AD%98%E4%B8%BA/</link>
      <pubDate>Tue, 02 Dec 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/12/02/vim-%E5%8F%A6%E5%AD%98%E4%B8%BA/</guid>
      <description>本文出自svtter.github.io 想要另存一个文件名，但是vim另存的方法。。然后发现了sav这个东西。
help文件中是这么描述的:
:sav[eas][!] [++opt] {file}
用文件名 {file} 保存当前缓冲区，并设置当前缓冲区的文件
名为 {file}。前一个名字用作轮换文件名。[!] 用以覆盖已
存在的文件。
如果 ‘filetype’ 为空，在写入文件前用新名字进行文件类型
检测。
如果写操作成功，复位 ‘readonly’。 可见，可以利用sav来重命名当前文件，并且修改新命名的文件的功能。唯一的不足就是，我们无法通过这个操作将原来的
文件删除(或者我们本来就不需要删除原来的文件). 这是vim的缓冲区机制决定的。
个人认为无伤大雅，不是吗= =
有时候wiki以及:help要比在网上百度一下好用的多 — 这个月饭都吃不起了，别跟我提VPN.</description>
    </item>
    
    <item>
      <title>vim的相关记录</title>
      <link>https://svtter.github.io/2014/11/27/vim%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 27 Nov 2014 01:00:00 +0800</pubDate>
      
      <guid>https://svtter.github.io/2014/11/27/vim%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</guid>
      <description> 本文出自&amp;lt;svtter.github.io&amp;gt; vim的部分插件记录 snipmate vim中的textmate vimwiki Vimpress : Manage wordpress blog posts from Vim calendar vimmailr.zip : Send (MAPI) mail from vim VOom </description>
    </item>
    
  </channel>
</rss>
